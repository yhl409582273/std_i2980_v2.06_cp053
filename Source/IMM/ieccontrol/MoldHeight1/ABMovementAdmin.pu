(*
This algo block does the followings calls:

Initially:
ABMoveForward.aRegister for registration of MoldHeightForward Movement to the sv_MovementsAvailable
ABMoveBackward.aRegister for registration of MoldHeightBackward Movement to the sv_MovementsAvailable

PostUpdate on MovementStart:
ABMoveForward.aRun for doing the correct movement outputs for MoldHeightForward according to the specific mode settings.
ABMoveBackward.aRun for doing the correct movement outputs for MoldHeightBackward according to the specific mode settings.
*)

IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, cMoveIn
, cMoveOut
, cMoveAll
, cCompMoldHeight
, cMoveBwd
, cMoveFwd
, cMoveNone
, ABMoveForward
, ABMoveBackward
, ABMoveClosedLoop
, tMoveIdent
, tsMoveCtrl
, ABOutputRequest
, tnMotorType
, tsEndpointMonitor
, tsHydrMaxValues
, tsRequiredPumps
, KSYS_Status
, ABCalcHydrMaxValues

END_IMPORT

ALGORITHM_BLOCK ABMovementAdmin #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitDone : BOOL;
 sv_bInitStart : BOOL;
 sv_bDeviceStart : BOOL;
 sv_MoldHeightAdjustMotor : tnMotorType;
 sv_iThisStepsSetImpulses : UDINT;
 sv_iThisStepsActImpulses : UDINT;
 sv_bMoldHeightAdjustByOneGear : BOOL;
 sv_bAutoMoldHeightAdjustActive : BOOL (* is TRUE when auto mold height adjust is acitve *);
 sv_bMoldHeightAdjProdAvailable : BOOL (* Mold height adjustment in production available *);
 sv_MoldHeightEndpoints : tsEndpointMonitor;
 sv_HydrMaxValues : tsHydrMaxValues (* hydraulic max values for mold close *);
 sv_RequiredPumps : tsRequiredPumps;
 sv_rMaxPressure : REAL;
 sv_bFALSE : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskAnalog : TASK;
 erAdjustSettings : ALARM;
END_OBJECT

VAR_EXTERNAL
 g_ActualMoveDir : tMoveIdent;
 g_MoveCtrl : tsMoveCtrl;
END_VAR

VAR
 abMoveForward : ABMoveForward;
 abMoveBackward : ABMoveBackward;
 abMoveClosedLoop : ABMoveClosedLoop;
 abOutputRequest : ABOutputRequest;
 mpbClampForceHigh : REFTO BOOL;
 mpbClampForceLow : REFTO BOOL;
END_VAR

(*
Calls the registration-algo of every movementblock after the deviceregistration succeeded(sv_bInitStart->true)

*)

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart


VAR
 Status : KSYS_Status;
 abCalcMaxValues : ABCalcHydrMaxValues;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN

   //register fwd movement
   abMoveForward.aRegister();
   abMoveForward.aInit();
   
   //register bwd movement
   abMoveBackward.aRegister();
   abMoveBackward.aInit();

   //register mold height adjustment in production *)
   IF IS_LINKED(sv_bMoldHeightAdjProdAvailable) THEN
      abMoveClosedLoop.aRegister();
      mpbClampForceHigh := GET_SYNC_REFTO('Mold1.sv_bClampForceHigh', T#0s, Status);
      mpbClampForceLow := GET_SYNC_REFTO('Mold1.sv_bClampForceLow', T#0s, Status);   
   END_IF;
   
   //init calculation of hydraulic max values
   abCalcMaxValues.aInit(pRequiredPumps := @sv_RequiredPumps,
                         pHydrMaxValues := @sv_HydrMaxValues);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Starts the algo paRun when sv_bDeviceStart is set by ABControl.
*)

POSTUPDATE_ALGORITHM pDeviceStart ON PU_Task_7 WITH sv_bDeviceStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceStart THEN                 
   START_PROCESS_ALGORITHM(paRun); 
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Calls depending on the MoveId and MoveDir the movementblock. g_MoveCtrl.MoveId/MoveDir are set by the Block ABControl after
evStart was received. The movement-block has to be called until it returns abMoveXxx.aRun.bReady.
In case of hydraulic movements the output-request has to be done before starting the movement.
*)

PROCESS_ALGORITHM paRun ON TaskAnalog(5000)


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 dDelay : TIME := t#100ms;
 dummy : DINT;
 bSetAlarm : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP START:
AInit (P);
END_STEP

ACTION AInit: #BEGIN_EDIT_BLOCK
b := WRITE_SV_DIRECT(sv_bDeviceStart, sv_bFALSE);

;#END_EDIT_BLOCK END_ACTION (*AInit*)

(* steps *)
STEP STARTED:
END_STEP

STEP OUTPUT_REQUEST:
OutputRequest (P);
ACheckOutput (N);
END_STEP

ACTION OutputRequest: #BEGIN_EDIT_BLOCK
abOutputRequest.aRequest(pMoveData := g_MoveCtrl.pData,
                         AnaOutputMode := nAnaOutputModeMid);

;#END_EDIT_BLOCK END_ACTION (*OutputRequest*)
ACTION ACheckOutput: #BEGIN_EDIT_BLOCK
abOutputRequest.aCheck();

;#END_EDIT_BLOCK END_ACTION (*ACheckOutput*)
STEP OUTPUT:
END_STEP

STEP BWD:
aBackward (N);
END_STEP

STEP FWD:
aForward (N);
END_STEP

STEP ClosedLoop:
aClosedLoop (N);
END_STEP

STEP DELAY_READY:
END_STEP

STEP S_Check:
ACheck (P);
END_STEP

STEP READY:
ResetMovementFlags (P);
END_STEP

ACTION ResetMovementFlags: #BEGIN_EDIT_BLOCK
g_MoveCtrl.bReady := TRUE;
abOutputRequest.aRelease(pMoveData := g_MoveCtrl.pData);
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*ResetMovementFlags*)

(* transitions *)
TRANSITION StartTransition (* Trans12 *) FROM START TO STARTED :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION CheckMoldHeightMotorType1 (* Trans24 *) FROM STARTED TO OUTPUT_REQUEST :=  #BEGIN_EDIT_BLOCK
sv_MoldHeightAdjustMotor = nHydraulic
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION CheckMoldHeightMotorType2 (* Trans25 *) FROM STARTED TO OUTPUT :=  #BEGIN_EDIT_BLOCK
sv_MoldHeightAdjustMotor = nElectric
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION CheckStopFlag (* Trans13 *) FROM OUTPUT_REQUEST TO READY :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.bStop
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION CheckOutputEnabled (* Trans15 *) FROM OUTPUT_REQUEST TO OUTPUT :=  #BEGIN_EDIT_BLOCK
abOutputRequest.aCheck.bReady;
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION StartMldHeigtBackwardIfSet (* Trans20 *) FROM OUTPUT TO BWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir = cMoveBwd

;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION EndOfMoldHeightBackwardStep (* Trans1 *) FROM BWD TO DELAY_READY :=  #BEGIN_EDIT_BLOCK
abMoveBackward.aRun.bReady;
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION StartCoreInIfMoveDirIsIn (* Trans21 *) FROM OUTPUT TO FWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir = cMoveFwd

;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION EndOfMoldHeightForwardStep (* Trans11 *) FROM FWD TO DELAY_READY :=  #BEGIN_EDIT_BLOCK
abMoveForward.aRun.bReady
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION StartClosedLoop (* Trans41 *) FROM OUTPUT TO ClosedLoop :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir = cMoveAll
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION EndOfMoldHeightProd (* Trans42 *) FROM ClosedLoop TO DELAY_READY :=  #BEGIN_EDIT_BLOCK
(abMoveForward.aRun.bReady AND g_ActualMoveDir = cMoveFwd)OR
(abMoveBackward.aRun.bReady AND g_ActualMoveDir = cMoveBwd)OR
(g_ActualMoveDir = cMoveNone)

;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TDelay (* Trans29 *) FROM DELAY_READY TO S_Check :=  #BEGIN_EDIT_BLOCK
//delay setting sv_bDeviceReady to TRUE,
//because otherwise the measure block does not detect all impulses
//next start of measurement the block detects a DI change, measures a impulse
//and stops immediately in one gear adjust mode
DELAY_READY.T >= dDelay
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans28 (* Trans28 *) FROM S_Check TO READY :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION LoopBackTransition (* Trans8 *) FROM READY TO START :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aForward: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*@ MoldHeightN.ABMovementAdmin.paRun.aForward.Cyclic call of ABMoveForward.aRun to do the output.
                                            Movemente Mode, detailed settings
                                            are handled in ABMoveForward.aRun *)
abMoveForward.aRun(bStop := g_MoveCtrl.bStop);

;#END_EDIT_BLOCK END_ACTION (*aForward*)
ACTION aBackward: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*@ MoldHeightN.ABMovementAdmin.paRun.aBackward.Cyclic call of ABMoveBackward.aRun to do the output.
                                            Movemente Mode,  detailed settings
                                            are handled in ABMoveBackward.aRun *)
abMoveBackward.aRun(bStop := g_MoveCtrl.bStop);
                                  


;#END_EDIT_BLOCK END_ACTION (*aBackward*)
ACTION ACheck: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF g_MoveCtrl.bStop THEN
   RETURN;   //no additional alarm if mold adjust is aborted
END_IF;

bSetAlarm := FALSE;

IF sv_bAutoMoldHeightAdjustActive THEN
   IF sv_iThisStepsActImpulses > sv_iThisStepsSetImpulses THEN
      dummy := Print('MovementAdmin: this step set impulses = %d', sv_iThisStepsSetImpulses);
      bSetAlarm := TRUE;
   END_IF;
ELSIF sv_bMoldHeightAdjustByOneGear THEN
   IF sv_iThisStepsActImpulses > 1 THEN
      dummy := Print('MovementAdmin: this step set impulses = 1');
      bSetAlarm := TRUE;
   END_IF;
END_IF;

IF bSetAlarm THEN
   dummy := Print('MovementAdmin: this step act impulses = %d', sv_iThisStepsActImpulses);
   SET_ALARM(Name := erAdjustSettings);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACheck*)
ACTION aClosedLoop: #BEGIN_EDIT_BLOCK
//exceed the upper limit of the tolerance band 
IF mpbClampForceHigh^ AND NOT mpbClampForceLow^ THEN
    g_ActualMoveDir := cMoveBwd;     
    sv_iThisStepsSetImpulses := 1;
    abMoveBackward.aRun(bStop := g_MoveCtrl.bStop);
    
//exceed the lower limit of the tolerance band 
ELSIF NOT mpbClampForceHigh^ AND mpbClampForceLow^ THEN  
    g_ActualMoveDir := cMoveFwd;
    sv_iThisStepsSetImpulses := 1;
    abMoveForward.aRun(bStop := g_MoveCtrl.bStop);       
ELSE
    g_ActualMoveDir := cMoveNone;                     
    sv_MoldHeightEndpoints.bPositionForStepReached := TRUE; 
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aClosedLoop*)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pMaxPressure ON PU_Task_7 WITH sv_bInitDone,sv_HydrMaxValues.rMaxPressure

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_rMaxPressure := sv_HydrMaxValues.rMaxPressure;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@
This algo block does the followings calls:

Initially:
ABMoveForward.aRegister for registration of MoldHeightForward Movement to the sv_MovementsAvailable
ABMoveBackward.aRegister for registration of MoldHeightBackward Movement to the sv_MovementsAvailable

PostUpdate on MovementStart:
ABMoveForward.aRun for doing the correct movement outputs for MoldHeightForward according to the specific mode settings.
ABMoveBackward.aRun for doing the correct movement outputs for MoldHeightBackward according to the specific mode settings.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
7 
@Var @RT(7)cMoveIn @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)21 @RT(26)move in (for example core) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveOut @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)22 @RT(27)move out (for example core) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveAll @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(13)cMaxMoveIdent @RT(32)all movements (for evLockUnlock) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)cCompMoldHeight @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)124 @RT(21)Component Mold Height 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cMoveNone @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(13)cMinMoveIdent @RT(4)None 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABMovementAdmin @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
25 
@Var @RT(13)abMoveForward @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABMoveForward @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)abMoveBackward @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABMoveBackward @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)abMoveClosedLoop @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ABMoveClosedLoop @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)g_ActualMoveDir @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(15)sv_bDeviceStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)abOutputRequest @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABOutputRequest @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)sv_MoldHeightAdjustMotor @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnMotorType @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)sv_iThisStepsSetImpulses @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_iThisStepsActImpulses @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)erAdjustSettings @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(29)sv_bMoldHeightAdjustByOneGear @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_bAutoMoldHeightAdjustActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)is TRUE when auto mold height adjust is acitve @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_bMoldHeightAdjProdAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)Mold height adjustment in production available @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)mpbClampForceHigh @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mpbClampForceLow @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)sv_MoldHeightEndpoints @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsEndpointMonitor @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_HydrMaxValues @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsHydrMaxValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)hydraulic max values for mold close @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_RequiredPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_rMaxPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)sv_bFALSE @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(6)Status @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abCalcMaxValues @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)ABCalcHydrMaxValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(12)pDeviceStart @STRUCTURED_TEXT 
@RT(0) @RT(15)sv_bDeviceStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(16)TaskAnalog(5000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(6)dDelay @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(7)t#100ms @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bSetAlarm @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(12)pMaxPressure @STRUCTURED_TEXT 
@RT(0) @RT(42)sv_bInitDone,sv_HydrMaxValues.rMaxPressure @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(27)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN

   //register fwd movement
   abMoveForward.aRegister();
   abMoveForward.aInit();
   
   //register bwd movement
   abMoveBackward.aRegister();
   abMoveBackward.aInit();

   //register mold height adjustment in production *)
   IF IS_LINKED(sv_bMoldHeightAdjProdAvailable) THEN
      abMoveClosedLoop.aRegister();
      mpbClampForceHigh := GET_SYNC_REFTO('Mold1.sv_bClampForceHigh', T#0s, Status);
      mpbClampForceLow := GET_SYNC_REFTO('Mold1.sv_bClampForceLow', T#0s, Status);   
   END_IF;
   
   //init calculation of hydraulic max values
   abCalcMaxValues.aInit(pRequiredPumps := @sv_RequiredPumps,
                         pHydrMaxValues := @sv_HydrMaxValues);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Calls the registration-algo of every movementblock after the deviceregistration succeeded(sv_bInitStart->true)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceStart THEN                 
   START_PROCESS_ALGORITHM(paRun); 
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Starts the algo paRun when sv_bDeviceStart is set by ABControl.
@@@END_Comment@@@ 

@BEG_SfcBody 
38 34 47 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 7 
@Step @RT(5)START @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AInit @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
b := WRITE_SV_DIRECT(sv_bDeviceStart, sv_bFALSE);

@F 

@Trans @RT(15)StartTransition @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans12 @F 
@Step @RT(7)STARTED @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(25)CheckMoldHeightMotorType1 @F @T @F @F @T @T @TL(2)
sv_MoldHeightAdjustMotor = nHydraulic

@RT(7)Trans24 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(25)CheckMoldHeightMotorType2 @F @T @F @F @T @T @TL(2)
sv_MoldHeightAdjustMotor = nElectric

@RT(7)Trans25 @F 
@Goto @RT(6)OUTPUT @F @F 


@Step @RT(14)OUTPUT_REQUEST @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(13)OutputRequest @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
abOutputRequest.aRequest(pMoveData := g_MoveCtrl.pData,
                         AnaOutputMode := nAnaOutputModeMid);

@F 
@Acb @RT(12)ACheckOutput @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
abOutputRequest.aCheck();

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(13)CheckStopFlag @F @T @F @F @T @T @TL(2)
g_MoveCtrl.bStop

@RT(7)Trans13 @F 

@TransSeq @RT(4)tseq @F 7 
@Trans @RT(18)CheckOutputEnabled @F @T @F @F @T @T @TL(2)
abOutputRequest.aCheck.bReady;

@RT(7)Trans15 @F 
@Step @RT(6)OUTPUT @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 3 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(26)StartMldHeigtBackwardIfSet @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir = cMoveBwd


@RT(7)Trans20 @F 
@Step @RT(3)BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aBackward @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(27)EndOfMoldHeightBackwardStep @F @T @F @F @T @T @TL(2)
abMoveBackward.aRun.bReady;

@RT(6)Trans1 @F 

@TransSeq @RT(4)tseq @F 3 
@Trans @RT(24)StartCoreInIfMoveDirIsIn @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir = cMoveFwd


@RT(7)Trans21 @F 
@Step @RT(3)FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)aForward @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(26)EndOfMoldHeightForwardStep @F @T @F @F @T @T @TL(2)
abMoveForward.aRun.bReady

@RT(7)Trans11 @F 

@TransSeq @RT(4)tseq @F 3 
@Trans @RT(15)StartClosedLoop @F @T @F @F @T @F @TL(2)
g_MoveCtrl.pData^.MoveDir = cMoveAll

@RT(7)Trans41 @F 
@Step @RT(10)ClosedLoop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)aClosedLoop @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(19)EndOfMoldHeightProd @F @T @F @F @T @T @TL(5)
(abMoveForward.aRun.bReady AND g_ActualMoveDir = cMoveFwd)OR
(abMoveBackward.aRun.bReady AND g_ActualMoveDir = cMoveBwd)OR
(g_ActualMoveDir = cMoveNone)


@RT(7)Trans42 @F 


@Step @RT(11)DELAY_READY @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(6)TDelay @F @T @F @F @T @T @TL(6)
//delay setting sv_bDeviceReady to TRUE,
//because otherwise the measure block does not detect all impulses
//next start of measurement the block detects a DI change, measures a impulse
//and stops immediately in one gear adjust mode
DELAY_READY.T >= dDelay

@RT(7)Trans29 @F 
@Step @RT(7)S_Check @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(6)ACheck @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(7)Trans28 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans28 @F 


@Step @RT(5)READY @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(18)ResetMovementFlags @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
g_MoveCtrl.bReady := TRUE;
abOutputRequest.aRelease(pMoveData := g_MoveCtrl.pData);
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(18)LoopBackTransition @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans8 @F 

@END_SfcData 
@SaActions 4 
@SaText @RT(8)aForward 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*@ MoldHeightN.ABMovementAdmin.paRun.aForward.Cyclic call of ABMoveForward.aRun to do the output.
                                            Movemente Mode, detailed settings
                                            are handled in ABMoveForward.aRun *)
abMoveForward.aRun(bStop := g_MoveCtrl.bStop);


@SaText @RT(9)aBackward 1 @TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*@ MoldHeightN.ABMovementAdmin.paRun.aBackward.Cyclic call of ABMoveBackward.aRun to do the output.
                                            Movemente Mode,  detailed settings
                                            are handled in ABMoveBackward.aRun *)
abMoveBackward.aRun(bStop := g_MoveCtrl.bStop);
                                  



@SaText @RT(6)ACheck 1 @TL(28)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF g_MoveCtrl.bStop THEN
   RETURN;   //no additional alarm if mold adjust is aborted
END_IF;

bSetAlarm := FALSE;

IF sv_bAutoMoldHeightAdjustActive THEN
   IF sv_iThisStepsActImpulses > sv_iThisStepsSetImpulses THEN
      dummy := Print('MovementAdmin: this step set impulses = %d', sv_iThisStepsSetImpulses);
      bSetAlarm := TRUE;
   END_IF;
ELSIF sv_bMoldHeightAdjustByOneGear THEN
   IF sv_iThisStepsActImpulses > 1 THEN
      dummy := Print('MovementAdmin: this step set impulses = 1');
      bSetAlarm := TRUE;
   END_IF;
END_IF;

IF bSetAlarm THEN
   dummy := Print('MovementAdmin: this step act impulses = %d', sv_iThisStepsActImpulses);
   SET_ALARM(Name := erAdjustSettings);
END_IF;


@SaText @RT(11)aClosedLoop 1 @TL(16)
//exceed the upper limit of the tolerance band 
IF mpbClampForceHigh^ AND NOT mpbClampForceLow^ THEN
    g_ActualMoveDir := cMoveBwd;     
    sv_iThisStepsSetImpulses := 1;
    abMoveBackward.aRun(bStop := g_MoveCtrl.bStop);
    
//exceed the lower limit of the tolerance band 
ELSIF NOT mpbClampForceHigh^ AND mpbClampForceLow^ THEN  
    g_ActualMoveDir := cMoveFwd;
    sv_iThisStepsSetImpulses := 1;
    abMoveForward.aRun(bStop := g_MoveCtrl.bStop);       
ELSE
    g_ActualMoveDir := cMoveNone;                     
    sv_MoldHeightEndpoints.bPositionForStepReached := TRUE; 
END_IF;


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(3)
Calls depending on the MoveId and MoveDir the movementblock. g_MoveCtrl.MoveId/MoveDir are set by the Block ABControl after
evStart was received. The movement-block has to be called until it returns abMoveXxx.aRun.bReady.
In case of hydraulic movements the output-request has to be done before starting the movement.
@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_rMaxPressure := sv_HydrMaxValues.rMaxPressure;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
