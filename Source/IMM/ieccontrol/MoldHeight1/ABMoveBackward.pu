(*
This algo block will start the registration of the MoldHeightBackward movement 
(called by MoldHeightN.ABMovementAdmin.pInitStart) and calculate the
output values during movement. Also checking the stop conditions.

*)

IMPORT_OVER_LISTFILE
 IS_LINKED
, SET_ALARM
, WRITE_SV_DIRECT
, WRITE_SVREAL_DIRECT
, cLockGroupMoldHeight
, cLockGroupNozzleFwd
, cLockGroupMotor
, cLockGroupSafetyGateMold
, tsMoveData
, tsEndpointMonitor
, tsMoldHeightOutput
, tnMotorType
, tsMoveCtrl
, ABConstMovement
, tsTraceLevel
, FBSetMovementState
, TON
, ABMovementRegister

END_IMPORT

ALGORITHM_BLOCK ABMoveBackward #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_rPressure : REAL;
 sv_dMaxMovementTime : TIME;
 sv_iThisStepsActImpulses : UDINT;
 sv_iThisStepsSetImpulses : UDINT;
 sv_dActMovementTime : TIME;
 sv_iAbsoluteImpulsesFromOrigin : DINT;
 sv_rVelocity : REAL;
 sv_MoveBackward : tsMoveData;
 sv_bOutputActive : BOOL (* Output is active *);
 di_ImpulseInput : BOOL;
 sv_MoldHeightEndpoints : tsEndpointMonitor;
 sv_bAutoMoldHeightAdjustActive : BOOL (* is TRUE when auto mold height adjust is acitve *);
 sv_MoldHeightOutput : tsMoldHeightOutput (* mold height output settings *);
 sv_bStandStillDetectionArmed : BOOL (* do standstill detection while mold height movement *);
 sv_MoldHeightAdjustMotor : tnMotorType (* type of mold height adjust motor *);
 di_Overcurrent : BOOL;
 sv_bMoldHeightAdjustByOneGear : BOOL;
 sv_MoldHeightAdjustTime : TIME;
 sv_bMoldHeightAdjustByTime : BOOL;
 sv_dMaxImpulseTime : TIME (* Single impulse timeout *);
 sv_dActImpulseTime : TIME (* Actual impulse time *);
 sv_MoveClosedLoop : tsMoveData;
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 erMHMaxImpulseTimeExceeded : ALARM;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
END_VAR

VAR
 abMoldHeightBackwardConst : ABConstMovement;
 mbDIOvercurrentLinked : BOOL;
 mbDIImpulseInputLinked : BOOL;
END_VAR

ALGORITHM aInit

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abMoldHeightBackwardConst.aInit(pConst := @sv_MoldHeightOutput.MoldHeightBackward,
                                MoveId := sv_MoveBackward.MoveId);


;#END_EDIT_BLOCK END_ALGORITHM

(*
Decide the type of mold height adjust motor and do the corresponding outputs. 
Also check the stop conditions for finishing the movement.
*)

ALGORITHM aRun


VAR_INPUT
 bStop : BOOL;
END_VAR

VAR_OUTPUT
 bReady : BOOL;
END_VAR

VAR
 bStopMovement : BOOL;
 fbSetMovementState : FBSetMovementState;
 fbTImpulseTimeOut : TON;
 dummy : DINT;
 iOldActImpulses : UDINT;
 bImpulseTimeOutExceed : BOOL;
 bAdjustByTime : BOOL;
 bAdjustByOneGear : BOOL;
 bEnd : BOOL;
 b : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP Start:
InitialStep (P);
END_STEP

ACTION InitialStep: #BEGIN_EDIT_BLOCK
bReady := FALSE;

fbSetMovementState(MoveId   := g_MoveCtrl.pData^.MoveId,
                   MoveDir  := g_MoveCtrl.pData^.MoveDir,
                   State    := nActive);


;#END_EDIT_BLOCK END_ACTION (*InitialStep*)

(* steps *)
STEP Step21:
aRunMoldHeightReset (P);
END_STEP

STEP MoveBackward1:
aInitImpulseTimeOut (P);
aRunMoldHeight1 (N);
aCheckImpulseTimeOut (N);
aMoldHeightMovementControl2 (N);
END_STEP

STEP Step22:
ATrace (P);
aInitImpulseTimeOut (P);
aMoldHeightMovementControl1 (N);
ARunMoldHeight2 (N);
aCheckImpulseTimeOut (N);
END_STEP

ACTION ATrace: #BEGIN_EDIT_BLOCK
IF sv_TraceLevel.bApplication THEN
   dummy := Print('AutoMHAHydr BWD: %d ABS: %d', 
               sv_iThisStepsSetImpulses, sv_iAbsoluteImpulsesFromOrigin);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ATrace*)
STEP Step7:
Action9 (P);
END_STEP

ACTION Action9: #BEGIN_EDIT_BLOCK
IF sv_TraceLevel.bApplication THEN
   dummy := Print('AutoMHAHydr BWD: target ABS %d', 
               sv_iAbsoluteImpulsesFromOrigin);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action9*)
STEP MoveBackward2:
ATrace2 (P);
aInitImpulseTimeOut (P);
aMoldHeightMovementControl1 (N);
aRunMoldHeightElectric (N);
aCheckImpulseTimeOut (N);
END_STEP

ACTION ATrace2: #BEGIN_EDIT_BLOCK
IF sv_bAutoMoldHeightAdjustActive AND sv_TraceLevel.bApplication THEN
    dummy := Print('AutoMHAElectr BWD: %d ABS %d', 
               sv_iThisStepsSetImpulses, 
               sv_iAbsoluteImpulsesFromOrigin);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ATrace2*)
STEP Step8:
Action10 (P);
END_STEP

ACTION Action10: #BEGIN_EDIT_BLOCK
IF sv_bAutoMoldHeightAdjustActive AND sv_TraceLevel.bApplication THEN
    dummy := Print('AutoMHAElectr FWD: target ABS %d', 
               sv_iAbsoluteImpulsesFromOrigin);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action10*)
STEP READY:
SetReadyFlag (P);
END_STEP

ACTION SetReadyFlag: #BEGIN_EDIT_BLOCK
bReady := TRUE;

fbSetMovementState(MoveId   := g_MoveCtrl.pData^.MoveId,
                   MoveDir  := g_MoveCtrl.pData^.MoveDir,
                   State    := nInactive);

;#END_EDIT_BLOCK END_ACTION (*SetReadyFlag*)

(* transitions *)
GO_ON_TRANSITION CheckMoldHeightMotorHydraulic (* CheckMoldHeightMotorHydraulic *) FROM Start TO Step21 :=  #BEGIN_EDIT_BLOCK
sv_MoldHeightAdjustMotor = nHydraulic
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans29 (* Trans29 *) FROM Step21 TO MoveBackward1 :=  #BEGIN_EDIT_BLOCK
NOT sv_bAutoMoldHeightAdjustActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION CheckReadyFlag1 (* CheckReadyFlag1 *) FROM MoveBackward1 TO READY :=  #BEGIN_EDIT_BLOCK
NOT abMoldHeightBackwardConst.aRun.bActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans30 (* Trans30 *) FROM Step21 TO Step22 :=  #BEGIN_EDIT_BLOCK
sv_bAutoMoldHeightAdjustActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans31 (* Trans31 *) FROM Step22 TO Step7 :=  #BEGIN_EDIT_BLOCK
NOT abMoldHeightBackwardConst.aRun.bActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans9 (* Trans9 *) FROM Step7 TO READY :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION CheckMoldHeightMotorElectric (* CheckMoldHeightMotorElectric *) FROM Start TO MoveBackward2 :=  #BEGIN_EDIT_BLOCK
sv_MoldHeightAdjustMotor = nElectric
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION CheckReadyFlag2 (* CheckReadyFlag2 *) FROM MoveBackward2 TO Step8 :=  #BEGIN_EDIT_BLOCK
bStopMovement
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans10 (* Trans10 *) FROM Step8 TO READY :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans23 (* Trans23 *) FROM READY TO Start :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aMoldHeightMovementControl1: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


//In Auto Adjust mode the mold height movement
// can be stopped by a external stop, the limit switches OR:
// - the arriving at the desired position (by measured impulses for the movement step)
//   (which is also stored in the endpoint managing variable)
// - a armed and detected standstill

bStopMovement := (bStop AND (NOT sv_bMoldHeightAdjustByOneGear) AND (NOT sv_bMoldHeightAdjustByTime))
    OR sv_MoldHeightEndpoints.bLimitSwitchArrivedMax 
    OR (sv_bAutoMoldHeightAdjustActive 
        AND (       bStop
                 OR (mbDIOvercurrentLinked AND di_Overcurrent) 
                 OR (mbDIImpulseInputLinked AND (sv_iThisStepsActImpulses >= sv_iThisStepsSetImpulses)) 
                 OR (sv_bStandStillDetectionArmed AND sv_MoldHeightEndpoints.bStandStillTimeReached)
                 OR (NOT sv_bStandStillDetectionArmed AND bImpulseTimeOutExceed)
            )
        )
    OR ((NOT sv_bAutoMoldHeightAdjustActive) 
           AND (
                   (sv_bMoldHeightAdjustByOneGear AND (sv_iThisStepsActImpulses >= 1))
                OR (sv_bMoldHeightAdjustByTime AND (MoveBackward2.T >= sv_MoldHeightAdjustTime))
                OR (sv_bMoldHeightAdjustByOneGear AND bImpulseTimeOutExceed)   
               )
       );
sv_MoldHeightEndpoints.bPositionForStepReached := mbDIImpulseInputLinked AND (sv_iThisStepsActImpulses >= sv_iThisStepsSetImpulses);


;#END_EDIT_BLOCK END_ACTION (*aMoldHeightMovementControl1*)
ACTION aRunMoldHeightElectric: #BEGIN_EDIT_BLOCK
sv_bOutputActive := NOT bStopMovement;

;#END_EDIT_BLOCK END_ACTION (*aRunMoldHeightElectric*)
ACTION aInitImpulseTimeOut: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(di_ImpulseInput) AND ((sv_bAutoMoldHeightAdjustActive AND NOT sv_bStandStillDetectionArmed) OR (NOT sv_bAutoMoldHeightAdjustActive)) THEN
    iOldActImpulses := sv_iThisStepsActImpulses;
    fbTImpulseTimeOut(IN := FALSE, PT := sv_dMaxImpulseTime);
END_IF;
bImpulseTimeOutExceed := FALSE;

;#END_EDIT_BLOCK END_ACTION (*aInitImpulseTimeOut*)
ACTION aCheckImpulseTimeOut: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(di_ImpulseInput) AND NOT bImpulseTimeOutExceed AND 
   ((sv_bAutoMoldHeightAdjustActive AND NOT sv_bStandStillDetectionArmed) OR 
    NOT sv_bAutoMoldHeightAdjustActive) THEN
    IF iOldActImpulses <> sv_iThisStepsActImpulses THEN
        fbTImpulseTimeOut(IN := FALSE);
        iOldActImpulses := sv_iThisStepsActImpulses;
        sv_dActImpulseTime := fbTImpulseTimeOut.ET;
    ELSE
        fbTImpulseTimeOut(IN := TRUE);
        sv_dActImpulseTime := fbTImpulseTimeOut.ET;
        IF fbTImpulseTimeOut.Q THEN
            bImpulseTimeOutExceed := TRUE;
            SET_ALARM(erMHMaxImpulseTimeExceeded);
        END_IF;
    END_IF;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aCheckImpulseTimeOut*)
ACTION aMoldHeightMovementControl2: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
// - the arriving at the desired position (by measured impulses for the movement step)
// (which is also stored in the endpoint managing variable)
// - a armed and detected standstill
IF sv_MoveClosedLoop.bProgrammedInSequence THEN
    sv_MoldHeightEndpoints.bPositionForStepReached := mbDIImpulseInputLinked AND (sv_iThisStepsActImpulses >= sv_iThisStepsSetImpulses);
END_IF;


;#END_EDIT_BLOCK END_ACTION (*aMoldHeightMovementControl2*)
ACTION aRunMoldHeightReset: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abMoldHeightBackwardConst.aRun(bStart := FALSE,
                               bStop := bStopMovement,
                               bUsePosDetect := FALSE,
                               dMaxTime := sv_dMaxMovementTime,
                               rOutputPre => sv_rPressure,
                               rOutputVel => sv_rVelocity,
                               dActTime => sv_dActMovementTime);


;#END_EDIT_BLOCK END_ACTION (*aRunMoldHeightReset*)
ACTION aRunMoldHeight1: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bAdjustByOneGear := sv_bMoldHeightAdjustByOneGear AND (sv_iThisStepsActImpulses >= 1);
bEnd := bStop AND (NOT sv_bMoldHeightAdjustByOneGear) AND (NOT sv_bMoldHeightAdjustByTime);
bAdjustByTime := sv_bMoldHeightAdjustByTime AND (MoveBackward1.T >= sv_MoldHeightAdjustTime);

abMoldHeightBackwardConst.aRun(bStop := (bEnd OR sv_MoldHeightEndpoints.bLimitSwitchArrivedMax OR bAdjustByOneGear OR bAdjustByTime OR bImpulseTimeOutExceed),
                               bStart := TRUE,
                               bUsePosDetect := FALSE,
                               dMaxTime := sv_dMaxMovementTime,
                               bActive => sv_bOutputActive);

b := WRITE_SVREAL_DIRECT(sv_rPressure, abMoldHeightBackwardConst.aRun.rOutputPre);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, abMoldHeightBackwardConst.aRun.rOutputVel);
b := WRITE_SV_DIRECT(sv_dActMovementTime, abMoldHeightBackwardConst.aRun.dActTime);

;#END_EDIT_BLOCK END_ACTION (*aRunMoldHeight1*)
ACTION ARunMoldHeight2: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
abMoldHeightBackwardConst.aRun(bStart := TRUE,
                               bStop := bStopMovement,
                               bUsePosDetect := FALSE,
                               dMaxTime := sv_dMaxMovementTime,
                               bActive => sv_bOutputActive);

b := WRITE_SVREAL_DIRECT(sv_rPressure, abMoldHeightBackwardConst.aRun.rOutputPre);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, abMoldHeightBackwardConst.aRun.rOutputVel);
b := WRITE_SV_DIRECT(sv_dActMovementTime, abMoldHeightBackwardConst.aRun.dActTime);


;#END_EDIT_BLOCK END_ACTION (*ARunMoldHeight2*)
(* end sfc-code *)


END_ALGORITHM

(*
Registration of mold height forward movement to the sv_MovementsAvailable
*)

ALGORITHM aRegister


VAR
 abMovementRegister : ABMovementRegister;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// movement registration
//sv_MoveBackward.pStartDelay := @...;
sv_MoveBackward.LockGroups[1] := cLockGroupMoldHeight;
sv_MoveBackward.LockGroups[2] := cLockGroupNozzleFwd;
sv_MoveBackward.LockGroups[3] := cLockGroupMotor;
sv_MoveBackward.LockGroups[4] := cLockGroupSafetyGateMold;

sv_MoveBackward.pbPosReached := @sv_MoldHeightEndpoints.bPositionForStepReached;
sv_MoveBackward.sIconPath := CONCAT(GET_MY_FU_NAME(),"\hmi\images\movMoldAdjustBwd.gif");

abMovementRegister.aRegister(@sv_MoveBackward);

mbDIOvercurrentLinked := IS_LINKED(di_Overcurrent); 
mbDIImpulseInputLinked := IS_LINKED(di_ImpulseInput);


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
This algo block will start the registration of the MoldHeightBackward movement 
(called by MoldHeightN.ABMovementAdmin.pInitStart) and calculate the
output values during movement. Also checking the stop conditions.

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(9)IS_LINKED @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)WRITE_SV_DIRECT @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)WRITE_SVREAL_DIRECT @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
4 
@Var @RT(20)cLockGroupMoldHeight @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)66 @RT(8)Members: 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)cLockGroupNozzleFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)68 @RT(8)Members: 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)cLockGroupMotor @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)69 @RT(56)Members: Mold, Ejector, Cores, Injection, Plast, Purge,  
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)cLockGroupSafetyGateMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)61 @RT(73)Members: Mold Close, Mold Hight Forward, Auto Mold Hight, Core In, Inject 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABMoveBackward @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
28 
@Var @RT(12)sv_rPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_dMaxMovementTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_iThisStepsActImpulses @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_iThisStepsSetImpulses @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_dActMovementTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_iAbsoluteImpulsesFromOrigin @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_rVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_MoveBackward @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bOutputActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Output is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)di_ImpulseInput @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_MoldHeightEndpoints @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsEndpointMonitor @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_bAutoMoldHeightAdjustActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)is TRUE when auto mold height adjust is acitve @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_MoldHeightOutput @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tsMoldHeightOutput @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)mold height output settings @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)sv_bStandStillDetectionArmed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(50)do standstill detection while mold height movement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_MoldHeightAdjustMotor @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnMotorType @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)type of mold height adjust motor @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)di_Overcurrent @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(29)sv_bMoldHeightAdjustByOneGear @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_MoldHeightAdjustTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)sv_bMoldHeightAdjustByTime @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)abMoldHeightBackwardConst @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABConstMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)sv_dMaxImpulseTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)Single impulse timeout @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_dActImpulseTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)Actual impulse time @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)erMHMaxImpulseTimeExceeded @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)mbDIOvercurrentLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mbDIImpulseInputLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)sv_MoveClosedLoop @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(5)bStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(13)bStopMovement @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)fbSetMovementState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)FBSetMovementState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)fbTImpulseTimeOut @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)iOldActImpulses @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)bImpulseTimeOutExceed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)bAdjustByTime @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)bAdjustByOneGear @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)bEnd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aRegister @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)abMovementRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)ABMovementRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abMoldHeightBackwardConst.aInit(pConst := @sv_MoldHeightOutput.MoldHeightBackward,
                                MoveId := sv_MoveBackward.MoveId);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
16 7 9 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(5)Start @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)InitialStep @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
bReady := FALSE;

fbSetMovementState(MoveId   := g_MoveCtrl.pData^.MoveId,
                   MoveDir  := g_MoveCtrl.pData^.MoveDir,
                   State    := nActive);


@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(29)CheckMoldHeightMotorHydraulic @F @T @F @F @T @F @TL(2)
sv_MoldHeightAdjustMotor = nHydraulic

@RT(29)CheckMoldHeightMotorHydraulic @F 
@Step @RT(6)Step21 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(19)aRunMoldHeightReset @F @F @RT(1)P @RT(0) @F @F @F @F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(7)Trans29 @F @T @F @F @T @F @TL(2)
NOT sv_bAutoMoldHeightAdjustActive

@RT(7)Trans29 @F 
@Step @RT(13)MoveBackward1 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 4 
@Acb @RT(19)aInitImpulseTimeOut @F @F @RT(1)P @RT(0) @F @F @T @F 
@Acb @RT(15)aRunMoldHeight1 @F @F @RT(1)N @RT(0) @F @F @F @F 
@Acb @RT(20)aCheckImpulseTimeOut @F @F @RT(1)N @RT(0) @F @F @T @F 
@Acb @RT(27)aMoldHeightMovementControl2 @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(15)CheckReadyFlag1 @F @T @F @F @T @T @TL(2)
NOT abMoldHeightBackwardConst.aRun.bActive

@RT(15)CheckReadyFlag1 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(7)Trans30 @F @T @F @F @T @F @TL(2)
sv_bAutoMoldHeightAdjustActive

@RT(7)Trans30 @F 
@Step @RT(6)Step22 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 5 
@Acb @RT(6)ATrace @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
IF sv_TraceLevel.bApplication THEN
   dummy := Print('AutoMHAHydr BWD: %d ABS: %d', 
               sv_iThisStepsSetImpulses, sv_iAbsoluteImpulsesFromOrigin);
END_IF;

@F 
@Acb @RT(19)aInitImpulseTimeOut @F @F @RT(1)P @RT(0) @F @F @T @F 
@Acb @RT(27)aMoldHeightMovementControl1 @F @F @RT(1)N @RT(0) @F @F @F @F 
@Acb @RT(15)ARunMoldHeight2 @F @F @RT(1)N @RT(0) @F @F @F @F 
@Acb @RT(20)aCheckImpulseTimeOut @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(7)Trans31 @F @T @F @F @T @T @TL(2)
NOT abMoldHeightBackwardConst.aRun.bActive

@RT(7)Trans31 @F 
@Step @RT(5)Step7 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action9 @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
IF sv_TraceLevel.bApplication THEN
   dummy := Print('AutoMHAHydr BWD: target ABS %d', 
               sv_iAbsoluteImpulsesFromOrigin);
END_IF;

@F 

@Trans @RT(6)Trans9 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans9 @F 



@TransSeq @RT(4)tseq @F 5 
@Trans @RT(28)CheckMoldHeightMotorElectric @F @T @F @F @T @F @TL(2)
sv_MoldHeightAdjustMotor = nElectric

@RT(28)CheckMoldHeightMotorElectric @F 
@Step @RT(13)MoveBackward2 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 5 
@Acb @RT(7)ATrace2 @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
IF sv_bAutoMoldHeightAdjustActive AND sv_TraceLevel.bApplication THEN
    dummy := Print('AutoMHAElectr BWD: %d ABS %d', 
               sv_iThisStepsSetImpulses, 
               sv_iAbsoluteImpulsesFromOrigin);
END_IF;

@F 
@Acb @RT(19)aInitImpulseTimeOut @F @F @RT(1)P @RT(0) @F @F @T @F 
@Acb @RT(27)aMoldHeightMovementControl1 @F @F @RT(1)N @RT(0) @F @F @F @F 
@Acb @RT(22)aRunMoldHeightElectric @F @F @RT(1)N @RT(0) @F @F @F @F 
@Acb @RT(20)aCheckImpulseTimeOut @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(15)CheckReadyFlag2 @F @T @F @F @T @T @TL(2)
bStopMovement

@RT(15)CheckReadyFlag2 @F 
@Step @RT(5)Step8 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action10 @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
IF sv_bAutoMoldHeightAdjustActive AND sv_TraceLevel.bApplication THEN
    dummy := Print('AutoMHAElectr FWD: target ABS %d', 
               sv_iAbsoluteImpulsesFromOrigin);
END_IF;

@F 

@Trans @RT(7)Trans10 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans10 @F 


@Step @RT(5)READY @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(12)SetReadyFlag @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
bReady := TRUE;

fbSetMovementState(MoveId   := g_MoveCtrl.pData^.MoveId,
                   MoveDir  := g_MoveCtrl.pData^.MoveDir,
                   State    := nInactive);

@F 


@Trans @RT(7)Trans23 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans23 @F 

@END_SfcData 
@SaActions 8 
@SaText @RT(27)aMoldHeightMovementControl1 1 @TL(32)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


//In Auto Adjust mode the mold height movement
// can be stopped by a external stop, the limit switches OR:
// - the arriving at the desired position (by measured impulses for the movement step)
//   (which is also stored in the endpoint managing variable)
// - a armed and detected standstill

bStopMovement := (bStop AND (NOT sv_bMoldHeightAdjustByOneGear) AND (NOT sv_bMoldHeightAdjustByTime))
    OR sv_MoldHeightEndpoints.bLimitSwitchArrivedMax 
    OR (sv_bAutoMoldHeightAdjustActive 
        AND (       bStop
                 OR (mbDIOvercurrentLinked AND di_Overcurrent) 
                 OR (mbDIImpulseInputLinked AND (sv_iThisStepsActImpulses >= sv_iThisStepsSetImpulses)) 
                 OR (sv_bStandStillDetectionArmed AND sv_MoldHeightEndpoints.bStandStillTimeReached)
                 OR (NOT sv_bStandStillDetectionArmed AND bImpulseTimeOutExceed)
            )
        )
    OR ((NOT sv_bAutoMoldHeightAdjustActive) 
           AND (
                   (sv_bMoldHeightAdjustByOneGear AND (sv_iThisStepsActImpulses >= 1))
                OR (sv_bMoldHeightAdjustByTime AND (MoveBackward2.T >= sv_MoldHeightAdjustTime))
                OR (sv_bMoldHeightAdjustByOneGear AND bImpulseTimeOutExceed)   
               )
       );
sv_MoldHeightEndpoints.bPositionForStepReached := mbDIImpulseInputLinked AND (sv_iThisStepsActImpulses >= sv_iThisStepsSetImpulses);



@SaText @RT(22)aRunMoldHeightElectric 1 @TL(2)
sv_bOutputActive := NOT bStopMovement;


@SaText @RT(19)aInitImpulseTimeOut 1 @TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(di_ImpulseInput) AND ((sv_bAutoMoldHeightAdjustActive AND NOT sv_bStandStillDetectionArmed) OR (NOT sv_bAutoMoldHeightAdjustActive)) THEN
    iOldActImpulses := sv_iThisStepsActImpulses;
    fbTImpulseTimeOut(IN := FALSE, PT := sv_dMaxImpulseTime);
END_IF;
bImpulseTimeOutExceed := FALSE;


@SaText @RT(20)aCheckImpulseTimeOut 1 @TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(di_ImpulseInput) AND NOT bImpulseTimeOutExceed AND 
   ((sv_bAutoMoldHeightAdjustActive AND NOT sv_bStandStillDetectionArmed) OR 
    NOT sv_bAutoMoldHeightAdjustActive) THEN
    IF iOldActImpulses <> sv_iThisStepsActImpulses THEN
        fbTImpulseTimeOut(IN := FALSE);
        iOldActImpulses := sv_iThisStepsActImpulses;
        sv_dActImpulseTime := fbTImpulseTimeOut.ET;
    ELSE
        fbTImpulseTimeOut(IN := TRUE);
        sv_dActImpulseTime := fbTImpulseTimeOut.ET;
        IF fbTImpulseTimeOut.Q THEN
            bImpulseTimeOutExceed := TRUE;
            SET_ALARM(erMHMaxImpulseTimeExceeded);
        END_IF;
    END_IF;
END_IF;


@SaText @RT(27)aMoldHeightMovementControl2 1 @TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
// - the arriving at the desired position (by measured impulses for the movement step)
// (which is also stored in the endpoint managing variable)
// - a armed and detected standstill
IF sv_MoveClosedLoop.bProgrammedInSequence THEN
    sv_MoldHeightEndpoints.bPositionForStepReached := mbDIImpulseInputLinked AND (sv_iThisStepsActImpulses >= sv_iThisStepsSetImpulses);
END_IF;



@SaText @RT(19)aRunMoldHeightReset 1 @TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abMoldHeightBackwardConst.aRun(bStart := FALSE,
                               bStop := bStopMovement,
                               bUsePosDetect := FALSE,
                               dMaxTime := sv_dMaxMovementTime,
                               rOutputPre => sv_rPressure,
                               rOutputVel => sv_rVelocity,
                               dActTime => sv_dActMovementTime);



@SaText @RT(15)aRunMoldHeight1 1 @TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bAdjustByOneGear := sv_bMoldHeightAdjustByOneGear AND (sv_iThisStepsActImpulses >= 1);
bEnd := bStop AND (NOT sv_bMoldHeightAdjustByOneGear) AND (NOT sv_bMoldHeightAdjustByTime);
bAdjustByTime := sv_bMoldHeightAdjustByTime AND (MoveBackward1.T >= sv_MoldHeightAdjustTime);

abMoldHeightBackwardConst.aRun(bStop := (bEnd OR sv_MoldHeightEndpoints.bLimitSwitchArrivedMax OR bAdjustByOneGear OR bAdjustByTime OR bImpulseTimeOutExceed),
                               bStart := TRUE,
                               bUsePosDetect := FALSE,
                               dMaxTime := sv_dMaxMovementTime,
                               bActive => sv_bOutputActive);

b := WRITE_SVREAL_DIRECT(sv_rPressure, abMoldHeightBackwardConst.aRun.rOutputPre);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, abMoldHeightBackwardConst.aRun.rOutputVel);
b := WRITE_SV_DIRECT(sv_dActMovementTime, abMoldHeightBackwardConst.aRun.dActTime);


@SaText @RT(15)ARunMoldHeight2 1 @TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
abMoldHeightBackwardConst.aRun(bStart := TRUE,
                               bStop := bStopMovement,
                               bUsePosDetect := FALSE,
                               dMaxTime := sv_dMaxMovementTime,
                               bActive => sv_bOutputActive);

b := WRITE_SVREAL_DIRECT(sv_rPressure, abMoldHeightBackwardConst.aRun.rOutputPre);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, abMoldHeightBackwardConst.aRun.rOutputVel);
b := WRITE_SV_DIRECT(sv_dActMovementTime, abMoldHeightBackwardConst.aRun.dActTime);



@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(2)
Decide the type of mold height adjust motor and do the corresponding outputs. 
Also check the stop conditions for finishing the movement.
@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// movement registration
//sv_MoveBackward.pStartDelay := @...;
sv_MoveBackward.LockGroups[1] := cLockGroupMoldHeight;
sv_MoveBackward.LockGroups[2] := cLockGroupNozzleFwd;
sv_MoveBackward.LockGroups[3] := cLockGroupMotor;
sv_MoveBackward.LockGroups[4] := cLockGroupSafetyGateMold;

sv_MoveBackward.pbPosReached := @sv_MoldHeightEndpoints.bPositionForStepReached;
sv_MoveBackward.sIconPath := CONCAT(GET_MY_FU_NAME(),"\hmi\images\movMoldAdjustBwd.gif");

abMovementRegister.aRegister(@sv_MoveBackward);

mbDIOvercurrentLinked := IS_LINKED(di_Overcurrent); 
mbDIImpulseInputLinked := IS_LINKED(di_ImpulseInput);

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Registration of mold height forward movement to the sv_MovementsAvailable
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
