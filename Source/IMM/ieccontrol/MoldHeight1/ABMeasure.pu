(*
This AlgorithmBlock is used for measuring the number of impulses (starting from a origin position).

It also measures some endpoints for the movement like a standstill detection and the limit switches.

For performance reasons the calculation is only running when the movement is active.
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, RESET_ALARM
, STOP_PROCESS_ALGORITHM
, START_PROCESS_ALGORITHM
, cMoveFwd
, cMoveBwd
, cMoveAll
, cCompMold
, cCompInjection
, tsDeviceId
, tsEndpointMonitor
, tsMoveCtrl
, tMoveIdent
, TON
, tnLimitSwitchMode
, R_TRIG
, F_TRIG
, tsAlarm
, FBLockUnlock

END_IMPORT

ALGORITHM_BLOCK ABMeasure #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
 sv_bInitStart : BOOL;
 sv_iAbsoluteImpulsesFromOrigin : DINT;
 di_ImpulseInput : BOOL (* impulse input endpoint *);
 sv_dSetStandstillDetectionTime : TIME;
 sv_iThisStepsActImpulses : UDINT;
 sv_bDeviceReady : BOOL (* is false when the movement is active *);
 sv_bStandStillDetectionArmed : BOOL (* do standstill detection while mold height movement *);
 sv_MoldHeightEndpoints : tsEndpointMonitor;
 di_LimitSwitchForward : BOOL;
 di_LimitSwitchBackward : BOOL;
 di_MotorOverload : BOOL;
 sv_bInitDone : BOOL;
 sv_bImpulseFeedbackMarker : BOOL;
END_VAR

SYSTEM_VAR_IN
 sv_LimitSwitchMode : tnLimitSwitchMode;
END_VAR

SYSTEM_OBJECT
 erMoldHeightMaxDI : ALARM;
 erMoldHeightMinDI : ALARM;
 erMoldHeightMotorOverload : ALARM;
 TaskAnalog : TASK;
 PU_Task_3 : TASK;
 TaskMid : TASK;
 TaskVis : TASK;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
 g_ActualMoveDir : tMoveIdent;
END_VAR

VAR
 fbTStandStill : TON;
 fbTONImpulseLimit : TON;
END_VAR

(*
This algo is started when the movement is active.
Count impulses, (starting from a origin) and 
detect standstill.
*)

PROCESS_ALGORITHM paMeasureImpulses ON TaskAnalog(1000)


VAR
 fbREdgeIncrements : R_TRIG;
 fbFEdgeIncrements : F_TRIG;
 bOldImpulse : BOOL;
 dImpulseMarkerTime : TIME := T#500ms (* how long variable stays TRUE after a impulse is detected *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Getting the rising and falling edge of the impulse variable for counting
fbREdgeIncrements(CLK := di_ImpulseInput);
fbFEdgeIncrements(CLK := di_ImpulseInput);

IF    (((g_MoveCtrl.pData^.MoveDir = cMoveFwd) OR (g_ActualMoveDir = cMoveFwd)) AND fbREdgeIncrements.Q) 
    OR (((g_MoveCtrl.pData^.MoveDir = cMoveBwd) OR (g_ActualMoveDir = cMoveBwd)) AND fbFEdgeIncrements.Q)THEN

    // Count the impulses for this movement, and the impulses generally-starting
    // from the origin.
    sv_iThisStepsActImpulses := sv_iThisStepsActImpulses + 1;
    CASE g_MoveCtrl.pData^.MoveDir OF
        cMoveFwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin - 1;
        cMoveBwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin + 1;  
    END_CASE;
    
    // Mold height adjust in production with closed loop
    CASE g_ActualMoveDir OF
        cMoveFwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin - 1;
        cMoveBwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin + 1;  
    END_CASE;
END_IF;
        
// If the standstill detection is required, reset a timer with every
// counting impulse. If the timer can finish before a reset comes the
// movement reached its standstill point
IF sv_bStandStillDetectionArmed THEN
    // increment timer when input input did not change
    IF di_ImpulseInput <> bOldImpulse THEN
       fbTStandStill(IN := FALSE);
    ELSE
       fbTStandStill(IN := TRUE);       
    END_IF;  
    bOldImpulse := di_ImpulseInput; 
   
    sv_MoldHeightEndpoints.bStandStillTimeReached := fbTStandStill.Q;
END_IF;

//set impulse feedback marker on impulse
IF fbREdgeIncrements.Q OR fbFEdgeIncrements.Q THEN
   fbTONImpulseLimit(IN := FALSE, PT := dImpulseMarkerTime);
   fbTONImpulseLimit(IN := TRUE);
   sv_bImpulseFeedbackMarker := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Start and stop the paMeasure algo depending on
sv_bDeviceReady flag (postupdate var for this algo),
which is false everytime the movement is active
*)

POSTUPDATE_ALGORITHM pMeasureManager ON TaskAnalog(999) WITH sv_bDeviceReady

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(di_ImpulseInput) THEN           
    // Start and stop the paMeasure algo depending on
    // sv_bDeviceReady flag (postupdate var for this algo),
    // which is false everytime the movement is active
    IF NOT sv_bDeviceReady THEN        
       // Reset the stand still detection and the impulse counter.
       // And Start the measuring algo paMeasure
        fbTStandStill(IN := FALSE);
        sv_iThisStepsActImpulses := 0;
        START_PROCESS_ALGORITHM(paMeasureImpulses);
    ELSE        
       STOP_PROCESS_ALGORITHM(paMeasureImpulses);
    END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Reparameterization of stand still detection time (postupdate)
*)

POSTUPDATE_ALGORITHM pReparamStandStillTime ON TaskMid WITH sv_dSetStandstillDetectionTime,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbTStandStill(PT := sv_dSetStandstillDetectionTime);


;#END_EDIT_BLOCK END_ALGORITHM

(*
Checks the forward limit switch for the movement. Sets/Resets the corresponding alarm.
Writes the result of checking to an endpoint managing structure.
*)

POSTUPDATE_ALGORITHM pCheckLimitSwitchForward ON TaskAnalog(3000) WITH di_LimitSwitchForward, sv_bInitDone, sv_LimitSwitchMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT IS_LINKED(di_LimitSwitchForward) THEN
    RETURN; 
END_IF;

IF ((sv_LimitSwitchMode = nLimitSwitchNormallyClosed) XOR di_LimitSwitchForward) THEN
    SET_ALARM(erMoldHeightMinDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMin := TRUE;
ELSE
    RESET_ALARM(erMoldHeightMinDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMin := FALSE;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

(*
Checks the backward limit switch for the movement. Sets/Resets the corresponding alarm.
Writes the result of checking to an endpoint managing structure.
*)

POSTUPDATE_ALGORITHM pCheckLimitSwitchBackward ON TaskAnalog(3000) WITH di_LimitSwitchBackward, sv_bInitDone, sv_LimitSwitchMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT IS_LINKED(di_LimitSwitchBackward) THEN
    RETURN; 
END_IF;

IF ((sv_LimitSwitchMode = nLimitSwitchNormallyClosed) XOR di_LimitSwitchBackward) THEN
    SET_ALARM(erMoldHeightMaxDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMax := TRUE;
ELSE
    RESET_ALARM(erMoldHeightMaxDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMax := FALSE;
END_IF;         



;#END_EDIT_BLOCK END_ALGORITHM

(*
Lock movement of MoldHeight when mold height motor is overloaded
*)

POSTUPDATE_ALGORITHM pCheckOverload ON PU_Task_3 WITH di_MotorOverload,sv_bInitDone


VAR_TEMP
 AlarmInfo : tsAlarm;
END_VAR

VAR
 fbLockUnlock : FBLockUnlock;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitDone AND IS_LINKED(di_MotorOverload) THEN
   IF di_MotorOverload THEN
      AlarmInfo.AlarmId := erMoldHeightMotorOverload;
      AlarmInfo.SubId[1] := sv_DeviceId.CompId;
      AlarmInfo.SubId[2] := sv_DeviceId.IndexId;
      fbLockUnlock(DeviceId := sv_DeviceId, MoveDir := cMoveAll, MoveId := cMoveAll,
                  Mode := nLockAbort, Alarm := AlarmInfo);

      //also lock auto adjust
      fbLockUnlock.DeviceId.CompId := cCompMoldHeightAuto;
      fbLockUnlock.DeviceId.IndexId := 1;
      fbLockUnlock(MoveDir := cMoveAll, MoveId := cMoveAll,
                   Mode := nLockAbort, Alarm := AlarmInfo);
   ELSE
      fbLockUnlock(DeviceId := sv_DeviceId, MoveDir := cMoveAll, MoveId := cMoveAll,
                  Mode := nUnlock);

      //also unlock auto adjust
      fbLockUnlock.DeviceId.CompId := cCompMoldHeightAuto;
      fbLockUnlock.DeviceId.IndexId := 1;
      fbLockUnlock(MoveDir := cMoveAll, MoveId := cMoveAll,
                   Mode := nUnlock);
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paFeedbackMarker ON TaskVis AUTOSTART

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// reset impulse feedback marker for HMI after some time again
fbTONImpulseLimit();

IF fbTONImpulseLimit.Q THEN
   fbTONImpulseLimit(IN := FALSE);
   sv_bImpulseFeedbackMarker := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
This AlgorithmBlock is used for measuring the number of impulses (starting from a origin position).

It also measures some endpoints for the movement like a standstill detection and the limit switches.

For performance reasons the calculation is only running when the movement is active.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveAll @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(13)cMaxMoveIdent @RT(32)all movements (for evLockUnlock) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cCompMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)101 @RT(14)Component Mold 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cCompInjection @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)104 @RT(19)Component Injection 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
26 
@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_iAbsoluteImpulsesFromOrigin @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)di_ImpulseInput @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)impulse input endpoint @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_dSetStandstillDetectionTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_iThisStepsActImpulses @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)is false when the movement is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)sv_bStandStillDetectionArmed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(50)do standstill detection while mold height movement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_MoldHeightEndpoints @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsEndpointMonitor @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)di_LimitSwitchForward @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)di_LimitSwitchBackward @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)di_MotorOverload @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)erMoldHeightMaxDI @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)erMoldHeightMinDI @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(25)erMoldHeightMotorOverload @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(15)g_ActualMoveDir @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(13)fbTStandStill @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)sv_LimitSwitchMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tnLimitSwitchMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 9 @F @F @F @F 

@Var @RT(25)sv_bImpulseFeedbackMarker @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)fbTONImpulseLimit @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

7 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(17)paMeasureImpulses @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(16)TaskAnalog(1000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(17)fbREdgeIncrements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)fbFEdgeIncrements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)F_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bOldImpulse @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)dImpulseMarkerTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(7)T#500ms @RT(56)how long variable stays TRUE after a impulse is detected @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pMeasureManager @STRUCTURED_TEXT 
@RT(0) @RT(15)sv_bDeviceReady @RT(15)TaskAnalog(999) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(22)pReparamStandStillTime @STRUCTURED_TEXT 
@RT(0) @RT(44)sv_dSetStandstillDetectionTime,sv_bInitStart @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(24)pCheckLimitSwitchForward @STRUCTURED_TEXT 
@RT(0) @RT(55)di_LimitSwitchForward, sv_bInitDone, sv_LimitSwitchMode @RT(16)TaskAnalog(3000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(25)pCheckLimitSwitchBackward @STRUCTURED_TEXT 
@RT(0) @RT(56)di_LimitSwitchBackward, sv_bInitDone, sv_LimitSwitchMode @RT(16)TaskAnalog(3000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pCheckOverload @STRUCTURED_TEXT 
@RT(0) @RT(29)di_MotorOverload,sv_bInitDone @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(9)AlarmInfo @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tsAlarm @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paFeedbackMarker @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(49)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Getting the rising and falling edge of the impulse variable for counting
fbREdgeIncrements(CLK := di_ImpulseInput);
fbFEdgeIncrements(CLK := di_ImpulseInput);

IF    (((g_MoveCtrl.pData^.MoveDir = cMoveFwd) OR (g_ActualMoveDir = cMoveFwd)) AND fbREdgeIncrements.Q) 
    OR (((g_MoveCtrl.pData^.MoveDir = cMoveBwd) OR (g_ActualMoveDir = cMoveBwd)) AND fbFEdgeIncrements.Q)THEN

    // Count the impulses for this movement, and the impulses generally-starting
    // from the origin.
    sv_iThisStepsActImpulses := sv_iThisStepsActImpulses + 1;
    CASE g_MoveCtrl.pData^.MoveDir OF
        cMoveFwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin - 1;
        cMoveBwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin + 1;  
    END_CASE;
    
    // Mold height adjust in production with closed loop
    CASE g_ActualMoveDir OF
        cMoveFwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin - 1;
        cMoveBwd: sv_iAbsoluteImpulsesFromOrigin := sv_iAbsoluteImpulsesFromOrigin + 1;  
    END_CASE;
END_IF;
        
// If the standstill detection is required, reset a timer with every
// counting impulse. If the timer can finish before a reset comes the
// movement reached its standstill point
IF sv_bStandStillDetectionArmed THEN
    // increment timer when input input did not change
    IF di_ImpulseInput <> bOldImpulse THEN
       fbTStandStill(IN := FALSE);
    ELSE
       fbTStandStill(IN := TRUE);       
    END_IF;  
    bOldImpulse := di_ImpulseInput; 
   
    sv_MoldHeightEndpoints.bStandStillTimeReached := fbTStandStill.Q;
END_IF;

//set impulse feedback marker on impulse
IF fbREdgeIncrements.Q OR fbFEdgeIncrements.Q THEN
   fbTONImpulseLimit(IN := FALSE, PT := dImpulseMarkerTime);
   fbTONImpulseLimit(IN := TRUE);
   sv_bImpulseFeedbackMarker := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
This algo is started when the movement is active.
Count impulses, (starting from a origin) and 
detect standstill.
@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(di_ImpulseInput) THEN           
    // Start and stop the paMeasure algo depending on
    // sv_bDeviceReady flag (postupdate var for this algo),
    // which is false everytime the movement is active
    IF NOT sv_bDeviceReady THEN        
       // Reset the stand still detection and the impulse counter.
       // And Start the measuring algo paMeasure
        fbTStandStill(IN := FALSE);
        sv_iThisStepsActImpulses := 0;
        START_PROCESS_ALGORITHM(paMeasureImpulses);
    ELSE        
       STOP_PROCESS_ALGORITHM(paMeasureImpulses);
    END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
Start and stop the paMeasure algo depending on
sv_bDeviceReady flag (postupdate var for this algo),
which is false everytime the movement is active
@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbTStandStill(PT := sv_dSetStandstillDetectionTime);

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Reparameterization of stand still detection time (postupdate)
@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT IS_LINKED(di_LimitSwitchForward) THEN
    RETURN; 
END_IF;

IF ((sv_LimitSwitchMode = nLimitSwitchNormallyClosed) XOR di_LimitSwitchForward) THEN
    SET_ALARM(erMoldHeightMinDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMin := TRUE;
ELSE
    RESET_ALARM(erMoldHeightMinDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMin := FALSE;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Checks the forward limit switch for the movement. Sets/Resets the corresponding alarm.
Writes the result of checking to an endpoint managing structure.
@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT IS_LINKED(di_LimitSwitchBackward) THEN
    RETURN; 
END_IF;

IF ((sv_LimitSwitchMode = nLimitSwitchNormallyClosed) XOR di_LimitSwitchBackward) THEN
    SET_ALARM(erMoldHeightMaxDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMax := TRUE;
ELSE
    RESET_ALARM(erMoldHeightMaxDI);
    sv_MoldHeightEndpoints.bLimitSwitchArrivedMax := FALSE;
END_IF;         


@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Checks the backward limit switch for the movement. Sets/Resets the corresponding alarm.
Writes the result of checking to an endpoint managing structure.
@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitDone AND IS_LINKED(di_MotorOverload) THEN
   IF di_MotorOverload THEN
      AlarmInfo.AlarmId := erMoldHeightMotorOverload;
      AlarmInfo.SubId[1] := sv_DeviceId.CompId;
      AlarmInfo.SubId[2] := sv_DeviceId.IndexId;
      fbLockUnlock(DeviceId := sv_DeviceId, MoveDir := cMoveAll, MoveId := cMoveAll,
                  Mode := nLockAbort, Alarm := AlarmInfo);

      //also lock auto adjust
      fbLockUnlock.DeviceId.CompId := cCompMoldHeightAuto;
      fbLockUnlock.DeviceId.IndexId := 1;
      fbLockUnlock(MoveDir := cMoveAll, MoveId := cMoveAll,
                   Mode := nLockAbort, Alarm := AlarmInfo);
   ELSE
      fbLockUnlock(DeviceId := sv_DeviceId, MoveDir := cMoveAll, MoveId := cMoveAll,
                  Mode := nUnlock);

      //also unlock auto adjust
      fbLockUnlock.DeviceId.CompId := cCompMoldHeightAuto;
      fbLockUnlock.DeviceId.IndexId := 1;
      fbLockUnlock(MoveDir := cMoveAll, MoveId := cMoveAll,
                   Mode := nUnlock);
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Lock movement of MoldHeight when mold height motor is overloaded
@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// reset impulse feedback marker for HMI after some time again
fbTONImpulseLimit();

IF fbTONImpulseLimit.Q THEN
   fbTONImpulseLimit(IN := FALSE);
   sv_bImpulseFeedbackMarker := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
