IMPORT_OVER_LISTFILE
 SET_ALARM
, KCAT_GetHandle
, KCAT_GetIoState_Data
, KCAT_HandleData
, KCAT_Status
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABIoForceState #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 TaskSlow : TASK;
 erAnyIoForced : ALARM;
END_OBJECT

PROCESS_ALGORITHM paCheckIoForceState ON TaskSlow AUTOSTART


VAR
 bIoForced : BOOL (* SET_ALARM called *);
 bInit : BOOL;
 iRed : DINT (* measurement reduction *);
 pbExhibitionMode : REFTO BOOL;
 IoStateDataOnboard : KCAT_GetIoState_Data;
 HandleDataOnboard : KCAT_HandleData;
 Status : KCAT_Status;
 Status2 : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   HandleDataOnboard := KCAT_GetHandle(Name := 'IO.ONBOARD');
   pbExhibitionMode := GET_SYNC_REFTO('simulation.sv_bExhibitionMode', T#0s, Status2);
   bInit := TRUE; 
END_IF;

IF ((Status2 = KSYS_Status_OK) AND pbExhibitionMode^) THEN
   // do not show erAnyIoForced alarm in exhibition mode
   IF bIoForced THEN
      RESET_ALARM(Name := erAnyIoForced);
      bIoForced := FALSE;
   END_IF;
   RETURN;
END_IF;

// measurement reduction factor
IF iRed = 0 THEN
   iRed := 5; 
ELSE
   iRed := iRed - 1; 
   RETURN; 
END_IF;

IF (HandleDataOnboard.Status = KCAT_Status_OK) THEN
   Status := KCAT_GetIoState(Handle := HandleDataOnboard.Handle, State := IoStateDataOnboard);

   IF (IoStateDataOnboard.IoStateBits.ForcedSubTree AND NOT bIoForced) THEN   
      SET_ALARM(Name := erAnyIoForced);
      bIoForced := TRUE;

   ELSIF (NOT IoStateDataOnboard.IoStateBits.ForcedSubTree AND bIoForced) THEN
      RESET_ALARM(Name := erAnyIoForced);
      bIoForced := FALSE;
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_GetHandle @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABIoForceState @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)erAnyIoForced @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

1 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(19)paCheckIoForceState @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(9)bIoForced @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)SET_ALARM called @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iRed @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)measurement reduction @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)pbExhibitionMode @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)IoStateDataOnboard @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)KCAT_GetIoState_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)HandleDataOnboard @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)Status2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(41)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   HandleDataOnboard := KCAT_GetHandle(Name := 'IO.ONBOARD');
   pbExhibitionMode := GET_SYNC_REFTO('simulation.sv_bExhibitionMode', T#0s, Status2);
   bInit := TRUE; 
END_IF;

IF ((Status2 = KSYS_Status_OK) AND pbExhibitionMode^) THEN
   // do not show erAnyIoForced alarm in exhibition mode
   IF bIoForced THEN
      RESET_ALARM(Name := erAnyIoForced);
      bIoForced := FALSE;
   END_IF;
   RETURN;
END_IF;

// measurement reduction factor
IF iRed = 0 THEN
   iRed := 5; 
ELSE
   iRed := iRed - 1; 
   RETURN; 
END_IF;

IF (HandleDataOnboard.Status = KCAT_Status_OK) THEN
   Status := KCAT_GetIoState(Handle := HandleDataOnboard.Handle, State := IoStateDataOnboard);

   IF (IoStateDataOnboard.IoStateBits.ForcedSubTree AND NOT bIoForced) THEN   
      SET_ALARM(Name := erAnyIoForced);
      bIoForced := TRUE;

   ELSIF (NOT IoStateDataOnboard.IoStateBits.ForcedSubTree AND bIoForced) THEN
      RESET_ALARM(Name := erAnyIoForced);
      bIoForced := FALSE;
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
