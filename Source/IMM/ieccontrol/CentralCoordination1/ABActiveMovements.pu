(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, cCompNone
, cMoveNone
, cCompInjection
, cMinMoveIdent
, cMaxActiveMovements
, cMoveFwd
, tevMovementState
, tyMovementRegisterList
, tsActiveMovements
, tsStartedMoveData
, tyNumberOfDevices
, tyInjectHoldNumbers
, tevStartedStopped
, tevMovementStateData
, FBGetMoveNumber
, tevStartedStoppedData

END_IMPORT

ALGORITHM_BLOCK ABActiveMovements #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_MovementsAvailable : tyMovementRegisterList;
 sv_iMovementsAvailable : DINT;
 sv_ActiveMovements : tsActiveMovements;
 sv_StartedMovements : tsStartedMoveData;
 sv_bInitDone : BOOL;
 sv_NumberOfDevices : tyNumberOfDevices;
END_VAR

SYSTEM_OBJECT
 EV_Task_3 : TASK;
 evMovementState : tevMovementState;
 PU_Task_13 : TASK;
 evStartedStopped : tevStartedStopped;
 erMaxStartedMovementsExceeded : ALARM;
 erMaxActiveMovementsExceeded : ALARM;
END_OBJECT

VAR
 InjectHoldNumbers : tyInjectHoldNumbers;
END_VAR

(*
Manage a list of active movements for displaying
the active movement on the HMI.
Reacts to evMovementState events
*)

EVENT_ALGORITHM evaMovementState ON EV_Task_3 WITH evMovementState


VAR_INPUT
 evMovementStateData : tevMovementStateData;
END_VAR

VAR_TEMP
 i : DINT;
 k : DINT;
END_VAR

VAR
 iMoveNumber : DINT;
 MovementStateData : tevMovementStateData;
 fbGetMoveNumber : FBGetMoveNumber;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

MovementStateData := evMovementStateData;
 
IF MovementStateData.State = nInactive AND MovementStateData.DeviceId.CompId = cCompInjection AND 
   MovementStateData.MoveDir = cMoveFwd AND MovementStateData.MoveId = cMoveInject THEN
   //inject movement was stopped -> check if holding was active 
    IF InjectHoldNumbers[MovementStateData.DeviceId.IndexId].bHoldActive THEN
        //holding was active
        iMoveNumber := InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iHoldMovement;
    ELSE
        //holding was not active
        iMoveNumber := InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iInjectMovement;
    END_IF;
    InjectHoldNumbers[MovementStateData.DeviceId.IndexId].bHoldActive := FALSE;
ELSE
    // -> get movement number
    fbGetMoveNumber(DeviceId := MovementStateData.DeviceId,
                    MoveId := MovementStateData.MoveId,
                    MoveDir := MovementStateData.MoveDir,
                    iMoveNumber => iMoveNumber);
END_IF;

IF (iMoveNumber = 0) THEN
    //no movement found
    RETURN;
END_IF;

IF MovementStateData.State = nActive THEN
    IF MovementStateData.MoveId = cMoveHold THEN
        // hold phase active -> search inject movement and change number to hold movement
        FOR i := 1 TO sv_ActiveMovements.iNumberOfActiveMovements DO
            IF sv_ActiveMovements.ActiveMovements[i] = InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iInjectMovement THEN
                sv_ActiveMovements.ActiveMovements[i] := InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iHoldMovement;
                InjectHoldNumbers[MovementStateData.DeviceId.IndexId].bHoldActive := TRUE;
                EXIT;
            END_IF;
        END_FOR;
    ELSE
        IF sv_ActiveMovements.iNumberOfActiveMovements < cMaxActiveMovements THEN
            //movement was started -> add movement to list
            sv_ActiveMovements.ActiveMovements[(sv_ActiveMovements.iNumberOfActiveMovements+1)] := iMoveNumber;
            sv_ActiveMovements.iNumberOfActiveMovements := sv_ActiveMovements.iNumberOfActiveMovements + 1;
        ELSE
            //too many movements active
            SET_ALARM(Name := erMaxActiveMovementsExceeded,
                      SubID1 := cMaxActiveMovements);
        END_IF;        
    END_IF;
ELSE
    //movement was stopped -> find movement and delete it from array
    FOR i := 1 TO sv_ActiveMovements.iNumberOfActiveMovements DO
        IF sv_ActiveMovements.ActiveMovements[i] = iMoveNumber THEN
            sv_ActiveMovements.ActiveMovements[i] := 0;
            //move all other movements so that there is no empty field in the list
            FOR k:= (i+1) TO cMaxActiveMovements DO
                sv_ActiveMovements.ActiveMovements[(k-1)] := sv_ActiveMovements.ActiveMovements[k];
                sv_ActiveMovements.ActiveMovements[k] := 0;
            END_FOR;
            sv_ActiveMovements.iNumberOfActiveMovements := sv_ActiveMovements.iNumberOfActiveMovements -1;
            EXIT;
        END_IF;
    END_FOR;
    
END_IF;





;#END_EDIT_BLOCK END_ALGORITHM

(*
Manage list and count of currently started movments
in sv_StartedMovements when receiving evStartedStopped events
*)

EVENT_ALGORITHM evaStartedStopped ON EV_Task_3 WITH evStartedStopped


VAR_INPUT
 evStartedStoppedData : tevStartedStoppedData;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR

VAR
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartedStoppedData.State = nStarted THEN
    //movement started
    IF sv_StartedMovements.iStartedMovements < cMaxActiveMovements THEN
        //add movement to sv_StartedMovements
        sv_StartedMovements.iStartedMovements := sv_StartedMovements.iStartedMovements +1;
        sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements].DeviceId := evStartedStoppedData.DeviceId;
        sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements].MoveDir := evStartedStoppedData.MoveDir;
        sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements].MoveId := evStartedStoppedData.MoveId;
    ELSE
        //too many movements started
        //show some information about the movement to make debugging easier
        dummy := Print('set alarm erMaxStartedMovementsExceeded in ABActiveMovements.pu');
        dummy := Print('max. active movements: %d', cMaxActiveMovements);
        dummy := Print('tried to start    %d.%d %d/%d',
                       evStartedStoppedData.DeviceId.CompId, evStartedStoppedData.DeviceId.IndexId,
                       evStartedStoppedData.MoveId, evStartedStoppedData.MoveDir);
        FOR i := 1 TO cMaxActiveMovements DO
            dummy := Print('already started %d %d.%d %d/%d',
                           i, sv_StartedMovements.MoveData[i].DeviceId.CompId, sv_StartedMovements.MoveData[i].DeviceId.IndexId,
                           sv_StartedMovements.MoveData[i].MoveId, sv_StartedMovements.MoveData[i].MoveDir);
        END_FOR;
        
        //set alarm after tracing out
        SET_ALARM(Name := erMaxStartedMovementsExceeded,
                  SubID1 := cMaxActiveMovements);
    END_IF;        
ELSE
    //movement stopped
    //remove movement from list with started movements
    FOR i := 1 TO sv_StartedMovements.iStartedMovements DO
        IF sv_StartedMovements.MoveData[i].DeviceId = evStartedStoppedData.DeviceId AND
           sv_StartedMovements.MoveData[i].MoveDir = evStartedStoppedData.MoveDir AND
           sv_StartedMovements.MoveData[i].MoveId = evStartedStoppedData.MoveId THEN
            sv_StartedMovements.MoveData[i].DeviceId.CompId := cCompNone;
            sv_StartedMovements.MoveData[i].DeviceId.IndexId := 1;
            sv_StartedMovements.MoveData[i].MoveDir := cMoveNone;
            sv_StartedMovements.MoveData[i].MoveId := cMinMoveIdent;
            //copy last entry in the list to this empty field
            sv_StartedMovements.MoveData[i] := sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements];
            sv_StartedMovements.iStartedMovements := sv_StartedMovements.iStartedMovements -1;
            EXIT;
        END_IF;
    END_FOR;
END_IF;
 





;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pGetInjectHoldNumbers ON PU_Task_13 WITH sv_bInitDone


VAR_TEMP
 i : DINT;
 iDevice : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get icon pathes for inject and hold of all registered injection function units
FOR iDevice := 1 TO sv_NumberOfDevices[cCompInjection] DO

    FOR i := 1 TO sv_iMovementsAvailable DO
        IF sv_MovementsAvailable[i].DeviceId.CompId = cCompInjection AND 
           sv_MovementsAvailable[i].pMovementData^.MoveId = cMoveInject THEN
            //save number of inject movement
            InjectHoldNumbers[sv_MovementsAvailable[i].DeviceId.IndexId].iInjectMovement := i;
        END_IF;
        IF sv_MovementsAvailable[i].DeviceId.CompId = cCompInjection AND 
           sv_MovementsAvailable[i].pMovementData^.MoveId = cMoveHold THEN
            //save number of holding movement
            InjectHoldNumbers[sv_MovementsAvailable[i].DeviceId.IndexId].iHoldMovement := i;
        END_IF;
    END_FOR;

END_FOR;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 86 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
6 
@Var @RT(9)cCompNone @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(10)cMinCompId @RT(4)None 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cMoveNone @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(13)cMinMoveIdent @RT(4)None 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cCompInjection @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)104 @RT(19)Component Injection 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cMinMoveIdent @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(32)lower limit for MoveId / MoveDir 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)cMaxActiveMovements @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)6 @RT(52)number of movements that are active at the same time 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(17)ABActiveMovements @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)evMovementState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tevMovementState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)sv_MovementsAvailable @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyMovementRegisterList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_iMovementsAvailable @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_ActiveMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsActiveMovements @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_StartedMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsStartedMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)InjectHoldNumbers @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tyInjectHoldNumbers @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)evStartedStopped @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(17)tevStartedStopped @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(29)erMaxStartedMovementsExceeded @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(28)erMaxActiveMovementsExceeded @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(16)evaMovementState @STRUCTURED_TEXT 
@RT(0) @RT(15)evMovementState @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(19)evMovementStateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tevMovementStateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)k @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(11)iMoveNumber @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)MovementStateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tevMovementStateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbGetMoveNumber @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)FBGetMoveNumber @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(17)evaStartedStopped @STRUCTURED_TEXT 
@RT(0) @RT(16)evStartedStopped @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(20)evStartedStoppedData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tevStartedStoppedData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(21)pGetInjectHoldNumbers @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(7)iDevice @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(72)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

MovementStateData := evMovementStateData;
 
IF MovementStateData.State = nInactive AND MovementStateData.DeviceId.CompId = cCompInjection AND 
   MovementStateData.MoveDir = cMoveFwd AND MovementStateData.MoveId = cMoveInject THEN
   //inject movement was stopped -> check if holding was active 
    IF InjectHoldNumbers[MovementStateData.DeviceId.IndexId].bHoldActive THEN
        //holding was active
        iMoveNumber := InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iHoldMovement;
    ELSE
        //holding was not active
        iMoveNumber := InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iInjectMovement;
    END_IF;
    InjectHoldNumbers[MovementStateData.DeviceId.IndexId].bHoldActive := FALSE;
ELSE
    // -> get movement number
    fbGetMoveNumber(DeviceId := MovementStateData.DeviceId,
                    MoveId := MovementStateData.MoveId,
                    MoveDir := MovementStateData.MoveDir,
                    iMoveNumber => iMoveNumber);
END_IF;

IF (iMoveNumber = 0) THEN
    //no movement found
    RETURN;
END_IF;

IF MovementStateData.State = nActive THEN
    IF MovementStateData.MoveId = cMoveHold THEN
        // hold phase active -> search inject movement and change number to hold movement
        FOR i := 1 TO sv_ActiveMovements.iNumberOfActiveMovements DO
            IF sv_ActiveMovements.ActiveMovements[i] = InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iInjectMovement THEN
                sv_ActiveMovements.ActiveMovements[i] := InjectHoldNumbers[MovementStateData.DeviceId.IndexId].iHoldMovement;
                InjectHoldNumbers[MovementStateData.DeviceId.IndexId].bHoldActive := TRUE;
                EXIT;
            END_IF;
        END_FOR;
    ELSE
        IF sv_ActiveMovements.iNumberOfActiveMovements < cMaxActiveMovements THEN
            //movement was started -> add movement to list
            sv_ActiveMovements.ActiveMovements[(sv_ActiveMovements.iNumberOfActiveMovements+1)] := iMoveNumber;
            sv_ActiveMovements.iNumberOfActiveMovements := sv_ActiveMovements.iNumberOfActiveMovements + 1;
        ELSE
            //too many movements active
            SET_ALARM(Name := erMaxActiveMovementsExceeded,
                      SubID1 := cMaxActiveMovements);
        END_IF;        
    END_IF;
ELSE
    //movement was stopped -> find movement and delete it from array
    FOR i := 1 TO sv_ActiveMovements.iNumberOfActiveMovements DO
        IF sv_ActiveMovements.ActiveMovements[i] = iMoveNumber THEN
            sv_ActiveMovements.ActiveMovements[i] := 0;
            //move all other movements so that there is no empty field in the list
            FOR k:= (i+1) TO cMaxActiveMovements DO
                sv_ActiveMovements.ActiveMovements[(k-1)] := sv_ActiveMovements.ActiveMovements[k];
                sv_ActiveMovements.ActiveMovements[k] := 0;
            END_FOR;
            sv_ActiveMovements.iNumberOfActiveMovements := sv_ActiveMovements.iNumberOfActiveMovements -1;
            EXIT;
        END_IF;
    END_FOR;
    
END_IF;




@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
Manage a list of active movements for displaying
the active movement on the HMI.
Reacts to evMovementState events
@@@END_Comment@@@ 

@BEG_Body 
@TL(54)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartedStoppedData.State = nStarted THEN
    //movement started
    IF sv_StartedMovements.iStartedMovements < cMaxActiveMovements THEN
        //add movement to sv_StartedMovements
        sv_StartedMovements.iStartedMovements := sv_StartedMovements.iStartedMovements +1;
        sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements].DeviceId := evStartedStoppedData.DeviceId;
        sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements].MoveDir := evStartedStoppedData.MoveDir;
        sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements].MoveId := evStartedStoppedData.MoveId;
    ELSE
        //too many movements started
        //show some information about the movement to make debugging easier
        dummy := Print('set alarm erMaxStartedMovementsExceeded in ABActiveMovements.pu');
        dummy := Print('max. active movements: %d', cMaxActiveMovements);
        dummy := Print('tried to start    %d.%d %d/%d',
                       evStartedStoppedData.DeviceId.CompId, evStartedStoppedData.DeviceId.IndexId,
                       evStartedStoppedData.MoveId, evStartedStoppedData.MoveDir);
        FOR i := 1 TO cMaxActiveMovements DO
            dummy := Print('already started %d %d.%d %d/%d',
                           i, sv_StartedMovements.MoveData[i].DeviceId.CompId, sv_StartedMovements.MoveData[i].DeviceId.IndexId,
                           sv_StartedMovements.MoveData[i].MoveId, sv_StartedMovements.MoveData[i].MoveDir);
        END_FOR;
        
        //set alarm after tracing out
        SET_ALARM(Name := erMaxStartedMovementsExceeded,
                  SubID1 := cMaxActiveMovements);
    END_IF;        
ELSE
    //movement stopped
    //remove movement from list with started movements
    FOR i := 1 TO sv_StartedMovements.iStartedMovements DO
        IF sv_StartedMovements.MoveData[i].DeviceId = evStartedStoppedData.DeviceId AND
           sv_StartedMovements.MoveData[i].MoveDir = evStartedStoppedData.MoveDir AND
           sv_StartedMovements.MoveData[i].MoveId = evStartedStoppedData.MoveId THEN
            sv_StartedMovements.MoveData[i].DeviceId.CompId := cCompNone;
            sv_StartedMovements.MoveData[i].DeviceId.IndexId := 1;
            sv_StartedMovements.MoveData[i].MoveDir := cMoveNone;
            sv_StartedMovements.MoveData[i].MoveId := cMinMoveIdent;
            //copy last entry in the list to this empty field
            sv_StartedMovements.MoveData[i] := sv_StartedMovements.MoveData[sv_StartedMovements.iStartedMovements];
            sv_StartedMovements.iStartedMovements := sv_StartedMovements.iStartedMovements -1;
            EXIT;
        END_IF;
    END_FOR;
END_IF;
 




@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Manage list and count of currently started movments
in sv_StartedMovements when receiving evStartedStopped events
@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get icon pathes for inject and hold of all registered injection function units
FOR iDevice := 1 TO sv_NumberOfDevices[cCompInjection] DO

    FOR i := 1 TO sv_iMovementsAvailable DO
        IF sv_MovementsAvailable[i].DeviceId.CompId = cCompInjection AND 
           sv_MovementsAvailable[i].pMovementData^.MoveId = cMoveInject THEN
            //save number of inject movement
            InjectHoldNumbers[sv_MovementsAvailable[i].DeviceId.IndexId].iInjectMovement := i;
        END_IF;
        IF sv_MovementsAvailable[i].DeviceId.CompId = cCompInjection AND 
           sv_MovementsAvailable[i].pMovementData^.MoveId = cMoveHold THEN
            //save number of holding movement
            InjectHoldNumbers[sv_MovementsAvailable[i].DeviceId.IndexId].iHoldMovement := i;
        END_IF;
    END_FOR;

END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
@@@BEG_Password@@@
M2hzZmhrMw==
@@@END_Password@@@
