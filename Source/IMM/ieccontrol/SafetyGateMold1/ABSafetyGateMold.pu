(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

The Algorithm block maintains the state of the mold safety gate.
Depending on the digital inputs di_Open and di_Closed the state variable sv_SafetyGateState is set.
This state can be nOpen, nClosed or nError.
An according alarm is set if the state is nOpen or nError.
If error state (nError) was detected, the gate must be in open state (nOpen)
and in closed state (nClosed) before the error state is resetted.

*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, START_PROCESS_ALGORITHM
, IS_LINKED
, cLockGroupSafetyGateMold
, tnSafetyGateState
, tsDeviceId
, tevSafetyGate
, FBLockUnlockGroup
, FBSafetyGateGeneral
, tevSafetyGateData

END_IMPORT

ALGORITHM_BLOCK ABSafetyGateMold #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 di_Closed : BOOL;
 di_Open : BOOL;
 sv_dSupervisionTime : TIME (* SupervisionTime for SG Mold *);
 sv_SafetyGateState : tnSafetyGateState;
 sv_bAutoCycleRunning : BOOL;
 sv_DeviceId : tsDeviceId;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskMid : TASK;
 PU_Task_7 : TASK;
 erSafetyGateCycleStop : ALARM;
 erSafetyGate : ALARM;
 erSafetyGateDefect : ALARM;
 evSafetyGate : tevSafetyGate;
 EV_Task_7 : TASK;
END_OBJECT

VAR
 mevSafetyGate : tevSafetyGate;
 mbDIOpenLinked : BOOL;
END_VAR

PROCESS_ALGORITHM paInit ON TaskMid(1) AUTOSTART


VAR
 bInitDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


IF NOT bInitDone THEN
   mbDIOpenLinked := IS_LINKED(di_Open);
   bInitDone := TRUE;
END_IF;

IF mbDIOpenLinked THEN
   //di_Open is linked
   //-> start process algorithm after sv_bInitDone is TRUE
   IF sv_bInitDone THEN
      //init local event
      mevSafetyGate := evSafetyGate;
      START_PROCESS_ALGORITHM(paSafetyGate);
      STOP_PROCESS_ALGORITHM();
   END_IF;  
ELSE
   //only di_Closed linked   
   STOP_PROCESS_ALGORITHM();
END_IF;





;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aState


VAR_INPUT
 SafetyGateState : tnSafetyGateState;
END_VAR

VAR
 bLocked : BOOL;
 fbLockUnlockGroup : FBLockUnlockGroup;
 bLock : BOOL;
 bUnlock : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitDone THEN

   bLock := FALSE;
   bUnlock := FALSE;
   
   CASE SafetyGateState OF
      
      nClosed:
               // gate is closed -> reset alarms and unlock movements                  
               RESET_ALARM(Name:= erSafetyGateDefect);      
               RESET_ALARM(Name:= erSafetyGate);       
               RESET_ALARM(Name:= erSafetyGateCycleStop);
               
               bUnlock := TRUE; 

      nOpen:
               // gate is open -> lock all movements of the lockgroup  cLockGroupSafetyGateMold                
               // gate ok -> reset erSafetyGateDefect
               RESET_ALARM(Name:= erSafetyGateDefect);
                                 
               IF sv_bAutoCycleRunning THEN
                  (* if the autocycle is running set erSafetyGateCycleStop 
                  -> opmode is switched to manual by the alarmevent *)
                  SET_ALARM(Name := erSafetyGateCycleStop); 
                    
               ELSE
                  //autocycle not running
                  SET_ALARM(Name := erSafetyGate);
                   
                  //reset this alarm because otherwise it is possible that 
                  //two different alarms with the same alarmtext are displayed on alarm mask 
                  RESET_ALARM(Name := erSafetyGateCycleStop); 
                              
               END_IF;
      
               bLock := TRUE;
                     
      nError:                
               // gate is in errorstate -> set alarm and lock movements
               SET_ALARM(Name:= erSafetyGateDefect);
                     
               RESET_ALARM(Name:= erSafetyGate);       
               RESET_ALARM(Name:= erSafetyGateCycleStop);
       
               bLock := TRUE;
   END_CASE; 
   
   
   // Lock/Unlock all movements of the lockgroup cLockGroupSafetyGateMold
   fbLockUnlockGroup.Group := cLockGroupSafetyGateMold; 
   
   IF bLock AND NOT bLocked THEN
   
      fbLockUnlockGroup.Mode := nLockAbort;
      fbLockUnlockGroup();
      bLocked := TRUE;
      
   ELSIF bUnlock AND bLocked THEN
      
      fbLockUnlockGroup.Mode := nUnlock;
      fbLockUnlockGroup();
      bLocked := FALSE;
   END_IF;
    
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSafetyGate ON TaskMid


VAR
 fbSafetyGate : FBSafetyGateGeneral;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbSafetyGate(bOpen := di_Open,
             bClosed := di_Closed,
             dSupervisionTime := sv_dSupervisionTime);



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pDIClosed ON PU_Task_7 WITH sv_bInitDone,di_Closed


VAR
 evSafetyGateData : tevSafetyGateData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDIOpenLinked THEN
   //di_Open linked
   //-> state is handled in evaSafetyGate
   RETURN;
END_IF;

IF di_Closed THEN
   sv_SafetyGateState := nClosed;
ELSE
   sv_SafetyGateState := nOpen;
END_IF;

//set state event
evSafetyGateData.DeviceId := sv_DeviceId;
evSafetyGateData.State := sv_SafetyGateState;
SET_EVENT(evSafetyGate, evSafetyGateData);

//set / reset alarms and lock / unlock movements
aState(SafetyGateState := sv_SafetyGateState);


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaSafetyGate ON EV_Task_7 WITH mevSafetyGate


VAR_INPUT
 evSafetyGateData : tevSafetyGateData;
END_VAR

VAR
 bSGOpenDetected : BOOL;
 bSafetyGateError : BOOL;
 bSGClosedDetected : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evSafetyGateData.DeviceId <> sv_DeviceId THEN
   //don´t handle events from other safety gates
   RETURN;
END_IF;


IF NOT bSafetyGateError THEN
   sv_SafetyGateState := evSafetyGateData.State;

   //set / reset alarms and lock / unlock movements
   aState(SafetyGateState := sv_SafetyGateState);
      
   bSafetyGateError := (sv_SafetyGateState = nError);
ELSE
   //if error state was detected, the gate must be in open state
   //and in closed state before the error state is resetted
   IF evSafetyGateData.State = nOpen THEN
      bSGOpenDetected := TRUE;
   ELSIF evSafetyGateData.State = nClosed THEN
      bSGClosedDetected := TRUE;
   ELSE
      //error state detected again
      bSGOpenDetected := FALSE;
      bSGClosedDetected := FALSE;
   END_IF;
   
   IF bSGOpenDetected AND bSGClosedDetected THEN
      //both directions deteced
      bSafetyGateError := FALSE;
      bSGClosedDetected := FALSE;
      bSGOpenDetected := FALSE;
      
      sv_SafetyGateState := evSafetyGateData.State;

      //set / reset alarms and lock / unlock movements
      aState(SafetyGateState := sv_SafetyGateState);
   END_IF;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 10 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

The Algorithm block maintains the state of the mold safety gate.
Depending on the digital inputs di_Open and di_Closed the state variable sv_SafetyGateState is set.
This state can be nOpen, nClosed or nError.
An according alarm is set if the state is nOpen or nError.
If error state (nError) was detected, the gate must be in open state (nOpen)
and in closed state (nClosed) before the error state is resetted.

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)IS_LINKED @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(24)cLockGroupSafetyGateMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)61 @RT(73)Members: Mold Close, Mold Hight Forward, Auto Mold Hight, Core In, Inject 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABSafetyGateMold @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)di_Closed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)di_Open @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_dSupervisionTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)SupervisionTime for SG Mold @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)erSafetyGateCycleStop @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)erSafetyGate @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)erSafetyGateDefect @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)sv_SafetyGateState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tnSafetyGateState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bAutoCycleRunning @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)mevSafetyGate @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tevSafetyGate @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)evSafetyGate @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tevSafetyGate @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)mbDIOpenLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskMid(1) @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aState @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(15)SafetyGateState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tnSafetyGateState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)bLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)fbLockUnlockGroup @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)FBLockUnlockGroup @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bLock @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bUnlock @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(12)paSafetyGate @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(12)fbSafetyGate @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(19)FBSafetyGateGeneral @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pDIClosed @STRUCTURED_TEXT 
@RT(0) @RT(22)sv_bInitDone,di_Closed @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(16)evSafetyGateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevSafetyGateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(13)evaSafetyGate @STRUCTURED_TEXT 
@RT(0) @RT(13)mevSafetyGate @RT(9)EV_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(16)evSafetyGateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevSafetyGateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)bSGOpenDetected @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)bSafetyGateError @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)bSGClosedDetected @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(28)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


IF NOT bInitDone THEN
   mbDIOpenLinked := IS_LINKED(di_Open);
   bInitDone := TRUE;
END_IF;

IF mbDIOpenLinked THEN
   //di_Open is linked
   //-> start process algorithm after sv_bInitDone is TRUE
   IF sv_bInitDone THEN
      //init local event
      mevSafetyGate := evSafetyGate;
      START_PROCESS_ALGORITHM(paSafetyGate);
      STOP_PROCESS_ALGORITHM();
   END_IF;  
ELSE
   //only di_Closed linked   
   STOP_PROCESS_ALGORITHM();
END_IF;




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(71)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitDone THEN

   bLock := FALSE;
   bUnlock := FALSE;
   
   CASE SafetyGateState OF
      
      nClosed:
               // gate is closed -> reset alarms and unlock movements                  
               RESET_ALARM(Name:= erSafetyGateDefect);      
               RESET_ALARM(Name:= erSafetyGate);       
               RESET_ALARM(Name:= erSafetyGateCycleStop);
               
               bUnlock := TRUE; 

      nOpen:
               // gate is open -> lock all movements of the lockgroup  cLockGroupSafetyGateMold                
               // gate ok -> reset erSafetyGateDefect
               RESET_ALARM(Name:= erSafetyGateDefect);
                                 
               IF sv_bAutoCycleRunning THEN
                  (* if the autocycle is running set erSafetyGateCycleStop 
                  -> opmode is switched to manual by the alarmevent *)
                  SET_ALARM(Name := erSafetyGateCycleStop); 
                    
               ELSE
                  //autocycle not running
                  SET_ALARM(Name := erSafetyGate);
                   
                  //reset this alarm because otherwise it is possible that 
                  //two different alarms with the same alarmtext are displayed on alarm mask 
                  RESET_ALARM(Name := erSafetyGateCycleStop); 
                              
               END_IF;
      
               bLock := TRUE;
                     
      nError:                
               // gate is in errorstate -> set alarm and lock movements
               SET_ALARM(Name:= erSafetyGateDefect);
                     
               RESET_ALARM(Name:= erSafetyGate);       
               RESET_ALARM(Name:= erSafetyGateCycleStop);
       
               bLock := TRUE;
   END_CASE; 
   
   
   // Lock/Unlock all movements of the lockgroup cLockGroupSafetyGateMold
   fbLockUnlockGroup.Group := cLockGroupSafetyGateMold; 
   
   IF bLock AND NOT bLocked THEN
   
      fbLockUnlockGroup.Mode := nLockAbort;
      fbLockUnlockGroup();
      bLocked := TRUE;
      
   ELSIF bUnlock AND bLocked THEN
      
      fbLockUnlockGroup.Mode := nUnlock;
      fbLockUnlockGroup();
      bLocked := FALSE;
   END_IF;
    
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbSafetyGate(bOpen := di_Open,
             bClosed := di_Closed,
             dSupervisionTime := sv_dSupervisionTime);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(25)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDIOpenLinked THEN
   //di_Open linked
   //-> state is handled in evaSafetyGate
   RETURN;
END_IF;

IF di_Closed THEN
   sv_SafetyGateState := nClosed;
ELSE
   sv_SafetyGateState := nOpen;
END_IF;

//set state event
evSafetyGateData.DeviceId := sv_DeviceId;
evSafetyGateData.State := sv_SafetyGateState;
SET_EVENT(evSafetyGate, evSafetyGateData);

//set / reset alarms and lock / unlock movements
aState(SafetyGateState := sv_SafetyGateState);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(46)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evSafetyGateData.DeviceId <> sv_DeviceId THEN
   //don´t handle events from other safety gates
   RETURN;
END_IF;


IF NOT bSafetyGateError THEN
   sv_SafetyGateState := evSafetyGateData.State;

   //set / reset alarms and lock / unlock movements
   aState(SafetyGateState := sv_SafetyGateState);
      
   bSafetyGateError := (sv_SafetyGateState = nError);
ELSE
   //if error state was detected, the gate must be in open state
   //and in closed state before the error state is resetted
   IF evSafetyGateData.State = nOpen THEN
      bSGOpenDetected := TRUE;
   ELSIF evSafetyGateData.State = nClosed THEN
      bSGClosedDetected := TRUE;
   ELSE
      //error state detected again
      bSGOpenDetected := FALSE;
      bSGClosedDetected := FALSE;
   END_IF;
   
   IF bSGOpenDetected AND bSGClosedDetected THEN
      //both directions deteced
      bSafetyGateError := FALSE;
      bSGClosedDetected := FALSE;
      bSGOpenDetected := FALSE;
      
      sv_SafetyGateState := evSafetyGateData.State;

      //set / reset alarms and lock / unlock movements
      aState(SafetyGateState := sv_SafetyGateState);
   END_IF;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
