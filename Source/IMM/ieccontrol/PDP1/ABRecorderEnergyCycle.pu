(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


*)

IMPORT_OVER_LISTFILE
 START_PROCESS_ALGORITHM
, STOP_PROCESS_ALGORITHM
, GET_SYNC_REFTO
, cCompMold
, cCompEnergyMeter
, tnOperationMode
, KMB_MeasureBlock2
, KMB_CreateProfileData
, tyNumberOfDevices
, tevCycleStart
, KMB_Status
, KMB_CurveResult
, KMB_Curve
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABRecorderEnergyCycle #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_OperationMode : tnOperationMode;
 sv_bEnergyCycleHoldRun : BOOL (* Cyclic energy chart hold / run *);
 sv_NumberOfDevices : tyNumberOfDevices;
END_VAR

SYSTEM_OBJECT
 TaskVis : TASK;
 TaskInject : TASK;
 evNewCycleStarted : tevCycleStart;
END_OBJECT

VAR
 mpdCycleTime : REFTO TIME;
 abMeasure : KMB_MeasureBlock2;
 mProfileData : KMB_CreateProfileData := (ProfileName:='ChartEnergyCycle',Type:=KMB_ProfileKind_PDSC,ElementCount:=1000,DataPath:='/protocol/datalogger/',CfgPath:='/workspace/data/ms_config/',ThreadPriority:=6);
 mpiShotCounter : REFTO DINT;
 mpOperationMode : REFTO tnOperationMode;
 mpDummy : REFTO tnOperationMode;
 mbCycleStarted : BOOL;
 mbMeasureStarted : BOOL;
END_VAR

FUNCTION fStartInit : BOOL
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fStartInit := FALSE; //suppress warning about unused formal parameter
START_PROCESS_ALGORITHM(paInit);


;#END_EDIT_BLOCK END_FUNCTION

PROCESS_ALGORITHM paInit ON TaskVis


VAR
 status : KMB_Status;
 curveStatus : KMB_CurveResult;
 curve : KMB_Curve;
 bCreated : BOOL;
 s : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// create and init profile 'ChartEnergyCycle' of type Mic / 1000  elements 
IF (NOT bCreated) THEN
   // create and configure profile for 10 ms cyclic measure
   status := abMeasure.CreateProfile(mProfileData);
   status := abMeasure.DisableProfileFlashPersistence(); 
   status := abMeasure.DisableAutoSaveConfig(); 
   status := abMeasure.SetMeasureTime(T#10ms);
   bCreated := TRUE;
END_IF;

(* add variables 0 .. 3: movement states *)
curve.VariableY := "Mold1.sv_bCloseActive";
curveStatus := abMeasure.AddCurve(curve); 

IF (curveStatus.Status = KMB_Status_Not_Connected) THEN
   // see iec library doc and CR_0053873 "KMB_MeasureBlock2: curve is added twice"
   // if a profile has been created it will be installed async. to the IEC task
   // so it may happen that installation of profile has not been finished. 
   // we have to repeat here until Status different to "not connected" 
   RETURN; 
END_IF;      

curve.VariableY := "Mold1.sv_bOpenActive";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Injection1.sv_bPlastActive";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Injection1.sv_bInjectionActive";
curveStatus := abMeasure.AddCurve(curve); 

(* add variables 4 .. 6 *)
IF sv_NumberOfDevices[cCompEnergyMeter] > 0 THEN
    // Energy meter available -> Use total power calibrated
    curve.VariableY := "system.sv_rTotalPowerCalibrated";
ELSE
    curve.VariableY := "system.sv_rTotalPower"; 
END_IF;
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "system.sv_rHeatingPower";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "system.sv_rMotorPower";
curveStatus := abMeasure.AddCurve(curve); 


(* init reftos *)
mpiShotCounter := GET_SYNC_REFTO("system.sv_iShotCounterAct", t#0s, s);     
mpdCycleTime := GET_SYNC_REFTO("system.sv_dCycleTime", t#0s, s);                                 

mpDummy := @sv_OperationMode;     // FIXME: workaround for CR_0041252
mpOperationMode := mpDummy;


STOP_PROCESS_ALGORITHM();

   



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pManual ON TaskInject(1) WITH mpOperationMode^


VAR
 status : KMB_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_OperationMode < nHalfAutomatic) THEN
    IF (mbMeasureStarted) THEN 
        status := abMeasure.StopMeasure();    
        mbMeasureStarted := FALSE; 
    END_IF;

    mbCycleStarted := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pUpdate ON TaskInject(2) WITH mpiShotCounter^


VAR
 sampleTime : TIME;
 iCycleTimeSec : DINT;
 status : KMB_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

status := abMeasure.StopMeasure();
mbCycleStarted := FALSE;
mbMeasureStarted := FALSE; 

// calculate new samplerate, same algorithm like KVB. 

(* trunc act. cycletime to sec *)
iCycleTimeSec := LINT_TO_DINT(TIME_TO_LINT(mpdCycleTime^) / 1000000);

(* calc. new measure time *)
iCycleTimeSec := iCycleTimeSec + (iCycleTimeSec MOD 2) + 2;

(* calc. and set sample rate *)
sampleTime := LINT_TO_TIME(DINT_TO_LINT(iCycleTimeSec) * 1000000 / DINT_TO_LINT(mProfileData.ElementCount));
status := abMeasure.SetMeasureTime(sampleTime);




    



;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaStartMeasure ON TaskInject WITH evNewCycleStarted


VAR
 status : KMB_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((NOT mbCycleStarted) AND (sv_OperationMode >= nHalfAutomatic)) THEN
    mbCycleStarted := TRUE;
    IF (NOT sv_bEnergyCycleHoldRun) THEN
       status := abMeasure.StartMeasure(0);
       mbMeasureStarted := TRUE; 
    END_IF;
END_IF;    


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 131 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(9)cCompMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)101 @RT(14)Component Mold 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cCompEnergyMeter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)157 @RT(22)Component Energy meter 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(21)ABRecorderEnergyCycle @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
14 
@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bEnergyCycleHoldRun @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)Cyclic energy chart hold / run @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)mpdCycleTime @RT(0) @T @T @REFTO 0 @T @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)abMeasure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)KMB_MeasureBlock2 @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mProfileData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KMB_CreateProfileData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(169)(ProfileName:='ChartEnergyCycle',Type:=KMB_ProfileKind_PDSC,ElementCount:=1000,DataPath:='/protocol/datalogger/',CfgPath:='/workspace/data/ms_config/',ThreadPriority:=6) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mpiShotCounter @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mpOperationMode @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mpDummy @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbCycleStarted @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mbMeasureStarted @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)evNewCycleStarted @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tevCycleStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(10)fStartInit @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(6)status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)KMB_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)curveStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMB_CurveResult @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)curve @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)KMB_Curve @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bCreated @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(7)pManual @STRUCTURED_TEXT 
@RT(0) @RT(16)mpOperationMode^ @RT(13)TaskInject(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)KMB_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(7)pUpdate @STRUCTURED_TEXT 
@RT(0) @RT(15)mpiShotCounter^ @RT(13)TaskInject(2) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(10)sampleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)iCycleTimeSec @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)KMB_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(15)evaStartMeasure @STRUCTURED_TEXT 
@RT(0) @RT(17)evNewCycleStarted @RT(10)TaskInject @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)KMB_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fStartInit := FALSE; //suppress warning about unused formal parameter
START_PROCESS_ALGORITHM(paInit);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(65)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// create and init profile 'ChartEnergyCycle' of type Mic / 1000  elements 
IF (NOT bCreated) THEN
   // create and configure profile for 10 ms cyclic measure
   status := abMeasure.CreateProfile(mProfileData);
   status := abMeasure.DisableProfileFlashPersistence(); 
   status := abMeasure.DisableAutoSaveConfig(); 
   status := abMeasure.SetMeasureTime(T#10ms);
   bCreated := TRUE;
END_IF;

(* add variables 0 .. 3: movement states *)
curve.VariableY := "Mold1.sv_bCloseActive";
curveStatus := abMeasure.AddCurve(curve); 

IF (curveStatus.Status = KMB_Status_Not_Connected) THEN
   // see iec library doc and CR_0053873 "KMB_MeasureBlock2: curve is added twice"
   // if a profile has been created it will be installed async. to the IEC task
   // so it may happen that installation of profile has not been finished. 
   // we have to repeat here until Status different to "not connected" 
   RETURN; 
END_IF;      

curve.VariableY := "Mold1.sv_bOpenActive";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Injection1.sv_bPlastActive";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Injection1.sv_bInjectionActive";
curveStatus := abMeasure.AddCurve(curve); 

(* add variables 4 .. 6 *)
IF sv_NumberOfDevices[cCompEnergyMeter] > 0 THEN
    // Energy meter available -> Use total power calibrated
    curve.VariableY := "system.sv_rTotalPowerCalibrated";
ELSE
    curve.VariableY := "system.sv_rTotalPower"; 
END_IF;
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "system.sv_rHeatingPower";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "system.sv_rMotorPower";
curveStatus := abMeasure.AddCurve(curve); 


(* init reftos *)
mpiShotCounter := GET_SYNC_REFTO("system.sv_iShotCounterAct", t#0s, s);     
mpdCycleTime := GET_SYNC_REFTO("system.sv_dCycleTime", t#0s, s);                                 

mpDummy := @sv_OperationMode;     // FIXME: workaround for CR_0041252
mpOperationMode := mpDummy;


STOP_PROCESS_ALGORITHM();

   


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_OperationMode < nHalfAutomatic) THEN
    IF (mbMeasureStarted) THEN 
        status := abMeasure.StopMeasure();    
        mbMeasureStarted := FALSE; 
    END_IF;

    mbCycleStarted := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(27)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

status := abMeasure.StopMeasure();
mbCycleStarted := FALSE;
mbMeasureStarted := FALSE; 

// calculate new samplerate, same algorithm like KVB. 

(* trunc act. cycletime to sec *)
iCycleTimeSec := LINT_TO_DINT(TIME_TO_LINT(mpdCycleTime^) / 1000000);

(* calc. new measure time *)
iCycleTimeSec := iCycleTimeSec + (iCycleTimeSec MOD 2) + 2;

(* calc. and set sample rate *)
sampleTime := LINT_TO_TIME(DINT_TO_LINT(iCycleTimeSec) * 1000000 / DINT_TO_LINT(mProfileData.ElementCount));
status := abMeasure.SetMeasureTime(sampleTime);




    


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((NOT mbCycleStarted) AND (sv_OperationMode >= nHalfAutomatic)) THEN
    mbCycleStarted := TRUE;
    IF (NOT sv_bEnergyCycleHoldRun) THEN
       status := abMeasure.StartMeasure(0);
       mbMeasureStarted := TRUE; 
    END_IF;
END_IF;    

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
