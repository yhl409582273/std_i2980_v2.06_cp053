(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


*)

IMPORT_OVER_LISTFILE
 START_PROCESS_ALGORITHM
, STOP_PROCESS_ALGORITHM
, GET_SYNC_REFTO
, cCompMold
, KMB_MeasureBlock2
, KMB_Status
, KMB_CurveResult
, KMB_Curve
, KMB_CreateProfileData

END_IMPORT

ALGORITHM_BLOCK ABRecorderDriveTemp #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 TaskVis : TASK;
END_OBJECT

VAR
 abMeasure : KMB_MeasureBlock2;
END_VAR

FUNCTION fStartInit : BOOL
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fStartInit := FALSE; //suppress warning about unused formal parameter
START_PROCESS_ALGORITHM(paInit);


;#END_EDIT_BLOCK END_FUNCTION

PROCESS_ALGORITHM paInit ON TaskVis


VAR
 status : KMB_Status;
 curveStatus : KMB_CurveResult;
 curve : KMB_Curve;
 bCreated : BOOL;
 profileData : KMB_CreateProfileData := (ProfileName:='ChartDriveTemp',Type:=KMB_ProfileKind_PDP,ElementCount:=18000,DataPath:='/protocol/datalogger/',CfgPath:='/workspace/data/ms_config/',ThreadPriority:=26);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// create and init profile 'ChartDriveTemp' of type PDP / 18000  elements 
IF (NOT bCreated) THEN
   // create and configure profile for 100 ms cyclic measure
   status := abMeasure.CreateProfile(profileData);
   status := abMeasure.DisableProfileFlashPersistence(); 
   status := abMeasure.DisableAutoSaveConfig(); 
   status := abMeasure.SetMeasureTime(T#100ms);
   bCreated := TRUE;
END_IF;


(* add variable 0: PDP Time*)
curve.VariableY := "PDP1.sv_PDPTime";
curveStatus := abMeasure.AddCurve(curve); 

IF (curveStatus.Status = KMB_Status_Not_Connected) THEN
   // see iec library doc and CR_0053873 "KMB_MeasureBlock2: curve is added twice"
   // if a profile has been created it will be installed async. to the IEC task
   // so it may happen that installation of profile has not been finished. 
   // we have to repeat here until Status different to "not connected" 
   RETURN; 
END_IF;      
                

(* add variables master 1 .. 2*)
curve.VariableY := "Pump1.sv_rMotorTempMaster";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Pump1.sv_iAmplifierTempMaster";
curveStatus := abMeasure.AddCurve(curve); 

(* add optional variables slave 1: 3 .. 4*)
curve.VariableY := "Pump1.sv_rMotorTempSlave1";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Pump1.sv_iAmplifierTempSlave1";
curveStatus := abMeasure.AddCurve(curve); 

(* add optional variables slave 2: 5 .. 6*)
curve.VariableY := "Pump1.sv_rMotorTempSlave2";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Pump1.sv_iAmplifierTempSlave2";
curveStatus := abMeasure.AddCurve(curve); 
          
status := abMeasure.StartMeasure(0);
                        
STOP_PROCESS_ALGORITHM();

   



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 131 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(9)cCompMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)101 @RT(14)Component Mold 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABRecorderDriveTemp @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)abMeasure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)KMB_MeasureBlock2 @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(10)fStartInit @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(6)status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)KMB_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)curveStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMB_CurveResult @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)curve @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)KMB_Curve @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bCreated @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)profileData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KMB_CreateProfileData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(168)(ProfileName:='ChartDriveTemp',Type:=KMB_ProfileKind_PDP,ElementCount:=18000,DataPath:='/protocol/datalogger/',CfgPath:='/workspace/data/ms_config/',ThreadPriority:=26) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fStartInit := FALSE; //suppress warning about unused formal parameter
START_PROCESS_ALGORITHM(paInit);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(57)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// create and init profile 'ChartDriveTemp' of type PDP / 18000  elements 
IF (NOT bCreated) THEN
   // create and configure profile for 100 ms cyclic measure
   status := abMeasure.CreateProfile(profileData);
   status := abMeasure.DisableProfileFlashPersistence(); 
   status := abMeasure.DisableAutoSaveConfig(); 
   status := abMeasure.SetMeasureTime(T#100ms);
   bCreated := TRUE;
END_IF;


(* add variable 0: PDP Time*)
curve.VariableY := "PDP1.sv_PDPTime";
curveStatus := abMeasure.AddCurve(curve); 

IF (curveStatus.Status = KMB_Status_Not_Connected) THEN
   // see iec library doc and CR_0053873 "KMB_MeasureBlock2: curve is added twice"
   // if a profile has been created it will be installed async. to the IEC task
   // so it may happen that installation of profile has not been finished. 
   // we have to repeat here until Status different to "not connected" 
   RETURN; 
END_IF;      
                

(* add variables master 1 .. 2*)
curve.VariableY := "Pump1.sv_rMotorTempMaster";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Pump1.sv_iAmplifierTempMaster";
curveStatus := abMeasure.AddCurve(curve); 

(* add optional variables slave 1: 3 .. 4*)
curve.VariableY := "Pump1.sv_rMotorTempSlave1";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Pump1.sv_iAmplifierTempSlave1";
curveStatus := abMeasure.AddCurve(curve); 

(* add optional variables slave 2: 5 .. 6*)
curve.VariableY := "Pump1.sv_rMotorTempSlave2";
curveStatus := abMeasure.AddCurve(curve); 

curve.VariableY := "Pump1.sv_iAmplifierTempSlave2";
curveStatus := abMeasure.AddCurve(curve); 
          
status := abMeasure.StartMeasure(0);
                        
STOP_PROCESS_ALGORITHM();

   


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
