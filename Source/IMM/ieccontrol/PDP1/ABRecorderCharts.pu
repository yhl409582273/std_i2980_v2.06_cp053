(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


*)

IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, cSubOpSpeedpumpMaster
, cCompEnergyMeter
, ABRecorderPQ
, ABRecorderDriveTemp
, ABRecorderEnergyShot
, ABRecorderEnergyCycle
, KSYS_Status
, tCompId

END_IMPORT

ALGORITHM_BLOCK ABRecorderCharts #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 TaskMid : TASK;
END_OBJECT

VAR
 abRecorderPQ : ABRecorderPQ;
 abRecorderDriveTemp : ABRecorderDriveTemp;
 abRecorderEnergyShot : ABRecorderEnergyShot;
 abRecorderEnergyCycle : ABRecorderEnergyCycle;
END_VAR

PROCESS_ALGORITHM paInit ON TaskMid AUTOSTART


VAR
 pOption : REFTO DWORD;
 b : BOOL;
 bIsSpeedPump : BOOL;
 s : KSYS_Status;
 pIsKvb : REFTO DINT;
 pEnergyMeterCompId : REFTO tCompId;
 bHasEnergyMeter : BOOL;
 pUsedServoDrives : REFTO DWORD;
 bHasServoDrives : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// kvb system? -> don't start recorder
pIsKvb := GET_SYNC_REFTO('KVB.sv_MaskID', T#0s, s);
IF (s = KSYS_Status_OK) THEN
    STOP_PROCESS_ALGORITHM();
    RETURN; 
END_IF;

pOption := GET_SYNC_REFTO('Pump1.sv_Options', T#0s, s);
        
// any speedpump configuration?
bIsSpeedPump := (s = KSYS_Status_OK) 
   AND ((pOption^ AND cSubOpSpeedpumpMaster) = cSubOpSpeedpumpMaster);
   
IF (bIsSpeedPump) THEN
    b := abRecorderPQ.fStartInit();
    b := abRecorderDriveTemp.fStartInit();   
END_IF;

// has servo drives?
pUsedServoDrives := GET_SYNC_REFTO('ServoDrives1.sv_ServoDriveCentral.iUsedDrives', T#0s, s);
bHasServoDrives := (s = KSYS_Status_OK);

IF (bHasServoDrives) THEN
    b := abRecorderEnergyCycle.fStartInit();
END_IF;

// has energy meter?
pEnergyMeterCompId := GET_SYNC_REFTO('EnergyMeter1.sv_DeviceId.CompId', T#0s, s);
bHasEnergyMeter := (s = KSYS_Status_OK);

IF (bHasServoDrives OR bHasEnergyMeter) THEN
    b := abRecorderEnergyShot.fStartInit();
END_IF;

STOP_PROCESS_ALGORITHM();



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 131 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(21)cSubOpSpeedpumpMaster @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(6)16#100 @RT(17)Speed pump Master 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cCompEnergyMeter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)157 @RT(22)Component Energy meter 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABRecorderCharts @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(7)TaskMid @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)abRecorderPQ @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)ABRecorderPQ @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)abRecorderDriveTemp @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)ABRecorderDriveTemp @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)abRecorderEnergyShot @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)ABRecorderEnergyShot @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)abRecorderEnergyCycle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)ABRecorderEnergyCycle @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

1 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(7)pOption @RT(0) @T @T @REFTO 0 @T @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)bIsSpeedPump @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)pIsKvb @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)pEnergyMeterCompId @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(7)tCompId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bHasEnergyMeter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)pUsedServoDrives @RT(0) @T @T @REFTO 0 @T @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bHasServoDrives @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(42)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// kvb system? -> don't start recorder
pIsKvb := GET_SYNC_REFTO('KVB.sv_MaskID', T#0s, s);
IF (s = KSYS_Status_OK) THEN
    STOP_PROCESS_ALGORITHM();
    RETURN; 
END_IF;

pOption := GET_SYNC_REFTO('Pump1.sv_Options', T#0s, s);
        
// any speedpump configuration?
bIsSpeedPump := (s = KSYS_Status_OK) 
   AND ((pOption^ AND cSubOpSpeedpumpMaster) = cSubOpSpeedpumpMaster);
   
IF (bIsSpeedPump) THEN
    b := abRecorderPQ.fStartInit();
    b := abRecorderDriveTemp.fStartInit();   
END_IF;

// has servo drives?
pUsedServoDrives := GET_SYNC_REFTO('ServoDrives1.sv_ServoDriveCentral.iUsedDrives', T#0s, s);
bHasServoDrives := (s = KSYS_Status_OK);

IF (bHasServoDrives) THEN
    b := abRecorderEnergyCycle.fStartInit();
END_IF;

// has energy meter?
pEnergyMeterCompId := GET_SYNC_REFTO('EnergyMeter1.sv_DeviceId.CompId', T#0s, s);
bHasEnergyMeter := (s = KSYS_Status_OK);

IF (bHasServoDrives OR bHasEnergyMeter) THEN
    b := abRecorderEnergyShot.fStartInit();
END_IF;

STOP_PROCESS_ALGORITHM();


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
