(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

AB for pre - shotcounter movement
- register movement for increasing pre shot counter
- increase sv_iPreShotCounter if start event is received (from FBAutocycle SFC)
- if ODC functionunit is available, the preshot counter is increased automatically after
  mold open movement is started
*)

IMPORT_OVER_LISTFILE
 cCompODC
, tsMoveData
, tevStart
, tevStartedStopped
, tsDeviceId
, tnOperationMode
, tevMovementState
, tyNumberOfDevices
, ABMovementRegister
, tevStartData
, tevStartedStoppedData
, tevMovementStateData

END_IMPORT

ALGORITHM_BLOCK ABPreShotCounter #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitStart : BOOL;
 sv_MovePreShotCounter : tsMoveData;
 sv_DeviceId : tsDeviceId;
 sv_iPreShotCounter : DINT (* shot counter for PDS (increased before ejector movement) *);
 sv_OperationMode : tnOperationMode;
 sv_NumberOfDevices : tyNumberOfDevices;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 EV_Task_3 : TASK;
 evStart : tevStart;
 evStartedStopped : tevStartedStopped;
 evMovementState : tevMovementState;
END_OBJECT

VAR
 mevMovementState : tevMovementState;
 mevStart : tevStart;
END_VAR

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart


VAR
 abMovePreShotCounterRegister : ABMovementRegister;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check if ODC - function unit is available
IF sv_NumberOfDevices[cCompODC] = 1 THEN
   //listen to movement state events
   mevMovementState := evMovementState;
ELSE
   //register movement for pre shotcounter increasing 
   //this is necessary because autocycle SFC sends a start event for this movement 
   abMovePreShotCounterRegister.aRegister(@sv_MovePreShotCounter);
   
   //listen to start events
   mevStart := evStart;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aIncrease

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//increase pre shot counter
IF sv_OperationMode >= nHalfAutomatic THEN
    sv_iPreShotCounter := sv_iPreShotCounter + 1;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaStart ON EV_Task_3 WITH mevStart


VAR_INPUT
 evStartData : tevStartData;
END_VAR

VAR
 evStartedStoppedData : tevStartedStoppedData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId <> sv_DeviceId THEN
   RETURN;
END_IF;    
    
IF evStartData.MoveDir = sv_MovePreShotCounter.MoveDir AND evStartData.MoveId = sv_MovePreShotCounter.MoveId THEN
   // The evStartedStopped events are necessary because of the ODC,
   // which keeps a list of running movements.
   // Elements are added before a evStart is sent
   // and removed on evStartedStopped nStopped/nStartNotAllowed.
   // When no evStartedStopped are sent the shotcounter increase movements are never removed again
   
   // send started-Message
   evStartedStoppedData.DeviceId := sv_DeviceId;
   evStartedStoppedData.MoveId := sv_MovePreShotCounter.MoveId;
   evStartedStoppedData.MoveDir := sv_MovePreShotCounter.MoveDir;
   evStartedStoppedData.State := nStarted;
   SET_EVENT(evStartedStopped,evStartedStoppedData);

   aIncrease();
   
   // send stopped-Message
   evStartedStoppedData.State := nStopped;
   SET_EVENT(evStartedStopped,evStartedStoppedData);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaMovementState ON EV_Task_3 WITH mevMovementState


VAR_INPUT
 evMovementStateData : tevMovementStateData;
END_VAR

VAR
 DeviceIdMold : tsDeviceId := (CompId:=cCompMold,IndexId:=1);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evMovementStateData.State = nInactive THEN
   RETURN;
END_IF;

IF evMovementStateData.DeviceId = DeviceIdMold AND evMovementStateData.MoveId = cMoveBwd THEN
   //mold open started -> increase pre shotcounter
   aIncrease();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

AB for pre - shotcounter movement
- register movement for increasing pre shot counter
- increase sv_iPreShotCounter if start event is received (from FBAutocycle SFC)
- if ODC functionunit is available, the preshot counter is increased automatically after
  mold open movement is started
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(8)cCompODC @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)136 @RT(13)Component ODC 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABPreShotCounter @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_MovePreShotCounter @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)evStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)evStartedStopped @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevStartedStopped @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iPreShotCounter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(56)shot counter for PDS (increased before ejector movement) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)mevMovementState @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(16)tevMovementState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)evMovementState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tevMovementState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)mevStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(28)abMovePreShotCounterRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)ABMovementRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aIncrease @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(8)evaStart @STRUCTURED_TEXT 
@RT(0) @RT(8)mevStart @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(11)evStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tevStartData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)evStartedStoppedData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tevStartedStoppedData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(16)evaMovementState @STRUCTURED_TEXT 
@RT(0) @RT(16)mevMovementState @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(19)evMovementStateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tevMovementStateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)DeviceIdMold @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(30)(CompId:=cCompMold,IndexId:=1) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check if ODC - function unit is available
IF sv_NumberOfDevices[cCompODC] = 1 THEN
   //listen to movement state events
   mevMovementState := evMovementState;
ELSE
   //register movement for pre shotcounter increasing 
   //this is necessary because autocycle SFC sends a start event for this movement 
   abMovePreShotCounterRegister.aRegister(@sv_MovePreShotCounter);
   
   //listen to start events
   mevStart := evStart;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//increase pre shot counter
IF sv_OperationMode >= nHalfAutomatic THEN
    sv_iPreShotCounter := sv_iPreShotCounter + 1;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId <> sv_DeviceId THEN
   RETURN;
END_IF;    
    
IF evStartData.MoveDir = sv_MovePreShotCounter.MoveDir AND evStartData.MoveId = sv_MovePreShotCounter.MoveId THEN
   // The evStartedStopped events are necessary because of the ODC,
   // which keeps a list of running movements.
   // Elements are added before a evStart is sent
   // and removed on evStartedStopped nStopped/nStartNotAllowed.
   // When no evStartedStopped are sent the shotcounter increase movements are never removed again
   
   // send started-Message
   evStartedStoppedData.DeviceId := sv_DeviceId;
   evStartedStoppedData.MoveId := sv_MovePreShotCounter.MoveId;
   evStartedStoppedData.MoveDir := sv_MovePreShotCounter.MoveDir;
   evStartedStoppedData.State := nStarted;
   SET_EVENT(evStartedStopped,evStartedStoppedData);

   aIncrease();
   
   // send stopped-Message
   evStartedStoppedData.State := nStopped;
   SET_EVENT(evStartedStopped,evStartedStoppedData);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evMovementStateData.State = nInactive THEN
   RETURN;
END_IF;

IF evMovementStateData.DeviceId = DeviceIdMold AND evMovementStateData.MoveId = cMoveBwd THEN
   //mold open started -> increase pre shotcounter
   aIncrease();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
