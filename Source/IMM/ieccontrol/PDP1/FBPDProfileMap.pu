IMPORT_OVER_LISTFILE
 KCAT_GetNext
, KCAT_GetValue
, tySpcSettingsArray
, tsPdProfileMap
, KCAT_HandleData
, KCAT_TypeData
, KCAT_NameData
, KCAT_Status

END_IMPORT

FUNCTION_BLOCK FBPDProfileMap #DUMMY_EDIT_BLOCK

VAR_INPUT
 sProfileName : STRING(64);
 pProfileSettings : REFTO tySpcSettingsArray;
END_VAR

VAR_OUTPUT
 ProfileMap : tsPdProfileMap;
END_VAR

VAR_TEMP
 I : USINT;
END_VAR

VAR
 CatHandle : KCAT_HandleData;
 CatType : KCAT_TypeData;
 CatVarNode : KCAT_HandleData;
 CatName : KCAT_NameData;
 Status : KCAT_Status;
 ProfileMapEmpty : tsPdProfileMap := (ProfileIndex:=0);
 sCatName : STRING(255);
 sCatVarName : STRING(255);
 sCatValue : STRING(255);
 iPos : INT;
 iVarId : USINT;
 sVarId : STRING(5);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* This function block calculates the variable mapping between the
 * single event structure from the profile error event and the
 * error reaction array given in pProfileSettings *)

ProfileMap := ProfileMapEmpty;
ProfileMap.ProfileIndex := 0;

IF (sProfileName = '' OR pProfileSettings = EMPTY) THEN          
   RETURN;
END_IF;

sCatName := CONCAT('MS.Profile.', sProfileName);
sCatName := CONCAT(sCatName, '.Param');

CatHandle := KCAT_GetHandle(sCatName);
IF CatHandle.Status <> KCAT_Status_OK THEN
   RETURN;    
END_IF;

CatHandle := KCAT_GetFirst(CatHandle.Handle);   
sCatName := CONCAT(sCatName, '.ProfileIndex');
            
WHILE(CatHandle.Status = KCAT_Status_OK) DO     
    
   CatName := KCAT_GetName(CatHandle.Handle);    
   CatType := KCAT_GetType(CatHandle.Handle);
    
   IF (CatName.Name = sCatName) THEN
      (* MS.Profile.<name>.Param.ProfileIndex *)
      Status := KCAT_GetValue(CatHandle.Handle, ProfileMap.ProfileIndex);
   ELSIF (CatType.Type = KCAT_Type_None) THEN    
     (* MS.Profile.<name>.Param.Var_<id>.VarName *)
      sCatVarName := CONCAT(CatName.Name, '.VarName'); 
      CatVarNode := KCAT_GetHandle(sCatVarName);
      IF (CatVarNode.Status = KCAT_Status_OK) THEN
         (* Get variable name *)
         Status := KCAT_GetValue(CatVarNode.Handle, sCatValue);
         (* Find variable ID *)
         iPos := FIND(CatName.Name, '.Var_');
         IF (iPos > 0) THEN
            sVarId := RIGHT(CatName.Name, LEN(CatName.Name) - (iPos + 4));
            iVarId := STRING_TO_USINT(sVarId);
            IF (iVarId >= GET_LOW_BOUND(ProfileMap.Map) AND iVarId <= GET_HIGH_BOUND(ProfileMap.Map)) THEN
               FOR I := GET_LOW_BOUND(pProfileSettings^) TO GET_HIGH_BOUND(pProfileSettings^) DO
                  (* Search for variable name in PDP settings *)
                  IF (pProfileSettings^[I].Variable = sCatValue) THEN
                     ProfileMap.Map[iVarId] := I;
                  END_IF;
               END_FOR;
            END_IF;
         END_IF; 
         
      END_IF;
   END_IF;
   CatHandle := KCAT_GetNext(CatHandle.Handle);
    
END_WHILE;


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 145 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(12)KCAT_GetNext @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_GetValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(14)FBPDProfileMap @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(12)sProfileName @RT(0) @T @F @DT @RT(10)STRING(64) @RT(0) @T @T @STRING 0 @F @RT(2)64 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)pProfileSettings @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(18)tySpcSettingsArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)ProfileMap @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsPdProfileMap @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)CatHandle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)CatType @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCAT_TypeData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)CatVarNode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)CatName @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCAT_NameData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)ProfileMapEmpty @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsPdProfileMap @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(17)(ProfileIndex:=0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sCatName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sCatVarName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sCatValue @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)iVarId @RT(0) @T @F @DT @RT(5)USINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sVarId @RT(0) @T @F @DT @RT(9)STRING(5) @RT(0) @T @T @STRING 0 @F @RT(1)5 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)I @RT(0) @T @F @DT @RT(5)USINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(63)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* This function block calculates the variable mapping between the
 * single event structure from the profile error event and the
 * error reaction array given in pProfileSettings *)

ProfileMap := ProfileMapEmpty;
ProfileMap.ProfileIndex := 0;

IF (sProfileName = '' OR pProfileSettings = EMPTY) THEN          
   RETURN;
END_IF;

sCatName := CONCAT('MS.Profile.', sProfileName);
sCatName := CONCAT(sCatName, '.Param');

CatHandle := KCAT_GetHandle(sCatName);
IF CatHandle.Status <> KCAT_Status_OK THEN
   RETURN;    
END_IF;

CatHandle := KCAT_GetFirst(CatHandle.Handle);   
sCatName := CONCAT(sCatName, '.ProfileIndex');
            
WHILE(CatHandle.Status = KCAT_Status_OK) DO     
    
   CatName := KCAT_GetName(CatHandle.Handle);    
   CatType := KCAT_GetType(CatHandle.Handle);
    
   IF (CatName.Name = sCatName) THEN
      (* MS.Profile.<name>.Param.ProfileIndex *)
      Status := KCAT_GetValue(CatHandle.Handle, ProfileMap.ProfileIndex);
   ELSIF (CatType.Type = KCAT_Type_None) THEN    
     (* MS.Profile.<name>.Param.Var_<id>.VarName *)
      sCatVarName := CONCAT(CatName.Name, '.VarName'); 
      CatVarNode := KCAT_GetHandle(sCatVarName);
      IF (CatVarNode.Status = KCAT_Status_OK) THEN
         (* Get variable name *)
         Status := KCAT_GetValue(CatVarNode.Handle, sCatValue);
         (* Find variable ID *)
         iPos := FIND(CatName.Name, '.Var_');
         IF (iPos > 0) THEN
            sVarId := RIGHT(CatName.Name, LEN(CatName.Name) - (iPos + 4));
            iVarId := STRING_TO_USINT(sVarId);
            IF (iVarId >= GET_LOW_BOUND(ProfileMap.Map) AND iVarId <= GET_HIGH_BOUND(ProfileMap.Map)) THEN
               FOR I := GET_LOW_BOUND(pProfileSettings^) TO GET_HIGH_BOUND(pProfileSettings^) DO
                  (* Search for variable name in PDP settings *)
                  IF (pProfileSettings^[I].Variable = sCatValue) THEN
                     ProfileMap.Map[iVarId] := I;
                  END_IF;
               END_FOR;
            END_IF;
         END_IF; 
         
      END_IF;
   END_IF;
   CatHandle := KCAT_GetNext(CatHandle.Handle);
    
END_WHILE;

@END_Body 

@END_Contents 
