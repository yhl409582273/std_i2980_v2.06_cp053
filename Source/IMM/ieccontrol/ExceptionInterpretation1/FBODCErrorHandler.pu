IMPORT_OVER_LISTFILE
 tyAlarmParams
, tySubID

END_IMPORT

FUNCTION_BLOCK FBODCErrorHandler #DUMMY_EDIT_BLOCK

VAR_INPUT
 iErrorKind : INT;
 iComponentNr : DINT;
 iErrorNr : DINT;
 AlarmParameters : tyAlarmParams;
END_VAR

VAR_IN_OUT
 SubID : tySubID;
END_VAR

VAR_OUTPUT
 bOpenWatchdog : BOOL;
 bSetAlarm : BOOL;
 AlarmID : ALARM;
 sParam1 : STRING(255);
 sParam2 : STRING(255);
END_VAR

SYSTEM_OBJECT
 erODCBuilderGeneralError : ALARM;
 erODCBuilderNoSignature : ALARM;
 erODCBuilderFileformat : ALARM;
 erODCBuilderInvalidSignature : ALARM;
 erODCBuilderInsertPosNotAvail : ALARM;
 erODCBuilderInsertBefNotAllow : ALARM;
 erODCBuilderInsertAfterNotAllow : ALARM;
 erODCBuilderMoveNotAvailable : ALARM;
 erODCBuilderError : ALARM;
 erODCBuilderSyntaxError : ALARM;
 erODCBuilderWarning : ALARM;
 erODCBuilderWarningFile : ALARM;
 erODCBuilderMultipleBaseSequ : ALARM;
 erODCBuilderPriorityCollision : ALARM;
 erODCBuilderBaseSeqNotFound : ALARM;
 erODCBuilderInstancePriority : ALARM;
 erODCBuilderParserException : ALARM;
 erODCCouldNotCreateLogFile : ALARM;
 erODCBuilderFirstMovement : ALARM;
 erODCBuilderLastMovement : ALARM;
 erODCBuilderSelectorVarValue : ALARM;
 erODCBuilderIllegalDominantMove : ALARM;
 erODCBuilderInsertParallel : ALARM;
 erODCBuilderInvalidCreateSequ : ALARM;
 erODCBuilderElementAlreadyUsed : ALARM;
 erODCBuilderArrayTooSmall : ALARM;
 erODCBuilderInternalError : ALARM;
 erODCMLFExpireTime : ALARM;
END_OBJECT

VAR
 ErrorCounter : DINT (* for making sure errors get a unique numer *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* ERROR *********************************************************************************)    
IF (iErrorKind = cErrorKind_Error) THEN
   CASE iComponentNr OF
      6750:   //ODC
         bSetAlarm := TRUE;
         bOpenWatchdog := FALSE;
         SubID[3] := ErrorCounter;

         CASE iErrorNr OF
            1: (* "BaseSequenceFile does not exist in %1" *)
               AlarmID := erODCBuilderBaseSeqNotFound;
               sParam1 := AlarmParameters[1];
            
            2: (* "ODCBuilder Parser Syntax Error: %1 - file %2 line %3 col %4" *)
               AlarmID := erODCBuilderSyntaxError;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            3: (* "ODCBuilder Parser Error: %1 - file %2 line %3 col %4" *)
               AlarmID := erODCBuilderError;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            (* 4, 5: WARNING *)
            
            6: (* "ODCBuilder Parser Exception: %1" *)
               AlarmID := erODCBuilderParserException;
               sParam1 := AlarmParameters[1];
               bOpenWatchdog := TRUE;
            
            (* 100: WARNING *)
            
            101: (* "ODCBuilder: fileformat version %1 of file %2 not supported" *)
               AlarmID := erODCBuilderFileformat;
               sParam1 := CONCAT(AlarmParameters[1], '.', AlarmParameters[2]);
               sParam2 := AlarmParameters[3];
            
            102: (* "ODCBuilder: first movement in base sequence must be ODC.BeginSequence" *)
               AlarmID := erODCBuilderFirstMovement;
            
            103: (* "ODCBuilder: last movement in base sequence must be ODC.EndSequence" *)
               AlarmID := erODCBuilderLastMovement;
            
            (* 104 WARNING *)
            
            105: (* "ODCBuilder: File %1 has an invalid signature" *)
               AlarmID := erODCBuilderInvalidSignature;
               sParam1 := AlarmParameters[1];
            
            106: (* "ODCBuilder: BaseSequence is already defined - file %1" *)
               AlarmID := erODCBuilderMultipleBaseSequ;
               //alarm should only be displayed once, no matter how many base sequences are found
               SubID[3] := 0;
            
            110: (* "ODCBuilder: cannot get value for selector variable %1 in file %2" *)
               //check type of selector variable (for example REAL variables are not allowed)
               AlarmID := erODCBuilderSelectorVarValue;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            112: (* "ODCBuilder: movement %1 not available in movementlist" *)
               // movement to insert not found in sv_ODCMovements
               // sMoveId of the sv_MoveXxx is not set or it is different from the identifier used in the text file
               AlarmID := erODCBuilderMoveNotAvailable;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            113: (* "ODCBuilder: illegal dominant movement %1 in insert block %2" *)
               AlarmID := erODCBuilderIllegalDominantMove;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            114: (* "ODCBuilder: instance priority for movement %1 insert block %2 necessary" *)
               // several insert statements or instances of the same device try to insert at the same position with the same priority
               // Use ODC->Priority Check in Notepad++ to check for priority conflicts
               // Change the priority of the conflicting insert statement
               // Or in case there are several instances(eg. Core, AirValve, ...) add a instance priority (pInstancePrio^ in sv_MoveXxx) 
               AlarmID := erODCBuilderInstancePriority;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            115: (* "ODCBuilder: same insert and instance priority for 2 movements (priority collision)" *)
               AlarmID := erODCBuilderPriorityCollision;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            120: (* "ODCBuilder: insert position %1 for insert block %2 not found in sequence" *)
               // when %1 is not in base sequence but another file, most likely cause is a wrong priority.
               // %1 is not inserted yet when somebody else tries to use it as a insert position
               AlarmID := erODCBuilderInsertPosNotAvail;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            121: (* "ODCBuilder: insert of insert block %1 before ODC.BeginSequence not allowed" *)
               AlarmID := erODCBuilderInsertBefNotAllow;
               sParam1 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            123: (* "ODCBuilder: insert of insert block %1 after ODC.EndSequence not allowed" *)
               AlarmID := erODCBuilderInsertAfterNotAllow;
               sParam1 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            124: (* "ODCBuilder: invalid insert parallel at %1 of insert block %2" *)
               AlarmID := erODCBuilderInsertParallel;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            125: (* "ODCBuilder: sequence array (height %1 width %2) is to small (line %3 column %4)" *)
               AlarmID := erODCBuilderArrayTooSmall;
               SubID[1] := STRING_TO_DINT(AlarmParameters[1]);
               SubID[2] := STRING_TO_DINT(AlarmParameters[2]);
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            126: (* "ODCBuilder: invalid call of CreateSequence - init error %1 occured" *)
               AlarmID := erODCBuilderInvalidCreateSequ;
               sParam1 := AlarmParameters[1];
            
            127: (* "ODCBuilder: invalid call of CreateSequence - init error %1 occured" *)
               AlarmID := erODCBuilderElementAlreadyUsed;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            199: (* "ODCBuilder: internal error: %1" *)
               AlarmID := erODCBuilderInternalError;
               sParam1 := AlarmParameters[1];
            
            1000: (* "MLF: Firmware detected exceeding expire time" *)
               AlarmID := erODCMLFExpireTime;
             
         ELSE (* any other alarm *)
            AlarmID := erODCBuilderGeneralError;
            bOpenWatchdog := TRUE;
         
         END_CASE;
   END_CASE;
   (* WARNING *****************************************************************************)        
ELSIF (iErrorKind = cErrorKind_Warning) THEN
   bOpenWatchdog := FALSE;
   bSetAlarm := TRUE;
   
   CASE iComponentNr OF
      6750:   //ODC
         CASE iErrorNr OF
            4: (* "ODCBuilder Parser Warning: %1 - file %2 line %3 col %4" *)
               AlarmID := erODCBuilderWarningFile;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            5: (* "ODCBuilder Parser Warning: %1" *)
               AlarmID := erODCBuilderWarning;
               sParam1 := AlarmParameters[1];
               SubID[3] := ErrorCounter;
            
            100: (* "ODCBuilder cannot create logfile %1" *)
               AlarmID := erODCCouldNotCreateLogFile;
               sParam1 := AlarmParameters[1];
            
            104: (* "ODCBuilder: File %1 has no signature" *)
               AlarmID := erODCBuilderNoSignature;
               sParam1 := AlarmParameters[1];
               SubID[3] := ErrorCounter;              
         END_CASE;
   END_CASE;    
END_IF;
ErrorCounter := ErrorCounter + 1;


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(17)FBODCErrorHandler @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
39 
@Var @RT(10)iErrorKind @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)iComponentNr @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)iErrorNr @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)AlarmParameters @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tyAlarmParams @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)SubID @RT(0) @T @T @DERIVED 0 @F @RT(7)tySubID @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(13)bOpenWatchdog @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)bSetAlarm @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)AlarmID @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)sParam1 @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)sParam2 @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(24)erODCBuilderGeneralError @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(23)erODCBuilderNoSignature @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)erODCBuilderFileformat @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(28)erODCBuilderInvalidSignature @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(29)erODCBuilderInsertPosNotAvail @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(29)erODCBuilderInsertBefNotAllow @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(31)erODCBuilderInsertAfterNotAllow @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(28)erODCBuilderMoveNotAvailable @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)erODCBuilderError @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(23)erODCBuilderSyntaxError @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)erODCBuilderWarning @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(23)erODCBuilderWarningFile @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(28)erODCBuilderMultipleBaseSequ @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(29)erODCBuilderPriorityCollision @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(27)erODCBuilderBaseSeqNotFound @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(28)erODCBuilderInstancePriority @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)ErrorCounter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(41)for making sure errors get a unique numer @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)erODCBuilderParserException @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(26)erODCCouldNotCreateLogFile @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(25)erODCBuilderFirstMovement @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)erODCBuilderLastMovement @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(28)erODCBuilderSelectorVarValue @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(31)erODCBuilderIllegalDominantMove @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(26)erODCBuilderInsertParallel @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(29)erODCBuilderInvalidCreateSequ @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(30)erODCBuilderElementAlreadyUsed @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(25)erODCBuilderArrayTooSmall @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(25)erODCBuilderInternalError @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)erODCMLFExpireTime @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(177)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* ERROR *********************************************************************************)    
IF (iErrorKind = cErrorKind_Error) THEN
   CASE iComponentNr OF
      6750:   //ODC
         bSetAlarm := TRUE;
         bOpenWatchdog := FALSE;
         SubID[3] := ErrorCounter;

         CASE iErrorNr OF
            1: (* "BaseSequenceFile does not exist in %1" *)
               AlarmID := erODCBuilderBaseSeqNotFound;
               sParam1 := AlarmParameters[1];
            
            2: (* "ODCBuilder Parser Syntax Error: %1 - file %2 line %3 col %4" *)
               AlarmID := erODCBuilderSyntaxError;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            3: (* "ODCBuilder Parser Error: %1 - file %2 line %3 col %4" *)
               AlarmID := erODCBuilderError;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            (* 4, 5: WARNING *)
            
            6: (* "ODCBuilder Parser Exception: %1" *)
               AlarmID := erODCBuilderParserException;
               sParam1 := AlarmParameters[1];
               bOpenWatchdog := TRUE;
            
            (* 100: WARNING *)
            
            101: (* "ODCBuilder: fileformat version %1 of file %2 not supported" *)
               AlarmID := erODCBuilderFileformat;
               sParam1 := CONCAT(AlarmParameters[1], '.', AlarmParameters[2]);
               sParam2 := AlarmParameters[3];
            
            102: (* "ODCBuilder: first movement in base sequence must be ODC.BeginSequence" *)
               AlarmID := erODCBuilderFirstMovement;
            
            103: (* "ODCBuilder: last movement in base sequence must be ODC.EndSequence" *)
               AlarmID := erODCBuilderLastMovement;
            
            (* 104 WARNING *)
            
            105: (* "ODCBuilder: File %1 has an invalid signature" *)
               AlarmID := erODCBuilderInvalidSignature;
               sParam1 := AlarmParameters[1];
            
            106: (* "ODCBuilder: BaseSequence is already defined - file %1" *)
               AlarmID := erODCBuilderMultipleBaseSequ;
               //alarm should only be displayed once, no matter how many base sequences are found
               SubID[3] := 0;
            
            110: (* "ODCBuilder: cannot get value for selector variable %1 in file %2" *)
               //check type of selector variable (for example REAL variables are not allowed)
               AlarmID := erODCBuilderSelectorVarValue;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            112: (* "ODCBuilder: movement %1 not available in movementlist" *)
               // movement to insert not found in sv_ODCMovements
               // sMoveId of the sv_MoveXxx is not set or it is different from the identifier used in the text file
               AlarmID := erODCBuilderMoveNotAvailable;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            113: (* "ODCBuilder: illegal dominant movement %1 in insert block %2" *)
               AlarmID := erODCBuilderIllegalDominantMove;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            114: (* "ODCBuilder: instance priority for movement %1 insert block %2 necessary" *)
               // several insert statements or instances of the same device try to insert at the same position with the same priority
               // Use ODC->Priority Check in Notepad++ to check for priority conflicts
               // Change the priority of the conflicting insert statement
               // Or in case there are several instances(eg. Core, AirValve, ...) add a instance priority (pInstancePrio^ in sv_MoveXxx) 
               AlarmID := erODCBuilderInstancePriority;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            115: (* "ODCBuilder: same insert and instance priority for 2 movements (priority collision)" *)
               AlarmID := erODCBuilderPriorityCollision;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            120: (* "ODCBuilder: insert position %1 for insert block %2 not found in sequence" *)
               // when %1 is not in base sequence but another file, most likely cause is a wrong priority.
               // %1 is not inserted yet when somebody else tries to use it as a insert position
               AlarmID := erODCBuilderInsertPosNotAvail;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            121: (* "ODCBuilder: insert of insert block %1 before ODC.BeginSequence not allowed" *)
               AlarmID := erODCBuilderInsertBefNotAllow;
               sParam1 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            123: (* "ODCBuilder: insert of insert block %1 after ODC.EndSequence not allowed" *)
               AlarmID := erODCBuilderInsertAfterNotAllow;
               sParam1 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            124: (* "ODCBuilder: invalid insert parallel at %1 of insert block %2" *)
               AlarmID := erODCBuilderInsertParallel;
               sParam1 := AlarmParameters[1];
               sParam2 := CONCAT(AlarmParameters[2], ' ', AlarmParameters[3], '=', AlarmParameters[4]);
            
            125: (* "ODCBuilder: sequence array (height %1 width %2) is to small (line %3 column %4)" *)
               AlarmID := erODCBuilderArrayTooSmall;
               SubID[1] := STRING_TO_DINT(AlarmParameters[1]);
               SubID[2] := STRING_TO_DINT(AlarmParameters[2]);
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            126: (* "ODCBuilder: invalid call of CreateSequence - init error %1 occured" *)
               AlarmID := erODCBuilderInvalidCreateSequ;
               sParam1 := AlarmParameters[1];
            
            127: (* "ODCBuilder: invalid call of CreateSequence - init error %1 occured" *)
               AlarmID := erODCBuilderElementAlreadyUsed;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
            
            199: (* "ODCBuilder: internal error: %1" *)
               AlarmID := erODCBuilderInternalError;
               sParam1 := AlarmParameters[1];
            
            1000: (* "MLF: Firmware detected exceeding expire time" *)
               AlarmID := erODCMLFExpireTime;
             
         ELSE (* any other alarm *)
            AlarmID := erODCBuilderGeneralError;
            bOpenWatchdog := TRUE;
         
         END_CASE;
   END_CASE;
   (* WARNING *****************************************************************************)        
ELSIF (iErrorKind = cErrorKind_Warning) THEN
   bOpenWatchdog := FALSE;
   bSetAlarm := TRUE;
   
   CASE iComponentNr OF
      6750:   //ODC
         CASE iErrorNr OF
            4: (* "ODCBuilder Parser Warning: %1 - file %2 line %3 col %4" *)
               AlarmID := erODCBuilderWarningFile;
               sParam1 := AlarmParameters[1];
               sParam2 := AlarmParameters[2];
               SubID[3] := STRING_TO_DINT(AlarmParameters[3]);
               SubID[4] := STRING_TO_DINT(AlarmParameters[4]);
            
            5: (* "ODCBuilder Parser Warning: %1" *)
               AlarmID := erODCBuilderWarning;
               sParam1 := AlarmParameters[1];
               SubID[3] := ErrorCounter;
            
            100: (* "ODCBuilder cannot create logfile %1" *)
               AlarmID := erODCCouldNotCreateLogFile;
               sParam1 := AlarmParameters[1];
            
            104: (* "ODCBuilder: File %1 has no signature" *)
               AlarmID := erODCBuilderNoSignature;
               sParam1 := AlarmParameters[1];
               SubID[3] := ErrorCounter;              
         END_CASE;
   END_CASE;    
END_IF;
ErrorCounter := ErrorCounter + 1;

@END_Body 

@END_Contents 
