(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

polling of CPU Temperature
-> can be started and stopped
-> Alarm to finish cycle and stop if temperature limit is reached
-> temperature limit depends on cpu 

@FunctionID: CR_0034081

*)

IMPORT_OVER_LISTFILE
 GET_TEMP
, SET_ALARM
, RESET_ALARM
, KCAT_HandleData
, KCAT_Status
, KSYS_TempId
, KSYS_GetTemp_Data

END_IMPORT

ALGORITHM_BLOCK ABCPUTemperature #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 TaskSlow : TASK;
 erCPUTempHigh : ALARM;
END_OBJECT

VAR
 mbInit : BOOL;
 mbStart : BOOL;
 mrTemperatureLimit : REAL;
END_VAR

ALGORITHM aStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStart := TRUE; 
START_PROCESS_ALGORITHM(paRun)


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStop

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStart := FALSE; 



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskSlow AUTOSTART


VAR
 hdl : KCAT_HandleData;
 sPlatform : STRING(10);
 state : KCAT_Status;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get hardware platform
hdl := KCAT_GetHandle('IRT.Platform');
IF hdl.Status = KCAT_Status_OK THEN
   state := KCAT_GetValue(Handle := hdl.Handle, Buffer := sPlatform);
END_IF;

IF sPlatform = 'PPC' THEN
   mrTemperatureLimit := 83.0; //PPC
ELSIF sPlatform = 'x86' THEN
   mrTemperatureLimit := 115.0; //Intel
ELSE
   //unknown platform -> set trace and use lower temperature limit
   dummy := Print('!!! ABCPUTemperature - paInit: could not detect hardware platform !!!');
   mrTemperatureLimit := 83.0;
END_IF;

mbInit := TRUE; 
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskSlow


VAR
 TempID : KSYS_TempId := KSYS_TempID_MAB;
 TempData : KSYS_GetTemp_Data;
 iCycleRed : DINT;
 bAlarmSet : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF (NOT mbStart) THEN
    iCycleRed := 0; 
    STOP_PROCESS_ALGORITHM();
    RETURN;    
END_IF;

IF (NOT mbInit) THEN
    RETURN; 
END_IF;

IF ((iCycleRed MOD 64) = 0) THEN // about every 0,5 min
  TempData := GET_TEMP(TempID);   

  IF (TempData.Temp >= REAL_TO_DINT(mrTemperatureLimit)) THEN
        SET_ALARM(Name := erCPUTempHigh, Param1 := DINT_TO_STRING(TempData.Temp));  
        bAlarmSet := TRUE; 
  END_IF;
    
  IF (TempData.Temp < (REAL_TO_DINT(mrTemperatureLimit) - 1)) THEN
        IF bAlarmSet THEN
            RESET_ALARM(Name := erCPUTempHigh);          
            bAlarmSet := FALSE; 
        END_IF;
  END_IF;
    
END_IF;

iCycleRed := iCycleRed + 1; 



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 80 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

polling of CPU Temperature
-> can be started and stopped
-> Alarm to finish cycle and stop if temperature limit is reached
-> temperature limit depends on cpu 

@FunctionID: CR_0034081

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(8)GET_TEMP @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABCPUTemperature @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(6)mbInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mbStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)mrTemperatureLimit @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)erCPUTempHigh @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aStart @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aStop @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(3)hdl @RT(0) @T @T @DERIVED 0 @F @RT(15)KCAT_HandleData @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sPlatform @RT(0) @T @F @DT @RT(10)STRING(10) @RT(0) @T @T @STRING 0 @F @RT(2)10 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)state @RT(0) @T @T @DERIVED 0 @F @RT(11)KCAT_Status @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(6)TempID @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_TempId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(15)KSYS_TempID_MAB @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)TempData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)KSYS_GetTemp_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)iCycleRed @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bAlarmSet @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStart := TRUE; 
START_PROCESS_ALGORITHM(paRun)

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStart := FALSE; 


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get hardware platform
hdl := KCAT_GetHandle('IRT.Platform');
IF hdl.Status = KCAT_Status_OK THEN
   state := KCAT_GetValue(Handle := hdl.Handle, Buffer := sPlatform);
END_IF;

IF sPlatform = 'PPC' THEN
   mrTemperatureLimit := 83.0; //PPC
ELSIF sPlatform = 'x86' THEN
   mrTemperatureLimit := 115.0; //Intel
ELSE
   //unknown platform -> set trace and use lower temperature limit
   dummy := Print('!!! ABCPUTemperature - paInit: could not detect hardware platform !!!');
   mrTemperatureLimit := 83.0;
END_IF;

mbInit := TRUE; 
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(34)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF (NOT mbStart) THEN
    iCycleRed := 0; 
    STOP_PROCESS_ALGORITHM();
    RETURN;    
END_IF;

IF (NOT mbInit) THEN
    RETURN; 
END_IF;

IF ((iCycleRed MOD 64) = 0) THEN // about every 0,5 min
  TempData := GET_TEMP(TempID);   

  IF (TempData.Temp >= REAL_TO_DINT(mrTemperatureLimit)) THEN
        SET_ALARM(Name := erCPUTempHigh, Param1 := DINT_TO_STRING(TempData.Temp));  
        bAlarmSet := TRUE; 
  END_IF;
    
  IF (TempData.Temp < (REAL_TO_DINT(mrTemperatureLimit) - 1)) THEN
        IF bAlarmSet THEN
            RESET_ALARM(Name := erCPUTempHigh);          
            bAlarmSet := FALSE; 
        END_IF;
  END_IF;
    
END_IF;

iCycleRed := iCycleRed + 1; 


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
