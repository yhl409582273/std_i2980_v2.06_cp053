IMPORT_OVER_LISTFILE
 nAnaOutputModeMid
, cMoveFwd
, cMoveBwd
, cMoveAll
, KAPPL_LintabData
, tsMoveCtrl
, ABMoldValveOutput

END_IMPORT

ALGORITHM_BLOCK ABValveControl #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bFastClose : BOOL;
 sv_bFastOpen : BOOL;
 do_Close : BOOL;
 do_Open : BOOL;
 do_FastClose : BOOL;
 do_FastOpen : BOOL;
 sv_iActiveStage : DINT;
 sv_bOutputActive : BOOL (* Output is active *);
 sv_bPreOutputReady : BOOL (* PreOutput is ready *);
 sv_ValveLintab : KAPPL_LintabData;
 sv_rMoldValveOutput : REAL;
 sv_bFwdActive : BOOL;
 sv_bBwdActive : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskAnalog : TASK;
 TaskMid : TASK;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
 g_bMoldValve : BOOL;
END_VAR

VAR
 mbFastCloseLinked : BOOL;
 mbFastOpenLinked : BOOL;
 abValveOutput : ABMoldValveOutput;
END_VAR

PROCESS_ALGORITHM paInit ON TaskMid AUTOSTART

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
(* checking if FastClose Endpoint is configured in IO-Config *) 
mbFastCloseLinked := IS_LINKED(do_FastClose);
mbFastOpenLinked := IS_LINKED(do_FastOpen);

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskAnalog(10001)


VAR
 bFastCloseActive : BOOL;
 bFastOpenActive : BOOL;
 bOldStateFwd : BOOL;
 bOldStateBwd : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP START:
END_STEP


(* steps *)
STEP Step19:
END_STEP

STEP SET_VALVE_FWD:
ASetFwd (P);
END_STEP

ACTION ASetFwd: #BEGIN_EDIT_BLOCK
do_Close := TRUE;
IF g_bMoldValve THEN
    abValveOutput.aStart(pLintab:=@sv_ValveLintab,
                        prValveSetVal:=@sv_rMoldValveOutput,
                        AnaOutMode:=nAnaOutputModeMid);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ASetFwd*)
STEP Step17:
AFastClose (N);
END_STEP

ACTION AFastClose: #BEGIN_EDIT_BLOCK
IF NOT bFastCloseActive AND
   sv_iActiveStage = 2 AND 
   sv_bFastClose THEN
    
    do_FastClose := TRUE;
    bFastCloseActive := TRUE;
    
ELSIF sv_iActiveStage <> 2 THEN
    
    do_FastClose := FALSE;
    bFastCloseActive := FALSE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AFastClose*)
STEP RESET_VALVE_FWD:
AResetFwd (P);
END_STEP

ACTION AResetFwd: #BEGIN_EDIT_BLOCK
do_Close := FALSE;
IF mbFastCloseLinked THEN
    do_FastClose := FALSE;
END_IF;
IF g_bMoldValve THEN
   abValveOutput.aStop();
END_IF;    


;#END_EDIT_BLOCK END_ACTION (*AResetFwd*)
STEP SET_VALVE_BWD:
ASetBwd (P);
END_STEP

ACTION ASetBwd: #BEGIN_EDIT_BLOCK
do_Open := TRUE;
IF g_bMoldValve THEN
    abValveOutput.aStart(pLintab:=@sv_ValveLintab,
                     prValveSetVal:=@sv_rMoldValveOutput,
                     AnaOutMode:=nAnaOutputModeMid);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ASetBwd*)
STEP FAST_OPEN:
AFastOpen (N);
END_STEP

ACTION AFastOpen: #BEGIN_EDIT_BLOCK
IF NOT bFastOpenActive AND
   sv_iActiveStage = 2 AND 
   sv_bFastOpen THEN
    
    do_FastOpen := TRUE;
    bFastOpenActive := TRUE;
    
ELSIF sv_iActiveStage <> 2 THEN
    
    do_FastOpen := FALSE;
    bFastOpenActive := FALSE;
END_IF;(*inl.*)

;#END_EDIT_BLOCK END_ACTION (*AFastOpen*)
STEP RESET_VALVE_BWD:
AResetBwd (P);
END_STEP

ACTION AResetBwd: #BEGIN_EDIT_BLOCK
do_Open := FALSE;
IF mbFastOpenLinked THEN
    do_FastOpen := FALSE;
END_IF;
IF g_bMoldValve THEN
   abValveOutput.aStop();
END_IF;    

;#END_EDIT_BLOCK END_ACTION (*AResetBwd*)
STEP SET_VALVE_ICM:
Action7 (P);
END_STEP

ACTION Action7: #BEGIN_EDIT_BLOCK
//direction decisive by profile
do_Open := sv_bBwdActive;
do_Close := sv_bFwdActive;

//old state needs to be compared
bOldStateBwd := sv_bBwdActive;
bOldStateFwd := sv_bFwdActive;

IF g_bMoldValve THEN
    abValveOutput.aStart(pLintab:=@sv_ValveLintab,
                     prValveSetVal:=@sv_rMoldValveOutput,
                     AnaOutMode:=nAnaOutputModeMid);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action7*)
STEP Reset_ICM:
AResetICM (P);
END_STEP

ACTION AResetICM: #BEGIN_EDIT_BLOCK
do_Open := FALSE;
do_Close := FALSE;

IF g_bMoldValve THEN
   abValveOutput.aStop();
END_IF;    


;#END_EDIT_BLOCK END_ACTION (*AResetICM*)
STEP END:
Action3 (P);
END_STEP

ACTION Action3: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*Action3*)

(* transitions *)
GO_ON_TRANSITION Trans32 (* Trans32 *) FROM START TO Step19 :=  #BEGIN_EDIT_BLOCK
sv_bPreOutputReady AND
sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans33 (* Trans33 *) FROM START TO END :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans1 (* Trans1 *) FROM Step19 TO SET_VALVE_FWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir =
cMoveFwd
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans2 (* Trans2 *) FROM SET_VALVE_FWD TO Step17 :=  #BEGIN_EDIT_BLOCK
mbFastCloseLinked

;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans28 (* Trans28 *) FROM Step17 TO RESET_VALVE_FWD :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans24 (* Trans24 *) FROM SET_VALVE_FWD TO RESET_VALVE_FWD :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans17 (* Trans17 *) FROM RESET_VALVE_FWD TO END :=  #BEGIN_EDIT_BLOCK
TRUE    
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans3 (* Trans3 *) FROM Step19 TO SET_VALVE_BWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir =
cMoveBwd 
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TransFastOpen (* Trans17 *) FROM SET_VALVE_BWD TO FAST_OPEN :=  #BEGIN_EDIT_BLOCK
mbFastOpenLinked
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TNotActiveFastOpen (* Trans6 *) FROM FAST_OPEN TO RESET_VALVE_BWD :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TNotActiveOpen (* Trans18 *) FROM SET_VALVE_BWD TO RESET_VALVE_BWD :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans18 (* Trans18 *) FROM RESET_VALVE_BWD TO END :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans13 (* Trans13 *) FROM Step19 TO SET_VALVE_ICM :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir =
cMoveAll
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans15 (* Trans15 *) FROM SET_VALVE_ICM TO SET_VALVE_ICM :=  #BEGIN_EDIT_BLOCK
bOldStateFwd <> sv_bFwdActive 
OR bOldStateBwd <> sv_bBwdActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans14 (* Trans14 *) FROM SET_VALVE_ICM TO Reset_ICM :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive

;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans36 (* Trans36 *) FROM Reset_ICM TO END :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans30 (* Trans30 *) FROM Step19 TO END :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans16 (* Trans16 *) FROM END TO START :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pOutputActive ON TaskAnalog(10000) WITH sv_bOutputActive

#BEGIN_EDIT_BLOCK
IF sv_bOutputActive THEN
    START_PROCESS_ALGORITHM(paRun);    
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 159 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
4 
@Var @RT(17)nAnaOutputModeMid @RT(0) @T @T @DERIVED 0 @F @RT(15)tnAnaOutputMode @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveAll @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(13)cMaxMoveIdent @RT(32)all movements (for evLockUnlock) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABValveControl @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
20 
@Var @RT(13)sv_bFastClose @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bFastOpen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)do_Close @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)do_Open @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)do_FastClose @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)do_FastOpen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_iActiveStage @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bOutputActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Output is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bPreOutputReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)PreOutput is ready @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_ValveLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rMoldValveOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bFwdActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bBwdActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(12)g_bMoldValve @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(17)mbFastCloseLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mbFastOpenLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)abValveOutput @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)ABMoldValveOutput @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(17)TaskAnalog(10001) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(16)bFastCloseActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bFastOpenActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)bOldStateFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)bOldStateBwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pOutputActive @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_bOutputActive @RT(17)TaskAnalog(10000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
(* checking if FastClose Endpoint is configured in IO-Config *) 
mbFastCloseLinked := IS_LINKED(do_FastClose);
mbFastOpenLinked := IS_LINKED(do_FastOpen);

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
10 14 19 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(5)START @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans32 @F @T @F @F @T @F @TL(3)
sv_bPreOutputReady AND
sv_bOutputActive

@RT(7)Trans32 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans33 @F @T @F @F @T @T @TL(2)
NOT sv_bOutputActive

@RT(7)Trans33 @F 
@Goto @RT(3)END @F @F 


@Step @RT(6)Step19 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 4 
@TransSeq @RT(4)tseq @F 5 
@Trans @RT(6)Trans1 @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir =
cMoveFwd

@RT(6)Trans1 @F 
@Step @RT(13)SET_VALVE_FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)ASetFwd @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
do_Close := TRUE;
IF g_bMoldValve THEN
    abValveOutput.aStart(pLintab:=@sv_ValveLintab,
                        prValveSetVal:=@sv_rMoldValveOutput,
                        AnaOutMode:=nAnaOutputModeMid);
END_IF;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans2 @F @T @F @F @T @F @TL(3)
mbFastCloseLinked


@RT(6)Trans2 @F 
@Step @RT(6)Step17 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(10)AFastClose @F @T @RT(1)N @RT(0) @F @F @T @TL(13)
IF NOT bFastCloseActive AND
   sv_iActiveStage = 2 AND 
   sv_bFastClose THEN
    
    do_FastClose := TRUE;
    bFastCloseActive := TRUE;
    
ELSIF sv_iActiveStage <> 2 THEN
    
    do_FastClose := FALSE;
    bFastCloseActive := FALSE;
END_IF;

@F 

@Trans @RT(7)Trans28 @F @T @F @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(7)Trans28 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans24 @F @T @T @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(7)Trans24 @F 


@Step @RT(15)RESET_VALVE_FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AResetFwd @F @T @RT(1)P @RT(0) @F @F @T @TL(9)
do_Close := FALSE;
IF mbFastCloseLinked THEN
    do_FastClose := FALSE;
END_IF;
IF g_bMoldValve THEN
   abValveOutput.aStop();
END_IF;    


@F 

@Trans @RT(7)Trans17 @F @T @F @F @T @F @TL(2)
TRUE    

@RT(7)Trans17 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(6)Trans3 @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir =
cMoveBwd 

@RT(6)Trans3 @F 
@Step @RT(13)SET_VALVE_BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)ASetBwd @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
do_Open := TRUE;
IF g_bMoldValve THEN
    abValveOutput.aStart(pLintab:=@sv_ValveLintab,
                     prValveSetVal:=@sv_rMoldValveOutput,
                     AnaOutMode:=nAnaOutputModeMid);
END_IF;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(13)TransFastOpen @F @T @F @F @T @F @TL(2)
mbFastOpenLinked

@RT(7)Trans17 @F 
@Step @RT(9)FAST_OPEN @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AFastOpen @F @T @RT(1)N @RT(0) @F @F @T @TL(13)
IF NOT bFastOpenActive AND
   sv_iActiveStage = 2 AND 
   sv_bFastOpen THEN
    
    do_FastOpen := TRUE;
    bFastOpenActive := TRUE;
    
ELSIF sv_iActiveStage <> 2 THEN
    
    do_FastOpen := FALSE;
    bFastOpenActive := FALSE;
END_IF;(*inl.*)

@F 

@Trans @RT(18)TNotActiveFastOpen @F @T @F @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(6)Trans6 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(14)TNotActiveOpen @F @T @T @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(7)Trans18 @F 


@Step @RT(15)RESET_VALVE_BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AResetBwd @F @T @RT(1)P @RT(0) @F @F @T @TL(8)
do_Open := FALSE;
IF mbFastOpenLinked THEN
    do_FastOpen := FALSE;
END_IF;
IF g_bMoldValve THEN
   abValveOutput.aStop();
END_IF;    

@F 

@Trans @RT(7)Trans18 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans18 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(7)Trans13 @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir =
cMoveAll

@RT(7)Trans13 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 1 
@Step @RT(13)SET_VALVE_ICM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action7 @F @T @RT(1)P @RT(0) @F @F @T @TL(14)
//direction decisive by profile
do_Open := sv_bBwdActive;
do_Close := sv_bFwdActive;

//old state needs to be compared
bOldStateBwd := sv_bBwdActive;
bOldStateFwd := sv_bFwdActive;

IF g_bMoldValve THEN
    abValveOutput.aStart(pLintab:=@sv_ValveLintab,
                     prValveSetVal:=@sv_rMoldValveOutput,
                     AnaOutMode:=nAnaOutputModeMid);
END_IF;

@F 


@Trans @RT(7)Trans15 @F @T @T @T @T @T @TL(3)
bOldStateFwd <> sv_bFwdActive 
OR bOldStateBwd <> sv_bBwdActive

@RT(7)Trans15 @F 

@Trans @RT(7)Trans14 @F @T @F @F @T @F @TL(3)
NOT sv_bOutputActive


@RT(7)Trans14 @F 
@Step @RT(9)Reset_ICM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AResetICM @F @T @RT(1)P @RT(0) @F @F @T @TL(8)
do_Open := FALSE;
do_Close := FALSE;

IF g_bMoldValve THEN
   abValveOutput.aStop();
END_IF;    


@F 

@Trans @RT(7)Trans36 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans36 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans30 @F @T @F @F @T @T @TL(2)
NOT sv_bOutputActive

@RT(7)Trans30 @F 
@Goto @RT(3)END @F @F 


@Step @RT(3)END @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action3 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(7)Trans16 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans16 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(4)
IF sv_bOutputActive THEN
    START_PROCESS_ALGORITHM(paRun);    
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
