IMPORT_OVER_LISTFILE
 GET_RUNTIME
, cMoveBwd
, cMoveIntrusion
, tsMoveCtrl

END_IMPORT

ALGORITHM_BLOCK ABValveControl #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 do_Inject : BOOL;
 do_Decompression : BOOL;
 do_Plasticize : BOOL;
 sv_bOutputActive : BOOL (* Output is active *);
 sv_bPreOutputReady : BOOL (* PreOutput is ready *);
END_VAR

SYSTEM_OBJECT
 TaskInject : TASK;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
 g_dActiveTimestamp : TIME;
END_VAR

PROCESS_ALGORITHM paRun ON TaskInject(10001)


(* IecGraph-Code *)

(* init step *)
INITIAL_STEP START:
END_STEP


(* steps *)
STEP Step19:
END_STEP

STEP SET_VALVE_FWD:
ASetFwd (P);
END_STEP

ACTION ASetFwd: #BEGIN_EDIT_BLOCK
do_Inject := TRUE;
g_dActiveTimestamp := GET_RUNTIME();

;#END_EDIT_BLOCK END_ACTION (*ASetFwd*)
STEP RESET_VALVE_FWD:
AResetFwd (P);
END_STEP

ACTION AResetFwd: #BEGIN_EDIT_BLOCK
do_Inject := FALSE;
g_dActiveTimestamp := t#0s;

;#END_EDIT_BLOCK END_ACTION (*AResetFwd*)
STEP SET_VALVE_PLAST:
ASetPlast (P);
END_STEP

ACTION ASetPlast: #BEGIN_EDIT_BLOCK
do_Plasticize := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASetPlast*)
STEP RESET_VALVE_PLAST:
AResetPlast (P);
END_STEP

ACTION AResetPlast: #BEGIN_EDIT_BLOCK
do_Plasticize := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetPlast*)
STEP SET_VALVE_BWD:
ASetBwd (P);
END_STEP

ACTION ASetBwd: #BEGIN_EDIT_BLOCK
do_Decompression := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASetBwd*)
STEP RESET_VALVE_BWD:
AResetBwd (P);
END_STEP

ACTION AResetBwd: #BEGIN_EDIT_BLOCK
do_Decompression := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetBwd*)
STEP END:
Action3 (P);
END_STEP

ACTION Action3: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*Action3*)

(* transitions *)
GO_ON_TRANSITION Trans32 (* Trans32 *) FROM START TO Step19 :=  #BEGIN_EDIT_BLOCK
sv_bPreOutputReady AND
sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans33 (* Trans33 *) FROM START TO END :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans1 (* Trans1 *) FROM Step19 TO SET_VALVE_FWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir =
cMoveFwd
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans28 (* Trans28 *) FROM SET_VALVE_FWD TO RESET_VALVE_FWD :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans17 (* Trans17 *) FROM RESET_VALVE_FWD TO END :=  #BEGIN_EDIT_BLOCK
TRUE    
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans3 (* Trans3 *) FROM Step19 TO SET_VALVE_PLAST :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveId =
cMovePlast OR
g_MoveCtrl.pData^.MoveId =
cMoveIntrusion OR
g_MoveCtrl.pData^.MoveId =
cMovePlastPurge
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans6 (* Trans6 *) FROM SET_VALVE_PLAST TO RESET_VALVE_PLAST :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans18 (* Trans18 *) FROM RESET_VALVE_PLAST TO END :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans82 (* Trans3 *) FROM Step19 TO SET_VALVE_BWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir =
cMoveBwd
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans63 (* Trans6 *) FROM SET_VALVE_BWD TO RESET_VALVE_BWD :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans58 (* Trans18 *) FROM RESET_VALVE_BWD TO END :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans30 (* Trans30 *) FROM Step19 TO END :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans16 (* Trans16 *) FROM END TO START :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pOutputActive ON TaskInject(10000) WITH sv_bOutputActive

#BEGIN_EDIT_BLOCK
IF sv_bOutputActive THEN

    START_PROCESS_ALGORITHM(paRun);    
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cMoveIntrusion @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)28 @RT(9)intrusion 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABValveControl @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(9)do_Inject @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)do_Decompression @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)do_Plasticize @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bOutputActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Output is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bPreOutputReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)PreOutput is ready @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)g_dActiveTimestamp @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(17)TaskInject(10001) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pOutputActive @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_bOutputActive @RT(17)TaskInject(10000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_SfcBody 
21 20 34 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(5)START @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans32 @F @T @F @F @T @F @TL(3)
sv_bPreOutputReady AND
sv_bOutputActive

@RT(7)Trans32 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans33 @F @T @F @F @T @T @TL(2)
NOT sv_bOutputActive

@RT(7)Trans33 @F 
@Goto @RT(3)END @F @F 


@Step @RT(6)Step19 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 4 
@TransSeq @RT(4)tseq @F 5 
@Trans @RT(6)Trans1 @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir =
cMoveFwd

@RT(6)Trans1 @F 
@Step @RT(13)SET_VALVE_FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)ASetFwd @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
do_Inject := TRUE;
g_dActiveTimestamp := GET_RUNTIME();

@F 

@Trans @RT(7)Trans28 @F @T @F @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(7)Trans28 @F 
@Step @RT(15)RESET_VALVE_FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AResetFwd @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
do_Inject := FALSE;
g_dActiveTimestamp := t#0s;

@F 

@Trans @RT(7)Trans17 @F @T @F @F @T @F @TL(2)
TRUE    

@RT(7)Trans17 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(6)Trans3 @F @T @F @F @T @F @TL(7)
g_MoveCtrl.pData^.MoveId =
cMovePlast OR
g_MoveCtrl.pData^.MoveId =
cMoveIntrusion OR
g_MoveCtrl.pData^.MoveId =
cMovePlastPurge

@RT(6)Trans3 @F 
@Step @RT(15)SET_VALVE_PLAST @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)ASetPlast @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
do_Plasticize := TRUE;

@F 

@Trans @RT(6)Trans6 @F @T @F @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(6)Trans6 @F 
@Step @RT(17)RESET_VALVE_PLAST @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)AResetPlast @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
do_Plasticize := FALSE;

@F 

@Trans @RT(7)Trans18 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans18 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(7)Trans82 @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir =
cMoveBwd

@RT(6)Trans3 @F 
@Step @RT(13)SET_VALVE_BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)ASetBwd @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
do_Decompression := TRUE;

@F 

@Trans @RT(7)Trans63 @F @T @F @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(6)Trans6 @F 
@Step @RT(15)RESET_VALVE_BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AResetBwd @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
do_Decompression := FALSE;

@F 

@Trans @RT(7)Trans58 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans18 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans30 @F @T @F @F @T @T @TL(2)
NOT sv_bOutputActive

@RT(7)Trans30 @F 
@Goto @RT(3)END @F @F 


@Step @RT(3)END @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action3 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(7)Trans16 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans16 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(5)
IF sv_bOutputActive THEN

    START_PROCESS_ALGORITHM(paRun);    
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
