(*
The ABPlasticizeStop blocks the plasticize movement when SafetyGateMold1 is open and Nozzle is forward
in this case, an alarm occurs (erSafetyGateOpenAndNozzleFwd)

locked movements
- plast: manual mode
- combined plast: setup mode

- intrusion and autopurge is not locked, intrusion is just in autocycle avaliable and the autopurge is locked
by a lockgroup
*)

IMPORT_OVER_LISTFILE
 CHECK_REF
, cMoveBwd
, cMoveFwd
, cCompNozzle
, cMovePlast
, FBCheckPosReached
, tsDeviceId
, tevSafetyGate
, FBLockUnlock
, tevSafetyGateData

END_IMPORT

ALGORITHM_BLOCK ABPlasticizeStop #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitDone : BOOL;
 sv_DeviceId : tsDeviceId;
END_VAR

SYSTEM_OBJECT
 erSafetyGateOpenAndNozzleFwd : ALARM;
 evSafetyGate : tevSafetyGate;
 EV_Task_7 : TASK;
 PU_Task_7 : TASK;
END_OBJECT

VAR
 mbSGOK : BOOL := TRUE (* if no SafetyGate is avaliable, then don't lock *);
 pbNozzleFwd : REFTO BOOL;
 fbCheckPosReached : FBCheckPosReached;
END_VAR

ALGORITHM aLockUnlock


VAR_INPUT
 bLock : BOOL;
END_VAR

VAR
 fbLockUnlock : FBLockUnlock;
END_VAR
#BEGIN_EDIT_BLOCK
IF bLock THEN
   fbLockUnlock.Mode := nLockAbort; //don´t allow movement
ELSE
   fbLockUnlock.Mode := nUnlock; //allow movement
END_IF;       
fbLockUnlock.Alarm.AlarmId:= erSafetyGateOpenAndNozzleFwd;
fbLockUnlock.Alarm.SubId[1] := sv_DeviceId.CompId;
fbLockUnlock.Alarm.SubId[2] := sv_DeviceId.IndexId;

fbLockUnlock(DeviceId:= sv_DeviceId,
             MoveDir := cMoveBwd,
             MoveId  := cMovePlast); 

//also lock combined plast in setupmode(decomp bef, plast, decomp after)
fbLockUnlock(DeviceId:= sv_DeviceId,
             MoveDir := cMoveBwd,
             MoveId  := cMoveCombinedPlast);      


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetReference


VAR
 bInit : BOOL := FALSE;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   fbCheckPosReached.DeviceId.IndexId := 1;     
   fbCheckPosReached.DeviceId.CompId := cCompNozzle;      
   fbCheckPosReached.MoveId := cMoveFwd;
   fbCheckPosReached.MoveDir := cMoveFwd;
   fbCheckPosReached();
   pbNozzleFwd := fbCheckPosReached.pbPosReached;
   bInit := TRUE;
END_IF;





;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pPlasticizeStop ON PU_Task_7 WITH sv_bInitDone,pbNozzleFwd^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

aGetReference();
IF CHECK_REF(pbNozzleFwd^) THEN
   aLockUnlock(NOT mbSGOK AND pbNozzleFwd^);
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaSafetyGateMold1 ON EV_Task_7 WITH evSafetyGate


VAR_INPUT
 evSafetyGateData : tevSafetyGateData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evSafetyGateData.DeviceId.CompId = cCompSafetyGateMold THEN
   mbSGOK := (evSafetyGateData.State = nClosed);
END_IF;

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

aGetReference();
IF CHECK_REF(pbNozzleFwd^) THEN
   aLockUnlock(NOT mbSGOK AND pbNozzleFwd^);
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 114 @Pou 25 
@@@BEG_Comment@@@
The ABPlasticizeStop blocks the plasticize movement when SafetyGateMold1 is open and Nozzle is forward
in this case, an alarm occurs (erSafetyGateOpenAndNozzleFwd)

locked movements
- plast: manual mode
- combined plast: setup mode

- intrusion and autopurge is not locked, intrusion is just in autocycle avaliable and the autopurge is locked
by a lockgroup
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)CHECK_REF @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
4 
@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)cCompNozzle @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)103 @RT(16)Component Nozzle 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cMovePlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)13 @RT(23)plast movement (rotate) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABPlasticizeStop @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(6)mbSGOK @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(46)if no SafetyGate is avaliable, then don't lock @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)pbNozzleFwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)fbCheckPosReached @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)FBCheckPosReached @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)erSafetyGateOpenAndNozzleFwd @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)evSafetyGate @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tevSafetyGate @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aLockUnlock @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(5)bLock @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(13)aGetReference @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pPlasticizeStop @STRUCTURED_TEXT 
@RT(0) @RT(25)sv_bInitDone,pbNozzleFwd^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(18)evaSafetyGateMold1 @STRUCTURED_TEXT 
@RT(0) @RT(12)evSafetyGate @RT(9)EV_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(16)evSafetyGateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevSafetyGateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(18)
IF bLock THEN
   fbLockUnlock.Mode := nLockAbort; //don´t allow movement
ELSE
   fbLockUnlock.Mode := nUnlock; //allow movement
END_IF;       
fbLockUnlock.Alarm.AlarmId:= erSafetyGateOpenAndNozzleFwd;
fbLockUnlock.Alarm.SubId[1] := sv_DeviceId.CompId;
fbLockUnlock.Alarm.SubId[2] := sv_DeviceId.IndexId;

fbLockUnlock(DeviceId:= sv_DeviceId,
             MoveDir := cMoveBwd,
             MoveId  := cMovePlast); 

//also lock combined plast in setupmode(decomp bef, plast, decomp after)
fbLockUnlock(DeviceId:= sv_DeviceId,
             MoveDir := cMoveBwd,
             MoveId  := cMoveCombinedPlast);      

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   fbCheckPosReached.DeviceId.IndexId := 1;     
   fbCheckPosReached.DeviceId.CompId := cCompNozzle;      
   fbCheckPosReached.MoveId := cMoveFwd;
   fbCheckPosReached.MoveDir := cMoveFwd;
   fbCheckPosReached();
   pbNozzleFwd := fbCheckPosReached.pbPosReached;
   bInit := TRUE;
END_IF;




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

aGetReference();
IF CHECK_REF(pbNozzleFwd^) THEN
   aLockUnlock(NOT mbSGOK AND pbNozzleFwd^);
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evSafetyGateData.DeviceId.CompId = cCompSafetyGateMold THEN
   mbSGOK := (evSafetyGateData.State = nClosed);
END_IF;

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

aGetReference();
IF CHECK_REF(pbNozzleFwd^) THEN
   aLockUnlock(NOT mbSGOK AND pbNozzleFwd^);
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
