(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


*)

IMPORT_OVER_LISTFILE
 KCAT_GetValue
, KCAT_GetHandle
, KMEM_ArrayCreate
, KMEM_ArraySet
, KMEM_ArrayDelete
, KMEM_ArraySize
, KMEM_ArrayGet
, GET_TASK_NAME
, GET_SYNC_REFTO
, SET_EVENT
, START_PROCESS_ALGORITHM
, FGetSysVarFromName
, KSWO_ActivateSampler
, GET_RUNTIME
, KSWO_StopRecording
, STOP_PROCESS_ALGORITHM
, KSWO_StartRecording
, FGetCatConfigValueString
, KMEM_HashMapL_Create
, KFILE_MakeDir
, KFILE_IsDir
, GET_STAREP_STATUS
, KFILE_Copy
, KFILE_Close
, KMEM_HashMapL_Add
, KFILE_Open
, SET_ALARM
, KFILE_RemoveDir
, KFILE_Delete
, KFILE_VolumeFree
, KCAT_GetType
, KCAT_GetFirst
, RESET_ALARM
, KSWO_RemoveVariable
, KMEM_HashMapL_GetNext
, KCAT_Load
, cMoveFwd
, cMoveBwd
, cCompMold
, cCompInjection
, cMoveBwdInterPos
, cMoveFwdInterPos
, tsTriggerData
, tsSetActTime
, tsSetActUDint
, tsTraceLevel
, ABScopeConfig
, ABScopeTrigger
, ABScopeExport
, TON
, KSWO_Status
, tySamplerData
, FBTimeStamp

END_IMPORT

ALGORITHM_BLOCK ABScope #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_StartTrigger : tsTriggerData;
 sv_StopTrigger : tsTriggerData;
 sv_sExportDevice : STRING(255);
 sv_iExportType : UDINT;
 sv_MeasureTime : tsSetActTime;
 sv_MeasureCycles : tsSetActUDint;
 sv_iMeasureState : UDINT;
 sv_bActivateMeasure : BOOL;
 sv_bMeasureTimeStop : BOOL;
 sv_bInitDone : BOOL;
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskSlow : TASK;
 TaskVisLow : TASK;
 Task10ms : TASK;
 erScopeExport : ALARM;
 erScopeNoVariables : ALARM;
 erScopeFileSave : ALARM;
 erScopeRecording : ALARM;
 erScopeNoRecording : ALARM;
 erScopeNotActivated : ALARM;
END_OBJECT

VAR
 abScopeConfig : ABScopeConfig (* configuration handler *);
 abStartTrigger : ABScopeTrigger (* start trigger handling *);
 abStopTrigger : ABScopeTrigger (* stop trigger handling *);
 abScopeExport : ABScopeExport (* save and export functionality *);
 fbTimeout : TON (* max. recording time supervision *);
 msCfgFilename : STRING(255) (* config file name *);
 mbInit : BOOL (* initialisation done *);
END_VAR

ALGORITHM aActivateSampler


VAR_OUTPUT
 Error : BOOL;
 ErrorID : DINT;
 ErrorTask : STRING(32);
END_VAR

VAR_TEMP
 I : INT;
END_VAR

VAR
 t : TIME;
 s : KSWO_Status;
 lCycleTime : LINT;
 iSamples : UDINT;
 Samplers : tySamplerData;
 dummy : DINT;
 bAnySamplerActive : BOOL;
 sError : STRING(255);
 iTime : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();
// time consuming activation of samplers (allocs in KSWO_ActivateSampler)
// perform this in a non-runtime monitored task to prevent cycle overflows
Error := FALSE;

abScopeConfig.aActivateConfig(Action := nGroupActionActivate);

bAnySamplerActive := FALSE;
Samplers := abScopeConfig.fGetSampler();
FOR I := GET_LOW_BOUND(Samplers) TO GET_HIGH_BOUND(Samplers) DO
   IF (Samplers[I].Task <> EMPTY AND Samplers[I].iActiveVarCnt > 0) THEN
      // only activate, if the sampler actually contains variables - an empty sampler 
      // also allocates memory (8 byte timestamp * iSamples)!
      lCycleTime := TIME_TO_LINT(GET_TASK_INTERVAL(Samplers[I].Task));
      IF (lCycleTime <> 0) THEN
         iSamples := LINT_TO_UDINT(TIME_TO_LINT(DIVTIME(sv_MeasureTime.dSet, lCycleTime)));
         s := KSWO_ActivateSampler(Samplers[I].Task, iSamples);
         IF (s <> KSWO_Status_OK) THEN
            IF sv_TraceLevel.bApplication THEN
               sError := CONCAT('Scope: could not activate sampler ', Samplers[I].sTaskName, 
                                ' for  ', UDINT_TO_STRING(iSamples), ' samples');
               dummy := Print(sError);               
            END_IF;            
            ErrorTask := Samplers[I].sTaskName;
            ErrorID := 0;
            Error := TRUE;
         ELSE
            bAnySamplerActive := TRUE;
         END_IF;
      END_IF;
   END_IF;        
END_FOR;

// no sampler was activated
IF (NOT Error AND NOT bAnySamplerActive) THEN
   dummy := Print('Scope: configuration contains no variables/groups');   
   ErrorID := 1;
   Error := TRUE;
   RETURN;
END_IF;

IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: activate sampler time - %d ms', iTime);
   t := GET_RUNTIME();
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aDeactivateSampler


VAR_TEMP
 I : INT;
END_VAR

VAR
 t : TIME;
 s : KSWO_Status;
 dummy : DINT;
 iTime : DINT;
 Samplers : tySamplerData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();


Samplers := abScopeConfig.fGetSampler();
FOR I := GET_LOW_BOUND(Samplers) TO GET_HIGH_BOUND(Samplers) DO
   IF (Samplers[I].Task <> EMPTY) THEN
      s := KSWO_DeactivateSampler(Samplers[I].Task);      
   END_IF;
END_FOR;   

abScopeConfig.aActivateConfig(Action := nGroupActionDeactivate);

// debug
IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: deactivate sampler time - %d ms', iTime);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStartRecording


VAR_OUTPUT
 Error : BOOL;
END_VAR

VAR
 s : KSWO_Status;
 t : TIME;
 iTime : DINT;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();

fbTimeout(IN := FALSE);
s := KSWO_StartRecording();
Error := (s <> KSWO_Status_OK);
IF(NOT Error) THEN
   START_PROCESS_ALGORITHM(paTimeout);
END_IF;


// debug
IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: start recording time - %d ms', iTime);
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStopRecording


VAR_OUTPUT
 Error : BOOL;
END_VAR

VAR
 s : KSWO_Status;
 t : TIME;
 iTime : DINT;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();

s := KSWO_StopRecording();
Error := (s <> KSWO_Status_OK);

STOP_PROCESS_ALGORITHM(paTimeout);

// debug
IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: stop recording time - %d ms', iTime);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInitVars

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// initialize triggers
sv_StartTrigger.pbCustomVarTrigger := @sv_StartTrigger.bVarTrigger;
sv_StopTrigger.pbCustomVarTrigger := @sv_StopTrigger.bVarTrigger;
   
// read the configuration
abScopeConfig.aReadConfig(MeasureTime := sv_MeasureTime.dSet,
                          MeasureTimeStop := sv_bMeasureTimeStop,
                          MeasureCycles := sv_MeasureCycles.iSet,
                          StartTriggerIdx := sv_StartTrigger.iTriggerIdx,
                          StartTriggerFallingEdge := sv_StartTrigger.bFallingEdge,
                          StartTriggerCounter := sv_StartTrigger.Reduction.iSet,
                          StartTriggerDelay := sv_StartTrigger.dTriggerDelay,
                          StartCustomTrigger := sv_StartTrigger.pbCustomVarTrigger,                            
                          StopTriggerIdx := sv_StopTrigger.iTriggerIdx,
                          StopTriggerFallingEdge := sv_StopTrigger.bFallingEdge,
                          StopTriggerCounter := sv_StopTrigger.Reduction.iSet,                            
                          StopTriggerDelay := sv_StopTrigger.dTriggerDelay,
                          StopCustomTrigger := sv_StopTrigger.pbCustomVarTrigger,
                          ExportType := sv_iExportType);   

abStartTrigger.aInit(@sv_StartTrigger);
abStopTrigger.aInit(@sv_StopTrigger);      

sv_MeasureCycles.iAct := 0;   
sv_MeasureTime.dAct := t#0s;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSetDevice


VAR_INPUT
 Device : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_sExportDevice := Device;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSetConfig


VAR_INPUT
 Filename : STRING(255);
END_VAR

VAR_OUTPUT
 Error : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// disconnect and unload the custom variables 
abScopeConfig.aLoadConfig(Filename);
Error := abScopeConfig.aLoadConfig.Error;
IF (NOT Error) THEN
  aInitVars();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h  ! WARNING !
@h  The Kemro K2 system (including software) only meets category B 
@h  according to EN 954-1, thus it is not intended for usage in safety-
@h  relevant control applications in the field 
@h  of personal safety (e.g. emergency stop).
@h  To implement potentially necessary safety-relevant control tasks, 
@h  always use additional 
@h  external safety devices that are intended for the particular purpose, 
@h  and meet the necessary 
@h  functional safety.
@h  For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00
@h  user manual, chapter 
@h  "CE conformity, directives and standards".

*)

ALGORITHM aChangeState


VAR_INPUT
 Event : UDINT (* event id for state transition *);
END_VAR

VAR_OUTPUT
 Error : BOOL;
END_VAR

VAR
 b : BOOL;
 dummy : DINT;
 sDebug : STRING(255);
 sEvent : STRING(32);
 sState : STRING(32);
 iTime : DINT;
 iOldState : UDINT;
 ErrorId : DINT;
 bDelayedStopRequested : BOOL;
 t : TIME;
 fbGetTimeStamp : FBTimeStamp;
 bClear : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// state machine for a simple scope measurement
// following input events are defined:
//
//      start measure     = 0
//      stop measure      = 1
//      start triggered   = 2
//      stop triggered    = 3
//      file done         = 4
//      export done       = 5
//      error             = 6
//      timeout           = 7
//      read config       = 8

Error := FALSE;
ErrorId := 0;
iOldState := sv_iMeasureState;

CASE sv_iMeasureState OF

   (************************************)
   (************* idle *****************)
   (************************************)
   0: 
      IF (Event = 0) THEN // start measure
                 
         abStartTrigger.aReset();
         abStopTrigger.aReset();
         bDelayedStopRequested := FALSE;
         sv_MeasureCycles.iAct := 0;
         sv_MeasureTime.dAct := t#0s;
         
         aActivateSampler();                   
         IF (NOT aActivateSampler.Error) THEN
            IF(abStartTrigger.fArm(TRUE)) THEN
               sv_iMeasureState := 1; // wait for start
            ELSE
               b := abStartTrigger.fArm(FALSE);
               aStartRecording();                  
               IF (aStartRecording.Error) THEN

                  SET_ALARM(Name := erScopeNoRecording);
                  aDeactivateSampler();
                  sv_iMeasureState := 0; // idle                  
                  sv_bActivateMeasure := FALSE;
                  ErrorId := 3;
                  Error := TRUE;
               ELSE
                  SET_ALARM(Name := erScopeRecording);
                  b := abStopTrigger.fArm(TRUE);
                  sv_iMeasureState := 2; // recording
               END_IF;                        
            END_IF;
         ELSE
            aDeactivateSampler();
            CASE aActivateSampler.ErrorID OF
               0: SET_ALARM(Name := erScopeNotActivated, 
                            Param1 := aActivateSampler.ErrorTask);              
               1: SET_ALARM(Name := erScopeNoVariables);               
            END_CASE;
            sv_bActivateMeasure := FALSE;
         END_IF;
         
      ELSIF (Event = 8) THEN // start read config
         sv_iMeasureState := 5; // read config
         aSetConfig(msCfgFilename);
         Error := aSetConfig.Error;
         sv_iMeasureState := 0; // idle
         IF NOT Error THEN
            IF (abScopeConfig.aReadConfig.AutoStart) THEN
               sv_bActivateMeasure := TRUE;      
            END_IF;
         END_IF;
      ELSE
         ErrorId := 1;
         Error := TRUE;
      END_IF;   
   
   (************************************)
   (********* wait for start ***********)
   (************************************)
   1:
      IF (Event = 1) THEN // stop measure
         b := abStartTrigger.fArm(FALSE);
         abStartTrigger.aReset();
         aDeactivateSampler();
         RESET_ALARM(erScopeRecording);
         sv_iMeasureState := 0;  // initialize           
         sv_bActivateMeasure := FALSE;    
         
      ELSIF (Event = 2) THEN // start trigger
         b := abStartTrigger.fArm(FALSE);
         aStartRecording();  
         IF aStartRecording.Error THEN
            SET_ALARM(Name := erScopeNoRecording);
            aDeactivateSampler();
            sv_iMeasureState := 0;            
            sv_bActivateMeasure := FALSE;
            ErrorId := 3;
            Error := TRUE;
         ELSE
            SET_ALARM(erScopeRecording);
            b := abStopTrigger.fArm(TRUE);
            sv_iMeasureState := 2; // recording
         END_IF;         
      ELSE
         ErrorId := 1;
         Error := TRUE;
      END_IF;
   
   (************************************)
   (********* recording ****************)
   (************************************)
   2:
      IF (Event = 1 OR Event = 3 OR Event = 7) THEN // stop measure, stop triggered or timeout
         aStopRecording();
         b := abStopTrigger.fArm(FALSE);        
         
         IF (Event <> 3) THEN // stop measure or timeout
            abStopTrigger.aReset();
         END_IF;            

         IF (Event = 1) THEN // stop measure
            // delayed
            bDelayedStopRequested := TRUE;         
         END_IF;
         
         // first measure cycle
         IF (sv_MeasureCycles.iAct = 0) THEN
            fbGetTimeStamp();
            bClear := TRUE;
         ELSE
            bClear := FALSE;
         END_IF;
         
         t := GET_RUNTIME();       
         abScopeExport.aSave(Execute := FALSE);
         abScopeExport.aSave(Execute := TRUE, 
                             FileName := abScopeConfig.aReadConfig.FileName, 
                             DestPath := abScopeConfig.aReadConfig.SavePath,
                             Clear := bClear);
         
         START_PROCESS_ALGORITHM(paSave);
         sv_iMeasureState := 3; // write file
      ELSE
         ErrorId := 1;
         Error := TRUE;         
      END_IF;
      
   (************************************)
   (********* file write active ********)
   (************************************)
   3: 
      IF (Event = 1) THEN // stop measure
            // delayed
            bDelayedStopRequested := TRUE;         
      ELSIF (Event = 4) THEN // file done
         
         t := GET_RUNTIME() - t; 
         iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
         sv_MeasureCycles.iAct := sv_MeasureCycles.iAct + 1;
      
         // check if the number of measure cycles is reached            
         IF (sv_MeasureCycles.iAct = sv_MeasureCycles.iSet OR bDelayedStopRequested) THEN
            aDeactivateSampler();             
            t := GET_RUNTIME();
            // start export process
            abScopeExport.aExport(Execute := FALSE);
            abScopeExport.aExport(Execute := TRUE, 
                                  Type := sv_iExportType,
                                  SrcPath := abScopeConfig.aReadConfig.SavePath,
                                  DestDevice := sv_sExportDevice,
                                  DestPath := abScopeConfig.aReadConfig.ExportPath);            
            // wait until export is finished            
            START_PROCESS_ALGORITHM(paExport);
            sv_iMeasureState := 4; // export active   
         ELSE
            // restart measure and go to start trigger
            abStartTrigger.aReset();
            abStopTrigger.aReset();
            IF(abStartTrigger.fArm(TRUE)) THEN                  
               sv_iMeasureState := 1; // wait for start
            ELSE
               b := abStartTrigger.fArm(FALSE);
               aStartRecording();                  
               IF aStartRecording.Error THEN
                  SET_ALARM(Name := erScopeNoRecording);
                  aDeactivateSampler();
                  sv_iMeasureState := 0; // idle                     
                  sv_bActivateMeasure := FALSE;
                  ErrorId := 3;
                  Error := TRUE;
               ELSE
                  SET_ALARM(erScopeRecording);
                  b := abStopTrigger.fArm(TRUE);                     
                  sv_iMeasureState := 2; // recording
               END_IF;                        
            END_IF;
         END_IF;
    
         
      ELSIF (Event = 6) THEN // error
         SET_ALARM(Name := erScopeFileSave); 
         RESET_ALARM(erScopeRecording);
         aDeactivateSampler();         
         sv_iMeasureState := 0;      
         sv_bActivateMeasure := FALSE;                  
      ELSE
         ErrorId := 1;
         Error := TRUE;         
      END_IF;      

   (************************************)
   (********* export active ************)
   (************************************)
   4: 
      IF (Event = 5) THEN // export done         
         t := GET_RUNTIME() - t;          
         STOP_PROCESS_ALGORITHM(paExport);  
         RESET_ALARM(erScopeRecording);
         sv_iMeasureState := 0; // idle     
         sv_bActivateMeasure := FALSE;
         
      ELSIF (Event = 6) THEN // error
         RESET_ALARM(erScopeRecording);
         SET_ALARM(Name := erScopeExport);
         sv_iMeasureState := 0; // idle     
         sv_bActivateMeasure := FALSE;         
         ErrorId := 4;
      ELSE
         ErrorId := 1;
         Error := TRUE;         
      END_IF;
   
   (************************************)
   (********* read config **************)
   (************************************)
   5: 
      ErrorId := 1;
      Error := TRUE;   
   
ELSE
   ErrorId := 2;
   Error := TRUE;   
END_CASE;




// debug
IF sv_TraceLevel.bApplication THEN
   
   sDebug := '';
   CASE Event OF
      0: sEvent := 'start measure';
      1: sEvent := 'stop measure';
      2: sEvent := 'start triggered';
      3: sEvent := 'stop triggered';
      4: sEvent := 'file done';
      5: sEvent := 'export done';
      6: sEvent := 'error';
      7: sEvent := 'timeout';
      8: sEvent := 'read config';
   ELSE
      sEvent := '???';   
   END_CASE;   
    
   IF iOldState <> sv_iMeasureState THEN
      
      CASE iOldState OF
         0: sState := 'idle';
         1: sState := 'wait for start';
         2: sState := 'recording';
         3: sState := 'file write active';
         4: sState := 'export active';
         5: sState := 'read config';
      ELSE
         sState := '???';
      END_CASE;
      
      sDebug := CONCAT(sDebug, sState, ' --> ');
      
      CASE sv_iMeasureState OF
         0: sState := 'idle';
         1: sState := 'wait for start';
         2: sState := 'recording';
         3: sState := 'file write active';
         4: sState := 'export active';
         5: sState := 'read config';
      ELSE
         sState := '???';         
      END_CASE;
      
      sDebug := CONCAT(sDebug, sState, ' ');
      
   END_IF;
   
   
   IF Error THEN
      sDebug := CONCAT(sDebug, 'Error: ');
      CASE sv_iMeasureState OF
         0: sState := 'idle';
         1: sState := 'wait for start';
         2: sState := 'recording';
         3: sState := 'file write active';
         4: sState := 'export active';
         5: sState := 'read config';
      ELSE
         sState := '???';         
      END_CASE;
      
      CASE ErrorId OF
         1: sDebug := CONCAT(sDebug, 'invalid event id ', UDINT_TO_STRING(Event), ' for state ', sState);
         2: sDebug := CONCAT(sDebug, 'invalid event ', sEvent, ' for state ', sState); 
         3: sDebug := CONCAT(sDebug, 'start recording error'); 
         4: sDebug := CONCAT(sDebug, 'file save error'); 
         5: sDebug := CONCAT(sDebug, 'export error'); 
      END_CASE;
   END_IF;
      
   IF (sDebug <> '') THEN
      dummy := Print('Scope: %s', sDebug);   
   END_IF;

END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aLoad


VAR_INPUT
 Filename : STRING(255);
END_VAR

VAR_OUTPUT
 Error : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

msCfgFilename := Filename;
aChangeState(8);
Error := aChangeState.Error;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInit

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbInit THEN
   RETURN;
END_IF;

abScopeConfig.aInit();
aInitVars();

mbInit := TRUE;




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInit ON TaskSlow WITH sv_bInitDone

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aInit();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paTimeout ON Task10ms

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbTimeout(IN := TRUE, PT := sv_MeasureTime.dSet);
sv_MeasureTime.dAct := fbTimeout.ET;

IF fbTimeout.Q THEN
   // stop when measure time reached
   IF sv_bMeasureTimeStop THEN
      aChangeState(Event := 7);
   END_IF;   
   STOP_PROCESS_ALGORITHM();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paExport ON TaskVisLow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abScopeExport.aExport(Execute := TRUE);

IF abScopeExport.aExport.Error THEN
   aChangeState(6);   
   STOP_PROCESS_ALGORITHM();   
END_IF;

IF abScopeExport.aExport.Done THEN
   aChangeState(5);   
   STOP_PROCESS_ALGORITHM();   
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSave ON TaskVisLow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
abScopeExport.aSave(Execute := TRUE, Clear := FALSE);

IF abScopeExport.aSave.Error THEN
   aChangeState(6);   
   STOP_PROCESS_ALGORITHM();   
END_IF;

IF abScopeExport.aSave.Done THEN
   aChangeState(4);   
   STOP_PROCESS_ALGORITHM();   
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paStartMeasure ON TaskVisLow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aChangeState(0); 
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paStopMeasure ON TaskVisLow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aChangeState(1); 
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pStartTriggered ON PU_Task_7 WITH sv_StartTrigger.bTriggered

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_StartTrigger.bTriggered THEN
   aChangeState(2); 
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pStopTriggered ON PU_Task_7 WITH sv_StopTrigger.bTriggered

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_StopTrigger.bTriggered THEN
   aChangeState(3); 
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pStartStop ON PU_Task_7 WITH sv_bActivateMeasure

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_bActivateMeasure) THEN   
   IF (sv_iMeasureState = 0) THEN
      START_PROCESS_ALGORITHM(paStartMeasure);       
   END_IF;
ELSE
   IF (sv_iMeasureState <> 0) THEN
      START_PROCESS_ALGORITHM(paStopMeasure);       
   END_IF;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 150 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
36 
@Var @RT(13)KCAT_GetValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_GetHandle @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KMEM_ArrayCreate @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KMEM_ArraySet @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KMEM_ArrayDelete @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KMEM_ArraySize @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KMEM_ArrayGet @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)GET_TASK_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)FGetSysVarFromName @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)KSWO_ActivateSampler @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)KSWO_StopRecording @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)KSWO_StartRecording @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)FGetCatConfigValueString @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)KMEM_HashMapL_Create @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KFILE_MakeDir @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)KFILE_IsDir @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)GET_STAREP_STATUS @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)KFILE_Copy @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)KFILE_Close @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)KMEM_HashMapL_Add @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)KFILE_Open @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)KFILE_RemoveDir @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KFILE_Delete @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KFILE_VolumeFree @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KCAT_GetType @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_GetFirst @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)KSWO_RemoveVariable @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)KMEM_HashMapL_GetNext @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)KCAT_Load @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
6 
@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cCompMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)101 @RT(14)Component Mold 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cCompInjection @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)104 @RT(19)Component Injection 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cMoveBwdInterPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)16 @RT(38)move backward to intermediate position 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cMoveFwdInterPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)17 @RT(37)move forward to intermediate position 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(7)ABScope @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
28 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskVisLow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)Task10ms @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)erScopeExport @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)erScopeNoVariables @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)erScopeFileSave @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)erScopeRecording @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)erScopeNoRecording @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)erScopeNotActivated @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)sv_StartTrigger @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsTriggerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_StopTrigger @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsTriggerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_sExportDevice @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_iExportType @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_MeasureTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsSetActTime @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_MeasureCycles @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsSetActUDint @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_iMeasureState @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_bActivateMeasure @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_bMeasureTimeStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)abScopeConfig @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABScopeConfig @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)configuration handler @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)abStartTrigger @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABScopeTrigger @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)start trigger handling @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)abStopTrigger @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABScopeTrigger @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)stop trigger handling @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)abScopeExport @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABScopeExport @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)save and export functionality @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)fbTimeout @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(31)max. recording time supervision @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)msCfgFilename @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)config file name @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mbInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)initialisation done @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

19 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aActivateSampler @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)ErrorID @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)ErrorTask @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)I @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(10)lCycleTime @RT(0) @T @F @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)iSamples @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)Samplers @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tySamplerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)bAnySamplerActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sError @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTime @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(18)aDeactivateSampler @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)I @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTime @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)Samplers @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tySamplerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aStartRecording @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTime @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(14)aStopRecording @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTime @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aInitVars @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(10)aSetDevice @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Device @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(10)aSetConfig @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)Filename @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aChangeState @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
14 
@Var @RT(5)Event @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)event id for state transition @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sDebug @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sEvent @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sState @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTime @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)iOldState @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)ErrorId @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)bDelayedStopRequested @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbGetTimeStamp @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBTimeStamp @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bClear @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aLoad @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)Filename @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(9)paTimeout @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(8)paExport @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paSave @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(14)paStartMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(13)paStopMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pStartTriggered @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_StartTrigger.bTriggered @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pStopTriggered @STRUCTURED_TEXT 
@RT(0) @RT(25)sv_StopTrigger.bTriggered @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pStartStop @STRUCTURED_TEXT 
@RT(0) @RT(19)sv_bActivateMeasure @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(55)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();
// time consuming activation of samplers (allocs in KSWO_ActivateSampler)
// perform this in a non-runtime monitored task to prevent cycle overflows
Error := FALSE;

abScopeConfig.aActivateConfig(Action := nGroupActionActivate);

bAnySamplerActive := FALSE;
Samplers := abScopeConfig.fGetSampler();
FOR I := GET_LOW_BOUND(Samplers) TO GET_HIGH_BOUND(Samplers) DO
   IF (Samplers[I].Task <> EMPTY AND Samplers[I].iActiveVarCnt > 0) THEN
      // only activate, if the sampler actually contains variables - an empty sampler 
      // also allocates memory (8 byte timestamp * iSamples)!
      lCycleTime := TIME_TO_LINT(GET_TASK_INTERVAL(Samplers[I].Task));
      IF (lCycleTime <> 0) THEN
         iSamples := LINT_TO_UDINT(TIME_TO_LINT(DIVTIME(sv_MeasureTime.dSet, lCycleTime)));
         s := KSWO_ActivateSampler(Samplers[I].Task, iSamples);
         IF (s <> KSWO_Status_OK) THEN
            IF sv_TraceLevel.bApplication THEN
               sError := CONCAT('Scope: could not activate sampler ', Samplers[I].sTaskName, 
                                ' for  ', UDINT_TO_STRING(iSamples), ' samples');
               dummy := Print(sError);               
            END_IF;            
            ErrorTask := Samplers[I].sTaskName;
            ErrorID := 0;
            Error := TRUE;
         ELSE
            bAnySamplerActive := TRUE;
         END_IF;
      END_IF;
   END_IF;        
END_FOR;

// no sampler was activated
IF (NOT Error AND NOT bAnySamplerActive) THEN
   dummy := Print('Scope: configuration contains no variables/groups');   
   ErrorID := 1;
   Error := TRUE;
   RETURN;
END_IF;

IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: activate sampler time - %d ms', iTime);
   t := GET_RUNTIME();
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();


Samplers := abScopeConfig.fGetSampler();
FOR I := GET_LOW_BOUND(Samplers) TO GET_HIGH_BOUND(Samplers) DO
   IF (Samplers[I].Task <> EMPTY) THEN
      s := KSWO_DeactivateSampler(Samplers[I].Task);      
   END_IF;
END_FOR;   

abScopeConfig.aActivateConfig(Action := nGroupActionDeactivate);

// debug
IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: deactivate sampler time - %d ms', iTime);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();

fbTimeout(IN := FALSE);
s := KSWO_StartRecording();
Error := (s <> KSWO_Status_OK);
IF(NOT Error) THEN
   START_PROCESS_ALGORITHM(paTimeout);
END_IF;


// debug
IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: start recording time - %d ms', iTime);
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();

s := KSWO_StopRecording();
Error := (s <> KSWO_Status_OK);

STOP_PROCESS_ALGORITHM(paTimeout);

// debug
IF sv_TraceLevel.bApplication THEN
   t := GET_RUNTIME() - t; 
   iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
   dummy := Print('Scope: stop recording time - %d ms', iTime);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(32)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// initialize triggers
sv_StartTrigger.pbCustomVarTrigger := @sv_StartTrigger.bVarTrigger;
sv_StopTrigger.pbCustomVarTrigger := @sv_StopTrigger.bVarTrigger;
   
// read the configuration
abScopeConfig.aReadConfig(MeasureTime := sv_MeasureTime.dSet,
                          MeasureTimeStop := sv_bMeasureTimeStop,
                          MeasureCycles := sv_MeasureCycles.iSet,
                          StartTriggerIdx := sv_StartTrigger.iTriggerIdx,
                          StartTriggerFallingEdge := sv_StartTrigger.bFallingEdge,
                          StartTriggerCounter := sv_StartTrigger.Reduction.iSet,
                          StartTriggerDelay := sv_StartTrigger.dTriggerDelay,
                          StartCustomTrigger := sv_StartTrigger.pbCustomVarTrigger,                            
                          StopTriggerIdx := sv_StopTrigger.iTriggerIdx,
                          StopTriggerFallingEdge := sv_StopTrigger.bFallingEdge,
                          StopTriggerCounter := sv_StopTrigger.Reduction.iSet,                            
                          StopTriggerDelay := sv_StopTrigger.dTriggerDelay,
                          StopCustomTrigger := sv_StopTrigger.pbCustomVarTrigger,
                          ExportType := sv_iExportType);   

abStartTrigger.aInit(@sv_StartTrigger);
abStopTrigger.aInit(@sv_StopTrigger);      

sv_MeasureCycles.iAct := 0;   
sv_MeasureTime.dAct := t#0s;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_sExportDevice := Device;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// disconnect and unload the custom variables 
abScopeConfig.aLoadConfig(Filename);
Error := abScopeConfig.aLoadConfig.Error;
IF (NOT Error) THEN
  aInitVars();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(330)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// state machine for a simple scope measurement
// following input events are defined:
//
//      start measure     = 0
//      stop measure      = 1
//      start triggered   = 2
//      stop triggered    = 3
//      file done         = 4
//      export done       = 5
//      error             = 6
//      timeout           = 7
//      read config       = 8

Error := FALSE;
ErrorId := 0;
iOldState := sv_iMeasureState;

CASE sv_iMeasureState OF

   (************************************)
   (************* idle *****************)
   (************************************)
   0: 
      IF (Event = 0) THEN // start measure
                 
         abStartTrigger.aReset();
         abStopTrigger.aReset();
         bDelayedStopRequested := FALSE;
         sv_MeasureCycles.iAct := 0;
         sv_MeasureTime.dAct := t#0s;
         
         aActivateSampler();                   
         IF (NOT aActivateSampler.Error) THEN
            IF(abStartTrigger.fArm(TRUE)) THEN
               sv_iMeasureState := 1; // wait for start
            ELSE
               b := abStartTrigger.fArm(FALSE);
               aStartRecording();                  
               IF (aStartRecording.Error) THEN

                  SET_ALARM(Name := erScopeNoRecording);
                  aDeactivateSampler();
                  sv_iMeasureState := 0; // idle                  
                  sv_bActivateMeasure := FALSE;
                  ErrorId := 3;
                  Error := TRUE;
               ELSE
                  SET_ALARM(Name := erScopeRecording);
                  b := abStopTrigger.fArm(TRUE);
                  sv_iMeasureState := 2; // recording
               END_IF;                        
            END_IF;
         ELSE
            aDeactivateSampler();
            CASE aActivateSampler.ErrorID OF
               0: SET_ALARM(Name := erScopeNotActivated, 
                            Param1 := aActivateSampler.ErrorTask);              
               1: SET_ALARM(Name := erScopeNoVariables);               
            END_CASE;
            sv_bActivateMeasure := FALSE;
         END_IF;
         
      ELSIF (Event = 8) THEN // start read config
         sv_iMeasureState := 5; // read config
         aSetConfig(msCfgFilename);
         Error := aSetConfig.Error;
         sv_iMeasureState := 0; // idle
         IF NOT Error THEN
            IF (abScopeConfig.aReadConfig.AutoStart) THEN
               sv_bActivateMeasure := TRUE;      
            END_IF;
         END_IF;
      ELSE
         ErrorId := 1;
         Error := TRUE;
      END_IF;   
   
   (************************************)
   (********* wait for start ***********)
   (************************************)
   1:
      IF (Event = 1) THEN // stop measure
         b := abStartTrigger.fArm(FALSE);
         abStartTrigger.aReset();
         aDeactivateSampler();
         RESET_ALARM(erScopeRecording);
         sv_iMeasureState := 0;  // initialize           
         sv_bActivateMeasure := FALSE;    
         
      ELSIF (Event = 2) THEN // start trigger
         b := abStartTrigger.fArm(FALSE);
         aStartRecording();  
         IF aStartRecording.Error THEN
            SET_ALARM(Name := erScopeNoRecording);
            aDeactivateSampler();
            sv_iMeasureState := 0;            
            sv_bActivateMeasure := FALSE;
            ErrorId := 3;
            Error := TRUE;
         ELSE
            SET_ALARM(erScopeRecording);
            b := abStopTrigger.fArm(TRUE);
            sv_iMeasureState := 2; // recording
         END_IF;         
      ELSE
         ErrorId := 1;
         Error := TRUE;
      END_IF;
   
   (************************************)
   (********* recording ****************)
   (************************************)
   2:
      IF (Event = 1 OR Event = 3 OR Event = 7) THEN // stop measure, stop triggered or timeout
         aStopRecording();
         b := abStopTrigger.fArm(FALSE);        
         
         IF (Event <> 3) THEN // stop measure or timeout
            abStopTrigger.aReset();
         END_IF;            

         IF (Event = 1) THEN // stop measure
            // delayed
            bDelayedStopRequested := TRUE;         
         END_IF;
         
         // first measure cycle
         IF (sv_MeasureCycles.iAct = 0) THEN
            fbGetTimeStamp();
            bClear := TRUE;
         ELSE
            bClear := FALSE;
         END_IF;
         
         t := GET_RUNTIME();       
         abScopeExport.aSave(Execute := FALSE);
         abScopeExport.aSave(Execute := TRUE, 
                             FileName := abScopeConfig.aReadConfig.FileName, 
                             DestPath := abScopeConfig.aReadConfig.SavePath,
                             Clear := bClear);
         
         START_PROCESS_ALGORITHM(paSave);
         sv_iMeasureState := 3; // write file
      ELSE
         ErrorId := 1;
         Error := TRUE;         
      END_IF;
      
   (************************************)
   (********* file write active ********)
   (************************************)
   3: 
      IF (Event = 1) THEN // stop measure
            // delayed
            bDelayedStopRequested := TRUE;         
      ELSIF (Event = 4) THEN // file done
         
         t := GET_RUNTIME() - t; 
         iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
         sv_MeasureCycles.iAct := sv_MeasureCycles.iAct + 1;
      
         // check if the number of measure cycles is reached            
         IF (sv_MeasureCycles.iAct = sv_MeasureCycles.iSet OR bDelayedStopRequested) THEN
            aDeactivateSampler();             
            t := GET_RUNTIME();
            // start export process
            abScopeExport.aExport(Execute := FALSE);
            abScopeExport.aExport(Execute := TRUE, 
                                  Type := sv_iExportType,
                                  SrcPath := abScopeConfig.aReadConfig.SavePath,
                                  DestDevice := sv_sExportDevice,
                                  DestPath := abScopeConfig.aReadConfig.ExportPath);            
            // wait until export is finished            
            START_PROCESS_ALGORITHM(paExport);
            sv_iMeasureState := 4; // export active   
         ELSE
            // restart measure and go to start trigger
            abStartTrigger.aReset();
            abStopTrigger.aReset();
            IF(abStartTrigger.fArm(TRUE)) THEN                  
               sv_iMeasureState := 1; // wait for start
            ELSE
               b := abStartTrigger.fArm(FALSE);
               aStartRecording();                  
               IF aStartRecording.Error THEN
                  SET_ALARM(Name := erScopeNoRecording);
                  aDeactivateSampler();
                  sv_iMeasureState := 0; // idle                     
                  sv_bActivateMeasure := FALSE;
                  ErrorId := 3;
                  Error := TRUE;
               ELSE
                  SET_ALARM(erScopeRecording);
                  b := abStopTrigger.fArm(TRUE);                     
                  sv_iMeasureState := 2; // recording
               END_IF;                        
            END_IF;
         END_IF;
    
         
      ELSIF (Event = 6) THEN // error
         SET_ALARM(Name := erScopeFileSave); 
         RESET_ALARM(erScopeRecording);
         aDeactivateSampler();         
         sv_iMeasureState := 0;      
         sv_bActivateMeasure := FALSE;                  
      ELSE
         ErrorId := 1;
         Error := TRUE;         
      END_IF;      

   (************************************)
   (********* export active ************)
   (************************************)
   4: 
      IF (Event = 5) THEN // export done         
         t := GET_RUNTIME() - t;          
         STOP_PROCESS_ALGORITHM(paExport);  
         RESET_ALARM(erScopeRecording);
         sv_iMeasureState := 0; // idle     
         sv_bActivateMeasure := FALSE;
         
      ELSIF (Event = 6) THEN // error
         RESET_ALARM(erScopeRecording);
         SET_ALARM(Name := erScopeExport);
         sv_iMeasureState := 0; // idle     
         sv_bActivateMeasure := FALSE;         
         ErrorId := 4;
      ELSE
         ErrorId := 1;
         Error := TRUE;         
      END_IF;
   
   (************************************)
   (********* read config **************)
   (************************************)
   5: 
      ErrorId := 1;
      Error := TRUE;   
   
ELSE
   ErrorId := 2;
   Error := TRUE;   
END_CASE;




// debug
IF sv_TraceLevel.bApplication THEN
   
   sDebug := '';
   CASE Event OF
      0: sEvent := 'start measure';
      1: sEvent := 'stop measure';
      2: sEvent := 'start triggered';
      3: sEvent := 'stop triggered';
      4: sEvent := 'file done';
      5: sEvent := 'export done';
      6: sEvent := 'error';
      7: sEvent := 'timeout';
      8: sEvent := 'read config';
   ELSE
      sEvent := '???';   
   END_CASE;   
    
   IF iOldState <> sv_iMeasureState THEN
      
      CASE iOldState OF
         0: sState := 'idle';
         1: sState := 'wait for start';
         2: sState := 'recording';
         3: sState := 'file write active';
         4: sState := 'export active';
         5: sState := 'read config';
      ELSE
         sState := '???';
      END_CASE;
      
      sDebug := CONCAT(sDebug, sState, ' --> ');
      
      CASE sv_iMeasureState OF
         0: sState := 'idle';
         1: sState := 'wait for start';
         2: sState := 'recording';
         3: sState := 'file write active';
         4: sState := 'export active';
         5: sState := 'read config';
      ELSE
         sState := '???';         
      END_CASE;
      
      sDebug := CONCAT(sDebug, sState, ' ');
      
   END_IF;
   
   
   IF Error THEN
      sDebug := CONCAT(sDebug, 'Error: ');
      CASE sv_iMeasureState OF
         0: sState := 'idle';
         1: sState := 'wait for start';
         2: sState := 'recording';
         3: sState := 'file write active';
         4: sState := 'export active';
         5: sState := 'read config';
      ELSE
         sState := '???';         
      END_CASE;
      
      CASE ErrorId OF
         1: sDebug := CONCAT(sDebug, 'invalid event id ', UDINT_TO_STRING(Event), ' for state ', sState);
         2: sDebug := CONCAT(sDebug, 'invalid event ', sEvent, ' for state ', sState); 
         3: sDebug := CONCAT(sDebug, 'start recording error'); 
         4: sDebug := CONCAT(sDebug, 'file save error'); 
         5: sDebug := CONCAT(sDebug, 'export error'); 
      END_CASE;
   END_IF;
      
   IF (sDebug <> '') THEN
      dummy := Print('Scope: %s', sDebug);   
   END_IF;

END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(14)
@h  ! WARNING !
@h  The Kemro K2 system (including software) only meets category B 
@h  according to EN 954-1, thus it is not intended for usage in safety-
@h  relevant control applications in the field 
@h  of personal safety (e.g. emergency stop).
@h  To implement potentially necessary safety-relevant control tasks, 
@h  always use additional 
@h  external safety devices that are intended for the particular purpose, 
@h  and meet the necessary 
@h  functional safety.
@h  For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00
@h  user manual, chapter 
@h  "CE conformity, directives and standards".

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

msCfgFilename := Filename;
aChangeState(8);
Error := aChangeState.Error;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbInit THEN
   RETURN;
END_IF;

abScopeConfig.aInit();
aInitVars();

mbInit := TRUE;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aInit();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbTimeout(IN := TRUE, PT := sv_MeasureTime.dSet);
sv_MeasureTime.dAct := fbTimeout.ET;

IF fbTimeout.Q THEN
   // stop when measure time reached
   IF sv_bMeasureTimeStop THEN
      aChangeState(Event := 7);
   END_IF;   
   STOP_PROCESS_ALGORITHM();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abScopeExport.aExport(Execute := TRUE);

IF abScopeExport.aExport.Error THEN
   aChangeState(6);   
   STOP_PROCESS_ALGORITHM();   
END_IF;

IF abScopeExport.aExport.Done THEN
   aChangeState(5);   
   STOP_PROCESS_ALGORITHM();   
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
abScopeExport.aSave(Execute := TRUE, Clear := FALSE);

IF abScopeExport.aSave.Error THEN
   aChangeState(6);   
   STOP_PROCESS_ALGORITHM();   
END_IF;

IF abScopeExport.aSave.Done THEN
   aChangeState(4);   
   STOP_PROCESS_ALGORITHM();   
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aChangeState(0); 
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aChangeState(1); 
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_StartTrigger.bTriggered THEN
   aChangeState(2); 
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_StopTrigger.bTriggered THEN
   aChangeState(3); 
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_bActivateMeasure) THEN   
   IF (sv_iMeasureState = 0) THEN
      START_PROCESS_ALGORITHM(paStartMeasure);       
   END_IF;
ELSE
   IF (sv_iMeasureState <> 0) THEN
      START_PROCESS_ALGORITHM(paStopMeasure);       
   END_IF;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
