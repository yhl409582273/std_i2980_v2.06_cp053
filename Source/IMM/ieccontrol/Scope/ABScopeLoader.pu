IMPORT_OVER_LISTFILE
 GET_RUNTIME
, TOLOWER
, cMaxScopeConfigFileCount
, ABScope
, KPUSB_Event
, tsScopeHmiCmd
, tsScopeConfigFileList
, KFILE_FastDirBrowser
, KPUSB_Event_Data

END_IMPORT

ALGORITHM_BLOCK ABScopeLoader #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_ScopeHmiCmd : tsScopeHmiCmd;
 sv_ScopeConfigFileList : tsScopeConfigFileList;
 sv_sConfigName : STRING(255);
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskVis : TASK;
 TaskVisLow : TASK;
 evUsbEvent : KPUSB_Event;
END_OBJECT

VAR_EXTERNAL
 g_abScope : ABScope;
END_VAR

VAR
 csCfgAutoLoadFile : STRING(255) := 'autoLoad';
 csCfgPath : STRING(255) := 'workspace/data/scope';
 msBaseDeviceName : STRING(255) (* plugged in usb device name *);
 msUsbDeviceName : STRING(255) (* plugged in usb device name *);
 mbInitCheck : BOOL;
 mbUsbPostCheck : BOOL;
 fileDirBrowser : KFILE_FastDirBrowser;
 mbCmdActive : BOOL;
END_VAR

VAR CONSTANT
 cErrorLoad : DINT := 1;
 cErrorTooManyFiles : DINT := 2;
 cErrorParamInvalid : DINT := 3;
END_VAR

POSTUPDATE_ALGORITHM pRunCmd ON PU_Task_7 WITH sv_ScopeHmiCmd.iCmdCtrl

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((sv_ScopeHmiCmd.iCmdCtrl MOD 2) = 1) THEN
    IF mbCmdActive THEN
        RETURN;     
    END_IF;
   
    CASE sv_ScopeHmiCmd.iCmdSel OF
        cScopeCmdLoad: 
            mbCmdActive := TRUE; 
            START_PROCESS_ALGORITHM(paLoad);

        cScopeCmdListFiles:
            mbCmdActive := TRUE;                                     
            START_PROCESS_ALGORITHM(paListFiles);
    ELSE
        sv_ScopeHmiCmd.iCmdRet := 0;            
        sv_ScopeHmiCmd.iCmdCtrl := sv_ScopeHmiCmd.iCmdCtrl + 1;
    END_CASE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCmdDone


VAR_INPUT
 iRetCode : DINT;
END_VAR

VAR
 iTmp : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iTmp := sv_ScopeHmiCmd.iCmdCtrl;
iTmp := iTmp + (iTmp MOD 2); 
sv_ScopeHmiCmd.iCmdCtrl := iTmp;  // i MOD 2 = 0 
sv_ScopeHmiCmd.iCmdRet := iRetCode;
mbCmdActive := FALSE;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aLoad


VAR_INPUT
 Filename : STRING(255);
 Device : STRING(255);
END_VAR

VAR_OUTPUT
 Error : BOOL;
END_VAR

VAR
 sFilename : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (Device = '') THEN
   Error := TRUE;
   RETURN;
END_IF;

// use absolute path for load function
sFilename := CONCAT(Device, '/' , csCfgPath, '/', Filename, '.cfg');
g_abScope.aLoad(Filename := sFilename);
Error := g_abScope.aLoad.Error;
IF(NOT Error) THEN
   // set the configuration name 
   sv_sConfigName := Filename;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

FUNCTION fCheckAutoLoad : DINT
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 Device : STRING(255);
END_VAR

VAR
 i : DINT;
 RetCode : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

RetCode := 0;
FOR i := 1 TO sv_ScopeConfigFileList.iFileCount DO
   IF (sv_ScopeConfigFileList.yFile[i].sName = csCfgAutoLoadFile AND 
       sv_ScopeConfigFileList.yFile[i].sDevice = Device) THEN
      aLoad(Filename := sv_ScopeConfigFileList.yFile[i].sName, 
            Device := Device);
      IF aLoad.Error THEN
         RetCode := cErrorLoad;
      END_IF;
   END_IF;
END_FOR;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fAppendFiles : DINT
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 Device : STRING(255);
END_VAR

VAR
 sFile : STRING(255);
 i : DINT;
 sFolder : STRING(255);
 iTmpPos : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (Device = '') THEN
   fAppendFiles := 0;
   RETURN;
END_IF;

i := sv_ScopeConfigFileList.iFileCount; 
sFolder := CONCAT(Device, '/', csCfgPath);
fileDirBrowser(Execute := FALSE);

REPEAT
   fileDirBrowser(Execute := TRUE, Directory := sFolder, Entry := sFile);
   IF (fileDirBrowser.State = KFILE_Status_OK) THEN
      IF(LEN(sFile) > 4 AND RIGHT(TOLOWER(sFile),  4) = '.cfg') THEN
         i := i + 1; 
         
         IF (i > cMaxScopeConfigFileCount) THEN
            sv_ScopeConfigFileList.iFileCount := cMaxScopeConfigFileCount;         
            fAppendFiles := cErrorTooManyFiles;
            RETURN;
         END_IF;
         
         REPEAT
            iTmpPos := FIND(sFile, '/');
            IF (iTmpPos > 0) THEN
               sFile := RIGHT(sFile, LEN(sFile) - iTmpPos);
            END_IF;
         UNTIL (iTmpPos = 0)
         END_REPEAT;
         sFile := LEFT(sFile, LEN(sFile) - 4);   
         
         sv_ScopeConfigFileList.yFile[i].sName := sFile; 
         sv_ScopeConfigFileList.yFile[i].sDevice := Device;
      
      END_IF;
   END_IF;
   UNTIL (fileDirBrowser.State = KFILE_Status_NOTOK)
END_REPEAT;

sv_ScopeConfigFileList.iFileCount := i; 
fAppendFiles := 0;





;#END_EDIT_BLOCK END_FUNCTION

PROCESS_ALGORITHM paLoad ON TaskVisLow


VAR
 iRetCode : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iRetCode := 0;
IF (sv_ScopeHmiCmd.iCmdOpt > 0 AND 
    sv_ScopeHmiCmd.iCmdOpt <= sv_ScopeConfigFileList.iFileCount)  THEN
   
   aLoad(Filename := sv_ScopeConfigFileList.yFile[sv_ScopeHmiCmd.iCmdOpt].sName, 
         Device := sv_ScopeConfigFileList.yFile[sv_ScopeHmiCmd.iCmdOpt].sDevice);
   IF aLoad.Error THEN
      iRetCode := cErrorLoad;
   END_IF;
   
ELSE  
   iRetCode := cErrorParamInvalid;
END_IF;

aCmdDone(iRetCode);
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paListFiles ON TaskVisLow


VAR
 iRetCode : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iRetCode := 0;
sv_ScopeConfigFileList.iFileCount := 0;

// add files from CF and USB
iRetCode := fAppendFiles(msBaseDeviceName);
IF (iRetCode = 0) THEN
   iRetCode := fAppendFiles(msUsbDeviceName);
END_IF;

// check autoloading
IF (iRetCode = 0) THEN
   IF (NOT mbInitCheck) THEN
      iRetCode := fCheckAutoLoad(Device := msBaseDeviceName);
      mbInitCheck := TRUE;
   END_IF;
   IF (mbUsbPostCheck AND iRetCode = 0)THEN
      iRetCode := fCheckAutoLoad(Device := msUsbDeviceName);
      mbUsbPostCheck := FALSE;
   END_IF;
END_IF;

aCmdDone(iRetCode);
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskVis AUTOSTART

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

msBaseDeviceName := FGetCatConfigValueString('System.workPath', '/harddisk0/');
START_PROCESS_ALGORITHM(paListFiles);
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaUsbChanged ON TaskVisLow WITH evUsbEvent


VAR_INPUT
 usbEventData : KPUSB_Event_Data;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (usbEventData.EventType = KPUSB_EventType_Attach) THEN
   msUsbDeviceName := usbEventData.DeviceName; 
ELSE
   msUsbDeviceName := ''; 
END_IF;

g_abScope.aSetDevice(msUsbDeviceName);

// update list of files
sv_ScopeHmiCmd.iCmdSel := cScopeCmdListFiles;
IF ((sv_ScopeHmiCmd.iCmdCtrl MOD 2) = 0) THEN
   // use ctrl here to get a callback to the HMI (if the list changes)
   sv_ScopeHmiCmd.iCmdCtrl := sv_ScopeHmiCmd.iCmdCtrl + 1;
   mbUsbPostCheck := TRUE;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 150 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)TOLOWER @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(24)cMaxScopeConfigFileCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)20 @RT(24)max. nr. of config files 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABScopeLoader @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
19 
@Var @RT(9)g_abScope @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)ABScope @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskVisLow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)evUsbEvent @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KPUSB_Event @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)sv_ScopeHmiCmd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsScopeHmiCmd @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_ScopeConfigFileList @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tsScopeConfigFileList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_sConfigName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)cErrorLoad @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)1 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(18)cErrorTooManyFiles @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)2 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(18)cErrorParamInvalid @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)3 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(17)csCfgAutoLoadFile @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(10)'autoLoad' @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)csCfgPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(22)'workspace/data/scope' @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)msBaseDeviceName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)plugged in usb device name @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)msUsbDeviceName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)plugged in usb device name @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mbInitCheck @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbUsbPostCheck @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fileDirBrowser @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)KFILE_FastDirBrowser @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mbCmdActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

9 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(7)pRunCmd @STRUCTURED_TEXT 
@RT(0) @RT(23)sv_ScopeHmiCmd.iCmdCtrl @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aCmdDone @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)iRetCode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)iTmp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aLoad @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(8)Filename @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)Device @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)sFilename @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(14)fCheckAutoLoad @STRUCTURED_TEXT 
@RT(4)DINT @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(6)Device @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)RetCode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(12)fAppendFiles @STRUCTURED_TEXT 
@RT(4)DINT @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(6)Device @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)sFile @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)sFolder @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)iTmpPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paLoad @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(8)iRetCode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(11)paListFiles @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(8)iRetCode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(13)evaUsbChanged @STRUCTURED_TEXT 
@RT(0) @RT(10)evUsbEvent @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(12)usbEventData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KPUSB_Event_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((sv_ScopeHmiCmd.iCmdCtrl MOD 2) = 1) THEN
    IF mbCmdActive THEN
        RETURN;     
    END_IF;
   
    CASE sv_ScopeHmiCmd.iCmdSel OF
        cScopeCmdLoad: 
            mbCmdActive := TRUE; 
            START_PROCESS_ALGORITHM(paLoad);

        cScopeCmdListFiles:
            mbCmdActive := TRUE;                                     
            START_PROCESS_ALGORITHM(paListFiles);
    ELSE
        sv_ScopeHmiCmd.iCmdRet := 0;            
        sv_ScopeHmiCmd.iCmdCtrl := sv_ScopeHmiCmd.iCmdCtrl + 1;
    END_CASE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iTmp := sv_ScopeHmiCmd.iCmdCtrl;
iTmp := iTmp + (iTmp MOD 2); 
sv_ScopeHmiCmd.iCmdCtrl := iTmp;  // i MOD 2 = 0 
sv_ScopeHmiCmd.iCmdRet := iRetCode;
mbCmdActive := FALSE;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (Device = '') THEN
   Error := TRUE;
   RETURN;
END_IF;

// use absolute path for load function
sFilename := CONCAT(Device, '/' , csCfgPath, '/', Filename, '.cfg');
g_abScope.aLoad(Filename := sFilename);
Error := g_abScope.aLoad.Error;
IF(NOT Error) THEN
   // set the configuration name 
   sv_sConfigName := Filename;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

RetCode := 0;
FOR i := 1 TO sv_ScopeConfigFileList.iFileCount DO
   IF (sv_ScopeConfigFileList.yFile[i].sName = csCfgAutoLoadFile AND 
       sv_ScopeConfigFileList.yFile[i].sDevice = Device) THEN
      aLoad(Filename := sv_ScopeConfigFileList.yFile[i].sName, 
            Device := Device);
      IF aLoad.Error THEN
         RetCode := cErrorLoad;
      END_IF;
   END_IF;
END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(49)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (Device = '') THEN
   fAppendFiles := 0;
   RETURN;
END_IF;

i := sv_ScopeConfigFileList.iFileCount; 
sFolder := CONCAT(Device, '/', csCfgPath);
fileDirBrowser(Execute := FALSE);

REPEAT
   fileDirBrowser(Execute := TRUE, Directory := sFolder, Entry := sFile);
   IF (fileDirBrowser.State = KFILE_Status_OK) THEN
      IF(LEN(sFile) > 4 AND RIGHT(TOLOWER(sFile),  4) = '.cfg') THEN
         i := i + 1; 
         
         IF (i > cMaxScopeConfigFileCount) THEN
            sv_ScopeConfigFileList.iFileCount := cMaxScopeConfigFileCount;         
            fAppendFiles := cErrorTooManyFiles;
            RETURN;
         END_IF;
         
         REPEAT
            iTmpPos := FIND(sFile, '/');
            IF (iTmpPos > 0) THEN
               sFile := RIGHT(sFile, LEN(sFile) - iTmpPos);
            END_IF;
         UNTIL (iTmpPos = 0)
         END_REPEAT;
         sFile := LEFT(sFile, LEN(sFile) - 4);   
         
         sv_ScopeConfigFileList.yFile[i].sName := sFile; 
         sv_ScopeConfigFileList.yFile[i].sDevice := Device;
      
      END_IF;
   END_IF;
   UNTIL (fileDirBrowser.State = KFILE_Status_NOTOK)
END_REPEAT;

sv_ScopeConfigFileList.iFileCount := i; 
fAppendFiles := 0;




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iRetCode := 0;
IF (sv_ScopeHmiCmd.iCmdOpt > 0 AND 
    sv_ScopeHmiCmd.iCmdOpt <= sv_ScopeConfigFileList.iFileCount)  THEN
   
   aLoad(Filename := sv_ScopeConfigFileList.yFile[sv_ScopeHmiCmd.iCmdOpt].sName, 
         Device := sv_ScopeConfigFileList.yFile[sv_ScopeHmiCmd.iCmdOpt].sDevice);
   IF aLoad.Error THEN
      iRetCode := cErrorLoad;
   END_IF;
   
ELSE  
   iRetCode := cErrorParamInvalid;
END_IF;

aCmdDone(iRetCode);
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(29)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iRetCode := 0;
sv_ScopeConfigFileList.iFileCount := 0;

// add files from CF and USB
iRetCode := fAppendFiles(msBaseDeviceName);
IF (iRetCode = 0) THEN
   iRetCode := fAppendFiles(msUsbDeviceName);
END_IF;

// check autoloading
IF (iRetCode = 0) THEN
   IF (NOT mbInitCheck) THEN
      iRetCode := fCheckAutoLoad(Device := msBaseDeviceName);
      mbInitCheck := TRUE;
   END_IF;
   IF (mbUsbPostCheck AND iRetCode = 0)THEN
      iRetCode := fCheckAutoLoad(Device := msUsbDeviceName);
      mbUsbPostCheck := FALSE;
   END_IF;
END_IF;

aCmdDone(iRetCode);
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

msBaseDeviceName := FGetCatConfigValueString('System.workPath', '/harddisk0/');
START_PROCESS_ALGORITHM(paListFiles);
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (usbEventData.EventType = KPUSB_EventType_Attach) THEN
   msUsbDeviceName := usbEventData.DeviceName; 
ELSE
   msUsbDeviceName := ''; 
END_IF;

g_abScope.aSetDevice(msUsbDeviceName);

// update list of files
sv_ScopeHmiCmd.iCmdSel := cScopeCmdListFiles;
IF ((sv_ScopeHmiCmd.iCmdCtrl MOD 2) = 0) THEN
   // use ctrl here to get a callback to the HMI (if the list changes)
   sv_ScopeHmiCmd.iCmdCtrl := sv_ScopeHmiCmd.iCmdCtrl + 1;
   mbUsbPostCheck := TRUE;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
