(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

*)

IMPORT_OVER_LISTFILE
 START_PROCESS_ALGORITHM
, cCompMold
, cMoveFwdInterPos
, cMoveFwd
, cMoveBwd
, cMoveBwdInterPos
, cCompInjection
, cMoveInject
, cMovePlast
, TON
, tevMovementState
, tpTriggerData
, tsTriggerData
, tevMovementStateData
, tnActiveInactive

END_IMPORT

ALGORITHM_BLOCK ABScopeTrigger #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 EV_Task_3 : TASK;
 Task10ms : TASK;
 evMovementState : tevMovementState;
END_OBJECT

VAR
 fbTimer : TON;
 mevMovementState : tevMovementState (* movement state event *);
 mpbCustomVarTriggerPU : REFTO BOOL;
 mpTriggerPU : tpTriggerData;
 mpTrigger : tpTriggerData;
 mbInit : BOOL;
END_VAR

ALGORITHM aReset

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

mpTrigger^.iState := 0;
mpTrigger^.Reduction.iAct := 0;




;#END_EDIT_BLOCK END_ALGORITHM

FUNCTION fArm : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 bArm : BOOL (* true activates the waiting for the trigger event *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

mpTrigger^.bTriggered := FALSE;
mpTrigger^.bPreTriggered := FALSE;
mevMovementState := EMPTY;
mpbCustomVarTriggerPU := EMPTY;
mpTriggerPU := EMPTY;

STOP_PROCESS_ALGORITHM(paTriggerDelay);

IF bArm THEN   
   // activate the events
   CASE mpTrigger^.iTriggerIdx OF
      0: // no trigger 
         RETURN;
     
      1..4: // movement triggers
         mevMovementState := evMovementState;
      
      5: // variable trigger
         mpTrigger^.pbCustomVarTrigger^ := FALSE;
         mpbCustomVarTriggerPU := mpTrigger^.pbCustomVarTrigger;

      
   END_CASE;   
   mpTriggerPU := mpTrigger;   
   mpTrigger^.Reduction.iAct := 0;
   mpTrigger^.iState := 1;
END_IF;


fArm := TRUE;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fCheckMovementTrigger : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 triggerData : tsTriggerData;
 evMovementStateData : tevMovementStateData;
END_VAR

VAR
 nState : tnActiveInactive;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fCheckMovementTrigger := FALSE;

nState := nActive;
IF (triggerData.bFallingEdge) THEN
   nState := nInactive;
END_IF;

IF (evMovementStateData.State = nState) AND    
   (//mold close (interposition)
   (triggerData.iTriggerIdx = 1 AND evMovementStateData.DeviceId.CompId = cCompMold AND            
   evMovementStateData.DeviceId.IndexId = 1 AND (evMovementStateData.MoveId = cMoveFwdInterPos OR evMovementStateData.MoveId = cMoveFwd) AND
   evMovementStateData.MoveDir = cMoveFwd) OR                                           
   //mold open (interposition)
   (triggerData.iTriggerIdx = 2 AND evMovementStateData.DeviceId.CompId = cCompMold AND            
   evMovementStateData.DeviceId.IndexId = 1 AND (evMovementStateData.MoveId = cMoveBwdInterPos OR evMovementStateData.MoveId = cMoveBwd) AND
   evMovementStateData.MoveDir = cMoveBwd) OR
   //inject
   (triggerData.iTriggerIdx = 3 AND evMovementStateData.DeviceId.CompId = cCompInjection AND            
   evMovementStateData.DeviceId.IndexId = 1 AND evMovementStateData.MoveId = cMoveInject AND
   evMovementStateData.MoveDir = cMoveFwd) OR
   //plast     
   (triggerData.iTriggerIdx = 4 AND evMovementStateData.DeviceId.CompId = cCompInjection AND            
   evMovementStateData.DeviceId.IndexId = 1 AND evMovementStateData.MoveId = cMovePlast AND
   evMovementStateData.MoveDir = cMoveBwd)) THEN    
   
   fCheckMovementTrigger := TRUE;
END_IF;    





;#END_EDIT_BLOCK END_FUNCTION

ALGORITHM aTrigger

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// after ingnition occured, trigger immediately or wait until delay expired
IF (mpTrigger^.dTriggerDelay > t#0.0s) THEN
   fbTimer(IN := FALSE);
   START_PROCESS_ALGORITHM(paTriggerDelay);
ELSE
   // trigger immediately
   mpTrigger^.bTriggered := TRUE;
   mpTrigger^.iState := 2;   
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInit


VAR_INPUT
 pTrigger : tpTriggerData;
END_VAR

VAR
 b : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpTrigger := pTrigger;
mpTriggerPU := EMPTY;
mpbCustomVarTriggerPU := EMPTY;

fbTimer(IN := FALSE);

b := fArm(FALSE);
aReset();

mbInit := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paTriggerDelay ON Task10ms

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbTimer(IN := TRUE, PT := mpTrigger^.dTriggerDelay);

IF fbTimer.Q THEN
   // time-trigger after trigger is ignited and delay is expired
   mpTrigger^.bTriggered := TRUE;
   mpTrigger^.iState := 2;   
   STOP_PROCESS_ALGORITHM();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pPreTriggered ON PU_Task_7 WITH mpTriggerPU^.bPreTriggered

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

IF (mpTrigger^.bPreTriggered AND mpTrigger^.Reduction.iAct < mpTrigger^.Reduction.iSet) THEN

   mpTrigger^.Reduction.iAct := mpTrigger^.Reduction.iAct + 1;
   IF (mpTrigger^.Reduction.iAct = mpTrigger^.Reduction.iSet) THEN
      aTrigger();      
   END_IF;
   mpTrigger^.bPreTriggered := FALSE;
END_IF;                                              






;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pVarTriggered ON PU_Task_7 WITH mpbCustomVarTriggerPU^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (mpTrigger^.iTriggerIdx = 5) THEN
   IF ((mpbCustomVarTriggerPU^ AND NOT mpTrigger^.bFallingEdge) OR
       (NOT mpbCustomVarTriggerPU^ AND mpTrigger^.bFallingEdge)) THEN
      mpTrigger^.bPreTriggered := TRUE;
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaMovementState ON EV_Task_3 WITH mevMovementState


VAR_INPUT
 evMovementStateData : tevMovementStateData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF fCheckMovementTrigger(mpTrigger^, evMovementStateData) THEN
   mpTrigger^.bPreTriggered := TRUE;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 150 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
8 
@Var @RT(9)cCompMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)101 @RT(14)Component Mold 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cMoveFwdInterPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)17 @RT(37)move forward to intermediate position 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cMoveBwdInterPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)16 @RT(38)move backward to intermediate position 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cCompInjection @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)104 @RT(19)Component Injection 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)cMoveInject @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)14 @RT(15)inject movement 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cMovePlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)13 @RT(23)plast movement (rotate) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABScopeTrigger @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)Task10ms @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)fbTimer @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)evMovementState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tevMovementState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)mevMovementState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tevMovementState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)movement state event @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mpbCustomVarTriggerPU @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mpTriggerPU @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tpTriggerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mpTrigger @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(13)tpTriggerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mbInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

9 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aReset @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(4)fArm @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(4)bArm @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(48)true activates the waiting for the trigger event @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(21)fCheckMovementTrigger @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(11)triggerData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsTriggerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)evMovementStateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tevMovementStateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)nState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tnActiveInactive @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aTrigger @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)pTrigger @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tpTriggerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(14)paTriggerDelay @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pPreTriggered @STRUCTURED_TEXT 
@RT(0) @RT(26)mpTriggerPU^.bPreTriggered @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pVarTriggered @STRUCTURED_TEXT 
@RT(0) @RT(22)mpbCustomVarTriggerPU^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(16)evaMovementState @STRUCTURED_TEXT 
@RT(0) @RT(16)mevMovementState @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(19)evMovementStateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tevMovementStateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

mpTrigger^.iState := 0;
mpTrigger^.Reduction.iAct := 0;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(40)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

mpTrigger^.bTriggered := FALSE;
mpTrigger^.bPreTriggered := FALSE;
mevMovementState := EMPTY;
mpbCustomVarTriggerPU := EMPTY;
mpTriggerPU := EMPTY;

STOP_PROCESS_ALGORITHM(paTriggerDelay);

IF bArm THEN   
   // activate the events
   CASE mpTrigger^.iTriggerIdx OF
      0: // no trigger 
         RETURN;
     
      1..4: // movement triggers
         mevMovementState := evMovementState;
      
      5: // variable trigger
         mpTrigger^.pbCustomVarTrigger^ := FALSE;
         mpbCustomVarTriggerPU := mpTrigger^.pbCustomVarTrigger;

      
   END_CASE;   
   mpTriggerPU := mpTrigger;   
   mpTrigger^.Reduction.iAct := 0;
   mpTrigger^.iState := 1;
END_IF;


fArm := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(36)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fCheckMovementTrigger := FALSE;

nState := nActive;
IF (triggerData.bFallingEdge) THEN
   nState := nInactive;
END_IF;

IF (evMovementStateData.State = nState) AND    
   (//mold close (interposition)
   (triggerData.iTriggerIdx = 1 AND evMovementStateData.DeviceId.CompId = cCompMold AND            
   evMovementStateData.DeviceId.IndexId = 1 AND (evMovementStateData.MoveId = cMoveFwdInterPos OR evMovementStateData.MoveId = cMoveFwd) AND
   evMovementStateData.MoveDir = cMoveFwd) OR                                           
   //mold open (interposition)
   (triggerData.iTriggerIdx = 2 AND evMovementStateData.DeviceId.CompId = cCompMold AND            
   evMovementStateData.DeviceId.IndexId = 1 AND (evMovementStateData.MoveId = cMoveBwdInterPos OR evMovementStateData.MoveId = cMoveBwd) AND
   evMovementStateData.MoveDir = cMoveBwd) OR
   //inject
   (triggerData.iTriggerIdx = 3 AND evMovementStateData.DeviceId.CompId = cCompInjection AND            
   evMovementStateData.DeviceId.IndexId = 1 AND evMovementStateData.MoveId = cMoveInject AND
   evMovementStateData.MoveDir = cMoveFwd) OR
   //plast     
   (triggerData.iTriggerIdx = 4 AND evMovementStateData.DeviceId.CompId = cCompInjection AND            
   evMovementStateData.DeviceId.IndexId = 1 AND evMovementStateData.MoveId = cMovePlast AND
   evMovementStateData.MoveDir = cMoveBwd)) THEN    
   
   fCheckMovementTrigger := TRUE;
END_IF;    




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// after ingnition occured, trigger immediately or wait until delay expired
IF (mpTrigger^.dTriggerDelay > t#0.0s) THEN
   fbTimer(IN := FALSE);
   START_PROCESS_ALGORITHM(paTriggerDelay);
ELSE
   // trigger immediately
   mpTrigger^.bTriggered := TRUE;
   mpTrigger^.iState := 2;   
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpTrigger := pTrigger;
mpTriggerPU := EMPTY;
mpbCustomVarTriggerPU := EMPTY;

fbTimer(IN := FALSE);

b := fArm(FALSE);
aReset();

mbInit := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbTimer(IN := TRUE, PT := mpTrigger^.dTriggerDelay);

IF fbTimer.Q THEN
   // time-trigger after trigger is ignited and delay is expired
   mpTrigger^.bTriggered := TRUE;
   mpTrigger^.iState := 2;   
   STOP_PROCESS_ALGORITHM();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

IF (mpTrigger^.bPreTriggered AND mpTrigger^.Reduction.iAct < mpTrigger^.Reduction.iSet) THEN

   mpTrigger^.Reduction.iAct := mpTrigger^.Reduction.iAct + 1;
   IF (mpTrigger^.Reduction.iAct = mpTrigger^.Reduction.iSet) THEN
      aTrigger();      
   END_IF;
   mpTrigger^.bPreTriggered := FALSE;
END_IF;                                              





@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (mpTrigger^.iTriggerIdx = 5) THEN
   IF ((mpbCustomVarTriggerPU^ AND NOT mpTrigger^.bFallingEdge) OR
       (NOT mpbCustomVarTriggerPU^ AND mpTrigger^.bFallingEdge)) THEN
      mpTrigger^.bPreTriggered := TRUE;
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF fCheckMovementTrigger(mpTrigger^, evMovementStateData) THEN
   mpTrigger^.bPreTriggered := TRUE;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
