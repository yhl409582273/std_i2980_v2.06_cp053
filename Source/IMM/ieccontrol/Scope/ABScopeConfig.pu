(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


*)

IMPORT_OVER_LISTFILE
 FGetSysVarFromName
, FGetCatConfigValueString
, KCAT_GetValue
, FAddVarToScope
, KCAT_RemoveDir
, KCAT_GetHandle
, KSWO_DeactivateVar
, GET_RUNTIME
, KCAT_Load
, KCAT_GetName
, cScopeCfgBasePath
, tsTraceLevel
, tySamplerData
, KCAT_HandleData
, KCAT_Status
, tnScopeGroupAction
, KSWO_Status
, tsSV
, tnSVDataTypes
, KCAT_TypeData
, KCAT_NameData
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABScopeConfig #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 TaskAnalog : TASK;
 TaskInject : TASK;
 TaskSlow : TASK;
 TaskHeating : TASK;
END_OBJECT

VAR
 mSamplers : tySamplerData;
 mbInit : BOOL;
END_VAR

VAR CONSTANT
 cScopeCfgCatParam : STRING(32) := 'Param' (* dynamic configuration node *);
END_VAR

FUNCTION fGetConfigEntryUDINT : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 EntryName : STRING(255);
END_VAR

VAR_IN_OUT
 Value : UDINT;
END_VAR

VAR
 CatHandleData : KCAT_HandleData;
 catStatus : KCAT_Status;
 bFound : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bFound := FALSE;
Value := 0;

// first read custom setting
CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam, '.', EntryName));
IF (CatHandleData.Status = KCAT_Status_OK) THEN
   catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
   bFound := (catStatus = KCAT_Status_OK);   
ELSE
   // use initial setting if no custom exists
   CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', EntryName));
   IF (CatHandleData.Status = KCAT_Status_OK) THEN
      catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
      bFound := (catStatus = KCAT_Status_OK);   
   END_IF;
END_IF;

fGetConfigEntryUDINT := bFound;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fGetConfigEntrySTRING : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 EntryName : STRING(255);
END_VAR

VAR_IN_OUT
 Value : STRING(255);
END_VAR

VAR
 CatHandleData : KCAT_HandleData;
 catStatus : KCAT_Status;
 bFound : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bFound := FALSE;
Value := '';

// first read custom setting
CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam, '.', EntryName));
IF (CatHandleData.Status = KCAT_Status_OK) THEN
   catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
   bFound := (catStatus = KCAT_Status_OK);   
ELSE
   // use initial setting if no custom exists   
   CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', EntryName));
   IF (CatHandleData.Status = KCAT_Status_OK) THEN
      catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
      bFound := (catStatus = KCAT_Status_OK);   
   END_IF;
END_IF;

fGetConfigEntrySTRING := bFound;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fGetSamplerIdFromName : UDINT
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 Name : STRING(32);
END_VAR

VAR
 I : UDINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fGetSamplerIdFromName := 0;

IF (NOT mbInit) THEN
   RETURN;
END_IF;

FOR I := GET_LOW_BOUND(mSamplers) TO GET_HIGH_BOUND(mSamplers) DO
   IF (mSamplers[I].sTaskName = Name) THEN
      fGetSamplerIdFromName := I;
      RETURN;
   END_IF;
END_FOR;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fGetSampler : tySamplerData
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


fGetSampler := mSamplers;


;#END_EDIT_BLOCK END_FUNCTION

ALGORITHM aActivateVar


VAR_INPUT
 CatPath : STRING(255);
 Action : tnScopeGroupAction;
END_VAR

VAR_OUTPUT
 Error : BOOL;
END_VAR

VAR
 CatStatus : KCAT_Status;
 CatHandleData : KCAT_HandleData;
 CatHandle : KCAT_HandleData;
 dummy : DINT;
 sName : STRING(255);
 sTask : STRING(32);
 sVariable : STRING(255);
 bForceDeactive : BOOL;
 time : TIME;
 SwoStatus : KSWO_Status;
 iTemp : DINT;
 SysVar : tsSV;
 nSysVarType : tnSVDataTypes;
 bError : BOOL;
 sHelp : STRING(255);
 sType : STRING(15);
 iId : UDINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;   

time := GET_RUNTIME();

sName := '';
sTask := '';
sVariable := '';      
bForceDeactive := FALSE;

CatHandleData := KCAT_GetHandle(CatPath);
CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.forceDeactive'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, iTemp);        
   bForceDeactive := (iTemp <> 0);
END_IF;         

CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.name'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, sName);
END_IF;         

CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.task'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, sTask);
END_IF;         
   
CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.variable'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, sVariable);
END_IF;         

bError := FALSE;
CASE Action OF
   
   nGroupActionAdd: // add
      IF(NOT bForceDeactive) THEN
         nSysVarType := FGetSysVarFromName(sVariable, SysVar); 
         iId := fGetSamplerIdFromName(sTask); 
         bError := (iId = 0 OR nSysVarType = nDT_NONE);
         IF NOT bError THEN
            bError := FAddVarToScope(sName, mSamplers[iId].Task, nSysVarType, SysVar);         
         END_IF;
      END_IF;
   
   nGroupActionActivate: // activate
      iId := fGetSamplerIdFromName(sTask);
      bError := (iId = 0);
      IF NOT bError THEN   
         IF bForceDeactive THEN
            IF sv_TraceLevel.bApplication THEN
               dummy := Print('Scope: forced deactivation of variable "%s" in %s', sName, sTask);
            END_IF;
            SwoStatus := KSWO_DeactivateVar(mSamplers[iId].Task, sName);
            IF (SwoStatus = KSWO_Status_OK AND mSamplers[iId].iActiveVarCnt > 0) THEN
               mSamplers[iId].iActiveVarCnt := mSamplers[iId].iActiveVarCnt - 1;
            END_IF;
            SwoStatus := KSWO_Status_OK; // force deactive should always succeed
         ELSE
            SwoStatus := KSWO_ActivateVar(mSamplers[iId].Task, sName);                        
            IF (SwoStatus = KSWO_Status_OK) THEN
               mSamplers[iId].iActiveVarCnt := mSamplers[iId].iActiveVarCnt + 1;
            END_IF;
         END_IF;
         bError := (SwoStatus <> KSWO_Status_OK);
      END_IF;         
   
   nGroupActionDeactivate: // deactivate
      iId := fGetSamplerIdFromName(sTask);
      bError := (iId = 0);
      IF (NOT bError AND NOT bForceDeactive) THEN      
         SwoStatus := KSWO_DeactivateVar(mSamplers[iId].Task, sName);
         IF (SwoStatus = KSWO_Status_OK AND mSamplers[iId].iActiveVarCnt > 0) THEN
            mSamplers[iId].iActiveVarCnt := mSamplers[iId].iActiveVarCnt - 1;
         END_IF;
         bError := (SwoStatus <> KSWO_Status_OK);
      END_IF;   
         
   nGroupActionRemove: // remove
      IF (NOT bForceDeactive) THEN
         iId := fGetSamplerIdFromName(sTask);
         bError := (iId = 0);
         IF NOT bError THEN
            SwoStatus := KSWO_RemoveVariable(mSamplers[iId].Task, sName);
            bError := (SwoStatus <> KSWO_Status_OK);
         END_IF;            
      END_IF;
         
END_CASE;
Error := bError;

// debug
IF sv_TraceLevel.bApplication AND bError THEN
   CASE Action OF
      nGroupActionAdd: sType := 'Add';
      nGroupActionActivate: sType := 'Activate';
      nGroupActionDeactivate: sType := 'Deactivate';
      nGroupActionRemove: sType := 'Remove';
   END_CASE;
   time := GET_RUNTIME() - time;
   sHelp :=  TIME_TO_STRING(time);
   dummy := Print('Scope: error var "%s" -> %s, duration %s', sName, sType, sHelp);   
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aActivateGroup


VAR_INPUT
 CatPath : STRING(255);
 Action : tnScopeGroupAction;
END_VAR

VAR
 CatRootData : KCAT_HandleData;
 CatHandleData : KCAT_HandleData;
 CatType : KCAT_TypeData;
 dummy : DINT;
 CatName : KCAT_NameData;
 time : TIME;
 iTemp : DINT;
 bError : BOOL;
 sHelp : STRING(255);
 sType : STRING(15);
 sCatName : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;   
bError := FALSE;
time := GET_RUNTIME();

CatRootData := KCAT_GetHandle(CatPath);
IF (CatRootData.Status <> KCAT_Status_OK) THEN
   bError := TRUE;
ELSE
   CatHandleData := KCAT_GetFirst(CatRootData.Handle);   
END_IF;

WHILE (NOT bError AND CatHandleData.Status = KCAT_Status_OK) DO     
  
   CatType := KCAT_GetType(CatHandleData.Handle);        
      
   IF (CatType.Type = KCAT_Type_None) THEN
      CatName := KCAT_GetName(CatHandleData.Handle);
      
      sCatName := CONCAT(CatPath, '.Var:');
      iTemp := FIND(CatName.Name, sCatName);
      IF (iTemp > 0) THEN         
         aActivateVar(CatName.Name, Action);
      END_IF;
      
   END_IF;
   CatHandleData := KCAT_GetNext(CatHandleData.Handle);   
END_WHILE;   


// debug
IF sv_TraceLevel.bApplication AND bError THEN
   CASE Action OF
      nGroupActionAdd: sType := 'Add';
      nGroupActionActivate: sType := 'Activate';
      nGroupActionDeactivate: sType := 'Deactivate';
      nGroupActionRemove: sType := 'Remove';
   END_CASE;
   time := GET_RUNTIME() - time;
   sHelp :=  TIME_TO_STRING(time);
   dummy := Print('Scope: error group "%s" -> %s, duration %s', CatPath, sType, sHelp);   
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aActivateConfig


VAR_INPUT
 Action : tnScopeGroupAction;
END_VAR

VAR
 sCatNode : STRING(255);
 CatRootData : KCAT_HandleData;
 CatHandleData : KCAT_HandleData;
 CatType : KCAT_TypeData;
 dummy : DINT;
 CatName : KCAT_NameData;
 time : TIME;
 sHelp : STRING(255);
 iCount : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iCount := 0;

IF (NOT mbInit) THEN
   RETURN;
END_IF;   


time := GET_RUNTIME();
sCatNode := CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam);
CatRootData := KCAT_GetHandle(sCatNode);
IF (CatRootData.Status <> KCAT_Status_OK) THEN
   RETURN;
END_IF;

CatHandleData := KCAT_GetFirst(CatRootData.Handle);
WHILE (CatHandleData.Status = KCAT_Status_OK) DO     
  
   CatType := KCAT_GetType(CatHandleData.Handle); 
   IF (CatType.Type = KCAT_Type_None) THEN
      CatName := KCAT_GetName(CatHandleData.Handle);
      
      IF (FIND(CatName.Name, CONCAT(sCatNode, '.Group:')) > 0) THEN
         // Group:<n>
         // find the catalog reference to the IEC group
         IF (Action <> nGroupActionAdd AND
             Action <> nGroupActionRemove) THEN
            // never remove/add variables in group references
            sHelp := CONCAT(cScopeCfgBasePath, '.Group:', 
                           RIGHT(CatName.Name, LEN(CatName.Name)-LEN(CONCAT(sCatNode, '.Group:'))));
            aActivateGroup(sHelp, Action);
         END_IF;            
            
      ELSIF (FIND(CatName.Name, CONCAT(sCatNode, '.Var:')) > 0) THEN        
         // Var:<n>
         aActivateVar(CatName.Name, Action); 
      END_IF;   
   END_IF;
   CatHandleData := KCAT_GetNext(CatHandleData.Handle);   
END_WHILE;   

// debug
IF sv_TraceLevel.bApplication THEN
   time := GET_RUNTIME() - time;
   sHelp :=  TIME_TO_STRING(time);
   dummy := Print('Scope: activate config finished, duration %s', sHelp);   
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aLoadConfig


VAR_INPUT
 CfgFile : STRING(255);
END_VAR

VAR_OUTPUT
 Error : BOOL;
END_VAR

VAR
 CatBaseHandle : KCAT_HandleData;
 sCatBase : STRING(255);
 catStatus : KCAT_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (CfgFile = '') THEN
   Error := TRUE;
   RETURN;
END_IF;

// deactivate and unload active groups/vars
aActivateConfig(Action := nGroupActionRemove);

// remove custom node and all sub-nodes
sCatBase := CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam);
CatBaseHandle := KCAT_GetHandle(sCatBase);
IF (CatBaseHandle.Status = KCAT_Status_OK) THEN
   catStatus := KCAT_RemoveDir(CatBaseHandle.Handle);
END_IF;   

// re-read configuration
catStatus := KCAT_Load(CfgFile);   
Error := (catStatus <> KCAT_Status_OK);

// check node existance
CatBaseHandle := KCAT_GetHandle(sCatBase);
Error := (CatBaseHandle.Status <> KCAT_Status_OK);


// activate and add new groups/vars
IF (NOT Error) THEN
   aActivateConfig(Action := nGroupActionAdd);
END_IF;








;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aReadConfig


VAR_IN_OUT
 MeasureTime : TIME;
 MeasureTimeStop : BOOL;
 MeasureCycles : UDINT;
 StartTriggerIdx : UDINT;
 StartTriggerFallingEdge : BOOL;
 StartTriggerCounter : UDINT;
 StartTriggerDelay : TIME;
 StartCustomTrigger : REFTO BOOL;
 StopTriggerIdx : UDINT;
 StopTriggerFallingEdge : BOOL;
 StopTriggerCounter : UDINT;
 StopTriggerDelay : TIME;
 StopCustomTrigger : REFTO BOOL;
 ExportType : UDINT;
END_VAR

VAR_OUTPUT
 ExportPath : STRING(255);
 SavePath : STRING(255);
 FileName : STRING(32);
 AutoStart : BOOL;
END_VAR

VAR
 dummy : DINT;
 sysStatus : KSYS_Status;
 iValue : UDINT;
 sValue : STRING(255);
 pbCustomVar : REFTO BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (fGetConfigEntryUDINT('triggerStartType', iValue)) THEN
   StartTriggerIdx := iValue;
END_IF;   

IF (fGetConfigEntryUDINT('triggerStopType', iValue)) THEN
   StopTriggerIdx := iValue;
END_IF;                                                   

IF (fGetConfigEntrySTRING('triggerStartCustomVar', sValue)) THEN
   pbCustomVar := GET_SYNC_REFTO(sValue, t#0s, sysStatus);
   IF (sysStatus = KSYS_Status_OK) THEN
      StartCustomTrigger := pbCustomVar;
   ELSE
      dummy := Print('Scope: Could not obtain reference to custom start trigger %s, using default', sValue);      
   END_IF;         
END_IF;

IF (fGetConfigEntrySTRING('triggerStopCustomVar', sValue)) THEN
   pbCustomVar := GET_SYNC_REFTO(sValue, t#0s, sysStatus);
   IF (sysStatus = KSYS_Status_OK) THEN
      StopCustomTrigger := pbCustomVar;
   ELSE  
      dummy := Print('Scope: Could not obtain reference to custom stop trigger %s, using default', sValue);      
   END_IF;         
END_IF;

IF (fGetConfigEntryUDINT('triggerStartDelay', iValue)) THEN //msec
   StartTriggerDelay := LINT_TO_TIME(UDINT_TO_LINT(iValue)*1000);   
END_IF;              

IF (fGetConfigEntryUDINT('triggerStopDelay', iValue)) THEN //msec
   StopTriggerDelay := LINT_TO_TIME(UDINT_TO_LINT(iValue)*1000);   
END_IF;                                                   

IF (fGetConfigEntryUDINT('triggerStartCounter', iValue)) THEN 
   IF iValue > 0 THEN
      StartTriggerCounter := iValue;
   ELSE
      StartTriggerCounter := 1;
   END_IF;
END_IF;

IF (fGetConfigEntryUDINT('triggerStopCounter', iValue)) THEN 
   IF iValue > 0 THEN
      StopTriggerCounter := iValue;
   ELSE
      StopTriggerCounter := 1;
   END_IF;
END_IF;

IF (fGetConfigEntryUDINT('triggerStartFallingEdge', iValue)) THEN 
   StartTriggerFallingEdge := (iValue <> 0);
END_IF;

IF (fGetConfigEntryUDINT('triggerStopFallingEdge', iValue)) THEN 
   StopTriggerFallingEdge := (iValue <> 0);
END_IF;


IF (fGetConfigEntryUDINT('measureTime', iValue)) THEN //sec
   MeasureTime := LINT_TO_TIME(UDINT_TO_LINT(iValue)*1000000);
END_IF;              

IF (fGetConfigEntryUDINT('measureTimeStop', iValue)) THEN
   MeasureTimeStop := (iValue <> 0);
END_IF;   

IF (fGetConfigEntryUDINT('measureCycles', iValue)) THEN
   MeasureCycles := iValue;
END_IF;                                                   

IF (fGetConfigEntrySTRING('fileName', sValue)) THEN
   FileName := sValue;
ELSE
   FileName := 'scope';
END_IF;   

IF (fGetConfigEntryUDINT('exportType', iValue)) THEN 
   ExportType := iValue;
END_IF;

AutoStart := FALSE;
IF (fGetConfigEntryUDINT('autoStart', iValue)) THEN 
   AutoStart := (iValue <> 0);
END_IF;                                                       

IF (fGetConfigEntrySTRING('savePath', sValue)) THEN
   SavePath := sValue;
ELSE
   sValue := FGetCatConfigValueString('System.workPath', '/harddisk0/');
   sValue := CONCAT(sValue, 'protocol/scope/');
   SavePath := sValue;
END_IF;

IF (fGetConfigEntrySTRING('exportPath', sValue)) THEN
   ExportPath := sValue;
ELSE
   ExportPath := '/scope/';
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInit

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// initialize samplers
mSamplers[1].Task := TaskInject;
mSamplers[2].Task := TaskAnalog;
mSamplers[3].Task := TaskHeating;
mSamplers[4].Task := TaskSlow;

mSamplers[1].sTaskName := GET_TASK_NAME(mSamplers[1].Task);
mSamplers[2].sTaskName := GET_TASK_NAME(mSamplers[2].Task);
mSamplers[3].sTaskName := GET_TASK_NAME(mSamplers[3].Task);
mSamplers[4].sTaskName := GET_TASK_NAME(mSamplers[4].Task);

mbInit := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 150 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
10 
@Var @RT(18)FGetSysVarFromName @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)FGetCatConfigValueString @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_GetValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)FAddVarToScope @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_RemoveDir @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_GetHandle @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)KSWO_DeactivateVar @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)KCAT_Load @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KCAT_GetName @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(17)cScopeCfgBasePath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(31)'Application.KePlast.IEC.Scope' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABScopeConfig @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(10)TaskAnalog @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)TaskHeating @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)cScopeCfgCatParam @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(7)'Param' @RT(26)dynamic configuration node @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(9)mSamplers @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tySamplerData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mbInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

10 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(20)fGetConfigEntryUDINT @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(9)EntryName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Value @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(13)CatHandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)catStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bFound @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(21)fGetConfigEntrySTRING @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(9)EntryName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Value @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(13)CatHandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)catStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bFound @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(21)fGetSamplerIdFromName @STRUCTURED_TEXT 
@RT(5)UDINT @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(4)Name @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)I @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(11)fGetSampler @STRUCTURED_TEXT 
@RT(13)tySamplerData @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aActivateVar @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
20 
@Var @RT(7)CatPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)Action @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tnScopeGroupAction @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)CatStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)CatHandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)CatHandle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sTask @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sVariable @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)bForceDeactive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)time @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)SwoStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTemp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)SysVar @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(4)tsSV @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)nSysVarType @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tnSVDataTypes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sHelp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sType @RT(0) @T @F @DT @RT(10)STRING(15) @RT(0) @T @T @STRING 0 @F @RT(2)15 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)iId @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(14)aActivateGroup @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(7)CatPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)Action @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tnScopeGroupAction @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)CatRootData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)CatHandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)CatType @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCAT_TypeData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)CatName @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCAT_NameData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)time @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTemp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sHelp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sType @RT(0) @T @F @DT @RT(10)STRING(15) @RT(0) @T @T @STRING 0 @F @RT(2)15 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sCatName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aActivateConfig @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(6)Action @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tnScopeGroupAction @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)sCatNode @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)CatRootData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)CatHandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)CatType @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCAT_TypeData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)CatName @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCAT_NameData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)time @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sHelp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)iCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aLoadConfig @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(7)CfgFile @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(13)CatBaseHandle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sCatBase @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)catStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aReadConfig @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
23 
@Var @RT(11)MeasureTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)MeasureTimeStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(13)MeasureCycles @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)StartTriggerIdx @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(23)StartTriggerFallingEdge @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(19)StartTriggerCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(17)StartTriggerDelay @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(18)StartCustomTrigger @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(14)StopTriggerIdx @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(22)StopTriggerFallingEdge @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(18)StopTriggerCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(16)StopTriggerDelay @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(17)StopCustomTrigger @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(10)ExportType @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(10)ExportPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(8)SavePath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(8)FileName @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)AutoStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sysStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)iValue @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sValue @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)pbCustomVar @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bFound := FALSE;
Value := 0;

// first read custom setting
CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam, '.', EntryName));
IF (CatHandleData.Status = KCAT_Status_OK) THEN
   catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
   bFound := (catStatus = KCAT_Status_OK);   
ELSE
   // use initial setting if no custom exists
   CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', EntryName));
   IF (CatHandleData.Status = KCAT_Status_OK) THEN
      catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
      bFound := (catStatus = KCAT_Status_OK);   
   END_IF;
END_IF;

fGetConfigEntryUDINT := bFound;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bFound := FALSE;
Value := '';

// first read custom setting
CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam, '.', EntryName));
IF (CatHandleData.Status = KCAT_Status_OK) THEN
   catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
   bFound := (catStatus = KCAT_Status_OK);   
ELSE
   // use initial setting if no custom exists   
   CatHandleData := KCAT_GetHandle(CONCAT(cScopeCfgBasePath, '.', EntryName));
   IF (CatHandleData.Status = KCAT_Status_OK) THEN
      catStatus := KCAT_GetValue(CatHandleData.Handle, Value);
      bFound := (catStatus = KCAT_Status_OK);   
   END_IF;
END_IF;

fGetConfigEntrySTRING := bFound;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fGetSamplerIdFromName := 0;

IF (NOT mbInit) THEN
   RETURN;
END_IF;

FOR I := GET_LOW_BOUND(mSamplers) TO GET_HIGH_BOUND(mSamplers) DO
   IF (mSamplers[I].sTaskName = Name) THEN
      fGetSamplerIdFromName := I;
      RETURN;
   END_IF;
END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


fGetSampler := mSamplers;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(111)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;   

time := GET_RUNTIME();

sName := '';
sTask := '';
sVariable := '';      
bForceDeactive := FALSE;

CatHandleData := KCAT_GetHandle(CatPath);
CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.forceDeactive'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, iTemp);        
   bForceDeactive := (iTemp <> 0);
END_IF;         

CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.name'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, sName);
END_IF;         

CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.task'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, sTask);
END_IF;         
   
CatHandle := KCAT_GetHandle(CONCAT(CatPath, '.variable'));
IF (CatHandle.Status  = KCAT_Status_OK) THEN
   CatStatus := KCAT_GetValue(CatHandle.Handle, sVariable);
END_IF;         

bError := FALSE;
CASE Action OF
   
   nGroupActionAdd: // add
      IF(NOT bForceDeactive) THEN
         nSysVarType := FGetSysVarFromName(sVariable, SysVar); 
         iId := fGetSamplerIdFromName(sTask); 
         bError := (iId = 0 OR nSysVarType = nDT_NONE);
         IF NOT bError THEN
            bError := FAddVarToScope(sName, mSamplers[iId].Task, nSysVarType, SysVar);         
         END_IF;
      END_IF;
   
   nGroupActionActivate: // activate
      iId := fGetSamplerIdFromName(sTask);
      bError := (iId = 0);
      IF NOT bError THEN   
         IF bForceDeactive THEN
            IF sv_TraceLevel.bApplication THEN
               dummy := Print('Scope: forced deactivation of variable "%s" in %s', sName, sTask);
            END_IF;
            SwoStatus := KSWO_DeactivateVar(mSamplers[iId].Task, sName);
            IF (SwoStatus = KSWO_Status_OK AND mSamplers[iId].iActiveVarCnt > 0) THEN
               mSamplers[iId].iActiveVarCnt := mSamplers[iId].iActiveVarCnt - 1;
            END_IF;
            SwoStatus := KSWO_Status_OK; // force deactive should always succeed
         ELSE
            SwoStatus := KSWO_ActivateVar(mSamplers[iId].Task, sName);                        
            IF (SwoStatus = KSWO_Status_OK) THEN
               mSamplers[iId].iActiveVarCnt := mSamplers[iId].iActiveVarCnt + 1;
            END_IF;
         END_IF;
         bError := (SwoStatus <> KSWO_Status_OK);
      END_IF;         
   
   nGroupActionDeactivate: // deactivate
      iId := fGetSamplerIdFromName(sTask);
      bError := (iId = 0);
      IF (NOT bError AND NOT bForceDeactive) THEN      
         SwoStatus := KSWO_DeactivateVar(mSamplers[iId].Task, sName);
         IF (SwoStatus = KSWO_Status_OK AND mSamplers[iId].iActiveVarCnt > 0) THEN
            mSamplers[iId].iActiveVarCnt := mSamplers[iId].iActiveVarCnt - 1;
         END_IF;
         bError := (SwoStatus <> KSWO_Status_OK);
      END_IF;   
         
   nGroupActionRemove: // remove
      IF (NOT bForceDeactive) THEN
         iId := fGetSamplerIdFromName(sTask);
         bError := (iId = 0);
         IF NOT bError THEN
            SwoStatus := KSWO_RemoveVariable(mSamplers[iId].Task, sName);
            bError := (SwoStatus <> KSWO_Status_OK);
         END_IF;            
      END_IF;
         
END_CASE;
Error := bError;

// debug
IF sv_TraceLevel.bApplication AND bError THEN
   CASE Action OF
      nGroupActionAdd: sType := 'Add';
      nGroupActionActivate: sType := 'Activate';
      nGroupActionDeactivate: sType := 'Deactivate';
      nGroupActionRemove: sType := 'Remove';
   END_CASE;
   time := GET_RUNTIME() - time;
   sHelp :=  TIME_TO_STRING(time);
   dummy := Print('Scope: error var "%s" -> %s, duration %s', sName, sType, sHelp);   
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(50)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;   
bError := FALSE;
time := GET_RUNTIME();

CatRootData := KCAT_GetHandle(CatPath);
IF (CatRootData.Status <> KCAT_Status_OK) THEN
   bError := TRUE;
ELSE
   CatHandleData := KCAT_GetFirst(CatRootData.Handle);   
END_IF;

WHILE (NOT bError AND CatHandleData.Status = KCAT_Status_OK) DO     
  
   CatType := KCAT_GetType(CatHandleData.Handle);        
      
   IF (CatType.Type = KCAT_Type_None) THEN
      CatName := KCAT_GetName(CatHandleData.Handle);
      
      sCatName := CONCAT(CatPath, '.Var:');
      iTemp := FIND(CatName.Name, sCatName);
      IF (iTemp > 0) THEN         
         aActivateVar(CatName.Name, Action);
      END_IF;
      
   END_IF;
   CatHandleData := KCAT_GetNext(CatHandleData.Handle);   
END_WHILE;   


// debug
IF sv_TraceLevel.bApplication AND bError THEN
   CASE Action OF
      nGroupActionAdd: sType := 'Add';
      nGroupActionActivate: sType := 'Activate';
      nGroupActionDeactivate: sType := 'Deactivate';
      nGroupActionRemove: sType := 'Remove';
   END_CASE;
   time := GET_RUNTIME() - time;
   sHelp :=  TIME_TO_STRING(time);
   dummy := Print('Scope: error group "%s" -> %s, duration %s', CatPath, sType, sHelp);   
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(53)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iCount := 0;

IF (NOT mbInit) THEN
   RETURN;
END_IF;   


time := GET_RUNTIME();
sCatNode := CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam);
CatRootData := KCAT_GetHandle(sCatNode);
IF (CatRootData.Status <> KCAT_Status_OK) THEN
   RETURN;
END_IF;

CatHandleData := KCAT_GetFirst(CatRootData.Handle);
WHILE (CatHandleData.Status = KCAT_Status_OK) DO     
  
   CatType := KCAT_GetType(CatHandleData.Handle); 
   IF (CatType.Type = KCAT_Type_None) THEN
      CatName := KCAT_GetName(CatHandleData.Handle);
      
      IF (FIND(CatName.Name, CONCAT(sCatNode, '.Group:')) > 0) THEN
         // Group:<n>
         // find the catalog reference to the IEC group
         IF (Action <> nGroupActionAdd AND
             Action <> nGroupActionRemove) THEN
            // never remove/add variables in group references
            sHelp := CONCAT(cScopeCfgBasePath, '.Group:', 
                           RIGHT(CatName.Name, LEN(CatName.Name)-LEN(CONCAT(sCatNode, '.Group:'))));
            aActivateGroup(sHelp, Action);
         END_IF;            
            
      ELSIF (FIND(CatName.Name, CONCAT(sCatNode, '.Var:')) > 0) THEN        
         // Var:<n>
         aActivateVar(CatName.Name, Action); 
      END_IF;   
   END_IF;
   CatHandleData := KCAT_GetNext(CatHandleData.Handle);   
END_WHILE;   

// debug
IF sv_TraceLevel.bApplication THEN
   time := GET_RUNTIME() - time;
   sHelp :=  TIME_TO_STRING(time);
   dummy := Print('Scope: activate config finished, duration %s', sHelp);   
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(40)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (CfgFile = '') THEN
   Error := TRUE;
   RETURN;
END_IF;

// deactivate and unload active groups/vars
aActivateConfig(Action := nGroupActionRemove);

// remove custom node and all sub-nodes
sCatBase := CONCAT(cScopeCfgBasePath, '.', cScopeCfgCatParam);
CatBaseHandle := KCAT_GetHandle(sCatBase);
IF (CatBaseHandle.Status = KCAT_Status_OK) THEN
   catStatus := KCAT_RemoveDir(CatBaseHandle.Handle);
END_IF;   

// re-read configuration
catStatus := KCAT_Load(CfgFile);   
Error := (catStatus <> KCAT_Status_OK);

// check node existance
CatBaseHandle := KCAT_GetHandle(sCatBase);
Error := (CatBaseHandle.Status <> KCAT_Status_OK);


// activate and add new groups/vars
IF (NOT Error) THEN
   aActivateConfig(Action := nGroupActionAdd);
END_IF;







@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(107)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (fGetConfigEntryUDINT('triggerStartType', iValue)) THEN
   StartTriggerIdx := iValue;
END_IF;   

IF (fGetConfigEntryUDINT('triggerStopType', iValue)) THEN
   StopTriggerIdx := iValue;
END_IF;                                                   

IF (fGetConfigEntrySTRING('triggerStartCustomVar', sValue)) THEN
   pbCustomVar := GET_SYNC_REFTO(sValue, t#0s, sysStatus);
   IF (sysStatus = KSYS_Status_OK) THEN
      StartCustomTrigger := pbCustomVar;
   ELSE
      dummy := Print('Scope: Could not obtain reference to custom start trigger %s, using default', sValue);      
   END_IF;         
END_IF;

IF (fGetConfigEntrySTRING('triggerStopCustomVar', sValue)) THEN
   pbCustomVar := GET_SYNC_REFTO(sValue, t#0s, sysStatus);
   IF (sysStatus = KSYS_Status_OK) THEN
      StopCustomTrigger := pbCustomVar;
   ELSE  
      dummy := Print('Scope: Could not obtain reference to custom stop trigger %s, using default', sValue);      
   END_IF;         
END_IF;

IF (fGetConfigEntryUDINT('triggerStartDelay', iValue)) THEN //msec
   StartTriggerDelay := LINT_TO_TIME(UDINT_TO_LINT(iValue)*1000);   
END_IF;              

IF (fGetConfigEntryUDINT('triggerStopDelay', iValue)) THEN //msec
   StopTriggerDelay := LINT_TO_TIME(UDINT_TO_LINT(iValue)*1000);   
END_IF;                                                   

IF (fGetConfigEntryUDINT('triggerStartCounter', iValue)) THEN 
   IF iValue > 0 THEN
      StartTriggerCounter := iValue;
   ELSE
      StartTriggerCounter := 1;
   END_IF;
END_IF;

IF (fGetConfigEntryUDINT('triggerStopCounter', iValue)) THEN 
   IF iValue > 0 THEN
      StopTriggerCounter := iValue;
   ELSE
      StopTriggerCounter := 1;
   END_IF;
END_IF;

IF (fGetConfigEntryUDINT('triggerStartFallingEdge', iValue)) THEN 
   StartTriggerFallingEdge := (iValue <> 0);
END_IF;

IF (fGetConfigEntryUDINT('triggerStopFallingEdge', iValue)) THEN 
   StopTriggerFallingEdge := (iValue <> 0);
END_IF;


IF (fGetConfigEntryUDINT('measureTime', iValue)) THEN //sec
   MeasureTime := LINT_TO_TIME(UDINT_TO_LINT(iValue)*1000000);
END_IF;              

IF (fGetConfigEntryUDINT('measureTimeStop', iValue)) THEN
   MeasureTimeStop := (iValue <> 0);
END_IF;   

IF (fGetConfigEntryUDINT('measureCycles', iValue)) THEN
   MeasureCycles := iValue;
END_IF;                                                   

IF (fGetConfigEntrySTRING('fileName', sValue)) THEN
   FileName := sValue;
ELSE
   FileName := 'scope';
END_IF;   

IF (fGetConfigEntryUDINT('exportType', iValue)) THEN 
   ExportType := iValue;
END_IF;

AutoStart := FALSE;
IF (fGetConfigEntryUDINT('autoStart', iValue)) THEN 
   AutoStart := (iValue <> 0);
END_IF;                                                       

IF (fGetConfigEntrySTRING('savePath', sValue)) THEN
   SavePath := sValue;
ELSE
   sValue := FGetCatConfigValueString('System.workPath', '/harddisk0/');
   sValue := CONCAT(sValue, 'protocol/scope/');
   SavePath := sValue;
END_IF;

IF (fGetConfigEntrySTRING('exportPath', sValue)) THEN
   ExportPath := sValue;
ELSE
   ExportPath := '/scope/';
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// initialize samplers
mSamplers[1].Task := TaskInject;
mSamplers[2].Task := TaskAnalog;
mSamplers[3].Task := TaskHeating;
mSamplers[4].Task := TaskSlow;

mSamplers[1].sTaskName := GET_TASK_NAME(mSamplers[1].Task);
mSamplers[2].sTaskName := GET_TASK_NAME(mSamplers[2].Task);
mSamplers[3].sTaskName := GET_TASK_NAME(mSamplers[3].Task);
mSamplers[4].sTaskName := GET_TASK_NAME(mSamplers[4].Task);

mbInit := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
