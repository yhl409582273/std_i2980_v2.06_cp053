(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


*)

IMPORT_OVER_LISTFILE
 FReadLineFromFile
, FGetCatConfigValueString
, GET_RUNTIME
, GET_STAREP_STATUS
, KFILE_Delete
, KFILE_Copy
, KSWO_Result_BufferOverflow
, KSWO_Result_InvalidFilePath
, KSWO_Result_InvalidParams
, KSWO_Result_Busy
, KSWO_Result_RecordingNotStopped
, tsTraceLevel
, KFILE_FastDirBrowser
, KFILE_Status
, KFILE_Open_Data
, KSWO_StoreRecordedDataToZipFile
, FBTimeStamp
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABScopeExport #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
END_VAR

VAR
 msStarepPath : STRING(255);
 fileDirBrowser : KFILE_FastDirBrowser;
END_VAR

ALGORITHM aPrepareFolder


VAR_INPUT
 Folder : STRING(255);
 Device : STRING(255);
 bClearIfExists : BOOL;
END_VAR

VAR_OUTPUT
 bError : BOOL;
END_VAR

VAR
 fileDirBrowser : KFILE_FastDirBrowser;
 fileStatus : KFILE_Status;
 sEntry : STRING(255);
 sFolder : STRING(255);
 sLocalFolder : STRING(255);
 li : LINT;
 bIsDir : BOOL;
 bExists : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (Device <> '') THEN
   // Device specified
   fileStatus := KFILE_VolumeFree(Device, li);
   IF fileStatus <> KFILE_Status_OK THEN
      bError := TRUE;
      RETURN;
   END_IF;
END_IF;

sFolder := CONCAT(Device, Folder);

// make directories
bExists := TRUE;
fileStatus := KFILE_IsDir(sFolder, bIsDir);
IF fileStatus <> KFILE_Status_OK THEN
   fileStatus := KFILE_MakeDir(sFolder);
   bExists := FALSE;
   IF fileStatus <> KFILE_Status_OK THEN
      bError := TRUE;
      RETURN;
   END_IF;
ELSIF NOT bIsDir THEN
   bError := TRUE;
   RETURN;
END_IF;

// clear contents of folder if requested
IF (bExists AND bClearIfExists) THEN   
   sLocalFolder := sFolder;
   fileDirBrowser(Execute := FALSE);   
   REPEAT
      fileDirBrowser(Execute := TRUE, Directory := sLocalFolder, Entry := sEntry);          
      IF (fileDirBrowser.State <> KFILE_Status_NOTOK) THEN
         fileStatus := KFILE_Delete(sEntry);
      END_IF;
   UNTIL (fileDirBrowser.State = KFILE_Status_NOTOK)
   END_REPEAT;   
END_IF;   

bError := FALSE;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCopyLastStarep


VAR_INPUT
 SrcPath : STRING(255);
 DestDevice : STRING(255);
 DestPath : STRING(255);
END_VAR

VAR_OUTPUT
 Error : BOOL;
END_VAR

VAR
 sStarepFile : STRING(255);
 file : KFILE_Open_Data;
 fileStatus : KFILE_Status;
 bIsDir : BOOL;
 sFileName : STRING(255);
 sExportFile : STRING(255);
 iPos : INT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

Error := FALSE;

IF (DestDevice = '') THEN
   Error := TRUE;
   RETURN;
END_IF;

// obtain latest starep name from source directory
file := KFILE_Open(Name := CONCAT(SrcPath, 'lastStaRep.txt'), 
                   Mode := KFILE_Mode_ReadOnly);
IF(file.Status <> KFILE_Status_OK) THEN
   Error := TRUE;
   RETURN;
END_IF;
sStarepFile := FReadLineFromFile(file);
fileStatus := KFILE_Close(file.Token);
IF (sStarepFile = '' OR 
    sStarepFile = 'EOF_REACHED') THEN
   Error := TRUE;
   RETURN;
END_IF;

// extract filname from starep
iPos := LEN(sStarepFile);
WHILE (iPos > 0 AND 
       MID(sStarepFile, 1, iPos) <> '/' AND 
       MID(sStarepFile, 1, iPos) <> '\')  DO
   iPos := iPos - 1;
END_WHILE;
IF (iPos < LEN(sStarepFile)) THEN
   sFileName := RIGHT(sStarepFile, LEN(sStarepFile) - iPos);
ELSE
   sFileName := 'starep.tgz'; // not found: use default
END_IF;

// delete and copy to destination
sExportFile := CONCAT(DestDevice, DestPath, sFileName);
fileStatus := KFILE_IsDir(Name := sExportFile, IsDirectory := bIsDir);
IF (fileStatus = KFILE_Status_OK) THEN
   fileStatus := KFILE_Delete(sExportFile);
END_IF;

fileStatus := KFILE_Copy(Name := sStarepFile, DstName := sExportFile);
IF (fileStatus <> KFILE_Status_OK) THEN
   Error := TRUE;
   RETURN;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSave


VAR_INPUT
 Execute : BOOL;
 FileName : STRING(32);
 DestPath : STRING(255);
 Clear : BOOL;
END_VAR

VAR_OUTPUT
 Done : BOOL;
 Error : BOOL;
END_VAR

VAR
 fbStoreRecordedData : KSWO_StoreRecordedDataToZipFile;
 fbGetTimeStamp : FBTimeStamp;
 sFileName : STRING(255);
 bInited : BOOL;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Execute THEN

   IF (NOT bInited) THEN
      aPrepareFolder(Folder := DestPath, Device := '', bClearIfExists := Clear);
      fbStoreRecordedData(Execute := FALSE);
      fbGetTimeStamp();
      sFileName := CONCAT(FileName, '-', fbGetTimeStamp.sTimeStamp);
      IF (NOT aPrepareFolder.bError AND NOT fbStoreRecordedData.Error) THEN
         bInited := TRUE;
      ELSE
         Error := TRUE;         
      END_IF;
   ELSE
      fbStoreRecordedData(Execute := TRUE, FilePath := DestPath, FileName := sFileName);
      IF fbStoreRecordedData.Error THEN
         IF sv_TraceLevel.bApplication THEN
            CASE fbStoreRecordedData.ErrorID OF         
               KSWO_Result_BufferOverflow:      dummy := Print("Scope: KSWO_StoreRecordedData: buffer overflowed");
               KSWO_Result_InvalidFilePath:     dummy := Print("Scope: KSWO_StoreRecordedData: invalid file path");         
               KSWO_Result_InvalidParams:       dummy := Print("Scope: KSWO_StoreRecordedData: invalid params");                  
               KSWO_Result_Busy:                dummy := Print("Scope: KSWO_StoreRecordedData: busy");                           
               KSWO_Result_RecordingNotStopped: dummy := Print("Scope: KSWO_StoreRecordedData: recording is not stopped");                                    
               KSWO_Result_Failure:             dummy := Print("Scope: KSWO_StoreRecordedData: unknown failure");       
            END_CASE;
         END_IF;
         Done := TRUE;
         Error := fbStoreRecordedData.Error;
      END_IF;
      IF fbStoreRecordedData.Done THEN
         Done := fbStoreRecordedData.Done;            
         Error := fbStoreRecordedData.Error;            
      END_IF;
   END_IF;
   
ELSE
   bInited := FALSE;
   Done := FALSE;
   Error := FALSE;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aExport


VAR_INPUT
 Execute : BOOL;
 Type : UDINT;
 DestDevice : STRING(255);
 DestPath : STRING(255);
 SrcPath : STRING(255);
END_VAR

VAR_OUTPUT
 Done : BOOL;
 Error : BOOL;
END_VAR

VAR
 bInited : BOOL;
 progress : DWORD;
 starepStatus : DWORD;
 sysStatus : KSYS_Status;
 fileStatus : KFILE_Status;
 sPath : STRING(255);
 sSrcPath : STRING(255);
 miType : UDINT;
 dummy : DINT;
 sEntry : STRING(255);
 sFilename : STRING(255);
 iTmpPos : DINT;
 bIsDir : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Execute THEN
   IF NOT bInited THEN
      
      miType := Type;      
      IF (miType = 0) THEN
         // none
         bInited := TRUE;
      ELSIF (miType = 1) THEN
         // files to USB
         IF (DestDevice = '') THEN
            dummy := Print('Scope: no USB device detected - export of "%s" not possible', SrcPath);
            Error := TRUE;
            RETURN;
         END_IF;   
         
         aPrepareFolder(Folder := DestPath, Device := DestDevice, bClearIfExists := FALSE);
         IF (aPrepareFolder.bError) THEN
            dummy := Print('Scope: could not prepare folder "%s" on device "%s"', DestPath, DestDevice);            
            Error := TRUE;
            RETURN;
         END_IF;           
         
         fileDirBrowser(Execute := FALSE); 
         sSrcPath := SrcPath;
         bInited := TRUE;
      ELSIF (miType = 2) THEN
         // starep to USB
         sSrcPath := FGetCatConfigValueString('System.workPath', '/harddisk0/');
         sSrcPath := CONCAT(sPath, "/protocol/Statusreport/");      
         sysStatus := WRITE_STAREP(msStarepPath);  
         IF (sysStatus = KSYS_Status_OK) THEN
            bInited := TRUE;
            Done := FALSE;
            Error := FALSE;
            starepStatus := 16#FF;
         END_IF;  
      END_IF;            
      
   END_IF;
   
   IF bInited THEN
      IF (miType = 0) THEN
         // none
         Done := TRUE;
         Error := FALSE;         
      ELSIF (miType = 1) THEN
         // files to USB
         fileDirBrowser(Execute := TRUE, Directory := sSrcPath, Entry := sEntry);          
         IF (fileDirBrowser.State <> KFILE_Status_NOTOK) THEN
            sFilename := sEntry;
            fileStatus := KFILE_IsDir(Name := sEntry, IsDirectory := bIsDir);
            IF (fileStatus = KFILE_Status_OK AND NOT bIsDir) THEN
               REPEAT
                  iTmpPos := FIND(sFilename, '/');
                  IF (iTmpPos > 0) THEN
                     sFilename := RIGHT(sFilename, LEN(sFilename) - iTmpPos);
                  END_IF;
               UNTIL (iTmpPos = 0)
               END_REPEAT;   
               
               fileStatus := KFILE_Copy(Name := sEntry, DstName := CONCAT(DestDevice, DestPath, '/', sFilename));
               IF (fileStatus <> KFILE_Status_OK) THEN
                  Done := TRUE;
                  Error := TRUE;
               END_IF;            
            END_IF;
            
         ELSE
            Done := TRUE;
            Error := FALSE;
         END_IF;      
      ELSIF (miType = 2) THEN
         // starep to USB
         sysStatus := GET_STAREP_STATUS(starepStatus, progress);
         IF (sysStatus = KSYS_Status_OK) THEN
            IF (starepStatus = 0) THEN
               IF (DestDevice = '') THEN
                  dummy := Print('Scope: no USB device detected - export of "%s" not possible', sSrcPath);
                  Error := TRUE;
                  RETURN;
               END_IF;   
               
               aPrepareFolder(Folder := DestPath, Device := DestDevice, bClearIfExists := FALSE);
               IF (aPrepareFolder.bError) THEN
                  dummy := Print('Scope: could not prepare folder "%s" on device "%s"', DestPath, DestDevice);            
                  Error := TRUE;
                  RETURN;
               END_IF;           
               
               aCopyLastStarep(SrcPath := sSrcPath, DestDevice := DestDevice, DestPath := DestPath);
               Done := TRUE;
               Error := aCopyLastStarep.Error;
            END_IF;
         ELSE
            Done := TRUE;
            Error := TRUE;
         END_IF;
      ELSE
         Done := TRUE;
         Error := TRUE;
      END_IF;      
   END_IF;
   
ELSE
   bInited := FALSE;
   Done := FALSE;
   Error := FALSE;
END_IF;

   


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 150 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
6 
@Var @RT(17)FReadLineFromFile @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)FGetCatConfigValueString @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)GET_STAREP_STATUS @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KFILE_Delete @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)KFILE_Copy @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(26)KSWO_Result_BufferOverflow @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)5 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(27)KSWO_Result_InvalidFilePath @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)4 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(25)KSWO_Result_InvalidParams @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)3 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KSWO_Result_Busy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(31)KSWO_Result_RecordingNotStopped @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)2 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABScopeExport @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(12)msStarepPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)fileDirBrowser @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)KFILE_FastDirBrowser @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(14)aPrepareFolder @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(6)Folder @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)Device @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)bClearIfExists @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(14)fileDirBrowser @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)KFILE_FastDirBrowser @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)fileStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KFILE_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sEntry @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)sFolder @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sLocalFolder @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)li @RT(0) @T @F @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bIsDir @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bExists @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aCopyLastStarep @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(7)SrcPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)DestDevice @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)DestPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(11)sStarepFile @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)file @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KFILE_Open_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)fileStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KFILE_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bIsDir @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sFileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sExportFile @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aSave @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(7)Execute @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)FileName @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)DestPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Clear @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)Done @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(19)fbStoreRecordedData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(31)KSWO_StoreRecordedDataToZipFile @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbGetTimeStamp @RT(0) @T @T @DERIVED 0 @F @RT(11)FBTimeStamp @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sFileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bInited @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(7)aExport @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
20 
@Var @RT(7)Execute @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)Type @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)DestDevice @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)DestPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)SrcPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)Done @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)Error @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)bInited @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)progress @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)starepStatus @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sysStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)fileStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KFILE_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sSrcPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)miType @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sEntry @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sFilename @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)iTmpPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bIsDir @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(46)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (Device <> '') THEN
   // Device specified
   fileStatus := KFILE_VolumeFree(Device, li);
   IF fileStatus <> KFILE_Status_OK THEN
      bError := TRUE;
      RETURN;
   END_IF;
END_IF;

sFolder := CONCAT(Device, Folder);

// make directories
bExists := TRUE;
fileStatus := KFILE_IsDir(sFolder, bIsDir);
IF fileStatus <> KFILE_Status_OK THEN
   fileStatus := KFILE_MakeDir(sFolder);
   bExists := FALSE;
   IF fileStatus <> KFILE_Status_OK THEN
      bError := TRUE;
      RETURN;
   END_IF;
ELSIF NOT bIsDir THEN
   bError := TRUE;
   RETURN;
END_IF;

// clear contents of folder if requested
IF (bExists AND bClearIfExists) THEN   
   sLocalFolder := sFolder;
   fileDirBrowser(Execute := FALSE);   
   REPEAT
      fileDirBrowser(Execute := TRUE, Directory := sLocalFolder, Entry := sEntry);          
      IF (fileDirBrowser.State <> KFILE_Status_NOTOK) THEN
         fileStatus := KFILE_Delete(sEntry);
      END_IF;
   UNTIL (fileDirBrowser.State = KFILE_Status_NOTOK)
   END_REPEAT;   
END_IF;   

bError := FALSE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(54)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

Error := FALSE;

IF (DestDevice = '') THEN
   Error := TRUE;
   RETURN;
END_IF;

// obtain latest starep name from source directory
file := KFILE_Open(Name := CONCAT(SrcPath, 'lastStaRep.txt'), 
                   Mode := KFILE_Mode_ReadOnly);
IF(file.Status <> KFILE_Status_OK) THEN
   Error := TRUE;
   RETURN;
END_IF;
sStarepFile := FReadLineFromFile(file);
fileStatus := KFILE_Close(file.Token);
IF (sStarepFile = '' OR 
    sStarepFile = 'EOF_REACHED') THEN
   Error := TRUE;
   RETURN;
END_IF;

// extract filname from starep
iPos := LEN(sStarepFile);
WHILE (iPos > 0 AND 
       MID(sStarepFile, 1, iPos) <> '/' AND 
       MID(sStarepFile, 1, iPos) <> '\')  DO
   iPos := iPos - 1;
END_WHILE;
IF (iPos < LEN(sStarepFile)) THEN
   sFileName := RIGHT(sStarepFile, LEN(sStarepFile) - iPos);
ELSE
   sFileName := 'starep.tgz'; // not found: use default
END_IF;

// delete and copy to destination
sExportFile := CONCAT(DestDevice, DestPath, sFileName);
fileStatus := KFILE_IsDir(Name := sExportFile, IsDirectory := bIsDir);
IF (fileStatus = KFILE_Status_OK) THEN
   fileStatus := KFILE_Delete(sExportFile);
END_IF;

fileStatus := KFILE_Copy(Name := sStarepFile, DstName := sExportFile);
IF (fileStatus <> KFILE_Status_OK) THEN
   Error := TRUE;
   RETURN;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(46)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Execute THEN

   IF (NOT bInited) THEN
      aPrepareFolder(Folder := DestPath, Device := '', bClearIfExists := Clear);
      fbStoreRecordedData(Execute := FALSE);
      fbGetTimeStamp();
      sFileName := CONCAT(FileName, '-', fbGetTimeStamp.sTimeStamp);
      IF (NOT aPrepareFolder.bError AND NOT fbStoreRecordedData.Error) THEN
         bInited := TRUE;
      ELSE
         Error := TRUE;         
      END_IF;
   ELSE
      fbStoreRecordedData(Execute := TRUE, FilePath := DestPath, FileName := sFileName);
      IF fbStoreRecordedData.Error THEN
         IF sv_TraceLevel.bApplication THEN
            CASE fbStoreRecordedData.ErrorID OF         
               KSWO_Result_BufferOverflow:      dummy := Print("Scope: KSWO_StoreRecordedData: buffer overflowed");
               KSWO_Result_InvalidFilePath:     dummy := Print("Scope: KSWO_StoreRecordedData: invalid file path");         
               KSWO_Result_InvalidParams:       dummy := Print("Scope: KSWO_StoreRecordedData: invalid params");                  
               KSWO_Result_Busy:                dummy := Print("Scope: KSWO_StoreRecordedData: busy");                           
               KSWO_Result_RecordingNotStopped: dummy := Print("Scope: KSWO_StoreRecordedData: recording is not stopped");                                    
               KSWO_Result_Failure:             dummy := Print("Scope: KSWO_StoreRecordedData: unknown failure");       
            END_CASE;
         END_IF;
         Done := TRUE;
         Error := fbStoreRecordedData.Error;
      END_IF;
      IF fbStoreRecordedData.Done THEN
         Done := fbStoreRecordedData.Done;            
         Error := fbStoreRecordedData.Error;            
      END_IF;
   END_IF;
   
ELSE
   bInited := FALSE;
   Done := FALSE;
   Error := FALSE;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(116)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Execute THEN
   IF NOT bInited THEN
      
      miType := Type;      
      IF (miType = 0) THEN
         // none
         bInited := TRUE;
      ELSIF (miType = 1) THEN
         // files to USB
         IF (DestDevice = '') THEN
            dummy := Print('Scope: no USB device detected - export of "%s" not possible', SrcPath);
            Error := TRUE;
            RETURN;
         END_IF;   
         
         aPrepareFolder(Folder := DestPath, Device := DestDevice, bClearIfExists := FALSE);
         IF (aPrepareFolder.bError) THEN
            dummy := Print('Scope: could not prepare folder "%s" on device "%s"', DestPath, DestDevice);            
            Error := TRUE;
            RETURN;
         END_IF;           
         
         fileDirBrowser(Execute := FALSE); 
         sSrcPath := SrcPath;
         bInited := TRUE;
      ELSIF (miType = 2) THEN
         // starep to USB
         sSrcPath := FGetCatConfigValueString('System.workPath', '/harddisk0/');
         sSrcPath := CONCAT(sPath, "/protocol/Statusreport/");      
         sysStatus := WRITE_STAREP(msStarepPath);  
         IF (sysStatus = KSYS_Status_OK) THEN
            bInited := TRUE;
            Done := FALSE;
            Error := FALSE;
            starepStatus := 16#FF;
         END_IF;  
      END_IF;            
      
   END_IF;
   
   IF bInited THEN
      IF (miType = 0) THEN
         // none
         Done := TRUE;
         Error := FALSE;         
      ELSIF (miType = 1) THEN
         // files to USB
         fileDirBrowser(Execute := TRUE, Directory := sSrcPath, Entry := sEntry);          
         IF (fileDirBrowser.State <> KFILE_Status_NOTOK) THEN
            sFilename := sEntry;
            fileStatus := KFILE_IsDir(Name := sEntry, IsDirectory := bIsDir);
            IF (fileStatus = KFILE_Status_OK AND NOT bIsDir) THEN
               REPEAT
                  iTmpPos := FIND(sFilename, '/');
                  IF (iTmpPos > 0) THEN
                     sFilename := RIGHT(sFilename, LEN(sFilename) - iTmpPos);
                  END_IF;
               UNTIL (iTmpPos = 0)
               END_REPEAT;   
               
               fileStatus := KFILE_Copy(Name := sEntry, DstName := CONCAT(DestDevice, DestPath, '/', sFilename));
               IF (fileStatus <> KFILE_Status_OK) THEN
                  Done := TRUE;
                  Error := TRUE;
               END_IF;            
            END_IF;
            
         ELSE
            Done := TRUE;
            Error := FALSE;
         END_IF;      
      ELSIF (miType = 2) THEN
         // starep to USB
         sysStatus := GET_STAREP_STATUS(starepStatus, progress);
         IF (sysStatus = KSYS_Status_OK) THEN
            IF (starepStatus = 0) THEN
               IF (DestDevice = '') THEN
                  dummy := Print('Scope: no USB device detected - export of "%s" not possible', sSrcPath);
                  Error := TRUE;
                  RETURN;
               END_IF;   
               
               aPrepareFolder(Folder := DestPath, Device := DestDevice, bClearIfExists := FALSE);
               IF (aPrepareFolder.bError) THEN
                  dummy := Print('Scope: could not prepare folder "%s" on device "%s"', DestPath, DestDevice);            
                  Error := TRUE;
                  RETURN;
               END_IF;           
               
               aCopyLastStarep(SrcPath := sSrcPath, DestDevice := DestDevice, DestPath := DestPath);
               Done := TRUE;
               Error := aCopyLastStarep.Error;
            END_IF;
         ELSE
            Done := TRUE;
            Error := TRUE;
         END_IF;
      ELSE
         Done := TRUE;
         Error := TRUE;
      END_IF;      
   END_IF;
   
ELSE
   bInited := FALSE;
   Done := FALSE;
   Error := FALSE;
END_IF;

   

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
