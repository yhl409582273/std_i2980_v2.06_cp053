(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Check sequence dependencies in forward and backward direction. Used in ABCalcDependencies.
*)

IMPORT_OVER_LISTFILE
 tsTraceLevel
, FBAddDependency
, tnODCDependency
, tyODCDependencyArray

END_IMPORT

ALGORITHM_BLOCK ABDependencyCheck #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
END_VAR

VAR
 dummy : DINT;
 fbAddDependency : FBAddDependency;
END_VAR

(*
dependency check in forward direction
*)

ALGORITHM aFwd


VAR_INPUT
 bHelpStep : BOOL;
 bSafetyRelevant : BOOL;
 iDependence : tnODCDependency;
 iFuIndex : DINT;
 ActualMovements : tyODCDependencyArray;
END_VAR

VAR_IN_OUT
 StepDependency : tyODCDependencyArray;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bHelpStep) THEN
   IF (bSafetyRelevant) THEN     
      IF (iDependence = nParallel) THEN
         // parallel => not safety relevant
         IF (sv_TraceLevel.bODCDependencies) THEN
            dummy := Print('ABDependencyCheck - aFwd - iDependence = parallel:');
            dummy := Print('set dependency of Fu - Index %d from %d to not safety relevant',iFuIndex);
         END_IF;
        
         fbAddDependency(iFuIndex := iFuIndex,
                         iMoveNr := 0,
                         iCount := 0,
                         iMode :=  0,
                         Dependency := StepDependency); 
      ELSE
         //movement is following to actual step
         //for the actual step this FU must be in the position(s), which were reached before
         //use last dependency
         StepDependency[iFuIndex].Dependency := ActualMovements[iFuIndex].Dependency;
      END_IF;
   
   ELSE
      // non safety relevant movements
      IF (sv_TraceLevel.bODCDependencies) THEN
         dummy := Print('ABDependencyCheck - aFwd - not safety relevant part:');
         dummy := Print('set dependency of Fu - Index %d from %d to not safety relevant',iFuIndex);
      END_IF;
      
      fbAddDependency(iFuIndex := iFuIndex,
                         iMoveNr := 0,
                         iCount := 0,
                         iMode :=  0,
                         Dependency := StepDependency);
   END_IF;        

END_IF;





;#END_EDIT_BLOCK END_ALGORITHM

(*
dependency check in backward direction
*)

ALGORITHM aBwd


VAR_INPUT
 bHelpStep : BOOL;
 bSafetyRelevant : BOOL;
 iDependence : tnODCDependency;
 iFuIndex : DINT;
END_VAR

VAR_IN_OUT
 StepDependency : tyODCDependencyArray;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// check dependencies
IF (NOT bHelpStep) AND bSafetyRelevant AND (iDependence = nParallel) THEN                       
   IF (sv_TraceLevel.bODCDependencies) THEN
      dummy := Print('ABDependencyCheck - aBwd:');   
      dummy := Print('set dependency of Fu - Index %d from %d to not safety relevant',iFuIndex);
   END_IF;
   
   fbAddDependency(iFuIndex := iFuIndex,
                         iMoveNr := 0,
                         iCount := 0,
                         iMode :=  0,
                         Dependency := StepDependency);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Check sequence dependencies in forward and backward direction. Used in ABCalcDependencies.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(17)ABDependencyCheck @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)fbAddDependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)FBAddDependency @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aFwd @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(9)bHelpStep @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)bSafetyRelevant @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)iDependence @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnODCDependency @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)iFuIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)ActualMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyODCDependencyArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)StepDependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyODCDependencyArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aBwd @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(9)bHelpStep @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)bSafetyRelevant @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)iDependence @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnODCDependency @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)iFuIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)StepDependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyODCDependencyArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(45)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bHelpStep) THEN
   IF (bSafetyRelevant) THEN     
      IF (iDependence = nParallel) THEN
         // parallel => not safety relevant
         IF (sv_TraceLevel.bODCDependencies) THEN
            dummy := Print('ABDependencyCheck - aFwd - iDependence = parallel:');
            dummy := Print('set dependency of Fu - Index %d from %d to not safety relevant',iFuIndex);
         END_IF;
        
         fbAddDependency(iFuIndex := iFuIndex,
                         iMoveNr := 0,
                         iCount := 0,
                         iMode :=  0,
                         Dependency := StepDependency); 
      ELSE
         //movement is following to actual step
         //for the actual step this FU must be in the position(s), which were reached before
         //use last dependency
         StepDependency[iFuIndex].Dependency := ActualMovements[iFuIndex].Dependency;
      END_IF;
   
   ELSE
      // non safety relevant movements
      IF (sv_TraceLevel.bODCDependencies) THEN
         dummy := Print('ABDependencyCheck - aFwd - not safety relevant part:');
         dummy := Print('set dependency of Fu - Index %d from %d to not safety relevant',iFuIndex);
      END_IF;
      
      fbAddDependency(iFuIndex := iFuIndex,
                         iMoveNr := 0,
                         iCount := 0,
                         iMode :=  0,
                         Dependency := StepDependency);
   END_IF;        

END_IF;




@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
dependency check in forward direction
@@@END_Comment@@@ 

@BEG_Body 
@TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// check dependencies
IF (NOT bHelpStep) AND bSafetyRelevant AND (iDependence = nParallel) THEN                       
   IF (sv_TraceLevel.bODCDependencies) THEN
      dummy := Print('ABDependencyCheck - aBwd:');   
      dummy := Print('set dependency of Fu - Index %d from %d to not safety relevant',iFuIndex);
   END_IF;
   
   fbAddDependency(iFuIndex := iFuIndex,
                         iMoveNr := 0,
                         iCount := 0,
                         iMode :=  0,
                         Dependency := StepDependency);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
dependency check in backward direction
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
@@@BEG_Password@@@
NGhzZm9kYzQ=
@@@END_Password@@@
