(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

IMPORT_OVER_LISTFILE
 GET_RUNTIME
, KMEM_HashMapDelete
, KMEM_HashMapCreate
, KMEM_HashMapAdd
, GET_SYNC_REFTO
, FSEMoveIDToValue
, START_PROCESS_ALGORITHM
, STOP_PROCESS_ALGORITHM
, KMEM_HashMapGet
, SET_ALARM
, cSafetyListLen
, cSET_ConstReal
, cSET_VariableBool
, cSET_VariableReal
, cMaxSafetyMovements
, cSEO_NOP
, cSEO_END
, cCompAll
, cINTERPRETER_VERSION
, cSET_String
, tnOperationMode
, ALARM_EVENT
, tsSafetyCondition
, tySafetyMovementList
, tsODCDeviceMovementList
, tsSafetyHMICom
, tyMovementRegisterList
, tnDataState
, tsGlbSafetyData
, tsDeviceId
, FBLockUnlock
, tnLockUnlock
, tsAlarm
, KMEM_Status
, KSYS_Status
, KMEM_CreateData
, ALARM_EVENT_DATA
, ABSEInterpreter

END_IMPORT

ALGORITHM_BLOCK ABSafetyEditor #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitDone : BOOL;
 sv_bInitStart : BOOL;
 sv_OperationMode : tnOperationMode;
 sv_bSEDataLoaded : BOOL (* flag to indicate that MoldData.xml contains SafetyProgram *);
 sv_SafetyCondition : tsSafetyCondition;
 sv_SafetyMovements : tySafetyMovementList;
 sv_ODCDeviceMovements : tsODCDeviceMovementList (* list of all devices that registered movements for the ODC *);
 sv_SafetyHMICom : tsSafetyHMICom;
 sv_MovementsAvailable : tyMovementRegisterList;
 sv_DataState : tnDataState (* indicates the state of xml handling (set by hmi) *);
END_VAR

SYSTEM_OBJECT
 erSEInvalidProgram : ALARM;
 evaMovementNotAllowed : ALARM_EVENT;
 erSEMovementNotAllowed : ALARM;
 erSafetyEditorNotAvailable : ALARM;
 erSETeachModeActive : ALARM;
 TaskVis : TASK;
 PU_Task_7 : TASK;
END_OBJECT

VAR_EXTERNAL
 g_SafetyData : tsGlbSafetyData;
END_VAR

VAR
 mevMovementNotAllowed : ALARM_EVENT;
 mpOperationMode : REFTO tnOperationMode;
 mpDummy : REFTO tnOperationMode;
END_VAR

VAR CONSTANT
 DEFAULT_SAFETY : tsSafetyCondition := (iProgVersion:=cINTERPRETER_VERSION,bDataAvailable:=TRUE,List:=(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Mold1.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Ejector1.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Mold1.sv_bMoldOpen'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core1.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core2.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core3.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core4.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core5.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core6.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core7.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core8.sv_bCoreOut'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Ejector1.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core1.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core2.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core3.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core4.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core5.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core6.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core7.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core8.sv_bCoreOut'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core1.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core1.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core2.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core2.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core3.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core3.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core4.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core4.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core5.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core5.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core6.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core6.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core7.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core7.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core8.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core8.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_END));
END_VAR

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

FUNCTION fVisDataToUpdate : BOOL
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// visupdate algo must be stopped 
// if safetyeditor mask not visible and all movements allowed
// or (half) autocycle running 

fVisDataToUpdate := NOT(
   ((NOT sv_SafetyHMICom.bSEMaskVisible) AND (sv_SafetyHMICom.MovementAllowed = 16#FFFF_FFFF)) 
OR (sv_OperationMode > nManual));


;#END_EDIT_BLOCK END_FUNCTION

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

ALGORITHM aProgramInvalid


VAR_INPUT
 bLock : BOOL;
 sAdditionalInfo : STRING(120);
END_VAR

VAR
 DeviceId : tsDeviceId;
 fbLockUnlockAll : FBLockUnlock;
 nMode : tnLockUnlock;
 Alarm : tsAlarm;
 bInit : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bInit) THEN
    DeviceId.CompId := cCompAll;
    DeviceId.IndexId := cAllDevIndex;
    Alarm.AlarmId := erSEInvalidProgram;
    bInit := TRUE;
END_IF;



IF bLock THEN
     IF (nMode <> nLockAbort) THEN
         nMode := nLockAbort;         
         SET_ALARM(Name := erSEInvalidProgram, Param1 := sAdditionalInfo);
         sv_SafetyHMICom.iRestoreDefault := sv_SafetyHMICom.iRestoreDefault + 1; 
     ELSE 
         RETURN; 
     END_IF;
ELSE
     IF (nMode <> nUnlock) THEN
         nMode := nUnlock;         
         RESET_ALARM(Name := erSEInvalidProgram);         
     ELSE 
         RETURN;
     END_IF;
END_IF;

Alarm.Param1 := sAdditionalInfo;    
fbLockUnlockAll(DeviceId := DeviceId,
                    MoveDir := cMoveAll,
                    MoveId := cMoveAll,
                    Mode := nMode,
                    Alarm := Alarm);


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

ALGORITHM aInterprete


VAR_INPUT
 bHMI : BOOL (* data change triggered by HMI -> no datachanged notification *);
 iLog : INT (* Trace Program to file for statusreport *);
END_VAR

VAR_TEMP
 i : DINT;
END_VAR

VAR
 t : TIME;
 time : DINT;
 StatusMem : KMEM_Status;
 StatusSys : KSYS_Status;
 CreateData : KMEM_CreateData;
 iVal : DINT;
 sTmpString : STRING(255);
 b : BOOL;
 iMoveDir : DINT;
 iMoveNr : UINT;
 operator : UINT;
 iCnt : DINT;
 sTmpWord : DWORD;
 iInc : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


t := GET_RUNTIME();
// check prog. version 
IF (sv_SafetyCondition.iProgVersion > cINTERPRETER_VERSION) THEN
    aProgramInvalid(TRUE, CONCAT('invalid version: ', DWORD_TO_STRING(sv_SafetyCondition.iProgVersion)));
    RETURN;
ELSE
    aProgramInvalid(bLock := FALSE);
END_IF;

CreateData := KMEM_HashMapCreate("SafetyProgStartTable", iVal, 20);
// TODO status -> alarm 

FOR i := 1 TO cSafetyListLen DO
    operator := sv_SafetyCondition.List[i].Operator;
    g_SafetyData.SafetyListTmp[i].Operator := operator; 
    g_SafetyData.SafetyListTmp[i].Condition := sv_SafetyCondition.List[i].Condition;
    
    IF operator <> cSEO_NOP THEN
       iCnt := i;
    END_IF;
    
    IF  operator = cSEO_END THEN
        iCnt := i;
        EXIT;    // BREAK ... no more operations to interprete
    ELSIF operator = cSEO_START THEN
        // condition for new movement, put pointer to start of operation into g_hSafetyProgStartTable

            
        sTmpString := sv_SafetyCondition.List[i].sParameter;
        b := FSEMoveIDToValue(sTmpString);
        IF (b) THEN
            iVal := i + 1;
            StatusMem := KMEM_HashMapAdd(CreateData.Handle, 
                                     sTmpString, 
                                     iVal);
        ELSE 
           aProgramInvalid(TRUE, CONCAT('Line ', DINT_TO_STRING(i), ': MoveId not available - ', sTmpString));
        END_IF;
        
    ELSE 
        CASE sv_SafetyCondition.List[i].ParamType OF
            cSET_ConstReal:
                g_SafetyData.SafetyListTmp[i].rValueReal := STRING_TO_REAL(sv_SafetyCondition.List[i].sParameter);
  
            cSET_VariableBool:
                g_SafetyData.SafetyListTmp[i].pbParamBool := GET_SYNC_REFTO(sv_SafetyCondition.List[i].sParameter, T#0s, StatusSys);
                IF (StatusSys <> KSYS_Status_OK) THEN
                    g_SafetyData.SafetyListTmp[i].pbParamBool := EMPTY;                 
                END_IF;
                
            cSET_VariableReal:
                g_SafetyData.SafetyListTmp[i].prParamReal := GET_SYNC_REFTO(sv_SafetyCondition.List[i].sParameter, T#0s, StatusSys);
                IF (StatusSys <> KSYS_Status_OK) THEN
                    g_SafetyData.SafetyListTmp[i].prParamReal := EMPTY;                 
                END_IF;

            cSET_String:
                ;// do nothing but avoid program invalid alarm
        ELSE
           aProgramInvalid(TRUE, CONCAT('Line ', DINT_TO_STRING(i), ': invalid paramtype - ', UINT_TO_STRING(sv_SafetyCondition.List[i].ParamType)));
        END_CASE;
    END_IF; 

    
    
END_FOR;


FOR i := 1 TO cMaxSafetyMovements DO
    iMoveNr := sv_SafetyMovements[i];
    IF (iMoveNr = 0) THEN // end of list
        EXIT;     
    END_IF;
    iMoveDir := sv_MovementsAvailable[iMoveNr].pMovementData^.MoveDir;
    IF iMoveDir = cMoveAll THEN // special case ejector shake
        iMoveDir := cMoveFwd;    
    END_IF;
    iVal := sv_MovementsAvailable[iMoveNr].iFuIndex;
    sTmpString := sv_ODCDeviceMovements.Devices[iVal].sFuName;
    sTmpString := CONCAT(sTmpString, '.', DINT_TO_STRING(iMoveDir));
    StatusMem := KMEM_HashMapGet(CreateData.Handle, sTmpString, iVal);
    IF (StatusMem = KMEM_Status_OK) THEN
       sv_MovementsAvailable[iMoveNr].iSESafetyProgIdx := iVal;
    ELSE 
       sv_MovementsAvailable[iMoveNr].iSESafetyProgIdx := 0;        
    END_IF;
END_FOR;

StatusMem := KMEM_HashMapDelete(CreateData.Handle);


t := GET_RUNTIME() - t;
time := LINT_TO_DINT(TIME_TO_LINT(t)/1000);
//dummy:=Print('hsf SE interprete: %d ms', time);

IF (bHMI) THEN
    iInc := 0;
ELSE
    iInc := 16#01000000;
END_IF;

sTmpWord := sv_SafetyHMICom.iListDataChanged;
sTmpWord := DINT_TO_DWORD((DWORD_TO_DINT(sTmpWord AND 16#FF000000) + iInc)) AND 16#FF000000; // change counter
sTmpWord := sTmpWord OR SHL(INT_TO_DWORD(iLog), 16);
sTmpWord := sTmpWord OR DINT_TO_DWORD(iCnt);
sv_SafetyHMICom.iListDataChanged := sTmpWord;



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

ALGORITHM aLoadDefaultSafety

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_SafetyCondition := DEFAULT_SAFETY;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

POSTUPDATE_ALGORITHM pLoadInitProgram ON TaskVis WITH sv_bInitDone

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

START_PROCESS_ALGORITHM(paLoadInitProgram);


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

PROCESS_ALGORITHM paLoadInitProgram ON TaskVis(1)

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (g_SafetyData.bAvailable) THEN
    IF (NOT sv_SafetyCondition.bDataAvailable) THEN
        aLoadDefaultSafety();
        aInterprete.iLog := cSE_PRGLOG_DEFAULT;
    ELSE 
        aInterprete.iLog := cSE_PRGLOG_NO;
    END_IF;
    aInterprete(bHMI := FALSE);  
    sv_SafetyHMICom.bAvailable := TRUE; 
    sv_bSEDataLoaded := TRUE; 
ELSE    
    sv_bSEDataLoaded := FALSE;     
END_IF;

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

POSTUPDATE_ALGORITHM pSEVisibilityChanged ON TaskVis(1) WITH sv_SafetyHMICom.bSEMaskVisible,mpOperationMode^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// override default safety only allowed in setup mode
IF (sv_OperationMode <> nSetup) THEN
   sv_SafetyHMICom.bOverrideDefaultSafety := FALSE;
END_IF;

// check if update of safety conditions for HMI mask necessary
IF (fVisDataToUpdate()) THEN
    START_PROCESS_ALGORITHM(paUpdateVisData);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

EVENT_ALGORITHM evaSEMovementNotAllowed ON TaskVis(1) WITH mevMovementNotAllowed


VAR_INPUT
 dummy : ALARM_EVENT_DATA;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// movement not allowed alarm raised
START_PROCESS_ALGORITHM(paUpdateVisData);


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

PROCESS_ALGORITHM paUpdateVisData ON TaskVis


VAR_TEMP
 i : DINT;
END_VAR

VAR
 tmp : DWORD;
 abSEInterpreter : ABSEInterpreter;
 iActSafeMoveIdx : DINT;
 iMoveNr : UINT;
 iActProgIdx : DINT;
 iCnt : DINT;
 bAllowed : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iCnt := 0; 
i := -1;
WHILE ((((i = iActProgIdx) AND (i <> 0)) OR (i = -1)) AND (iCnt < cMaxSafetyMovements)) DO
    iCnt := iCnt + 1;
    iActSafeMoveIdx := iActSafeMoveIdx + 1; 
    IF iActSafeMoveIdx > cMaxSafetyMovements THEN
        iActSafeMoveIdx := 1;    
    END_IF;
    iMoveNr := sv_SafetyMovements[iActSafeMoveIdx];
    IF (iMoveNr <> 0) THEN
        i := sv_MovementsAvailable[iMoveNr].iSESafetyProgIdx;        
    END_IF;
END_WHILE;

iActProgIdx := i; 

       

IF (iActProgIdx > 0) THEN
    bAllowed := abSEInterpreter.fRunSafetyCondition(iActProgIdx);
ELSE
    bAllowed := TRUE;
END_IF;

IF ((bAllowed) AND 
    (NOT g_SafetyData.MovementAllowed[sv_MovementsAvailable[iMoveNr].iODCSafetyMovementsEntry])) THEN
  RESET_ALARM(Name := erSEMovementNotAllowed,   
              SubID1 := sv_MovementsAvailable[iMoveNr].DeviceId.CompId,
              SubID2 := sv_MovementsAvailable[iMoveNr].DeviceId.IndexId,
              SubID3 := sv_MovementsAvailable[iMoveNr].pMovementData^.MoveDir);    
END_IF;
g_SafetyData.MovementAllowed[sv_MovementsAvailable[iMoveNr].iODCSafetyMovementsEntry] := bAllowed;

tmp := 0; 
FOR i := 1 TO cMaxSafetyMovements DO
   tmp := tmp OR (SHL(BOOL_TO_DWORD(g_SafetyData.MovementAllowed[i]), (i-1)));
END_FOR;                                

sv_SafetyHMICom.MovementAllowed := tmp; 
sv_SafetyHMICom.MovementToActivate := g_SafetyData.MovementToActivate; 

IF (NOT fVisDataToUpdate()) THEN
    sv_SafetyHMICom.MovementToActivate := 0; 

    STOP_PROCESS_ALGORITHM(paUpdateVisData);
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

POSTUPDATE_ALGORITHM pInit ON PU_Task_7(1) WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT (IS_LINKED(sv_SafetyCondition))) THEN
    RETURN; 
END_IF;

g_SafetyData.bAvailable := TRUE; 
mevMovementNotAllowed := evaMovementNotAllowed;

mpDummy := @sv_OperationMode;     // FIXME: workaround for CR_0041252
mpOperationMode := mpDummy;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

POSTUPDATE_ALGORITHM pHMIDataChanged ON TaskVis WITH sv_SafetyHMICom.iNewHMIData

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aInterprete(bHMI := TRUE, iLog := cSE_PRGLOG_NO);


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

POSTUPDATE_ALGORITHM pMoldDataChanged ON TaskVis WITH sv_DataState


VAR
 oldDataState : tnDataState;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_DataState = nReadMoldData) THEN
    sv_bSEDataLoaded := FALSE; 
END_IF;

IF ((sv_DataState = nReady) AND (oldDataState = nReadMoldData)) THEN
    IF (g_SafetyData.bAvailable) THEN
        sv_bSEDataLoaded := TRUE; 
        aInterprete(bHMI := FALSE, iLog := cSE_PRGLOG_MLDDATA);    
    ELSE
        IF (sv_bSEDataLoaded) THEN // no safetyeditor available but molddata contains safetydata
            SET_ALARM(erSafetyEditorNotAvailable);                
            sv_bSEDataLoaded := FALSE; 
        END_IF;
    END_IF;
END_IF;

oldDataState := sv_DataState;



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

POSTUPDATE_ALGORITHM pHMIRestoreDefaultChanged ON TaskVis WITH sv_SafetyHMICom.iRestoreDefault

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aLoadDefaultSafety();
aInterprete(bHMI := FALSE, iLog := cSE_PRGLOG_DEFAULT); 


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

POSTUPDATE_ALGORITHM pHMITeachModeActiveChanged ON TaskVis WITH sv_SafetyHMICom.bTeachMode


VAR
 DeviceId : tsDeviceId;
 fbLockUnlockAll : FBLockUnlock;
 nMode : tnLockUnlock;
 Alarm : tsAlarm;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

    DeviceId.CompId := cCompAll;
    DeviceId.IndexId := cAllDevIndex;
    Alarm.AlarmId := erSETeachModeActive;

    IF sv_SafetyHMICom.bTeachMode THEN
          nMode := nLockAbort;
        ELSE
          nMode := nUnlock;
    END_IF;

    fbLockUnlockAll(DeviceId := DeviceId,
                    MoveDir := cMoveAll,
                    MoveId := cMoveAll,
                    Mode := nMode,
                    Alarm := Alarm);


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
10 
@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)KMEM_HashMapDelete @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)KMEM_HashMapCreate @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)KMEM_HashMapAdd @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)FSEMoveIDToValue @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)KMEM_HashMapGet @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
10 
@Var @RT(14)cSafetyListLen @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)200 @RT(39)array length of safety program variable 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cSET_ConstReal @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#01 @RT(56)Param Type "Const Value", interprete Param as Real value 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)cSET_VariableBool @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#02 @RT(58)Param Type " Bool SV", interprete Param as name of Bool SV 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)cSET_VariableReal @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#03 @RT(57)Param Type "Real SV", interprete Param as name of Real SV 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)cMaxSafetyMovements @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)32 @RT(40)max. number of safety relevant movements 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cSEO_NOP @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#00 @RT(89)Operator "no operation" (e.g. line contains only additional parameter for last operation) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cSEO_END @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#FF @RT(14)END of program 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cCompAll @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(10)cMaxCompId @RT(22)to lock all components 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cINTERPRETER_VERSION @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(7)16#0100 @RT(30)IEC Safety Interpreter version 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)cSET_String @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#00 @RT(19)Param Type "String" 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABSafetyEditor @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
22 
@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)erSEInvalidProgram @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_bSEDataLoaded @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)flag to indicate that MoldData.xml contains SafetyProgram @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)evaMovementNotAllowed @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)mevMovementNotAllowed @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)erSEMovementNotAllowed @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)sv_SafetyCondition @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsSafetyCondition @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_SafetyMovements @RT(0) @T @T @DERIVED 0 @F @RT(20)tySafetyMovementList @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_ODCDeviceMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)tsODCDeviceMovementList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)list of all devices that registered movements for the ODC @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)erSafetyEditorNotAvailable @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)sv_SafetyHMICom @RT(0) @T @T @DERIVED 0 @F @RT(14)tsSafetyHMICom @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_MovementsAvailable @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyMovementRegisterList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)erSETeachModeActive @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_DataState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnDataState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(48)indicates the state of xml handling (set by hmi) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)DEFAULT_SAFETY @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsSafetyCondition @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5116)(iProgVersion:=cINTERPRETER_VERSION,bDataAvailable:=TRUE,List:=(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Mold1.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Ejector1.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Mold1.sv_bMoldOpen'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core1.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core2.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core3.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core4.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core5.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core6.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core7.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core8.sv_bCoreOut'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Ejector1.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core1.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core2.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core3.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core4.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core5.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core6.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core7.sv_bCoreOut'),(Operator:=cSEO_AND,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Core8.sv_bCoreOut'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core1.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core1.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core2.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core2.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core3.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core3.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core4.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core4.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core5.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core5.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core6.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core6.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core7.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core7.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core8.MoveFwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_START,ParamType:=cSET_String,sParameter:='Core8.MoveBwd'),(Operator:=cSEO_LD,Condition:=cSEC_BC_EQ,ParamType:=cSET_VariableBool,sParameter:='Ejector1.sv_bEjectorBwd'),(Operator:=cSEO_END)) @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(12)g_SafetyData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsGlbSafetyData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)mpOperationMode @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mpDummy @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

14 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(16)fVisDataToUpdate @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aProgramInvalid @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbLockUnlockAll @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)nMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tnLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)Alarm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tsAlarm @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bLock @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)sAdditionalInfo @RT(0) @T @F @DT @RT(11)STRING(120) @RT(0) @T @T @STRING 0 @F @RT(3)120 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aInterprete @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
17 
@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)time @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)StatusMem @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KMEM_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)StatusSys @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)CreateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMEM_CreateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iVal @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(10)sTmpString @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)iMoveDir @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)iMoveNr @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)operator @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sTmpWord @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)bHMI @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(59)data change triggered by HMI -> no datachanged notification @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)iInc @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iLog @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)Trace Program to file for statusreport @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(18)aLoadDefaultSafety @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pLoadInitProgram @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(17)paLoadInitProgram @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVis(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pSEVisibilityChanged @STRUCTURED_TEXT 
@RT(0) @RT(47)sv_SafetyHMICom.bSEMaskVisible,mpOperationMode^ @RT(10)TaskVis(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(23)evaSEMovementNotAllowed @STRUCTURED_TEXT 
@RT(0) @RT(21)mevMovementNotAllowed @RT(10)TaskVis(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(5)dummy @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_EVENT_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(15)paUpdateVisData @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(3)tmp @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(15)abSEInterpreter @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABSEInterpreter @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)iActSafeMoveIdx @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)iMoveNr @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)iActProgIdx @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bAllowed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(12)PU_Task_7(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pHMIDataChanged @STRUCTURED_TEXT 
@RT(0) @RT(27)sv_SafetyHMICom.iNewHMIData @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pMoldDataChanged @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_DataState @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(12)oldDataState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnDataState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(25)pHMIRestoreDefaultChanged @STRUCTURED_TEXT 
@RT(0) @RT(31)sv_SafetyHMICom.iRestoreDefault @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(26)pHMITeachModeActiveChanged @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_SafetyHMICom.bTeachMode @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbLockUnlockAll @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)nMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tnLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)Alarm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tsAlarm @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// visupdate algo must be stopped 
// if safetyeditor mask not visible and all movements allowed
// or (half) autocycle running 

fVisDataToUpdate := NOT(
   ((NOT sv_SafetyHMICom.bSEMaskVisible) AND (sv_SafetyHMICom.MovementAllowed = 16#FFFF_FFFF)) 
OR (sv_OperationMode > nManual));

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(38)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bInit) THEN
    DeviceId.CompId := cCompAll;
    DeviceId.IndexId := cAllDevIndex;
    Alarm.AlarmId := erSEInvalidProgram;
    bInit := TRUE;
END_IF;



IF bLock THEN
     IF (nMode <> nLockAbort) THEN
         nMode := nLockAbort;         
         SET_ALARM(Name := erSEInvalidProgram, Param1 := sAdditionalInfo);
         sv_SafetyHMICom.iRestoreDefault := sv_SafetyHMICom.iRestoreDefault + 1; 
     ELSE 
         RETURN; 
     END_IF;
ELSE
     IF (nMode <> nUnlock) THEN
         nMode := nUnlock;         
         RESET_ALARM(Name := erSEInvalidProgram);         
     ELSE 
         RETURN;
     END_IF;
END_IF;

Alarm.Param1 := sAdditionalInfo;    
fbLockUnlockAll(DeviceId := DeviceId,
                    MoveDir := cMoveAll,
                    MoveId := cMoveAll,
                    Mode := nMode,
                    Alarm := Alarm);

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(114)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


t := GET_RUNTIME();
// check prog. version 
IF (sv_SafetyCondition.iProgVersion > cINTERPRETER_VERSION) THEN
    aProgramInvalid(TRUE, CONCAT('invalid version: ', DWORD_TO_STRING(sv_SafetyCondition.iProgVersion)));
    RETURN;
ELSE
    aProgramInvalid(bLock := FALSE);
END_IF;

CreateData := KMEM_HashMapCreate("SafetyProgStartTable", iVal, 20);
// TODO status -> alarm 

FOR i := 1 TO cSafetyListLen DO
    operator := sv_SafetyCondition.List[i].Operator;
    g_SafetyData.SafetyListTmp[i].Operator := operator; 
    g_SafetyData.SafetyListTmp[i].Condition := sv_SafetyCondition.List[i].Condition;
    
    IF operator <> cSEO_NOP THEN
       iCnt := i;
    END_IF;
    
    IF  operator = cSEO_END THEN
        iCnt := i;
        EXIT;    // BREAK ... no more operations to interprete
    ELSIF operator = cSEO_START THEN
        // condition for new movement, put pointer to start of operation into g_hSafetyProgStartTable

            
        sTmpString := sv_SafetyCondition.List[i].sParameter;
        b := FSEMoveIDToValue(sTmpString);
        IF (b) THEN
            iVal := i + 1;
            StatusMem := KMEM_HashMapAdd(CreateData.Handle, 
                                     sTmpString, 
                                     iVal);
        ELSE 
           aProgramInvalid(TRUE, CONCAT('Line ', DINT_TO_STRING(i), ': MoveId not available - ', sTmpString));
        END_IF;
        
    ELSE 
        CASE sv_SafetyCondition.List[i].ParamType OF
            cSET_ConstReal:
                g_SafetyData.SafetyListTmp[i].rValueReal := STRING_TO_REAL(sv_SafetyCondition.List[i].sParameter);
  
            cSET_VariableBool:
                g_SafetyData.SafetyListTmp[i].pbParamBool := GET_SYNC_REFTO(sv_SafetyCondition.List[i].sParameter, T#0s, StatusSys);
                IF (StatusSys <> KSYS_Status_OK) THEN
                    g_SafetyData.SafetyListTmp[i].pbParamBool := EMPTY;                 
                END_IF;
                
            cSET_VariableReal:
                g_SafetyData.SafetyListTmp[i].prParamReal := GET_SYNC_REFTO(sv_SafetyCondition.List[i].sParameter, T#0s, StatusSys);
                IF (StatusSys <> KSYS_Status_OK) THEN
                    g_SafetyData.SafetyListTmp[i].prParamReal := EMPTY;                 
                END_IF;

            cSET_String:
                ;// do nothing but avoid program invalid alarm
        ELSE
           aProgramInvalid(TRUE, CONCAT('Line ', DINT_TO_STRING(i), ': invalid paramtype - ', UINT_TO_STRING(sv_SafetyCondition.List[i].ParamType)));
        END_CASE;
    END_IF; 

    
    
END_FOR;


FOR i := 1 TO cMaxSafetyMovements DO
    iMoveNr := sv_SafetyMovements[i];
    IF (iMoveNr = 0) THEN // end of list
        EXIT;     
    END_IF;
    iMoveDir := sv_MovementsAvailable[iMoveNr].pMovementData^.MoveDir;
    IF iMoveDir = cMoveAll THEN // special case ejector shake
        iMoveDir := cMoveFwd;    
    END_IF;
    iVal := sv_MovementsAvailable[iMoveNr].iFuIndex;
    sTmpString := sv_ODCDeviceMovements.Devices[iVal].sFuName;
    sTmpString := CONCAT(sTmpString, '.', DINT_TO_STRING(iMoveDir));
    StatusMem := KMEM_HashMapGet(CreateData.Handle, sTmpString, iVal);
    IF (StatusMem = KMEM_Status_OK) THEN
       sv_MovementsAvailable[iMoveNr].iSESafetyProgIdx := iVal;
    ELSE 
       sv_MovementsAvailable[iMoveNr].iSESafetyProgIdx := 0;        
    END_IF;
END_FOR;

StatusMem := KMEM_HashMapDelete(CreateData.Handle);


t := GET_RUNTIME() - t;
time := LINT_TO_DINT(TIME_TO_LINT(t)/1000);
//dummy:=Print('hsf SE interprete: %d ms', time);

IF (bHMI) THEN
    iInc := 0;
ELSE
    iInc := 16#01000000;
END_IF;

sTmpWord := sv_SafetyHMICom.iListDataChanged;
sTmpWord := DINT_TO_DWORD((DWORD_TO_DINT(sTmpWord AND 16#FF000000) + iInc)) AND 16#FF000000; // change counter
sTmpWord := sTmpWord OR SHL(INT_TO_DWORD(iLog), 16);
sTmpWord := sTmpWord OR DINT_TO_DWORD(iCnt);
sv_SafetyHMICom.iListDataChanged := sTmpWord;


@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_SafetyCondition := DEFAULT_SAFETY;

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

START_PROCESS_ALGORITHM(paLoadInitProgram);

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (g_SafetyData.bAvailable) THEN
    IF (NOT sv_SafetyCondition.bDataAvailable) THEN
        aLoadDefaultSafety();
        aInterprete.iLog := cSE_PRGLOG_DEFAULT;
    ELSE 
        aInterprete.iLog := cSE_PRGLOG_NO;
    END_IF;
    aInterprete(bHMI := FALSE);  
    sv_SafetyHMICom.bAvailable := TRUE; 
    sv_bSEDataLoaded := TRUE; 
ELSE    
    sv_bSEDataLoaded := FALSE;     
END_IF;

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// override default safety only allowed in setup mode
IF (sv_OperationMode <> nSetup) THEN
   sv_SafetyHMICom.bOverrideDefaultSafety := FALSE;
END_IF;

// check if update of safety conditions for HMI mask necessary
IF (fVisDataToUpdate()) THEN
    START_PROCESS_ALGORITHM(paUpdateVisData);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// movement not allowed alarm raised
START_PROCESS_ALGORITHM(paUpdateVisData);

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(53)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iCnt := 0; 
i := -1;
WHILE ((((i = iActProgIdx) AND (i <> 0)) OR (i = -1)) AND (iCnt < cMaxSafetyMovements)) DO
    iCnt := iCnt + 1;
    iActSafeMoveIdx := iActSafeMoveIdx + 1; 
    IF iActSafeMoveIdx > cMaxSafetyMovements THEN
        iActSafeMoveIdx := 1;    
    END_IF;
    iMoveNr := sv_SafetyMovements[iActSafeMoveIdx];
    IF (iMoveNr <> 0) THEN
        i := sv_MovementsAvailable[iMoveNr].iSESafetyProgIdx;        
    END_IF;
END_WHILE;

iActProgIdx := i; 

       

IF (iActProgIdx > 0) THEN
    bAllowed := abSEInterpreter.fRunSafetyCondition(iActProgIdx);
ELSE
    bAllowed := TRUE;
END_IF;

IF ((bAllowed) AND 
    (NOT g_SafetyData.MovementAllowed[sv_MovementsAvailable[iMoveNr].iODCSafetyMovementsEntry])) THEN
  RESET_ALARM(Name := erSEMovementNotAllowed,   
              SubID1 := sv_MovementsAvailable[iMoveNr].DeviceId.CompId,
              SubID2 := sv_MovementsAvailable[iMoveNr].DeviceId.IndexId,
              SubID3 := sv_MovementsAvailable[iMoveNr].pMovementData^.MoveDir);    
END_IF;
g_SafetyData.MovementAllowed[sv_MovementsAvailable[iMoveNr].iODCSafetyMovementsEntry] := bAllowed;

tmp := 0; 
FOR i := 1 TO cMaxSafetyMovements DO
   tmp := tmp OR (SHL(BOOL_TO_DWORD(g_SafetyData.MovementAllowed[i]), (i-1)));
END_FOR;                                

sv_SafetyHMICom.MovementAllowed := tmp; 
sv_SafetyHMICom.MovementToActivate := g_SafetyData.MovementToActivate; 

IF (NOT fVisDataToUpdate()) THEN
    sv_SafetyHMICom.MovementToActivate := 0; 

    STOP_PROCESS_ALGORITHM(paUpdateVisData);
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT (IS_LINKED(sv_SafetyCondition))) THEN
    RETURN; 
END_IF;

g_SafetyData.bAvailable := TRUE; 
mevMovementNotAllowed := evaMovementNotAllowed;

mpDummy := @sv_OperationMode;     // FIXME: workaround for CR_0041252
mpOperationMode := mpDummy;

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aInterprete(bHMI := TRUE, iLog := cSE_PRGLOG_NO);

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_DataState = nReadMoldData) THEN
    sv_bSEDataLoaded := FALSE; 
END_IF;

IF ((sv_DataState = nReady) AND (oldDataState = nReadMoldData)) THEN
    IF (g_SafetyData.bAvailable) THEN
        sv_bSEDataLoaded := TRUE; 
        aInterprete(bHMI := FALSE, iLog := cSE_PRGLOG_MLDDATA);    
    ELSE
        IF (sv_bSEDataLoaded) THEN // no safetyeditor available but molddata contains safetydata
            SET_ALARM(erSafetyEditorNotAvailable);                
            sv_bSEDataLoaded := FALSE; 
        END_IF;
    END_IF;
END_IF;

oldDataState := sv_DataState;


@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aLoadDefaultSafety();
aInterprete(bHMI := FALSE, iLog := cSE_PRGLOG_DEFAULT); 

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

    DeviceId.CompId := cCompAll;
    DeviceId.IndexId := cAllDevIndex;
    Alarm.AlarmId := erSETeachModeActive;

    IF sv_SafetyHMICom.bTeachMode THEN
          nMode := nLockAbort;
        ELSE
          nMode := nUnlock;
    END_IF;

    fbLockUnlockAll(DeviceId := DeviceId,
                    MoveDir := cMoveAll,
                    MoveId := cMoveAll,
                    Mode := nMode,
                    Alarm := Alarm);

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 
@END_Body 

@END_Contents 
