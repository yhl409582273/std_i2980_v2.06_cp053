(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Find the end of a parallel branch in 
*)

IMPORT_OVER_LISTFILE
 cMoveEndParallel
, FBInterpreterCheckIsRightJoin
, FBDebugTrace2
, KODC_Sequence

END_IMPORT

FUNCTION_BLOCK FBInterpreterFindEndOfParallel #DUMMY_EDIT_BLOCK

VAR_IN_OUT
 odcSequence : KODC_Sequence (* [col][line] *);
END_VAR

VAR_INPUT
 iColumn : DINT;
 iLine : DINT;
END_VAR

VAR_OUTPUT
 iMaxLineOfBranch : DINT;
END_VAR

VAR_TEMP
 i : DINT;
 k : DINT;
END_VAR

VAR
 fbInterpreterCheckIsRightJoin : FBInterpreterCheckIsRightJoin;
 fbDebugTrace2 : FBDebugTrace2;
END_VAR
#BEGIN_EDIT_BLOCK

(* col/line  point to a SP (leftmost of them)*)

iMaxLineOfBranch := 0;

FOR i := 1 TO cMaxParallelMovements DO
   IF odcSequence[i][iLine].iMoveId = cMoveStartParallel THEN
      IF i < iColumn THEN
         fbDebugTrace2(nODCInterpreter, 'error block called wrong iColumn must be the leftmost SP');
         RETURN;
      ELSIF i > iColumn THEN
         (* iColumn itself is skipped since it's join point is the same as at least another join point*)
         FOR k := iLine + 1 TO cMaxODCSteps DO
            IF odcSequence[i][k].iMoveId = cMoveEndParallel THEN
               (* now look to the left if the left most column is
               the same where the parallel branch started *)
               fbInterpreterCheckIsRightJoin(odcSequence := odcSequence, iColumnStartBranch := iColumn, iLine := k);
               IF fbInterpreterCheckIsRightJoin.bIsJoin THEN
                  iMaxLineOfBranch := MAX(iMaxLineOfBranch, k);
                  EXIT;
               END_IF;
               IF fbInterpreterCheckIsRightJoin.bError THEN
                  (* error printed inside the block already *)
                  iMaxLineOfBranch := 0;
                  RETURN;
               END_IF;
            END_IF;
         END_FOR;
      END_IF; // i < iColumn
   END_IF; // odcSequence[i][iLine].iMoveId = cMoveStartParallel
END_FOR;

IF iMaxLineOfBranch = 0 THEN
   fbDebugTrace2(nODCInterpreter, 'no branch join point found????');
   (* error no branch join point found for this branch?? *)
   RETURN;
END_IF;



;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 95 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Find the end of a parallel branch in 
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(16)cMoveEndParallel @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(30)FBInterpreterFindEndOfParallel @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(29)fbInterpreterCheckIsRightJoin @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(29)FBInterpreterCheckIsRightJoin @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbDebugTrace2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBDebugTrace2 @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)odcSequence @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KODC_Sequence @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(11)[col][line] @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(7)iColumn @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)iLine @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)iMaxLineOfBranch @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)k @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(39)

(* col/line  point to a SP (leftmost of them)*)

iMaxLineOfBranch := 0;

FOR i := 1 TO cMaxParallelMovements DO
   IF odcSequence[i][iLine].iMoveId = cMoveStartParallel THEN
      IF i < iColumn THEN
         fbDebugTrace2(nODCInterpreter, 'error block called wrong iColumn must be the leftmost SP');
         RETURN;
      ELSIF i > iColumn THEN
         (* iColumn itself is skipped since it's join point is the same as at least another join point*)
         FOR k := iLine + 1 TO cMaxODCSteps DO
            IF odcSequence[i][k].iMoveId = cMoveEndParallel THEN
               (* now look to the left if the left most column is
               the same where the parallel branch started *)
               fbInterpreterCheckIsRightJoin(odcSequence := odcSequence, iColumnStartBranch := iColumn, iLine := k);
               IF fbInterpreterCheckIsRightJoin.bIsJoin THEN
                  iMaxLineOfBranch := MAX(iMaxLineOfBranch, k);
                  EXIT;
               END_IF;
               IF fbInterpreterCheckIsRightJoin.bError THEN
                  (* error printed inside the block already *)
                  iMaxLineOfBranch := 0;
                  RETURN;
               END_IF;
            END_IF;
         END_FOR;
      END_IF; // i < iColumn
   END_IF; // odcSequence[i][iLine].iMoveId = cMoveStartParallel
END_FOR;

IF iMaxLineOfBranch = 0 THEN
   fbDebugTrace2(nODCInterpreter, 'no branch join point found????');
   (* error no branch join point found for this branch?? *)
   RETURN;
END_IF;


@END_Body 

@END_Contents 
@@@BEG_Password@@@
NGhzZm9kYzQ=
@@@END_Password@@@
