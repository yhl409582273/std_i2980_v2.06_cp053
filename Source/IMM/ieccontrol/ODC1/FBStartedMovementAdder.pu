(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, ASSERT
, cMaxActiveMovements
, tsDeviceId
, tsODCStepPos
, tMoveIdent
, tsStartedMoveDataODCExtended
, KRTOS_Semaphore
, KRTOS_Status
, tsTraceLevel

END_IMPORT

FUNCTION_BLOCK FBStartedMovementAdder #DUMMY_EDIT_BLOCK

VAR_INPUT
 DeviceId : tsDeviceId;
 StepPos : tsODCStepPos;
 MoveId : tMoveIdent;
 MoveDir : tMoveIdent;
 iInstance : DINT;
END_VAR

VAR_OUTPUT
 bOK : BOOL;
END_VAR

SYSTEM_VAR
 sv_StartedManualMovements : tsStartedMoveDataODCExtended;
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 erMaxStartedMovementsExceeded : ALARM;
 erAssert : ALARM;
END_OBJECT

VAR_EXTERNAL
 MovementsSema : KRTOS_Semaphore (* protects sv_StartedManualMovements *);
END_VAR

VAR_TEMP
 i : DINT;
END_VAR

VAR
 dummy : DINT;
 dummy2 : BOOL;
 Status : KRTOS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bOK := FALSE;

Status := MovementsSema.Wait(WaitTime := cTimeOutSempahore);
IF Status <> KRTOS_Status_OK THEN
   dummy2 := ASSERT(FALSE, erAssert);
   RETURN;
END_IF;

IF sv_StartedManualMovements.iStartedMovements < cMaxActiveMovements THEN
   //add movement to sv_StartedManualMovements
   IF sv_TraceLevel.bODCInterpreter THEN
      dummy := Print('adding started manual movement %d.%d %d/%d pos: %d/%d', DeviceId.CompId, DeviceId.IndexId, MoveId, MoveDir, StepPos.iColumn, StepPos.iRow);
   END_IF;
   
   sv_StartedManualMovements.iStartedMovements := sv_StartedManualMovements.iStartedMovements +1;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].DeviceId := DeviceId;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].MoveDir := MoveDir;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].MoveId := MoveId;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].StepPos := StepPos;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].iInstance := iInstance;
   bOK := TRUE;
ELSE
   //too many movements started
   //show some information about the movement to make debugging easier
   dummy := Print('set alarm erMaxStartedMovementsExceeded in FBStartedMovementAdder.pu');
   dummy := Print('max. active movements: %d', cMaxActiveMovements); 
   dummy := Print('tried to start    %d.%d %d/%d',
                  DeviceId.CompId, DeviceId.IndexId,
                  MoveId, MoveDir);
   FOR i := 1 TO cMaxActiveMovements DO
      dummy := Print('already started %d %d.%d %d/%d',
                     i, sv_StartedManualMovements.MoveData[i].DeviceId.CompId, sv_StartedManualMovements.MoveData[i].DeviceId.IndexId,
                     sv_StartedManualMovements.MoveData[i].MoveId, sv_StartedManualMovements.MoveData[i].MoveDir);
   END_FOR;
   //set alarm after tracing out
   SET_ALARM(Name := erMaxStartedMovementsExceeded,
            SubID1 := cMaxActiveMovements);  
END_IF;

Status := MovementsSema.Put();
IF Status <> KRTOS_Status_OK THEN
   dummy2 := ASSERT(FALSE, erAssert);
END_IF;


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(19)cMaxActiveMovements @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)6 @RT(52)number of movements that are active at the same time 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(22)FBStartedMovementAdder @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
15 
@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)StepPos @RT(0) @T @T @DERIVED 0 @F @RT(12)tsODCStepPos @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)MoveDir @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)iInstance @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(3)bOK @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(25)sv_StartedManualMovements @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(28)tsStartedMoveDataODCExtended @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(29)erMaxStartedMovementsExceeded @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)MovementsSema @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KRTOS_Semaphore @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)protects sv_StartedManualMovements @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)dummy2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KRTOS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(49)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bOK := FALSE;

Status := MovementsSema.Wait(WaitTime := cTimeOutSempahore);
IF Status <> KRTOS_Status_OK THEN
   dummy2 := ASSERT(FALSE, erAssert);
   RETURN;
END_IF;

IF sv_StartedManualMovements.iStartedMovements < cMaxActiveMovements THEN
   //add movement to sv_StartedManualMovements
   IF sv_TraceLevel.bODCInterpreter THEN
      dummy := Print('adding started manual movement %d.%d %d/%d pos: %d/%d', DeviceId.CompId, DeviceId.IndexId, MoveId, MoveDir, StepPos.iColumn, StepPos.iRow);
   END_IF;
   
   sv_StartedManualMovements.iStartedMovements := sv_StartedManualMovements.iStartedMovements +1;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].DeviceId := DeviceId;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].MoveDir := MoveDir;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].MoveId := MoveId;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].StepPos := StepPos;
   sv_StartedManualMovements.MoveData[sv_StartedManualMovements.iStartedMovements].iInstance := iInstance;
   bOK := TRUE;
ELSE
   //too many movements started
   //show some information about the movement to make debugging easier
   dummy := Print('set alarm erMaxStartedMovementsExceeded in FBStartedMovementAdder.pu');
   dummy := Print('max. active movements: %d', cMaxActiveMovements); 
   dummy := Print('tried to start    %d.%d %d/%d',
                  DeviceId.CompId, DeviceId.IndexId,
                  MoveId, MoveDir);
   FOR i := 1 TO cMaxActiveMovements DO
      dummy := Print('already started %d %d.%d %d/%d',
                     i, sv_StartedManualMovements.MoveData[i].DeviceId.CompId, sv_StartedManualMovements.MoveData[i].DeviceId.IndexId,
                     sv_StartedManualMovements.MoveData[i].MoveId, sv_StartedManualMovements.MoveData[i].MoveDir);
   END_FOR;
   //set alarm after tracing out
   SET_ALARM(Name := erMaxStartedMovementsExceeded,
            SubID1 := cMaxActiveMovements);  
END_IF;

Status := MovementsSema.Put();
IF Status <> KRTOS_Status_OK THEN
   dummy2 := ASSERT(FALSE, erAssert);
END_IF;

@END_Body 

@END_Contents 
@@@BEG_Password@@@
NGhzZm9kYzQ=
@@@END_Password@@@
