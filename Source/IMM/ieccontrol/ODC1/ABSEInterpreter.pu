(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

IMPORT_OVER_LISTFILE
 KMEM_HashMapGet
, GET_RUNTIME
, SET_WVEVENT
, cSafetyListLen
, cSEO_END
, cSEO_NOP
, cSEO_START
, cSEO_LD
, cSEO_AND
, cSEO_XOR
, cSEStackSize
, cSEC_BC_EQ_NOT
, cSEC_BC_EQ
, cSEC_BV_EQ_NOT
, cSEC_BV_EQ
, cSEC_RC_GT
, cSEC_RC_LT
, cSEC_RV_GT
, cSEC_RV_LT
, cSEC_POP
, tyMovementRegisterList
, tyODCSequenceInternal
, tsGlbSafetyData
//  tsSafetyCondition
, tySEStack
, tsODCStepPos

END_IMPORT

ALGORITHM_BLOCK ABSEInterpreter #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_MovementsAvailable : tyMovementRegisterList;
 sv_ODCSequenceInt : tyODCSequenceInternal;
 // sv_SafetyCondition : tsSafetyCondition;
END_VAR

SYSTEM_OBJECT
 erSEMovementNotAllowed : ALARM;
END_OBJECT

VAR_EXTERNAL
 g_SafetyData : tsGlbSafetyData;
END_VAR

VAR
 miStackPtr : INT;
 mybStack : tySEStack;
END_VAR

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

FUNCTION fEvaluateCondition : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 i : DINT;
END_VAR

VAR_IN_OUT
 bResult : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


CASE (g_SafetyData.SafetyListTmp[i].Condition) OF
    cSEC_BC_EQ_NOT:
         fEvaluateCondition := g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY;
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ = FALSE;
         END_IF;
    
    cSEC_BC_EQ:
         fEvaluateCondition := g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY;
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ = TRUE;
         END_IF;

    cSEC_BV_EQ_NOT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY) 
                        AND (i < cSafetyListLen) 
                        AND (g_SafetyData.SafetyListTmp[i+1].pbParamBool <> EMPTY);
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ <> g_SafetyData.SafetyListTmp[i+1].pbParamBool^;
         END_IF;
    
    cSEC_BV_EQ:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY) 
                        AND (i < cSafetyListLen) 
                        AND (g_SafetyData.SafetyListTmp[i+1].pbParamBool <> EMPTY); 
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ = g_SafetyData.SafetyListTmp[i+1].pbParamBool^;
         END_IF;

    cSEC_RC_GT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen);
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ > g_SafetyData.SafetyListTmp[i+1].rValueReal;
         END_IF;
    
    cSEC_RC_LT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen);
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ < g_SafetyData.SafetyListTmp[i+1].rValueReal;
         END_IF;

    cSEC_RV_GT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen)
                        AND (g_SafetyData.SafetyListTmp[i+1].prParamReal <> EMPTY);     
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ > g_SafetyData.SafetyListTmp[i+1].prParamReal^;
         END_IF;

    cSEC_RV_LT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen)
                        AND (g_SafetyData.SafetyListTmp[i+1].prParamReal <> EMPTY);     
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ < g_SafetyData.SafetyListTmp[i+1].prParamReal^;
         END_IF;

    cSEC_POP:
         IF (miStackPtr > 0) THEN
              bResult := mybStack[miStackPtr];
              miStackPtr := miStackPtr - 1; 
              fEvaluateCondition := TRUE; 
         END_IF; 

ELSE
    fEvaluateCondition := FALSE;
END_CASE;
    





;#END_EDIT_BLOCK END_FUNCTION

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

FUNCTION fRunSafetyCondition : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 iIdx : DINT;
END_VAR

VAR
 bValue : BOOL;
 idx : DINT;
 bResult : BOOL;
 bCondition : BOOL;
 bConditionFound : BOOL (* at least one valid condition found *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


bValue := FALSE;
miStackPtr := -1; 
idx := iIdx;

bConditionFound := FALSE; 
WHILE (idx <= cSafetyListLen) DO
    CASE g_SafetyData.SafetyListTmp[idx].Operator OF
        cSEO_NOP:
            ;
    
        cSEO_START:
            EXIT; 
        
        cSEO_LD:
            // each LD except first one pushes actual value to stack 
            IF (miStackPtr = cSEStackSize) THEN
                bValue := FALSE; // TODO stackoverflow
            END_IF;
     
            miStackPtr := miStackPtr + 1;        

            IF (miStackPtr > 0) THEN
               mybStack[miStackPtr] := bValue;
            END_IF; 

            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
               bValue := bCondition; 
            END_IF;
        
        cSEO_AND:
            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
                IF miStackPtr >= 0 THEN
                    bValue := bValue AND bCondition;                           
                ELSE // special case: no "LD" evaluated before, Operator should work like "LD"
                    bValue := bCondition;                     
                END_IF;
            END_IF;

        
        cSEO_OR:
            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
                IF miStackPtr >= 0 THEN
                    bValue := bValue OR bCondition;                           
                ELSE // special case: no "LD" evaluated before, Operator should work like "LD"
                    bValue := bCondition;                     
                END_IF;
            END_IF;
        
        cSEO_XOR:
            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
                IF miStackPtr >= 0 THEN
                    bValue := bValue XOR bCondition;                           
                ELSE // special case: no "LD" evaluated before, Operator should work like "LD"
                    bValue := bCondition;                     
                END_IF;
            END_IF;

        
        cSEO_END:
            EXIT;
    ELSE
        ; // invalid operation
    END_CASE;

    IF bResult THEN
       bConditionFound := TRUE;    
    END_IF;
    idx := idx + 1;    
END_WHILE;
//     dummy := Print('ABSEInterpreter.fRunSafetyCondition %s = %d',  sv_SafetyCondition.List[iIdx-1].sParameter, bValue);
fRunSafetyCondition := bValue OR (NOT bConditionFound);




;#END_EDIT_BLOCK END_FUNCTION

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



*)

FUNCTION fCheckMovement : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 StepPos : tsODCStepPos (* Step for which dependencies are checked *);
END_VAR

VAR
 i : DINT;
 bAllowed : BOOL;
 iMoveNumber : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// DBG s:=SET_WVEVENT(1110);
bAllowed := TRUE; 

IF (NOT g_SafetyData.bAvailable) THEN
    fCheckMovement := bAllowed;       
    RETURN;
END_IF;
   
iMoveNumber := sv_ODCSequenceInt[StepPos.iColumn][StepPos.iRow].iMoveNumber;

i :=  sv_MovementsAvailable[iMoveNumber].iSESafetyProgIdx;

IF (i > 0) THEN
// DBG    s:=SET_WVEVENT(1112);
    bAllowed := fRunSafetyCondition(i);
// DBG    s:=SET_WVEVENT(1113);
    IF (NOT bAllowed) THEN
       SET_ALARM(Name := erSEMovementNotAllowed,   
              SubID1 := sv_MovementsAvailable[iMoveNumber].DeviceId.CompId,
              SubID2 := sv_MovementsAvailable[iMoveNumber].DeviceId.IndexId,
              SubID3 := sv_MovementsAvailable[iMoveNumber].pMovementData^.MoveDir);    

    END_IF;     
    g_SafetyData.MovementAllowed[sv_MovementsAvailable[iMoveNumber].iODCSafetyMovementsEntry] := bAllowed;
END_IF;               

// DBG s:=SET_WVEVENT(1114);

fCheckMovement := bAllowed;   
               


;#END_EDIT_BLOCK END_FUNCTION



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(15)KMEM_HashMapGet @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)SET_WVEVENT @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
17 
@Var @RT(14)cSafetyListLen @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)200 @RT(39)array length of safety program variable 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cSEO_END @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#FF @RT(14)END of program 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cSEO_NOP @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#00 @RT(89)Operator "no operation" (e.g. line contains only additional parameter for last operation) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cSEO_START @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#01 @RT(92)start conditions for a certain movement defined in parameter as string (e.g. "Mold1.MoveFwd" 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)cSEO_LD @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#02 @RT(102)Load condition result, if a condition result has been calculated before this result is pushed to stack 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cSEO_AND @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#03 @RT(53)AND operation with actual result and condition result 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cSEO_XOR @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#05 @RT(53)XOR operation with actual result and condition result 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)cSEStackSize @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)8 @RT(57)size of stack for condition evaluation in ABSEInterpreter 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cSEC_BC_EQ_NOT @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#10 @RT(25)Condition BOOL SV = FALSE 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cSEC_BC_EQ @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#11 @RT(24)Condition BOOL SV = TRUE 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cSEC_BV_EQ_NOT @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#12 @RT(23)Condition BOOL SV <> SV 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cSEC_BV_EQ @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#13 @RT(22)Condition BOOL SV = SV 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cSEC_RC_GT @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#20 @RT(25)Condition REAL SV > VALUE 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cSEC_RC_LT @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#21 @RT(25)Condition REAL SV < VALUE 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cSEC_RV_GT @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#22 @RT(22)Condition REAL SV > SV 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cSEC_RV_LT @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#23 @RT(22)Condition REAL SV < SV 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cSEC_POP @RT(0) @T @F @DT @RT(4)UINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(5)16#FF @RT(24)pop Condition from Stack 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABSEInterpreter @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(21)sv_MovementsAvailable @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyMovementRegisterList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_ODCSequenceInt @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tyODCSequenceInternal @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)g_SafetyData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsGlbSafetyData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(18)sv_SafetyCondition @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsSafetyCondition @RT(0) @T @T @UNKNOWN 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)miStackPtr @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)mybStack @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)tySEStack @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)erSEMovementNotAllowed @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(18)fEvaluateCondition @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)bResult @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(19)fRunSafetyCondition @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(4)iIdx @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bValue @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)idx @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bResult @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bCondition @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bConditionFound @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)at least one valid condition found @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(14)fCheckMovement @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(7)StepPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsODCStepPos @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(39)Step for which dependencies are checked @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bAllowed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)iMoveNumber @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(86)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


CASE (g_SafetyData.SafetyListTmp[i].Condition) OF
    cSEC_BC_EQ_NOT:
         fEvaluateCondition := g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY;
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ = FALSE;
         END_IF;
    
    cSEC_BC_EQ:
         fEvaluateCondition := g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY;
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ = TRUE;
         END_IF;

    cSEC_BV_EQ_NOT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY) 
                        AND (i < cSafetyListLen) 
                        AND (g_SafetyData.SafetyListTmp[i+1].pbParamBool <> EMPTY);
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ <> g_SafetyData.SafetyListTmp[i+1].pbParamBool^;
         END_IF;
    
    cSEC_BV_EQ:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].pbParamBool <> EMPTY) 
                        AND (i < cSafetyListLen) 
                        AND (g_SafetyData.SafetyListTmp[i+1].pbParamBool <> EMPTY); 
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].pbParamBool^ = g_SafetyData.SafetyListTmp[i+1].pbParamBool^;
         END_IF;

    cSEC_RC_GT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen);
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ > g_SafetyData.SafetyListTmp[i+1].rValueReal;
         END_IF;
    
    cSEC_RC_LT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen);
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ < g_SafetyData.SafetyListTmp[i+1].rValueReal;
         END_IF;

    cSEC_RV_GT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen)
                        AND (g_SafetyData.SafetyListTmp[i+1].prParamReal <> EMPTY);     
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ > g_SafetyData.SafetyListTmp[i+1].prParamReal^;
         END_IF;

    cSEC_RV_LT:
         fEvaluateCondition := (g_SafetyData.SafetyListTmp[i].prParamReal <> EMPTY) 
                        AND (i < cSafetyListLen)
                        AND (g_SafetyData.SafetyListTmp[i+1].prParamReal <> EMPTY);     
    
         IF fEvaluateCondition THEN
             bResult := g_SafetyData.SafetyListTmp[i].prParamReal^ < g_SafetyData.SafetyListTmp[i+1].prParamReal^;
         END_IF;

    cSEC_POP:
         IF (miStackPtr > 0) THEN
              bResult := mybStack[miStackPtr];
              miStackPtr := miStackPtr - 1; 
              fEvaluateCondition := TRUE; 
         END_IF; 

ELSE
    fEvaluateCondition := FALSE;
END_CASE;
    




@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(84)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


bValue := FALSE;
miStackPtr := -1; 
idx := iIdx;

bConditionFound := FALSE; 
WHILE (idx <= cSafetyListLen) DO
    CASE g_SafetyData.SafetyListTmp[idx].Operator OF
        cSEO_NOP:
            ;
    
        cSEO_START:
            EXIT; 
        
        cSEO_LD:
            // each LD except first one pushes actual value to stack 
            IF (miStackPtr = cSEStackSize) THEN
                bValue := FALSE; // TODO stackoverflow
            END_IF;
     
            miStackPtr := miStackPtr + 1;        

            IF (miStackPtr > 0) THEN
               mybStack[miStackPtr] := bValue;
            END_IF; 

            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
               bValue := bCondition; 
            END_IF;
        
        cSEO_AND:
            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
                IF miStackPtr >= 0 THEN
                    bValue := bValue AND bCondition;                           
                ELSE // special case: no "LD" evaluated before, Operator should work like "LD"
                    bValue := bCondition;                     
                END_IF;
            END_IF;

        
        cSEO_OR:
            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
                IF miStackPtr >= 0 THEN
                    bValue := bValue OR bCondition;                           
                ELSE // special case: no "LD" evaluated before, Operator should work like "LD"
                    bValue := bCondition;                     
                END_IF;
            END_IF;
        
        cSEO_XOR:
            bResult := fEvaluateCondition(idx, bCondition);
            IF bResult THEN
                IF miStackPtr >= 0 THEN
                    bValue := bValue XOR bCondition;                           
                ELSE // special case: no "LD" evaluated before, Operator should work like "LD"
                    bValue := bCondition;                     
                END_IF;
            END_IF;

        
        cSEO_END:
            EXIT;
    ELSE
        ; // invalid operation
    END_CASE;

    IF bResult THEN
       bConditionFound := TRUE;    
    END_IF;
    idx := idx + 1;    
END_WHILE;
//     dummy := Print('ABSEInterpreter.fRunSafetyCondition %s = %d',  sv_SafetyCondition.List[iIdx-1].sParameter, bValue);
fRunSafetyCondition := bValue OR (NOT bConditionFound);



@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 

@BEG_Body 
@TL(36)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// DBG s:=SET_WVEVENT(1110);
bAllowed := TRUE; 

IF (NOT g_SafetyData.bAvailable) THEN
    fCheckMovement := bAllowed;       
    RETURN;
END_IF;
   
iMoveNumber := sv_ODCSequenceInt[StepPos.iColumn][StepPos.iRow].iMoveNumber;

i :=  sv_MovementsAvailable[iMoveNumber].iSESafetyProgIdx;

IF (i > 0) THEN
// DBG    s:=SET_WVEVENT(1112);
    bAllowed := fRunSafetyCondition(i);
// DBG    s:=SET_WVEVENT(1113);
    IF (NOT bAllowed) THEN
       SET_ALARM(Name := erSEMovementNotAllowed,   
              SubID1 := sv_MovementsAvailable[iMoveNumber].DeviceId.CompId,
              SubID2 := sv_MovementsAvailable[iMoveNumber].DeviceId.IndexId,
              SubID3 := sv_MovementsAvailable[iMoveNumber].pMovementData^.MoveDir);    

    END_IF;     
    g_SafetyData.MovementAllowed[sv_MovementsAvailable[iMoveNumber].iODCSafetyMovementsEntry] := bAllowed;
END_IF;               

// DBG s:=SET_WVEVENT(1114);

fCheckMovement := bAllowed;   
               

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".



@@@END_Comment@@@ 
@END_Body 

@END_Contents 
