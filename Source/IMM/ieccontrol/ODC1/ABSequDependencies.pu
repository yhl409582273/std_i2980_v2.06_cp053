(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Calculates the dependencies for each step in sequence
- calc init dependencies and store to start/end sequence steps
- calc dependency for each step
*)

IMPORT_OVER_LISTFILE
 FGetCatConfigValueString
, cODCDependencyDontCare
, cODCNoDependency
, cMaxMoveDevicesRegistered
, cMoveStartParallelOpen
, cMoveBeginLoop
, cMoveEndLoop
, cNoDependency
, tyMovementRegisterList
, tsTraceLevel
, tyODCSequenceInternal
, KODC_Sequence
, ABCalcDependencies
, tyParallelOpenHelpData
, tyStartParallelDependencys
, tyStartParallelOpenDependencys
, tyODCDependencyArray
, ABBrowse
, ABODCDebug
, tsODCStepPos
, tsODCStepInfo
, tMoveIdent
, FBAddDependency

END_IMPORT

ALGORITHM_BLOCK ABSequDependencies #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
 sv_ODCSequenceInt : tyODCSequenceInternal;
 sv_ODCSequence : KODC_Sequence;
END_VAR

SYSTEM_VAR_IN
 sv_MovementsAvailable : tyMovementRegisterList;
END_VAR

VAR_EXTERNAL
 g_iAutoCycleLoopEndLine : DINT;
 g_iODCMoveDevicesRegistered : DINT;
 g_ParallelOpenHelpData : tyParallelOpenHelpData;
END_VAR

VAR
 abCalcDependencies : ABCalcDependencies;
 m_StartParallelDependencies : tyStartParallelDependencys;
 m_StartParallelOpenDependencies : tyStartParallelOpenDependencys;
 msLogFile : STRING(255);
END_VAR

ALGORITHM aInit


VAR_TEMP
 i : DINT;
END_VAR

VAR
 EmptyDependency : tyODCDependencyArray;
 sWorkPath : STRING(255);
 bInitDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
   //get logfile name
   sWorkPath := FGetCatConfigValueString('System.workPath', '/harddisk0/');
   msLogFile := CONCAT(sWorkPath, '/protocol/log/odc_dependency.csv');
   bInitDone := TRUE;
END_IF;

FOR i := 1 TO cMaxParallelMovements DO   
   m_StartParallelOpenDependencies[i] := EmptyDependency;
END_FOR;

FOR i := 1 TO cMaxStartParallel DO
   m_StartParallelDependencies[i] := EmptyDependency;
END_FOR;




;#END_EDIT_BLOCK END_ALGORITHM

(*
dependency calculation
   - calculate init dependency arrays, store them to begin and end sequence steps
   - calculate dependency array for each step of sequence

*)

ALGORITHM aCalc


VAR_OUTPUT
 bError : BOOL;
END_VAR

VAR_TEMP
 i : DINT;
 iColumn : DINT;
END_VAR

VAR
 abBrowse : ABBrowse;
 abBrowseInt : ABBrowse;
 abODCDebug : ABODCDebug;
 LStepPos : tsODCStepPos;
 LStepInfo : tsODCStepInfo;
 bLBeginStepSequ : BOOL;
 bLEndStepSequ : BOOL;
 bLBranchStart : BOOL;
 bLBranchEnd : BOOL;
 bLSafetyRelevant : BOOL;
 bLHelpStep : BOOL;
 CurrStepDependency : tyODCDependencyArray;
 PrevStepDependency : tyODCDependencyArray;
 bAppendLogFile : BOOL;
 dummy : DINT;
 bFirstStepAfterEndLoop : BOOL;
 LastStepInfo : tsODCStepInfo;
 bLastStepSafetyRelevant : BOOL;
 ActualMoveId : tMoveIdent;
 fbAddDependency : FBAddDependency;
 iStartParallel : INT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aInit();

bError := FALSE;

(**************************)
(* calc init dependencies *)
(**************************)

// start runtime measure
abODCDebug.aRunTimeStart(sInfoText := '************* Calc init dependency *********************');              

// calc init dependencies and store to start sequence steps
abCalcDependencies.aInit();

// stop runtime measure and log to trace
abODCDebug.aRunTimeStop();

IF (abCalcDependencies.aInit.bError) THEN
   bError := TRUE;
   RETURN;
END_IF;

//copy init safety array 
sv_ODCSequenceInt[1,1].SafetyArray := abCalcDependencies.aInit.Dependency;


(************************************************************)
(* calc dependencies depending on step position in sequence *)
(************************************************************)

// start runtime measure
abODCDebug.aRunTimeStart(sInfoText := '**************** Calc sequence dependencies **************************');

// init dependency calc arrays
CurrStepDependency := sv_ODCSequenceInt[1,1].SafetyArray;
PrevStepDependency := sv_ODCSequenceInt[1,1].SafetyArray;

//conditions for first step already calculated => start with second step
LStepPos.iColumn := 1;
LStepPos.iRow := 2;

// set first step of sequence
abBrowse.aSetRef(StepPos := LStepPos,
                 StepInfo => LStepInfo,
                 bBeginStepSequ => bLBeginStepSequ,
                 bEndStepSequ => bLEndStepSequ,
                 bBranchStart => bLBranchStart,
                 bBranchEnd => bLBranchEnd,
                 bHelpStep => bLHelpStep);

bLSafetyRelevant := (sv_MovementsAvailable[LStepInfo.iMoveNr].pMovementData^.iSafetyIdentifier MOD 2 = 1);
bLastStepSafetyRelevant := FALSE;
bAppendLogFile := FALSE;

REPEAT 
   
   IF (sv_TraceLevel.bODCDependencies) THEN
      dummy := Print('--------- analyze conditions for step %d;%d ---------',LStepPos.iColumn, LStepPos.iRow);
   END_IF;
  
   ActualMoveId := sv_ODCSequence[LStepPos.iColumn,LStepPos.iRow].iMoveId;
   bFirstStepAfterEndLoop := (LStepPos.iRow = (g_iAutoCycleLoopEndLine + 1) AND (LStepPos.iColumn = 1));

   //consolidate parallel open steps at first step after end autocycle loop
   //attention: modify before conditions of this step are calculated
   IF bFirstStepAfterEndLoop THEN
      abCalcDependencies.aConsolidateAfterAutoLoop();
      PrevStepDependency := abCalcDependencies.aConsolidateAfterAutoLoop.ResultingDependency;
   END_IF;
       
   IF (bLBranchStart) THEN // branch start step
     
      abBrowseInt.aSetRef(StepPos := LStepPos);
      abBrowseInt.aBwd();
      
      // check whether its the first branch start of group
      IF (abBrowseInt.aBwd.iDependence = nParallel) THEN
         
         //get dependency from previous start parallel step
         FOR iColumn := (LStepPos.iColumn -1) TO 1 BY -1 DO
            IF sv_ODCSequence[iColumn,LStepPos.iRow].iMoveId = cMoveStartParallel THEN
               abCalcDependencies.aParallelBranch.PreviousDependencies := sv_ODCSequenceInt[iColumn,LStepPos.iRow].SafetyArray;
               iStartParallel := sv_ODCSequence[iColumn,LStepPos.iRow].iCount;
               EXIT;
            END_IF;
         END_FOR;
         
         //save conditions before modification
         //usecase: more than two start parallel in the same line
         m_StartParallelDependencies[LStepInfo.iMoveCount] := m_StartParallelDependencies[iStartParallel];
         
         // dependency calc for parallel start branch
         abCalcDependencies.aParallelBranch(StepPos              := LStepPos,
                                            ActualMovements      := m_StartParallelDependencies[iStartParallel],
                                            StepDependency       => CurrStepDependency);
         
      ELSE
         (* set previous step in base array if safety relevant *)
         //ignore previous step after end end loop because this step can lead to somewhere in the parallel open tree
         IF (abBrowseInt.aBwd.bSafetyRelevant) AND NOT bFirstStepAfterEndLoop THEN
            fbAddDependency(iFuIndex := abBrowseInt.aBwd.StepInfo.iFuIndex,
                         iMoveNr := abBrowseInt.aBwd.StepInfo.iMoveNr,
                         iCount := abBrowseInt.aBwd.StepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
         END_IF;
         
         //save conditions before modification
         m_StartParallelDependencies[LStepInfo.iMoveCount] := PrevStepDependency;     
         
         // dependency calc for first start branch of branch group         
         abCalcDependencies.aStartBranch(StepPos              := LStepPos,
                                         PreviousDependencies := PrevStepDependency,
                                         ActualMovements      := PrevStepDependency,
                                         StepDependency       => CurrStepDependency);
         
      END_IF;
   ELSIF (ActualMoveId = cMoveStartParallelOpen) THEN
     
      IF LStepPos.iColumn = 1 THEN
         IF (bLastStepSafetyRelevant) THEN
            fbAddDependency(iFuIndex := LastStepInfo.iFuIndex,
                         iMoveNr := LastStepInfo.iMoveNr,
                         iCount := LastStepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
         END_IF;
         
         //save conditions before modification
         m_StartParallelOpenDependencies[LStepInfo.iMoveCount] := PrevStepDependency;
         abCalcDependencies.aStartParallelOpen.ActualMovements := PrevStepDependency;
      ELSE
         //get dependency from previous start parallel open step
         FOR iColumn := (LStepPos.iColumn -1) TO 1 BY -1 DO
            IF sv_ODCSequence[iColumn,LStepPos.iRow].iMoveId = cMoveStartParallelOpen THEN
               PrevStepDependency := sv_ODCSequenceInt[iColumn,LStepPos.iRow].SafetyArray;
               iStartParallel := sv_ODCSequence[iColumn,LStepPos.iRow].iCount;
               abCalcDependencies.aStartParallelOpen.ActualMovements := m_StartParallelOpenDependencies[iStartParallel];
               EXIT;
            END_IF;
         END_FOR;
      END_IF;
      
      abCalcDependencies.aStartParallelOpen(StepPos := LStepPos,
                                            PreviousDependencies := PrevStepDependency,
                                            StepDependency       => CurrStepDependency);
      
   ELSIF (ActualMoveId = cMoveEndParallelOpen) THEN   
      (* set previous step in base array if safety relevant *)
      IF (bLastStepSafetyRelevant) THEN
         fbAddDependency(iFuIndex := LastStepInfo.iFuIndex,
                         iMoveNr := LastStepInfo.iMoveNr,
                         iCount := LastStepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
      END_IF;
      
      g_ParallelOpenHelpData[LStepPos.iColumn].bParallelOpen := TRUE;
      
      IF LStepPos.iColumn = 1 THEN
         CurrStepDependency := PrevStepDependency;
      ELSE      
         abCalcDependencies.aEndParallelOpen(StepPos := LStepPos,
                                             PreviousDependencies := PrevStepDependency,
                                             StepDependency => CurrStepDependency);
      END_IF;
  
   ELSE
      (* set previous step in base array if safety relevant *)
      IF (bLastStepSafetyRelevant) AND NOT bFirstStepAfterEndLoop THEN
         fbAddDependency(iFuIndex := LastStepInfo.iFuIndex,
                         iMoveNr := LastStepInfo.iMoveNr,
                         iCount := LastStepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
      END_IF;
          
      //get dependencies from previous step
      CurrStepDependency := PrevStepDependency;
       
      IF (bLBranchEnd) THEN
         // find previous end branch step
         FOR i := (LStepPos.iColumn - 1) TO 1 BY -1 DO
            IF sv_ODCSequence[i,LStepPos.iRow].iMoveId = cMoveEndParallel THEN                             
               // consolidate dependencies of current end branch step with previous end branch step
               abCalcDependencies.aConsolidation(CurrentDependency  := CurrStepDependency,
                                                 PreviousDependency := sv_ODCSequenceInt[i,LStepPos.iRow].SafetyArray,
                                                 StepDependency     => CurrStepDependency);
               EXIT;  // exit loop
            END_IF;
         END_FOR;
      END_IF;
   END_IF;   
   
   //copy current dependency to SV
   sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray := CurrStepDependency;
   
   (* prepare output of calculated safety arrays 
      reset own fu in dependency array only if it is no help step
      background: start/end opening/closing sequence are safety irrelevant movements
       of fu mold, so mold positions won't be checked (dependency don't care) after this steps *)
   
   IF (NOT bLHelpStep) THEN
      // set own step as safety irrelevant      
      CurrStepDependency[LStepInfo.iFuIndex].Dependency := cNoDependency;
      
      //write directly to SV    
      sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray[LStepInfo.iFuIndex] := CurrStepDependency[LStepInfo.iFuIndex];
   END_IF;
   
   // backup current dependency as previous dependency
   PrevStepDependency := CurrStepDependency;
     
   IF sv_MovementsAvailable[LStepInfo.iMoveNr].pMovementData^.iSafetyIdentifier > 0 OR
      bLBranchStart OR bLBranchEnd OR bLBeginStepSequ OR bLEndStepSequ OR (ActualMoveId = cMoveStartParallelOpen) OR
      (ActualMoveId = cMoveBeginLoop) OR (ActualMoveId = cMoveEndLoop) OR (ActualMoveId = cMoveEndParallelOpen) OR
      (ActualMoveId = cMoveIf) OR (ActualMoveId = cMoveElse) OR (ActualMoveId = cMoveEndIf) THEN
      ;//no change necessary
   ELSE
      //set dependency to not relevant
      FOR i := 1 TO g_iODCMoveDevicesRegistered DO
         sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray[i].Dependency := cNoDependency;
      END_FOR;
   END_IF;
      
   (* trace safety array *)
   IF (sv_TraceLevel.bODCDependFile) THEN
      abODCDebug.aLogSafety(sFileName := msLogFile,
                            bAppend := bAppendLogFile,
                            StepPos := LStepPos,
                            Dependencies := sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray);
      bAppendLogFile := TRUE;
   END_IF;
   
   //backup relevant information (saves unnecessary ABBrowseInt.aBwd)
   bLastStepSafetyRelevant := bLSafetyRelevant;
   LastStepInfo := LStepInfo;
   
   (* scan forward over all sequence *)
   abBrowse.aFwd(StepPos => LStepPos,
                 StepInfo => LStepInfo,
                 bBeginStepSequ => bLBeginStepSequ,
                 bEndStepSequ => bLEndStepSequ,
                 bBranchStart => bLBranchStart,
                 bBranchEnd => bLBranchEnd,
                 bSafetyRelevant => bLSafetyRelevant,
                 bHelpStep => bLHelpStep);    
UNTIL (abBrowse.aFwd.bEndStepAll OR
       abBrowse.aFwd.bError)
END_REPEAT;   

IF abBrowse.aFwd.bError THEN
   bError := TRUE;
END_IF;

// stop runtime measure and log to trace
abODCDebug.aRunTimeStop();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Calculates the dependencies for each step in sequence
- calc init dependencies and store to start/end sequence steps
- calc dependency for each step
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(24)FGetCatConfigValueString @RT(0) @T @T @DERIVED 0 @F @RT(22)FUNCTION : STRING(255) @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
7 
@Var @RT(22)cODCDependencyDontCare @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)-1 @RT(76)dependency dont care, function unit not safety relevant, interpretation TRUE 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cODCNoDependency @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(61)no dependency, used for dependency calc, interpretation FALSE 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(25)cMaxMoveDevicesRegistered @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)50 @RT(49)max number of devices which are serving movements 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)cMoveStartParallelOpen @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)9 @RT(17)StartParallelOpen 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cMoveBeginLoop @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)5 @RT(10)Begin loop 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)cMoveEndLoop @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)6 @RT(8)End loop 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cNoDependency @RT(0) @T @F @DT @RT(5)LWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(4)16#0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(18)ABSequDependencies @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(21)sv_MovementsAvailable @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyMovementRegisterList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 9 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_ODCSequenceInt @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tyODCSequenceInternal @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_ODCSequence @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KODC_Sequence @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)g_iAutoCycleLoopEndLine @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(18)abCalcDependencies @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)ABCalcDependencies @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)g_iODCMoveDevicesRegistered @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(22)g_ParallelOpenHelpData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyParallelOpenHelpData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(27)m_StartParallelDependencies @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tyStartParallelDependencys @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(31)m_StartParallelOpenDependencies @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(30)tyStartParallelOpenDependencys @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)msLogFile @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(15)EmptyDependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyODCDependencyArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(9)sWorkPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aCalc @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
24 
@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(8)abBrowse @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)ABBrowse @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)abBrowseInt @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)ABBrowse @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)abODCDebug @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)ABODCDebug @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)LStepPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsODCStepPos @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)LStepInfo @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsODCStepInfo @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bLBeginStepSequ @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)bLEndStepSequ @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)bLBranchStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bLBranchEnd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)bLSafetyRelevant @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bLHelpStep @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)CurrStepDependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyODCDependencyArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)PrevStepDependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyODCDependencyArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(14)bAppendLogFile @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)iColumn @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(22)bFirstStepAfterEndLoop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)LastStepInfo @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsODCStepInfo @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)bLastStepSafetyRelevant @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)ActualMoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbAddDependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)FBAddDependency @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)iStartParallel @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
   //get logfile name
   sWorkPath := FGetCatConfigValueString('System.workPath', '/harddisk0/');
   msLogFile := CONCAT(sWorkPath, '/protocol/log/odc_dependency.csv');
   bInitDone := TRUE;
END_IF;

FOR i := 1 TO cMaxParallelMovements DO   
   m_StartParallelOpenDependencies[i] := EmptyDependency;
END_FOR;

FOR i := 1 TO cMaxStartParallel DO
   m_StartParallelDependencies[i] := EmptyDependency;
END_FOR;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(263)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aInit();

bError := FALSE;

(**************************)
(* calc init dependencies *)
(**************************)

// start runtime measure
abODCDebug.aRunTimeStart(sInfoText := '************* Calc init dependency *********************');              

// calc init dependencies and store to start sequence steps
abCalcDependencies.aInit();

// stop runtime measure and log to trace
abODCDebug.aRunTimeStop();

IF (abCalcDependencies.aInit.bError) THEN
   bError := TRUE;
   RETURN;
END_IF;

//copy init safety array 
sv_ODCSequenceInt[1,1].SafetyArray := abCalcDependencies.aInit.Dependency;


(************************************************************)
(* calc dependencies depending on step position in sequence *)
(************************************************************)

// start runtime measure
abODCDebug.aRunTimeStart(sInfoText := '**************** Calc sequence dependencies **************************');

// init dependency calc arrays
CurrStepDependency := sv_ODCSequenceInt[1,1].SafetyArray;
PrevStepDependency := sv_ODCSequenceInt[1,1].SafetyArray;

//conditions for first step already calculated => start with second step
LStepPos.iColumn := 1;
LStepPos.iRow := 2;

// set first step of sequence
abBrowse.aSetRef(StepPos := LStepPos,
                 StepInfo => LStepInfo,
                 bBeginStepSequ => bLBeginStepSequ,
                 bEndStepSequ => bLEndStepSequ,
                 bBranchStart => bLBranchStart,
                 bBranchEnd => bLBranchEnd,
                 bHelpStep => bLHelpStep);

bLSafetyRelevant := (sv_MovementsAvailable[LStepInfo.iMoveNr].pMovementData^.iSafetyIdentifier MOD 2 = 1);
bLastStepSafetyRelevant := FALSE;
bAppendLogFile := FALSE;

REPEAT 
   
   IF (sv_TraceLevel.bODCDependencies) THEN
      dummy := Print('--------- analyze conditions for step %d;%d ---------',LStepPos.iColumn, LStepPos.iRow);
   END_IF;
  
   ActualMoveId := sv_ODCSequence[LStepPos.iColumn,LStepPos.iRow].iMoveId;
   bFirstStepAfterEndLoop := (LStepPos.iRow = (g_iAutoCycleLoopEndLine + 1) AND (LStepPos.iColumn = 1));

   //consolidate parallel open steps at first step after end autocycle loop
   //attention: modify before conditions of this step are calculated
   IF bFirstStepAfterEndLoop THEN
      abCalcDependencies.aConsolidateAfterAutoLoop();
      PrevStepDependency := abCalcDependencies.aConsolidateAfterAutoLoop.ResultingDependency;
   END_IF;
       
   IF (bLBranchStart) THEN // branch start step
     
      abBrowseInt.aSetRef(StepPos := LStepPos);
      abBrowseInt.aBwd();
      
      // check whether its the first branch start of group
      IF (abBrowseInt.aBwd.iDependence = nParallel) THEN
         
         //get dependency from previous start parallel step
         FOR iColumn := (LStepPos.iColumn -1) TO 1 BY -1 DO
            IF sv_ODCSequence[iColumn,LStepPos.iRow].iMoveId = cMoveStartParallel THEN
               abCalcDependencies.aParallelBranch.PreviousDependencies := sv_ODCSequenceInt[iColumn,LStepPos.iRow].SafetyArray;
               iStartParallel := sv_ODCSequence[iColumn,LStepPos.iRow].iCount;
               EXIT;
            END_IF;
         END_FOR;
         
         //save conditions before modification
         //usecase: more than two start parallel in the same line
         m_StartParallelDependencies[LStepInfo.iMoveCount] := m_StartParallelDependencies[iStartParallel];
         
         // dependency calc for parallel start branch
         abCalcDependencies.aParallelBranch(StepPos              := LStepPos,
                                            ActualMovements      := m_StartParallelDependencies[iStartParallel],
                                            StepDependency       => CurrStepDependency);
         
      ELSE
         (* set previous step in base array if safety relevant *)
         //ignore previous step after end end loop because this step can lead to somewhere in the parallel open tree
         IF (abBrowseInt.aBwd.bSafetyRelevant) AND NOT bFirstStepAfterEndLoop THEN
            fbAddDependency(iFuIndex := abBrowseInt.aBwd.StepInfo.iFuIndex,
                         iMoveNr := abBrowseInt.aBwd.StepInfo.iMoveNr,
                         iCount := abBrowseInt.aBwd.StepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
         END_IF;
         
         //save conditions before modification
         m_StartParallelDependencies[LStepInfo.iMoveCount] := PrevStepDependency;     
         
         // dependency calc for first start branch of branch group         
         abCalcDependencies.aStartBranch(StepPos              := LStepPos,
                                         PreviousDependencies := PrevStepDependency,
                                         ActualMovements      := PrevStepDependency,
                                         StepDependency       => CurrStepDependency);
         
      END_IF;
   ELSIF (ActualMoveId = cMoveStartParallelOpen) THEN
     
      IF LStepPos.iColumn = 1 THEN
         IF (bLastStepSafetyRelevant) THEN
            fbAddDependency(iFuIndex := LastStepInfo.iFuIndex,
                         iMoveNr := LastStepInfo.iMoveNr,
                         iCount := LastStepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
         END_IF;
         
         //save conditions before modification
         m_StartParallelOpenDependencies[LStepInfo.iMoveCount] := PrevStepDependency;
         abCalcDependencies.aStartParallelOpen.ActualMovements := PrevStepDependency;
      ELSE
         //get dependency from previous start parallel open step
         FOR iColumn := (LStepPos.iColumn -1) TO 1 BY -1 DO
            IF sv_ODCSequence[iColumn,LStepPos.iRow].iMoveId = cMoveStartParallelOpen THEN
               PrevStepDependency := sv_ODCSequenceInt[iColumn,LStepPos.iRow].SafetyArray;
               iStartParallel := sv_ODCSequence[iColumn,LStepPos.iRow].iCount;
               abCalcDependencies.aStartParallelOpen.ActualMovements := m_StartParallelOpenDependencies[iStartParallel];
               EXIT;
            END_IF;
         END_FOR;
      END_IF;
      
      abCalcDependencies.aStartParallelOpen(StepPos := LStepPos,
                                            PreviousDependencies := PrevStepDependency,
                                            StepDependency       => CurrStepDependency);
      
   ELSIF (ActualMoveId = cMoveEndParallelOpen) THEN   
      (* set previous step in base array if safety relevant *)
      IF (bLastStepSafetyRelevant) THEN
         fbAddDependency(iFuIndex := LastStepInfo.iFuIndex,
                         iMoveNr := LastStepInfo.iMoveNr,
                         iCount := LastStepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
      END_IF;
      
      g_ParallelOpenHelpData[LStepPos.iColumn].bParallelOpen := TRUE;
      
      IF LStepPos.iColumn = 1 THEN
         CurrStepDependency := PrevStepDependency;
      ELSE      
         abCalcDependencies.aEndParallelOpen(StepPos := LStepPos,
                                             PreviousDependencies := PrevStepDependency,
                                             StepDependency => CurrStepDependency);
      END_IF;
  
   ELSE
      (* set previous step in base array if safety relevant *)
      IF (bLastStepSafetyRelevant) AND NOT bFirstStepAfterEndLoop THEN
         fbAddDependency(iFuIndex := LastStepInfo.iFuIndex,
                         iMoveNr := LastStepInfo.iMoveNr,
                         iCount := LastStepInfo.iMoveCount,
                         iMode :=  0,
                         Dependency := PrevStepDependency);
      END_IF;
          
      //get dependencies from previous step
      CurrStepDependency := PrevStepDependency;
       
      IF (bLBranchEnd) THEN
         // find previous end branch step
         FOR i := (LStepPos.iColumn - 1) TO 1 BY -1 DO
            IF sv_ODCSequence[i,LStepPos.iRow].iMoveId = cMoveEndParallel THEN                             
               // consolidate dependencies of current end branch step with previous end branch step
               abCalcDependencies.aConsolidation(CurrentDependency  := CurrStepDependency,
                                                 PreviousDependency := sv_ODCSequenceInt[i,LStepPos.iRow].SafetyArray,
                                                 StepDependency     => CurrStepDependency);
               EXIT;  // exit loop
            END_IF;
         END_FOR;
      END_IF;
   END_IF;   
   
   //copy current dependency to SV
   sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray := CurrStepDependency;
   
   (* prepare output of calculated safety arrays 
      reset own fu in dependency array only if it is no help step
      background: start/end opening/closing sequence are safety irrelevant movements
       of fu mold, so mold positions won't be checked (dependency don't care) after this steps *)
   
   IF (NOT bLHelpStep) THEN
      // set own step as safety irrelevant      
      CurrStepDependency[LStepInfo.iFuIndex].Dependency := cNoDependency;
      
      //write directly to SV    
      sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray[LStepInfo.iFuIndex] := CurrStepDependency[LStepInfo.iFuIndex];
   END_IF;
   
   // backup current dependency as previous dependency
   PrevStepDependency := CurrStepDependency;
     
   IF sv_MovementsAvailable[LStepInfo.iMoveNr].pMovementData^.iSafetyIdentifier > 0 OR
      bLBranchStart OR bLBranchEnd OR bLBeginStepSequ OR bLEndStepSequ OR (ActualMoveId = cMoveStartParallelOpen) OR
      (ActualMoveId = cMoveBeginLoop) OR (ActualMoveId = cMoveEndLoop) OR (ActualMoveId = cMoveEndParallelOpen) OR
      (ActualMoveId = cMoveIf) OR (ActualMoveId = cMoveElse) OR (ActualMoveId = cMoveEndIf) THEN
      ;//no change necessary
   ELSE
      //set dependency to not relevant
      FOR i := 1 TO g_iODCMoveDevicesRegistered DO
         sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray[i].Dependency := cNoDependency;
      END_FOR;
   END_IF;
      
   (* trace safety array *)
   IF (sv_TraceLevel.bODCDependFile) THEN
      abODCDebug.aLogSafety(sFileName := msLogFile,
                            bAppend := bAppendLogFile,
                            StepPos := LStepPos,
                            Dependencies := sv_ODCSequenceInt[LStepPos.iColumn,LStepPos.iRow].SafetyArray);
      bAppendLogFile := TRUE;
   END_IF;
   
   //backup relevant information (saves unnecessary ABBrowseInt.aBwd)
   bLastStepSafetyRelevant := bLSafetyRelevant;
   LastStepInfo := LStepInfo;
   
   (* scan forward over all sequence *)
   abBrowse.aFwd(StepPos => LStepPos,
                 StepInfo => LStepInfo,
                 bBeginStepSequ => bLBeginStepSequ,
                 bEndStepSequ => bLEndStepSequ,
                 bBranchStart => bLBranchStart,
                 bBranchEnd => bLBranchEnd,
                 bSafetyRelevant => bLSafetyRelevant,
                 bHelpStep => bLHelpStep);    
UNTIL (abBrowse.aFwd.bEndStepAll OR
       abBrowse.aFwd.bError)
END_REPEAT;   

IF abBrowse.aFwd.bError THEN
   bError := TRUE;
END_IF;

// stop runtime measure and log to trace
abODCDebug.aRunTimeStop();

@END_Body 

@@@BEG_Comment@@@ 
@TL(4)
dependency calculation
   - calculate init dependency arrays, store them to begin and end sequence steps
   - calculate dependency array for each step of sequence

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
@@@BEG_Password@@@
NGhzZm9kYzQ=
@@@END_Password@@@
