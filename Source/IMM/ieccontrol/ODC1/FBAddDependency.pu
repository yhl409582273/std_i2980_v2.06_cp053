IMPORT_OVER_LISTFILE
 tyODCDependencyArray
, tsODCDeviceMovementList
, tyMovementRegisterList

END_IMPORT

FUNCTION_BLOCK FBAddDependency #DUMMY_EDIT_BLOCK

VAR_INPUT
 iFuIndex : DINT (* index in sv_ODCDeviceMovements *);
 iMoveNr : DINT (* 0: not safety relevant, >0: movement number *);
 iCount : DINT;
 iMode : DINT (* 0: replace existing dependency 1: add condition to actual dependency  *);
END_VAR

VAR_IN_OUT
 Dependency : tyODCDependencyArray (* actual step dependency *);
END_VAR

SYSTEM_VAR
 sv_ODCDeviceMovements : tsODCDeviceMovementList (* list of all devices that registered movements for the ODC *);
 sv_MovementsAvailable : tyMovementRegisterList;
END_VAR

VAR_TEMP
 i : DINT;
 k : DINT;
END_VAR

VAR
 tmpDependency : LWORD;
 iInstanceableMovement : DINT;
 iBitNumber : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF iMoveNr <= 0 THEN
   Dependency[iFuIndex].Dependency := cNoDependency;
ELSE
   //get movement number in sv_ODCDeviceMovements 
   FOR i := 1 TO sv_ODCDeviceMovements.Devices[iFuIndex].iNumberOfMovements DO
      
      IF sv_ODCDeviceMovements.Devices[iFuIndex].Movements[i]^ = sv_MovementsAvailable[iMoveNr].pMovementData^ THEN
         //move number found -> set the according bit               
         tmpDependency := cFirstBit;
         
         //first movement: shift right 0, second movement: shift right 1, ... 
         tmpDependency := SHR(tmpDependency, (i-1));
                  
         IF iMode = 0 THEN
            //replace dependency
            Dependency[iFuIndex].Dependency := tmpDependency;
         ELSE
            //add dependency
            Dependency[iFuIndex].Dependency := Dependency[iFuIndex].Dependency OR tmpDependency;
         END_IF;
            
         //check if it is an instanceable movement and set correct bit
         IF sv_ODCDeviceMovements.Devices[iFuIndex].Movements[i]^.bInstanceable THEN            
            tmpDependency := cFirstBit;
            
            //first instanceable movement: bit 21-30, second instanceable movement: bit 31-40
            //third instanceable movement: bit 41-50, fourth instanceable movement: bit 51-60
            
            //find out if it is the first, second, third or fourth instanceable movement in this function unit
            iInstanceableMovement := 1;
            FOR k := 1 TO cMaxSRInstanceableMovements DO
               IF i = sv_ODCDeviceMovements.Devices[iFuIndex].InstanceableMovements[k] THEN
                  iInstanceableMovement := k;
                  EXIT;
               END_IF;
            END_FOR;
            
            iBitNumber := cMaxDeviceMovements + ((iInstanceableMovement - 1) * cMaxIntermediateConditions) + iCount - 1;
            tmpDependency := SHR(tmpDependency, iBitNumber);
            
            //mode must not be checked here
            Dependency[iFuIndex].Dependency := Dependency[iFuIndex].Dependency OR tmpDependency;            
         END_IF;
         
         EXIT;
      END_IF;
   END_FOR;
END_IF;


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 127 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(15)FBAddDependency @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(8)iFuIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)index in sv_ODCDeviceMovements @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)iMoveNr @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)0: not safety relevant, >0: movement number @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)iCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)iMode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(69)0: replace existing dependency 1: add condition to actual dependency  @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)Dependency @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyODCDependencyArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)actual step dependency @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(13)tmpDependency @RT(0) @T @F @DT @RT(5)LWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)sv_ODCDeviceMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)tsODCDeviceMovementList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)list of all devices that registered movements for the ODC @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_MovementsAvailable @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyMovementRegisterList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(1)k @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(21)iInstanceableMovement @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)iBitNumber @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(54)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF iMoveNr <= 0 THEN
   Dependency[iFuIndex].Dependency := cNoDependency;
ELSE
   //get movement number in sv_ODCDeviceMovements 
   FOR i := 1 TO sv_ODCDeviceMovements.Devices[iFuIndex].iNumberOfMovements DO
      
      IF sv_ODCDeviceMovements.Devices[iFuIndex].Movements[i]^ = sv_MovementsAvailable[iMoveNr].pMovementData^ THEN
         //move number found -> set the according bit               
         tmpDependency := cFirstBit;
         
         //first movement: shift right 0, second movement: shift right 1, ... 
         tmpDependency := SHR(tmpDependency, (i-1));
                  
         IF iMode = 0 THEN
            //replace dependency
            Dependency[iFuIndex].Dependency := tmpDependency;
         ELSE
            //add dependency
            Dependency[iFuIndex].Dependency := Dependency[iFuIndex].Dependency OR tmpDependency;
         END_IF;
            
         //check if it is an instanceable movement and set correct bit
         IF sv_ODCDeviceMovements.Devices[iFuIndex].Movements[i]^.bInstanceable THEN            
            tmpDependency := cFirstBit;
            
            //first instanceable movement: bit 21-30, second instanceable movement: bit 31-40
            //third instanceable movement: bit 41-50, fourth instanceable movement: bit 51-60
            
            //find out if it is the first, second, third or fourth instanceable movement in this function unit
            iInstanceableMovement := 1;
            FOR k := 1 TO cMaxSRInstanceableMovements DO
               IF i = sv_ODCDeviceMovements.Devices[iFuIndex].InstanceableMovements[k] THEN
                  iInstanceableMovement := k;
                  EXIT;
               END_IF;
            END_FOR;
            
            iBitNumber := cMaxDeviceMovements + ((iInstanceableMovement - 1) * cMaxIntermediateConditions) + iCount - 1;
            tmpDependency := SHR(tmpDependency, iBitNumber);
            
            //mode must not be checked here
            Dependency[iFuIndex].Dependency := Dependency[iFuIndex].Dependency OR tmpDependency;            
         END_IF;
         
         EXIT;
      END_IF;
   END_FOR;
END_IF;

@END_Body 

@END_Contents 
