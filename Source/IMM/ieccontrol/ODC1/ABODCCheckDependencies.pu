(*
Called by aCheck
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, CHECK_REF
, cCompCore
, cCompMold
, cMaxDeviceMovements
, cMaxIntermediateConditions
, cFirstBit
, tsGlbSafetyData
, tyMovementRegisterList
, tyODCSequenceInternal
, tsODCDeviceMovementList
, ABSEInterpreter
, tsSafetyHMICom
, tsODCStepPos
, tsDeviceId
, tsAlarm
, FBSetStepState

END_IMPORT

ALGORITHM_BLOCK ABODCCheckDependencies #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_MovementsAvailable : tyMovementRegisterList;
 sv_ODCSequenceInt : tyODCSequenceInternal;
 sv_ODCDeviceMovements : tsODCDeviceMovementList (* list of all devices that registered movements for the ODC *);
 sv_bOverrideCoreSafety : BOOL (* overrides safety settings for core movements in setup mode *);
 sv_bOverrideEjectorSafety : BOOL (* overrides safety settings for ejector movements in setup mode *);
END_VAR

SYSTEM_VAR_IN
 sv_SafetyHMICom : tsSafetyHMICom;
END_VAR

SYSTEM_OBJECT
 erODCComponentLocked : ALARM;
 TaskVis : TASK;
 erCompNotInCorrectPosition : ALARM;
END_OBJECT

VAR_EXTERNAL
 g_SafetyData : tsGlbSafetyData;
 g_iODCMoveDevicesRegistered : DINT;
END_VAR

VAR
 abSEInterpreter : ABSEInterpreter;
 mbOverrideDefaultSafety : BOOL;
END_VAR

ALGORITHM aCheckInstances


VAR_INPUT
 Dependency : LWORD;
 iDeviceIndex : DINT;
 iMoveInDevice : DINT;
END_VAR

VAR_OUTPUT
 bAllowed : BOOL;
END_VAR

VAR_TEMP
 i : DINT;
 k : DINT;
END_VAR

VAR
 tmpDependency : LWORD;
 iBegin : DINT;
 iInstanceableMovement : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bAllowed := FALSE;

//find out if it is the first, second, third or fourth instanceable movement in this function unit
iInstanceableMovement := 1;
FOR k := 1 TO cMaxSRInstanceableMovements DO
   IF iMoveInDevice = sv_ODCDeviceMovements.Devices[iDeviceIndex].InstanceableMovements[k] THEN
      iInstanceableMovement := k;
      EXIT;
   END_IF;
END_FOR;

iBegin := cMaxDeviceMovements + ((iInstanceableMovement - 1) * cMaxIntermediateConditions);
tmpDependency := SHL(Dependency, iBegin);

FOR i := 1 TO cMaxIntermediateConditions DO
      
   tmpDependency := tmpDependency AND cFirstBit;
   IF tmpDependency = cFirstBit THEN
      //bit set => check PosReached of this instance             
      bAllowed := sv_ODCDeviceMovements.Devices[iDeviceIndex].Movements[iMoveInDevice]^.InstanceData.pPosReachedArray^[i];
      
      IF bAllowed THEN
         //movement with posReached = TRUE found -> exit
         EXIT;
      END_IF;
   END_IF;
  
   tmpDependency := SHL(Dependency, (iBegin + i));
   
END_FOR;


;#END_EDIT_BLOCK END_ALGORITHM

(*
check safety array for the given step
*)

ALGORITHM aCheckInternal


VAR_INPUT
 StepPos : tsODCStepPos;
 DeviceIdSelf : tsDeviceId;
 bNoAlarmsAndStepState : BOOL (* TRUE: only check dependencies and do not set alarms and stepstate *);
END_VAR

VAR_OUTPUT
 bAllowed : BOOL;
 iNotOkCount : DINT;
END_VAR

VAR_TEMP
 iDevice : DINT;
 iMoveInDevice : DINT;
 i : DINT (* movement number at the given StepPos *);
END_VAR

VAR
 tmpDependency : LWORD;
 Alarm : tsAlarm;
 Dependency : LWORD;
 bTmp : BOOL;
 fbSetStepState : FBSetStepState;
 dummy : DINT;
 bTraced : BOOL;
 iSafetyIdentifier : DINT;
 DeviceId : tsDeviceId;
 bOverrideSafety : BOOL;
 bDeviceOk : BOOL;
 iValidMovements : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check safety array for one step
iNotOkCount := 0;
bAllowed := TRUE;

// when iColumn or iRow = 0 then the movement ist not
// present in the auto cycle (and not safety relevant)
IF StepPos.iColumn = 0 OR StepPos.iRow = 0 THEN
   RETURN;
END_IF;

i := sv_ODCSequenceInt[StepPos.iColumn][StepPos.iRow].iMoveNumber;
IF i = 0 THEN
   //avoid out of range errors
   IF NOT bTraced THEN
      //only trace once and not cyclically
      dummy := Print('!! ABODCCheckDependencies: can not check conditions for movement with move nr. = 0 !!');
      dummy := Print('!! DeviceId: %d/%d  column: %d row: %d !!',DeviceIdSelf.CompId, DeviceIdSelf.IndexId, StepPos.iColumn, StepPos.iRow);
      bTraced := TRUE;
   END_IF;
   
   bAllowed := FALSE;
   RETURN;
ELSE
   bTraced := FALSE;
END_IF;

iSafetyIdentifier := sv_MovementsAvailable[i].pMovementData^.iSafetyIdentifier;

IF ((NOT mbOverrideDefaultSafety) OR (iSafetyIdentifier = 3)) THEN

   FOR iDevice := 1 TO g_iODCMoveDevicesRegistered DO
      
      //check override flags
      bOverrideSafety := FALSE;
      DeviceId := sv_ODCDeviceMovements.Devices[iDevice].DeviceId;
      IF ((NOT g_SafetyData.bAvailable) AND sv_bOverrideCoreSafety) AND // override core safety only available if no safetyeditor
         DeviceIdSelf.CompId = cCompCore AND
         (DeviceId.CompId = cCompCore OR DeviceId.CompId = cCompMold OR DeviceId.CompId = cCompEjector) THEN
         (* allow core movements even if mold, other cores or ejector are not in correct position *)
         bOverrideSafety := TRUE;        
      END_IF;
      
      IF ((NOT g_SafetyData.bAvailable) AND sv_bOverrideEjectorSafety) AND // override ejector safety only available if no safetyeditor
         DeviceIdSelf.CompId = cCompEjector AND
         (DeviceId.CompId = cCompCore OR DeviceId.CompId = cCompMold OR DeviceId.CompId = cCompEjector) THEN
         (* allow ejector movements even if mold, cores or possibly other ejectors are not in correct position *)
         bOverrideSafety := TRUE;      
      END_IF;
            
      //check all devices in the safety array
      Dependency := sv_ODCSequenceInt[StepPos.iColumn,StepPos.iRow].SafetyArray[iDevice].Dependency;      
      IF (Dependency = cNoDependency) OR bOverrideSafety THEN
         //device is not safety relevant or override is activated
         bDeviceOk := TRUE;        
      ELSE      
         tmpDependency := Dependency;
         bDeviceOk := FALSE;
         iValidMovements := 0;
         FOR iMoveInDevice := 1 TO sv_ODCDeviceMovements.Devices[iDevice].iNumberOfMovements DO             
            //check every movement in this device      
            tmpDependency := tmpDependency AND cFirstBit;
            IF tmpDependency = cFirstBit THEN
               
               iValidMovements := iValidMovements + 1;
               
               //bit set => check posReached of this movement
               IF sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.bInstanceable THEN
                  //instanceable movement => check instances
                  aCheckInstances(Dependency := Dependency,
                                 iDeviceIndex := iDevice,
                                 iMoveInDevice := iMoveInDevice);
                  bTmp := aCheckInstances.bAllowed;
               ELSE            
                  bTmp := CHECK_REF(sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.pbPosReached^) AND
                              sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.pbPosReached^;
               END_IF;
               
               IF bTmp THEN
                  //valid movement with posReached = TRUE in this device found
                  bDeviceOk := TRUE;
                  EXIT;
               ELSE
                  //continue checking this device and save alarm temporary
                  Alarm := sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.Alarm;               
               END_IF;
            END_IF;
            tmpDependency := SHL(Dependency, iMoveInDevice);
            
         END_FOR; //end_for checking all movements in one device
         
         IF NOT bDeviceOk THEN
            //set correct alarm
            IF NOT bNoAlarmsAndStepState THEN
               IF iValidMovements > 1 THEN
                  //two or more allowed movements: set common alarm erCompNotInCorrectPosition
                  SET_ALARM(Name := erCompNotInCorrectPosition,
                           SubID1 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.CompId,
                           SubID2 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.IndexId);
               ELSE
                  //only one valid movement: set alarm of this movement
                  IF (Alarm.AlarmId <> EMPTY) THEN
                     SET_ALARM(Name := Alarm.AlarmId,
                           SubID1 := Alarm.SubId[1],
                           SubID2 := Alarm.SubId[2],
                           SubID3 := Alarm.SubId[3],
                           SubID4 := Alarm.SubId[4],
                           Param1 := Alarm.Param1,
                           Param2 := Alarm.Param2);
                  ELSE
                     SET_ALARM(Name   := erODCComponentLocked,
                                 SubID1 := DeviceIdSelf.CompId,
                                 SubID2 := DeviceIdSelf.IndexId,
                                 SubID3 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.CompId,
                                 SubID4 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.IndexId);
                  END_IF;
               END_IF; //end_if iValidMovements
            END_IF;  //end_if bNoAlarmsAndStepState
                        
            //increase counter of not fulfilled conditions
            iNotOkCount := iNotOkCount + 1;
         
         END_IF; //end_if NOT bDeviceOk
      
      END_IF; //end_if no dependency or override
      bAllowed := bAllowed AND bDeviceOk;
   END_FOR;  //end_for of checking all devices
END_IF;

IF (iSafetyIdentifier = 1) THEN
   bAllowed := bAllowed AND abSEInterpreter.fCheckMovement(StepPos);
END_IF;

IF (NOT bAllowed) AND (NOT bNoAlarmsAndStepState) THEN
   fbSetStepState(StepPos := StepPos, StepState := nStateError);   
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Check the dependencies of a ODC movement.
Iterates over the dependency array of the step selected by StepPos
and checks the pos reached flags on those movement.
If StepPos.iColumn or StepPos.iRow is 0 then the movement is always allowed.
*)

ALGORITHM aCheck


VAR_INPUT
 StepPos : tsODCStepPos (* Step for which dependencies are checked *);
 DeviceIdSelf : tsDeviceId (* DeviceId used for error message *);
 bNoAlarmsAndStepState : BOOL (* TRUE: only check dependencies and do not set alarms and stepstate *);
END_VAR

VAR_OUTPUT
 bAllowed : BOOL (* Dependencies are fulfilled *);
 iNotOkCount : DINT (* number of conditions which are not ok *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aCheckInternal(StepPos := StepPos, DeviceIdSelf := DeviceIdSelf, bNoAlarmsAndStepState := bNoAlarmsAndStepState);
bAllowed := aCheckInternal.bAllowed;
iNotOkCount := aCheckInternal.iNotOkCount;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pOverrideDefaultSafety ON TaskVis WITH sv_SafetyHMICom.bOverrideDefaultSafety

#BEGIN_EDIT_BLOCK
mbOverrideDefaultSafety := sv_SafetyHMICom.bOverrideDefaultSafety;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@
Called by aCheck
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)CHECK_REF @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(9)cCompCore @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)109 @RT(14)Component Core 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cCompMold @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)101 @RT(14)Component Mold 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)cMaxDeviceMovements @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)20 @RT(34)max number of movements per device 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(26)cMaxIntermediateConditions @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)10 @RT(38)max. number of intermediate conditions 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cFirstBit @RT(0) @T @F @DT @RT(5)LWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(19)16#8000000000000000 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(22)ABODCCheckDependencies @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(12)g_SafetyData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsGlbSafetyData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(21)sv_MovementsAvailable @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyMovementRegisterList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_ODCSequenceInt @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tyODCSequenceInternal @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_ODCDeviceMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)tsODCDeviceMovementList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)list of all devices that registered movements for the ODC @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)erODCComponentLocked @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)abSEInterpreter @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABSEInterpreter @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)sv_SafetyHMICom @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsSafetyHMICom @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 9 @F @F @F @F 

@Var @RT(22)sv_bOverrideCoreSafety @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(58)overrides safety settings for core movements in setup mode @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_bOverrideEjectorSafety @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(61)overrides safety settings for ejector movements in setup mode @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(23)mbOverrideDefaultSafety @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)g_iODCMoveDevicesRegistered @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(26)erCompNotInCorrectPosition @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aCheckInstances @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(10)Dependency @RT(0) @T @F @DT @RT(5)LWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)iDeviceIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)iMoveInDevice @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)bAllowed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(13)tmpDependency @RT(0) @T @F @DT @RT(5)LWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)iBegin @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(21)iInstanceableMovement @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)k @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(14)aCheckInternal @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
20 
@Var @RT(7)StepPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsODCStepPos @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)DeviceIdSelf @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)bNoAlarmsAndStepState @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(65)TRUE: only check dependencies and do not set alarms and stepstate @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)bAllowed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(13)tmpDependency @RT(0) @T @F @DT @RT(5)LWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)Alarm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tsAlarm @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)Dependency @RT(0) @T @F @DT @RT(5)LWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)iDevice @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(13)iMoveInDevice @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(4)bTmp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbSetStepState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)FBSetStepState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)movement number at the given StepPos @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bTraced @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)iSafetyIdentifier @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bOverrideSafety @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bDeviceOk @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)iValidMovements @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)iNotOkCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aCheck @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(7)StepPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsODCStepPos @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(39)Step for which dependencies are checked @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)DeviceIdSelf @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(31)DeviceId used for error message @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)bNoAlarmsAndStepState @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(65)TRUE: only check dependencies and do not set alarms and stepstate @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)bAllowed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)Dependencies are fulfilled @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(11)iNotOkCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)number of conditions which are not ok @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(22)pOverrideDefaultSafety @STRUCTURED_TEXT 
@RT(0) @RT(38)sv_SafetyHMICom.bOverrideDefaultSafety @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(36)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bAllowed := FALSE;

//find out if it is the first, second, third or fourth instanceable movement in this function unit
iInstanceableMovement := 1;
FOR k := 1 TO cMaxSRInstanceableMovements DO
   IF iMoveInDevice = sv_ODCDeviceMovements.Devices[iDeviceIndex].InstanceableMovements[k] THEN
      iInstanceableMovement := k;
      EXIT;
   END_IF;
END_FOR;

iBegin := cMaxDeviceMovements + ((iInstanceableMovement - 1) * cMaxIntermediateConditions);
tmpDependency := SHL(Dependency, iBegin);

FOR i := 1 TO cMaxIntermediateConditions DO
      
   tmpDependency := tmpDependency AND cFirstBit;
   IF tmpDependency = cFirstBit THEN
      //bit set => check PosReached of this instance             
      bAllowed := sv_ODCDeviceMovements.Devices[iDeviceIndex].Movements[iMoveInDevice]^.InstanceData.pPosReachedArray^[i];
      
      IF bAllowed THEN
         //movement with posReached = TRUE found -> exit
         EXIT;
      END_IF;
   END_IF;
  
   tmpDependency := SHL(Dependency, (iBegin + i));
   
END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(141)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check safety array for one step
iNotOkCount := 0;
bAllowed := TRUE;

// when iColumn or iRow = 0 then the movement ist not
// present in the auto cycle (and not safety relevant)
IF StepPos.iColumn = 0 OR StepPos.iRow = 0 THEN
   RETURN;
END_IF;

i := sv_ODCSequenceInt[StepPos.iColumn][StepPos.iRow].iMoveNumber;
IF i = 0 THEN
   //avoid out of range errors
   IF NOT bTraced THEN
      //only trace once and not cyclically
      dummy := Print('!! ABODCCheckDependencies: can not check conditions for movement with move nr. = 0 !!');
      dummy := Print('!! DeviceId: %d/%d  column: %d row: %d !!',DeviceIdSelf.CompId, DeviceIdSelf.IndexId, StepPos.iColumn, StepPos.iRow);
      bTraced := TRUE;
   END_IF;
   
   bAllowed := FALSE;
   RETURN;
ELSE
   bTraced := FALSE;
END_IF;

iSafetyIdentifier := sv_MovementsAvailable[i].pMovementData^.iSafetyIdentifier;

IF ((NOT mbOverrideDefaultSafety) OR (iSafetyIdentifier = 3)) THEN

   FOR iDevice := 1 TO g_iODCMoveDevicesRegistered DO
      
      //check override flags
      bOverrideSafety := FALSE;
      DeviceId := sv_ODCDeviceMovements.Devices[iDevice].DeviceId;
      IF ((NOT g_SafetyData.bAvailable) AND sv_bOverrideCoreSafety) AND // override core safety only available if no safetyeditor
         DeviceIdSelf.CompId = cCompCore AND
         (DeviceId.CompId = cCompCore OR DeviceId.CompId = cCompMold OR DeviceId.CompId = cCompEjector) THEN
         (* allow core movements even if mold, other cores or ejector are not in correct position *)
         bOverrideSafety := TRUE;        
      END_IF;
      
      IF ((NOT g_SafetyData.bAvailable) AND sv_bOverrideEjectorSafety) AND // override ejector safety only available if no safetyeditor
         DeviceIdSelf.CompId = cCompEjector AND
         (DeviceId.CompId = cCompCore OR DeviceId.CompId = cCompMold OR DeviceId.CompId = cCompEjector) THEN
         (* allow ejector movements even if mold, cores or possibly other ejectors are not in correct position *)
         bOverrideSafety := TRUE;      
      END_IF;
            
      //check all devices in the safety array
      Dependency := sv_ODCSequenceInt[StepPos.iColumn,StepPos.iRow].SafetyArray[iDevice].Dependency;      
      IF (Dependency = cNoDependency) OR bOverrideSafety THEN
         //device is not safety relevant or override is activated
         bDeviceOk := TRUE;        
      ELSE      
         tmpDependency := Dependency;
         bDeviceOk := FALSE;
         iValidMovements := 0;
         FOR iMoveInDevice := 1 TO sv_ODCDeviceMovements.Devices[iDevice].iNumberOfMovements DO             
            //check every movement in this device      
            tmpDependency := tmpDependency AND cFirstBit;
            IF tmpDependency = cFirstBit THEN
               
               iValidMovements := iValidMovements + 1;
               
               //bit set => check posReached of this movement
               IF sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.bInstanceable THEN
                  //instanceable movement => check instances
                  aCheckInstances(Dependency := Dependency,
                                 iDeviceIndex := iDevice,
                                 iMoveInDevice := iMoveInDevice);
                  bTmp := aCheckInstances.bAllowed;
               ELSE            
                  bTmp := CHECK_REF(sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.pbPosReached^) AND
                              sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.pbPosReached^;
               END_IF;
               
               IF bTmp THEN
                  //valid movement with posReached = TRUE in this device found
                  bDeviceOk := TRUE;
                  EXIT;
               ELSE
                  //continue checking this device and save alarm temporary
                  Alarm := sv_ODCDeviceMovements.Devices[iDevice].Movements[iMoveInDevice]^.Alarm;               
               END_IF;
            END_IF;
            tmpDependency := SHL(Dependency, iMoveInDevice);
            
         END_FOR; //end_for checking all movements in one device
         
         IF NOT bDeviceOk THEN
            //set correct alarm
            IF NOT bNoAlarmsAndStepState THEN
               IF iValidMovements > 1 THEN
                  //two or more allowed movements: set common alarm erCompNotInCorrectPosition
                  SET_ALARM(Name := erCompNotInCorrectPosition,
                           SubID1 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.CompId,
                           SubID2 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.IndexId);
               ELSE
                  //only one valid movement: set alarm of this movement
                  IF (Alarm.AlarmId <> EMPTY) THEN
                     SET_ALARM(Name := Alarm.AlarmId,
                           SubID1 := Alarm.SubId[1],
                           SubID2 := Alarm.SubId[2],
                           SubID3 := Alarm.SubId[3],
                           SubID4 := Alarm.SubId[4],
                           Param1 := Alarm.Param1,
                           Param2 := Alarm.Param2);
                  ELSE
                     SET_ALARM(Name   := erODCComponentLocked,
                                 SubID1 := DeviceIdSelf.CompId,
                                 SubID2 := DeviceIdSelf.IndexId,
                                 SubID3 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.CompId,
                                 SubID4 := sv_ODCDeviceMovements.Devices[iDevice].DeviceId.IndexId);
                  END_IF;
               END_IF; //end_if iValidMovements
            END_IF;  //end_if bNoAlarmsAndStepState
                        
            //increase counter of not fulfilled conditions
            iNotOkCount := iNotOkCount + 1;
         
         END_IF; //end_if NOT bDeviceOk
      
      END_IF; //end_if no dependency or override
      bAllowed := bAllowed AND bDeviceOk;
   END_FOR;  //end_for of checking all devices
END_IF;

IF (iSafetyIdentifier = 1) THEN
   bAllowed := bAllowed AND abSEInterpreter.fCheckMovement(StepPos);
END_IF;

IF (NOT bAllowed) AND (NOT bNoAlarmsAndStepState) THEN
   fbSetStepState(StepPos := StepPos, StepState := nStateError);   
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
check safety array for the given step
@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aCheckInternal(StepPos := StepPos, DeviceIdSelf := DeviceIdSelf, bNoAlarmsAndStepState := bNoAlarmsAndStepState);
bAllowed := aCheckInternal.bAllowed;
iNotOkCount := aCheckInternal.iNotOkCount;

@END_Body 

@@@BEG_Comment@@@ 
@TL(4)
Check the dependencies of a ODC movement.
Iterates over the dependency array of the step selected by StepPos
and checks the pos reached flags on those movement.
If StepPos.iColumn or StepPos.iRow is 0 then the movement is always allowed.
@@@END_Comment@@@ 

@BEG_Body 
@TL(2)
mbOverrideDefaultSafety := sv_SafetyHMICom.bOverrideDefaultSafety;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
@@@BEG_Password@@@
NGhzZm9kYzQ=
@@@END_Password@@@
