(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

algorithm block for debug purpose, can be used to log single trace lines to file
*)

IMPORT_OVER_LISTFILE
 KFILE_Open_Data
, KFILE_Status

END_IMPORT

ALGORITHM_BLOCK ABLogger #DUMMY_EDIT_BLOCK

VAR
 iResult : DINT (* transferred bytes, return value of KFILE_Read/Write *);
 sTraceString : STRING(255) (* local output trace string *);
END_VAR

ALGORITHM aWriteLine


VAR_INPUT
 sFileName : STRING(255) (* absolute file path *);
 bAppend : BOOL (* append log file *);
END_VAR

VAR_IN_OUT
 sText : STRING(255) (* trace string to log *);
END_VAR

VAR_TEMP
 FileOpenData : KFILE_Open_Data (* file open information *);
 FileStatus : KFILE_Status (* file state *);
 sNewline : STRING(2) := '$n';
 iLen : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF (bAppend) THEN
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_AppendCreate);
ELSE
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_ReadWriteDelete);
END_IF;    

IF (FileOpenData.Status = KFILE_Status_OK) THEN
   iLen := LEN(sText);
   IF iLen > 0 THEN
      // write data
      iResult := KFILE_Write(Token := FileOpenData.Token,
                             Length := iLen,
                             Buffer := sText);
   END_IF;
   // CR/LF
   iResult := KFILE_Write(Token := FileOpenData.Token,
                        Length := 2,
                        Buffer := sNewline);

   // close file
   FileStatus := KFILE_Close(Token := FileOpenData.Token);
ELSE
   sTraceString := CONCAT('Log to file failed - file ',  sFileName,
                           'possibly already opened!');
                              
   (* @TODO ABDebugTrace... *)
END_IF;        



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aWriteString


VAR_INPUT
 sFileName : STRING(255) (* absolute file path *);
 bAppend : BOOL (* append log file *);
END_VAR

VAR_IN_OUT
 sText : STRING(255) (* trace string to log *);
END_VAR

VAR_TEMP
 FileOpenData : KFILE_Open_Data (* file open information *);
 FileStatus : KFILE_Status (* file state *);
 iLen : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF (bAppend) THEN
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_AppendCreate);
ELSE
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_ReadWriteDelete);
END_IF;    

IF (FileOpenData.Status = KFILE_Status_OK) THEN
   iLen := LEN(sText);
   IF iLen > 0 THEN
      // write data
      iResult := KFILE_Write(Token := FileOpenData.Token,
                             Length := iLen,
                             Buffer := sText);
   END_IF;
   // close file
   FileStatus := KFILE_Close(Token := FileOpenData.Token);
ELSE
   sTraceString := CONCAT('Log to file failed - file ',  sFileName,
                          'possibly already opened!');
                              
   (* @TODO ABDebugTrace... *)
END_IF;        



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 95 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

algorithm block for debug purpose, can be used to log single trace lines to file
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(8)ABLogger @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)iResult @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(51)transferred bytes, return value of KFILE_Read/Write @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sTraceString @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)local output trace string @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(10)aWriteLine @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(9)sFileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)absolute file path @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)bAppend @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)append log file @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)sText @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)trace string to log @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(12)FileOpenData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KFILE_Open_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)file open information @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(10)FileStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KFILE_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)file state @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(8)sNewline @RT(0) @T @F @DT @RT(9)STRING(2) @RT(0) @T @T @STRING 0 @F @RT(1)2 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)'$n' @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(4)iLen @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aWriteString @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(9)sFileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)absolute file path @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)bAppend @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)append log file @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)sText @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)trace string to log @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(12)FileOpenData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KFILE_Open_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)file open information @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(10)FileStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KFILE_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)file state @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(4)iLen @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(31)
IF (bAppend) THEN
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_AppendCreate);
ELSE
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_ReadWriteDelete);
END_IF;    

IF (FileOpenData.Status = KFILE_Status_OK) THEN
   iLen := LEN(sText);
   IF iLen > 0 THEN
      // write data
      iResult := KFILE_Write(Token := FileOpenData.Token,
                             Length := iLen,
                             Buffer := sText);
   END_IF;
   // CR/LF
   iResult := KFILE_Write(Token := FileOpenData.Token,
                        Length := 2,
                        Buffer := sNewline);

   // close file
   FileStatus := KFILE_Close(Token := FileOpenData.Token);
ELSE
   sTraceString := CONCAT('Log to file failed - file ',  sFileName,
                           'possibly already opened!');
                              
   (* @TODO ABDebugTrace... *)
END_IF;        


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
IF (bAppend) THEN
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_AppendCreate);
ELSE
   FileOpenData := KFILE_Open(Name := sFileName,
                              Mode := KFILE_Mode_ReadWriteDelete);
END_IF;    

IF (FileOpenData.Status = KFILE_Status_OK) THEN
   iLen := LEN(sText);
   IF iLen > 0 THEN
      // write data
      iResult := KFILE_Write(Token := FileOpenData.Token,
                             Length := iLen,
                             Buffer := sText);
   END_IF;
   // close file
   FileStatus := KFILE_Close(Token := FileOpenData.Token);
ELSE
   sTraceString := CONCAT('Log to file failed - file ',  sFileName,
                          'possibly already opened!');
                              
   (* @TODO ABDebugTrace... *)
END_IF;        


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
@@@BEG_Password@@@
NGhzZm9kYzQ=
@@@END_Password@@@
