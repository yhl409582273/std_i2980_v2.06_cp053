(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

ODC debug block
- runtime check
- output dependency array to file
*)

IMPORT_OVER_LISTFILE
 ABLogger
, RTC
, tsODCDeviceMovementList
, tyODCSequenceInternal
, tsTraceLevel
, tsODCStepPos
, tyODCDependencyArray
, FBMoveDescription

END_IMPORT

ALGORITHM_BLOCK ABODCDebug #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_ODCDeviceMovements : tsODCDeviceMovementList (* list of all devices that registered movements for the ODC *);
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_VAR_IN
 sv_ODCSequenceInt : tyODCSequenceInternal;
END_VAR

VAR_EXTERNAL
 g_iODCMoveDevicesRegistered : DINT;
END_VAR

VAR
 abLogger : ABLogger;
 dStartTime : DATE_AND_TIME;
 dStoppTime : DATE_AND_TIME;
 sTimeDiff : STRING(255);
 dPrint : DINT;
 RealTimeClock : RTC;
 sRunTimeText : STRING(255);
END_VAR

(*
start runtime check, store actual rtc clock
*)

ALGORITHM aRunTimeStart


VAR_INPUT
 sInfoText : STRING(255) := 'undefined instance' (* info for identification of measure object *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// set info for trace output
sRunTimeText := sInfoText;

// set start time
RealTimeClock(EN := FALSE,
            CDT => dStartTime);


;#END_EDIT_BLOCK END_ALGORITHM

(*
Build difference with start time and output to trace
*)

ALGORITHM aRunTimeStop

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// set stop time
RealTimeClock(EN := FALSE,
              CDT => dStoppTime);

// build time difference string
sTimeDiff:= TIME_TO_STRING(SUB_DT_DT(dStoppTime, dStartTime));

IF (sv_TraceLevel.bODCDependencies) THEN
   // write runtime to trace output
   dPrint := Print('%s, runtime = %s', sRunTimeText, sTimeDiff);
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aLogSafety


VAR_INPUT
 sFileName : STRING(255) (* log file name *);
 bAppend : BOOL (* append log file, if false a new file is created and header is written *);
 StepPos : tsODCStepPos (* step position *);
 Dependencies : tyODCDependencyArray (* dependency array to log *);
END_VAR

VAR_TEMP
 i : DINT;
END_VAR

VAR
 sHeadLine1 : STRING(255) (* headline 1 *);
 sHeadLine2 : STRING(255) (* headline 2 *);
 sHeadLine3 : STRING(255) (* headline 3 *);
 sSafetyLine : STRING(255) (* dependency output line *);
 fbMoveDescription : FBMoveDescription;
 sMoveDescription : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bAppend) THEN
   
   sHeadLine1 := ';';
   sHeadLine2 := ';';
   sHeadLine3 := ';';

   FOR i := 1 TO g_iODCMoveDevicesRegistered BY 1 DO
      sHeadLine1 := CONCAT(sHeadLine1, 'FU_', DINT_TO_STRING(i), ';');
      sHeadLine2 := CONCAT(sHeadLine2, DINT_TO_STRING(sv_ODCDeviceMovements.Devices[i].DeviceId.CompId), '/',
                           DINT_TO_STRING(sv_ODCDeviceMovements.Devices[i].DeviceId.IndexId), ';');      
      sHeadLine3 := CONCAT(sHeadLine3, sv_ODCDeviceMovements.Devices[i].sFuName, ';');
   END_FOR;
      
   abLogger.aWriteLine(sFileName := sFileName,
                        bAppend := FALSE,
                        sText := sHeadLine1);
   
   abLogger.aWriteLine(sFileName := sFileName,
                        bAppend := TRUE,
                        sText := sHeadLine2);    
   
   abLogger.aWriteLine(sFileName := sFileName,
                        bAppend := TRUE,
                        sText := sHeadLine3);
   
END_IF;

//get info for this step
fbMoveDescription(iMoveNr := sv_ODCSequenceInt[StepPos.iColumn,StepPos.iRow].iMoveNumber,
                  sDescription => sMoveDescription);

sSafetyLine := CONCAT('Step [', DINT_TO_STRING(StepPos.iColumn), 
                      '][', DINT_TO_STRING(StepPos.iRow),
                      ']', ' (', sMoveDescription, ')', ';');

FOR i := 1 TO g_iODCMoveDevicesRegistered BY 1 DO
   
   IF Dependencies[i].Dependency <> cNoDependency THEN            
      sSafetyLine := CONCAT (sSafetyLine, LWORD_TO_STRING(Dependencies[i].Dependency), ';');      
   ELSE
      sSafetyLine := CONCAT (sSafetyLine, '-',';');
   END_IF;

   IF (MOD(i, 10) = 0) THEN
      abLogger.aWriteString(sFileName := sFileName,
                            bAppend := TRUE,
                            sText := sSafetyLine);
      sSafetyLine := '';
   END_IF;       
   
END_FOR;

// write rest of string and new line
abLogger.aWriteLine(sFileName := sFileName,
                     bAppend := TRUE,
                     sText := sSafetyLine);



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

ODC debug block
- runtime check
- output dependency array to file
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(10)ABODCDebug @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(8)abLogger @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)ABLogger @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dStartTime @RT(0) @T @F @DT @RT(13)DATE_AND_TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dStoppTime @RT(0) @T @F @DT @RT(13)DATE_AND_TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sTimeDiff @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)dPrint @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)RealTimeClock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)RTC @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sRunTimeText @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)sv_ODCDeviceMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)tsODCDeviceMovementList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)list of all devices that registered movements for the ODC @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(27)g_iODCMoveDevicesRegistered @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(17)sv_ODCSequenceInt @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tyODCSequenceInternal @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 9 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @F @RT(12)tsTraceLevel @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(13)aRunTimeStart @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(9)sInfoText @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(20)'undefined instance' @RT(41)info for identification of measure object @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aRunTimeStop @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(10)aLogSafety @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(9)sFileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)log file name @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)bAppend @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(69)append log file, if false a new file is created and header is written @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)StepPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsODCStepPos @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)step position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)Dependencies @RT(0) @T @T @DERIVED 0 @F @RT(20)tyODCDependencyArray @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)dependency array to log @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)sHeadLine1 @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)headline 1 @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)sHeadLine2 @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)headline 2 @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)sHeadLine3 @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)headline 3 @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sSafetyLine @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)dependency output line @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(17)fbMoveDescription @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)FBMoveDescription @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)sMoveDescription @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// set info for trace output
sRunTimeText := sInfoText;

// set start time
RealTimeClock(EN := FALSE,
            CDT => dStartTime);

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
start runtime check, store actual rtc clock
@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// set stop time
RealTimeClock(EN := FALSE,
              CDT => dStoppTime);

// build time difference string
sTimeDiff:= TIME_TO_STRING(SUB_DT_DT(dStoppTime, dStartTime));

IF (sv_TraceLevel.bODCDependencies) THEN
   // write runtime to trace output
   dPrint := Print('%s, runtime = %s', sRunTimeText, sTimeDiff);
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Build difference with start time and output to trace
@@@END_Comment@@@ 

@BEG_Body 
@TL(63)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bAppend) THEN
   
   sHeadLine1 := ';';
   sHeadLine2 := ';';
   sHeadLine3 := ';';

   FOR i := 1 TO g_iODCMoveDevicesRegistered BY 1 DO
      sHeadLine1 := CONCAT(sHeadLine1, 'FU_', DINT_TO_STRING(i), ';');
      sHeadLine2 := CONCAT(sHeadLine2, DINT_TO_STRING(sv_ODCDeviceMovements.Devices[i].DeviceId.CompId), '/',
                           DINT_TO_STRING(sv_ODCDeviceMovements.Devices[i].DeviceId.IndexId), ';');      
      sHeadLine3 := CONCAT(sHeadLine3, sv_ODCDeviceMovements.Devices[i].sFuName, ';');
   END_FOR;
      
   abLogger.aWriteLine(sFileName := sFileName,
                        bAppend := FALSE,
                        sText := sHeadLine1);
   
   abLogger.aWriteLine(sFileName := sFileName,
                        bAppend := TRUE,
                        sText := sHeadLine2);    
   
   abLogger.aWriteLine(sFileName := sFileName,
                        bAppend := TRUE,
                        sText := sHeadLine3);
   
END_IF;

//get info for this step
fbMoveDescription(iMoveNr := sv_ODCSequenceInt[StepPos.iColumn,StepPos.iRow].iMoveNumber,
                  sDescription => sMoveDescription);

sSafetyLine := CONCAT('Step [', DINT_TO_STRING(StepPos.iColumn), 
                      '][', DINT_TO_STRING(StepPos.iRow),
                      ']', ' (', sMoveDescription, ')', ';');

FOR i := 1 TO g_iODCMoveDevicesRegistered BY 1 DO
   
   IF Dependencies[i].Dependency <> cNoDependency THEN            
      sSafetyLine := CONCAT (sSafetyLine, LWORD_TO_STRING(Dependencies[i].Dependency), ';');      
   ELSE
      sSafetyLine := CONCAT (sSafetyLine, '-',';');
   END_IF;

   IF (MOD(i, 10) = 0) THEN
      abLogger.aWriteString(sFileName := sFileName,
                            bAppend := TRUE,
                            sText := sSafetyLine);
      sSafetyLine := '';
   END_IF;       
   
END_FOR;

// write rest of string and new line
abLogger.aWriteLine(sFileName := sFileName,
                     bAppend := TRUE,
                     sText := sSafetyLine);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
@@@BEG_Password@@@
NGhzZm9kYzQ=
@@@END_Password@@@
