IMPORT_OVER_LISTFILE
 ASSERT
, KCAT_HandleData

END_IMPORT

ALGORITHM_BLOCK ABCheck4KMB2Feature #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 erAssert : ALARM;
END_OBJECT

FUNCTION fStringToUDInt : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 str : STRING(8);
END_VAR

VAR_IN_OUT
 oValue : UDINT;
END_VAR

VAR
 iTmp : UDINT;
END_VAR
#BEGIN_EDIT_BLOCK
iTmp := STRING_TO_UDINT(CONCAT(str, "1"));
fStringToUDInt := iTmp MOD 10 = 1;
oValue := iTmp / 10;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fCheckVersion : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 s : STRING(255);
END_VAR

VAR
 b : BOOL;
 sValue : STRING(255);
 iTmp : UDINT;
 sTmp : STRING(2);
 idx : DINT;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
// KMB_MeasureBlock2.SaveValuesOnce(): since CR_0063055: 
//   requires firmwarepackage with IecSAlgo >= 1.16 or 1.04_1.01 (used in some bugfix packages)
//   in standard-firmware since P0P 6.30 / KePlast 1.42  
//   if not available return false

fCheckVersion := TRUE;

sValue := s;
b := ASSERT(LEFT(sValue, 17) = "IecStdAlgorithms_", erAssert);

IF (LEFT(sValue, 24) = "IecStdAlgorithms_1.04_1.")  THEN
   // special case - check bugfix version
   b := ASSERT(fStringToUDInt(MID(sValue, 2, 25), iTmp), erAssert);
   fCheckVersion := iTmp >= 1;
ELSE
   // standardcase
   sTmp := MID(sValue, 2, 18);
   IF (RIGHT(sTmp, 1) = ".") THEN
      idx := 20; 
      sTmp := LEFT(sTmp, 1);
   ELSE
      idx := 21;
   END_IF;
   b := ASSERT(fStringToUDInt(sTmp, iTmp), erAssert);
   
   IF (iTmp = 0) THEN
      // major version 0 -> return false;
      fCheckVersion := FALSE; 
   ELSIF (iTmp = 1) THEN
      // major version 1 -> check minor version
      b := ASSERT(fStringToUDInt(MID(sValue, 2, idx), iTmp), erAssert);
      fCheckVersion := iTmp >= 16;
   ELSE // major version > 1
      fCheckVersion := TRUE;
   END_IF;
END_IF;

dummy := Print("ABEasyNetPDP detected %s: -> feature KMB2 available %d", sValue, fCheckVersion);


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fHasKMB2Feature : BOOL
 #DUMMY_EDIT_BLOCK

VAR
 hdlData : KCAT_HandleData;
 b : BOOL;
 sValue : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
// KMB_MeasureBlock2.SaveValuesOnce(): since CR_0063055: 
//   requires firmwarepackage with IecSAlgo >= 1.16 or 1.04_1.01 (used in some bugfix packages)
//   in standard-firmware since P0P 6.30 / KePlast 1.42  
//   if not available return false

hdlData := KCAT_GetHandle("IecSAlgo.componentVersionString");   
b := ASSERT(hdlData.Status = KCAT_Status_OK, erAssert);

hdlData.Status := KCAT_GetValue(Handle := hdlData.Handle, Buffer := sValue);        
b := ASSERT(hdlData.Status = KCAT_Status_OK, erAssert);

fHasKMB2Feature := fCheckVersion(sValue);





;#END_EDIT_BLOCK END_FUNCTION



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 168 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABCheck4KMB2Feature @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(8)erAssert @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(14)fStringToUDInt @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(3)str @RT(0) @T @F @DT @RT(9)STRING(8) @RT(0) @T @T @STRING 0 @F @RT(1)8 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)oValue @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(4)iTmp @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(13)fCheckVersion @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sValue @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)iTmp @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)sTmp @RT(0) @T @F @DT @RT(9)STRING(2) @RT(0) @T @T @STRING 0 @F @RT(1)2 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)idx @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(15)fHasKMB2Feature @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(7)hdlData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sValue @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(4)
iTmp := STRING_TO_UDINT(CONCAT(str, "1"));
fStringToUDInt := iTmp MOD 10 = 1;
oValue := iTmp / 10;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(39)
// KMB_MeasureBlock2.SaveValuesOnce(): since CR_0063055: 
//   requires firmwarepackage with IecSAlgo >= 1.16 or 1.04_1.01 (used in some bugfix packages)
//   in standard-firmware since P0P 6.30 / KePlast 1.42  
//   if not available return false

fCheckVersion := TRUE;

sValue := s;
b := ASSERT(LEFT(sValue, 17) = "IecStdAlgorithms_", erAssert);

IF (LEFT(sValue, 24) = "IecStdAlgorithms_1.04_1.")  THEN
   // special case - check bugfix version
   b := ASSERT(fStringToUDInt(MID(sValue, 2, 25), iTmp), erAssert);
   fCheckVersion := iTmp >= 1;
ELSE
   // standardcase
   sTmp := MID(sValue, 2, 18);
   IF (RIGHT(sTmp, 1) = ".") THEN
      idx := 20; 
      sTmp := LEFT(sTmp, 1);
   ELSE
      idx := 21;
   END_IF;
   b := ASSERT(fStringToUDInt(sTmp, iTmp), erAssert);
   
   IF (iTmp = 0) THEN
      // major version 0 -> return false;
      fCheckVersion := FALSE; 
   ELSIF (iTmp = 1) THEN
      // major version 1 -> check minor version
      b := ASSERT(fStringToUDInt(MID(sValue, 2, idx), iTmp), erAssert);
      fCheckVersion := iTmp >= 16;
   ELSE // major version > 1
      fCheckVersion := TRUE;
   END_IF;
END_IF;

dummy := Print("ABEasyNetPDP detected %s: -> feature KMB2 available %d", sValue, fCheckVersion);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
// KMB_MeasureBlock2.SaveValuesOnce(): since CR_0063055: 
//   requires firmwarepackage with IecSAlgo >= 1.16 or 1.04_1.01 (used in some bugfix packages)
//   in standard-firmware since P0P 6.30 / KePlast 1.42  
//   if not available return false

hdlData := KCAT_GetHandle("IecSAlgo.componentVersionString");   
b := ASSERT(hdlData.Status = KCAT_Status_OK, erAssert);

hdlData.Status := KCAT_GetValue(Handle := hdlData.Handle, Buffer := sValue);        
b := ASSERT(hdlData.Status = KCAT_Status_OK, erAssert);

fHasKMB2Feature := fCheckVersion(sValue);




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
