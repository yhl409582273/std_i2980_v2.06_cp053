IMPORT_OVER_LISTFILE
 tsTraceLevel
, tevUpdateEventNotification
, tevRequestEventNotification
, tevEventNotificationData

END_IMPORT

ALGORITHM_BLOCK ABEasyNetEventNotification #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
 sv_NextEventNotification : tevEventNotificationData (* Central data of next estimated event *);
END_VAR

SYSTEM_OBJECT
 PU_Task_13 : TASK;
 evUpdateEventNotification : tevUpdateEventNotification;
 evRequestEventNotification : tevRequestEventNotification;
END_OBJECT

EVENT_ALGORITHM evaUpdateEventNotification ON PU_Task_13 WITH evUpdateEventNotification


VAR_INPUT
 evEventNotificationData : tevEventNotificationData;
END_VAR

VAR
 dummy : DINT;
 s : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Check if update or invalidation comes from current event notification
IF (evEventNotificationData.iType = sv_NextEventNotification.iType)
    AND (evEventNotificationData.iInstance = sv_NextEventNotification.iInstance) THEN
    
    // ################################
    // ########## Same event ##########
    // ################################
    IF (evEventNotificationData.dExpirationDate = cUTCZeroDate)
        OR (evEventNotificationData.dExpirationDate > sv_NextEventNotification.dExpirationDate) THEN
        // Event invalidated or shifted to a later expiration date       
        // -> Invalidate event notification data and send a new request
        sv_NextEventNotification.iType := cEvNotification_Invalid;
        sv_NextEventNotification.iInstance := cEvNotification_Invalid;
        sv_NextEventNotification.dExpirationDate := cUTCZeroDate;
               
        // Debug
        IF sv_TraceLevel.bApplication THEN
            dummy := Print("Debug ABEasyNet: Event notification type=%d, instance=%d invalidated",
                           evEventNotificationData.iType,
                           evEventNotificationData.iInstance);
        END_IF;
        
        // Request event notification updates from FUs which have events
        SET_EVENT(evRequestEventNotification);         
    ELSE
        
        // Event shifted to a prior date -> No request necessary!
        sv_NextEventNotification.dExpirationDate := evEventNotificationData.dExpirationDate;
        
        // Debug
        IF sv_TraceLevel.bApplication THEN
            s := DT_TO_STRING(sv_NextEventNotification.dExpirationDate);
            dummy := Print("Debug ABEasyNet: Event notification type=%d, instance=%d, expiration=%s updated",
                           sv_NextEventNotification.iType,
                           sv_NextEventNotification.iInstance,
                           s);
        END_IF;
    END_IF;
ELSE
    
    // #####################################
    // ########## Different event ##########
    // #####################################
    IF ((evEventNotificationData.dExpirationDate > cUTCZeroDate)
        AND (evEventNotificationData.dExpirationDate < sv_NextEventNotification.dExpirationDate))
        OR (sv_NextEventNotification.dExpirationDate = cUTCZeroDate) THEN
        // New expiration date is valid and prior to current expiration date or current expiration date is invalid
        // -> Set new data as current event
        sv_NextEventNotification.dExpirationDate := evEventNotificationData.dExpirationDate;
        IF (sv_NextEventNotification.dExpirationDate = cUTCZeroDate) THEN
           sv_NextEventNotification.iType := cEvNotification_Invalid;
           sv_NextEventNotification.iInstance := cEvNotification_Invalid;
        ELSE
           sv_NextEventNotification.iType := evEventNotificationData.iType;
           sv_NextEventNotification.iInstance := evEventNotificationData.iInstance;
       END_IF;
          
       // Debug
       IF sv_TraceLevel.bApplication THEN
           s := DT_TO_STRING(sv_NextEventNotification.dExpirationDate);
           dummy := Print("Debug ABEasyNet: New Event notification type=%d, instance=%d, expiration=%s set",
                          sv_NextEventNotification.iType,
                          sv_NextEventNotification.iInstance,
                          s);
       END_IF;
    END_IF;
END_IF;
   



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 168 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(26)ABEasyNetEventNotification @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(25)evUpdateEventNotification @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevUpdateEventNotification @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(26)evRequestEventNotification @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(27)tevRequestEventNotification @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)sv_NextEventNotification @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(24)tevEventNotificationData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)Central data of next estimated event @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

1 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(26)evaUpdateEventNotification @STRUCTURED_TEXT 
@RT(0) @RT(25)evUpdateEventNotification @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)evEventNotificationData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(24)tevEventNotificationData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(75)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Check if update or invalidation comes from current event notification
IF (evEventNotificationData.iType = sv_NextEventNotification.iType)
    AND (evEventNotificationData.iInstance = sv_NextEventNotification.iInstance) THEN
    
    // ################################
    // ########## Same event ##########
    // ################################
    IF (evEventNotificationData.dExpirationDate = cUTCZeroDate)
        OR (evEventNotificationData.dExpirationDate > sv_NextEventNotification.dExpirationDate) THEN
        // Event invalidated or shifted to a later expiration date       
        // -> Invalidate event notification data and send a new request
        sv_NextEventNotification.iType := cEvNotification_Invalid;
        sv_NextEventNotification.iInstance := cEvNotification_Invalid;
        sv_NextEventNotification.dExpirationDate := cUTCZeroDate;
               
        // Debug
        IF sv_TraceLevel.bApplication THEN
            dummy := Print("Debug ABEasyNet: Event notification type=%d, instance=%d invalidated",
                           evEventNotificationData.iType,
                           evEventNotificationData.iInstance);
        END_IF;
        
        // Request event notification updates from FUs which have events
        SET_EVENT(evRequestEventNotification);         
    ELSE
        
        // Event shifted to a prior date -> No request necessary!
        sv_NextEventNotification.dExpirationDate := evEventNotificationData.dExpirationDate;
        
        // Debug
        IF sv_TraceLevel.bApplication THEN
            s := DT_TO_STRING(sv_NextEventNotification.dExpirationDate);
            dummy := Print("Debug ABEasyNet: Event notification type=%d, instance=%d, expiration=%s updated",
                           sv_NextEventNotification.iType,
                           sv_NextEventNotification.iInstance,
                           s);
        END_IF;
    END_IF;
ELSE
    
    // #####################################
    // ########## Different event ##########
    // #####################################
    IF ((evEventNotificationData.dExpirationDate > cUTCZeroDate)
        AND (evEventNotificationData.dExpirationDate < sv_NextEventNotification.dExpirationDate))
        OR (sv_NextEventNotification.dExpirationDate = cUTCZeroDate) THEN
        // New expiration date is valid and prior to current expiration date or current expiration date is invalid
        // -> Set new data as current event
        sv_NextEventNotification.dExpirationDate := evEventNotificationData.dExpirationDate;
        IF (sv_NextEventNotification.dExpirationDate = cUTCZeroDate) THEN
           sv_NextEventNotification.iType := cEvNotification_Invalid;
           sv_NextEventNotification.iInstance := cEvNotification_Invalid;
        ELSE
           sv_NextEventNotification.iType := evEventNotificationData.iType;
           sv_NextEventNotification.iInstance := evEventNotificationData.iInstance;
       END_IF;
          
       // Debug
       IF sv_TraceLevel.bApplication THEN
           s := DT_TO_STRING(sv_NextEventNotification.dExpirationDate);
           dummy := Print("Debug ABEasyNet: New Event notification type=%d, instance=%d, expiration=%s set",
                          sv_NextEventNotification.iType,
                          sv_NextEventNotification.iInstance,
                          s);
       END_IF;
    END_IF;
END_IF;
   


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
