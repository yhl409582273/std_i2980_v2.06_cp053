(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".
*)

IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, SET_EVENT
, FCreateEasyNetVersion
, cUTCZeroDate
, cEvNotification_Invalid
, ABEasyNetEventNotification
, ABEasyNetPDP
, tsENCom
, tsENHmi
, tsTraceLevel
, RTC
, KMB_MeasureBlock
, KMB_Status
, KMB_ProfileInfo
, KCAT_HandleData
, KCAT_Status
, KPROT_Status

END_IMPORT

ALGORITHM_BLOCK ABEasyNet #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_ENCom : tsENCom;
 sv_ENHmi : tsENHmi;
 sv_dRTC : DT (* SV is fastretain to get "power off" time *);
 sv_TraceLevel : tsTraceLevel;
 sv_bENAvailable : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskVis : TASK;
 erAssert : ALARM;
END_OBJECT

VAR
 abEventNotification : ABEasyNetEventNotification (* for EasyNet mobile, available since KePlast.IEC 01.36. For usage of this function unit with older KePlast versions delete this instance. *);
 abEasyNetPDP : ABEasyNetPDP;
 fbRTC : RTC;
 mPowerOffTime : DT;
 mPowerOnTime : DT;
END_VAR

ALGORITHM aInit


VAR
 b : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// add versioninfo to catalog
b := FCreateEasyNetVersion();

// save power off timestamp and set power on timestamp
fbRTC();
mPowerOffTime := sv_dRTC;
mPowerOnTime := fbRTC.CDT; 



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInitIfAvailable


VAR_TEMP
 i : INT;
 b : BOOL;
 s : KCAT_Status;
 tmp : STRING(31);
END_VAR

VAR
 bInitialized : BOOL;
 checkMeasureStateTime : TIME := T#1s;
 iRed : DINT;
 dummy : DINT;
 sampler : KMB_MeasureBlock;
 samplerStatus : KMB_Status;
 profileInfo : KMB_ProfileInfo;
 catHandle : KCAT_HandleData;
 prio : DINT;
END_VAR

VAR CONSTANT
 sProfileName : STRING(255) := 'EasyNetEvent';
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (bInitialized) THEN
   RETURN; 
END_IF;

IF (NOT sv_bENAvailable) THEN
   RETURN;
END_IF;    

// CR_0056529: Wait until EasyNetEvent PDP profile has been started
IF iRed = 0 THEN   
   // Try connection to EasyNetEvent PDP profile
   samplerStatus := sampler.Connect(sProfileName);
   profileInfo.MeasureState := KMB_MeasureState_Inactive;
   IF samplerStatus = KMB_Status_OK THEN
      // Get profile info containing measure state
      profileInfo := sampler.GetProfileInfo(); 
   ELSE
      IF sv_TraceLevel.bApplication THEN
         // Not connected to profile yet
         dummy := Print("Debug ABEasyNet: Not connected to PDP profile %s yet", sProfileName);
      END_IF; 
   END_IF;
   
   IF sv_TraceLevel.bApplication THEN
      CASE profileInfo.MeasureState OF
         KMB_MeasureState_Delay:
            dummy := Print("Debug ABEasyNet: Measure state of %s = delay", sProfileName);
            
         KMB_MeasureState_Active:
            dummy := Print("Debug ABEasyNet: Measure state of %s = active", sProfileName);
      ELSE
         dummy := Print("Debug ABEasyNet: Measure state of %s = inactive", sProfileName);
      END_CASE;
   END_IF;
   
   iRed := LINT_TO_DINT(TIME_TO_LINT(checkMeasureStateTime)/TIME_TO_LINT(GET_TASK_INTERVAL()));
ELSE
   iRed := iRed - 1; 
END_IF;

IF profileInfo.MeasureState <> KMB_MeasureState_Active THEN
   // EasyNetEvent PDP Profile not started yet -> Check again
   RETURN;
END_IF;

// check thread prio of easynetshot profile
i := 0; 
REPEAT
   catHandle := KCAT_GetHandle(CONCAT("MS.Profile.Profile:", INT_TO_STRING(i), ".Name"));
   IF (catHandle.Status = KCAT_Status_NOTOK) THEN
      dummy := Print("ABEasyNet.aInitIfAvailable: MS Profile EasyNetShot not found");
      b := ASSERT(FALSE, erAssert);
   END_IF;
   
   s := KCAT_GetValue(catHandle.Handle, tmp);   
   IF (tmp = "EasyNetShot") THEN
      catHandle := KCAT_GetHandle(CONCAT("MS.Profile.Profile:", INT_TO_STRING(i), ".ThreadPriority"));              
      IF (catHandle.Status = KCAT_Status_NOTOK) THEN
         dummy := Print("ABEasyNet.aInitIfAvailable: MS Profile EasyNetShot.ThreadPriority not found");
         b := ASSERT(FALSE, erAssert);
      END_IF;
      s := KCAT_GetValue(catHandle.Handle, prio);
      IF (prio <> 7) THEN
         dummy := Print("ABEasyNet.aInitIfAvailable: MS Profile EasyNetShot.ThreadPriority expected 7 is %d! Check configuration!", prio);
         b := ASSERT(FALSE, erAssert);
      END_IF;
   END_IF;
   i := i + 1; 
UNTIL (prio = 7) END_REPEAT; 


bInitialized := TRUE; 

// initialize EasyNetEvent PDP profile for recording evEasyNetEvent
abEasyNetPDP.aInit(mPowerOffTime, mPowerOnTime);
                             






;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

connection supervision

@FunctionID: A-VAR-1 
(TIG 3.2)
*)

ALGORITHM aCheckConnection


VAR
 iStep : DINT;
 cycleTime : TIME;
 timeOutCnt : DINT;
END_VAR

VAR CONSTANT
 connectionTimeout : TIME := T#30s;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Init Step
IF iStep = 0 THEN
   cycleTime := GET_TASK_INTERVAL();
   iStep := 10;
END_IF;

// not connected step
IF iStep = 10 THEN
   sv_ENHmi.bIsConnected := FALSE;   
   IF sv_ENCom.bConnect THEN
     iStep := 20;    
   END_IF;
END_IF;

// connected step
IF iStep = 20 THEN
   sv_ENHmi.bIsConnected := TRUE;

   IF (IS_LINKED(sv_bENAvailable) AND (NOT sv_bENAvailable))  THEN
      // Signalize EasyNet available the 1st time Easynet gets connected
      sv_bENAvailable := TRUE;
   END_IF;

   sv_ENCom.bConnect := FALSE;      
   timeOutCnt := LINT_TO_DINT(TIME_TO_LINT(connectionTimeout) / TIME_TO_LINT(cycleTime));
   iStep := 30;   
END_IF;
          

// wait for connected bit
IF iStep = 30 THEN
   timeOutCnt := timeOutCnt - 1;
   IF sv_ENCom.bConnect THEN
      iStep := 20;   
   END_IF;
   IF timeOutCnt = 0 THEN
      iStep := 10; 
   END_IF;
END_IF;






;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

connection supervision

@FunctionID: A-VAR-1 
(TIG 3.2)
*)

PROCESS_ALGORITHM paRun ON TaskVis AUTOSTART


VAR
 iStep : DINT;
 cycleTime : TIME;
 fbRTC : RTC;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Init Step
IF iStep = 0 THEN
   cycleTime := GET_TASK_INTERVAL();

   aInit();
   iStep := 10;
END_IF;


// cyclic
IF iStep = 10 THEN
    fbRTC();
    sv_dRTC := fbRTC.CDT;
        
    aInitIfAvailable();
    aCheckConnection();    
END_IF;                           


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLogENConnected ON TaskVis WITH sv_ENHmi.bIsConnected


VAR
 s : KPROT_Status;
 sILog : STRING(128);
END_VAR
#BEGIN_EDIT_BLOCK
IF sv_ENHmi.bIsConnected THEN    
    sILog := "EasyNet: host connected";
ELSE 
    sILog := "EasyNet: host disconnected";    
END_IF;

s := KPROT_UserInfoLog("%5s", 0, 0, 0, 0, sILog);



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 114 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)FCreateEasyNetVersion @RT(0) @T @T @DERIVED 0 @F @RT(15)FUNCTION : BOOL @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(12)cUTCZeroDate @RT(0) @T @F @DT @RT(13)DATE_AND_TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(29)DT#1970-01-01-00:00:00.000000 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)cEvNotification_Invalid @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABEasyNet @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(19)abEventNotification @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)ABEasyNetEventNotification @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(136)for EasyNet mobile, available since KePlast.IEC 01.36. For usage of this function unit with older KePlast versions delete this instance. @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)abEasyNetPDP @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)ABEasyNetPDP @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sv_ENCom @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tsENCom @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)sv_ENHmi @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tsENHmi @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)sv_dRTC @RT(0) @T @F @DT @RT(2)DT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(40)SV is fastretain to get "power off" time @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)sv_bENAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(5)fbRTC @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)RTC @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mPowerOffTime @RT(0) @T @F @DT @RT(2)DT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mPowerOnTime @RT(0) @T @F @DT @RT(2)DT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aInitIfAvailable @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
14 
@Var @RT(12)bInitialized @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)checkMeasureStateTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)T#1s @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iRed @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)sampler @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KMB_MeasureBlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)samplerStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)KMB_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)profileInfo @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMB_ProfileInfo @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sProfileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(14)'EasyNetEvent' @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(9)catHandle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(4)prio @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(3)tmp @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aCheckConnection @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(5)iStep @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)cycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)connectionTimeout @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)T#30s @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(10)timeOutCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(5)iStep @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)cycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)fbRTC @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)RTC @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pLogENConnected @STRUCTURED_TEXT 
@RT(0) @RT(21)sv_ENHmi.bIsConnected @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KPROT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sILog @RT(0) @T @F @DT @RT(11)STRING(128) @RT(0) @T @T @STRING 0 @F @RT(3)128 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// add versioninfo to catalog
b := FCreateEasyNetVersion();

// save power off timestamp and set power on timestamp
fbRTC();
mPowerOffTime := sv_dRTC;
mPowerOnTime := fbRTC.CDT; 


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(86)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (bInitialized) THEN
   RETURN; 
END_IF;

IF (NOT sv_bENAvailable) THEN
   RETURN;
END_IF;    

// CR_0056529: Wait until EasyNetEvent PDP profile has been started
IF iRed = 0 THEN   
   // Try connection to EasyNetEvent PDP profile
   samplerStatus := sampler.Connect(sProfileName);
   profileInfo.MeasureState := KMB_MeasureState_Inactive;
   IF samplerStatus = KMB_Status_OK THEN
      // Get profile info containing measure state
      profileInfo := sampler.GetProfileInfo(); 
   ELSE
      IF sv_TraceLevel.bApplication THEN
         // Not connected to profile yet
         dummy := Print("Debug ABEasyNet: Not connected to PDP profile %s yet", sProfileName);
      END_IF; 
   END_IF;
   
   IF sv_TraceLevel.bApplication THEN
      CASE profileInfo.MeasureState OF
         KMB_MeasureState_Delay:
            dummy := Print("Debug ABEasyNet: Measure state of %s = delay", sProfileName);
            
         KMB_MeasureState_Active:
            dummy := Print("Debug ABEasyNet: Measure state of %s = active", sProfileName);
      ELSE
         dummy := Print("Debug ABEasyNet: Measure state of %s = inactive", sProfileName);
      END_CASE;
   END_IF;
   
   iRed := LINT_TO_DINT(TIME_TO_LINT(checkMeasureStateTime)/TIME_TO_LINT(GET_TASK_INTERVAL()));
ELSE
   iRed := iRed - 1; 
END_IF;

IF profileInfo.MeasureState <> KMB_MeasureState_Active THEN
   // EasyNetEvent PDP Profile not started yet -> Check again
   RETURN;
END_IF;

// check thread prio of easynetshot profile
i := 0; 
REPEAT
   catHandle := KCAT_GetHandle(CONCAT("MS.Profile.Profile:", INT_TO_STRING(i), ".Name"));
   IF (catHandle.Status = KCAT_Status_NOTOK) THEN
      dummy := Print("ABEasyNet.aInitIfAvailable: MS Profile EasyNetShot not found");
      b := ASSERT(FALSE, erAssert);
   END_IF;
   
   s := KCAT_GetValue(catHandle.Handle, tmp);   
   IF (tmp = "EasyNetShot") THEN
      catHandle := KCAT_GetHandle(CONCAT("MS.Profile.Profile:", INT_TO_STRING(i), ".ThreadPriority"));              
      IF (catHandle.Status = KCAT_Status_NOTOK) THEN
         dummy := Print("ABEasyNet.aInitIfAvailable: MS Profile EasyNetShot.ThreadPriority not found");
         b := ASSERT(FALSE, erAssert);
      END_IF;
      s := KCAT_GetValue(catHandle.Handle, prio);
      IF (prio <> 7) THEN
         dummy := Print("ABEasyNet.aInitIfAvailable: MS Profile EasyNetShot.ThreadPriority expected 7 is %d! Check configuration!", prio);
         b := ASSERT(FALSE, erAssert);
      END_IF;
   END_IF;
   i := i + 1; 
UNTIL (prio = 7) END_REPEAT; 


bInitialized := TRUE; 

// initialize EasyNetEvent PDP profile for recording evEasyNetEvent
abEasyNetPDP.aInit(mPowerOffTime, mPowerOnTime);
                             





@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(49)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Init Step
IF iStep = 0 THEN
   cycleTime := GET_TASK_INTERVAL();
   iStep := 10;
END_IF;

// not connected step
IF iStep = 10 THEN
   sv_ENHmi.bIsConnected := FALSE;   
   IF sv_ENCom.bConnect THEN
     iStep := 20;    
   END_IF;
END_IF;

// connected step
IF iStep = 20 THEN
   sv_ENHmi.bIsConnected := TRUE;

   IF (IS_LINKED(sv_bENAvailable) AND (NOT sv_bENAvailable))  THEN
      // Signalize EasyNet available the 1st time Easynet gets connected
      sv_bENAvailable := TRUE;
   END_IF;

   sv_ENCom.bConnect := FALSE;      
   timeOutCnt := LINT_TO_DINT(TIME_TO_LINT(connectionTimeout) / TIME_TO_LINT(cycleTime));
   iStep := 30;   
END_IF;
          

// wait for connected bit
IF iStep = 30 THEN
   timeOutCnt := timeOutCnt - 1;
   IF sv_ENCom.bConnect THEN
      iStep := 20;   
   END_IF;
   IF timeOutCnt = 0 THEN
      iStep := 10; 
   END_IF;
END_IF;





@END_Body 

@@@BEG_Comment@@@ 
@TL(14)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

connection supervision

@FunctionID: A-VAR-1 
(TIG 3.2)
@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Init Step
IF iStep = 0 THEN
   cycleTime := GET_TASK_INTERVAL();

   aInit();
   iStep := 10;
END_IF;


// cyclic
IF iStep = 10 THEN
    fbRTC();
    sv_dRTC := fbRTC.CDT;
        
    aInitIfAvailable();
    aCheckConnection();    
END_IF;                           

@END_Body 

@@@BEG_Comment@@@ 
@TL(14)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

connection supervision

@FunctionID: A-VAR-1 
(TIG 3.2)
@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
IF sv_ENHmi.bIsConnected THEN    
    sILog := "EasyNet: host connected";
ELSE 
    sILog := "EasyNet: host disconnected";    
END_IF;

s := KPROT_UserInfoLog("%5s", 0, 0, 0, 0, sILog);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
