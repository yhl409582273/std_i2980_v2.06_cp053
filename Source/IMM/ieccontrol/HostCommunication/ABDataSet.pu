IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, ASSERT
, STOP_PROCESS_ALGORITHM
, cDataSetErr_NoAvailable
, cDataSetErr_NotAllowed
, cModeAutomatic
, cCompOperationMode
, tevLockUnlock
, tsHostHmi
, tsHostDataSet
, tnDataState
, tnOperationMode
, KSYS_Status
, FBLockUnlock

END_IMPORT

ALGORITHM_BLOCK ABDataSet #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitDone : BOOL (* IEC initialisation is finished (after movement registration) *);
 sv_HostHmi : tsHostHmi;
 sv_DataSet : tsHostDataSet;
 sv_DataState : tnDataState (* State of machine / mold data read *);
 sv_OperationMode : tnOperationMode;
END_VAR

SYSTEM_OBJECT
 TaskVis : TASK;
 evLockUnlock : tevLockUnlock;
 erAssert : ALARM;
END_OBJECT

VAR
 mpbAllowMoldLoad : REFTO BOOL;
 mpbAllowMoldSave : REFTO BOOL;
 mpbAllowMachineLoad : REFTO BOOL;
 mpbAllowMachineSave : REFTO BOOL;
 mpbAllowSeqLoad : REFTO BOOL;
 mpbAllowSeqSave : REFTO BOOL;
 mbOpModeLockAvailable : BOOL;
 mDataActionsEnableAvailable : BOOL;
END_VAR

FUNCTION fIsOpModeAutoAllowed : BOOL
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK

fIsOpModeAutoAllowed := NOT (sv_DataSet.iCommand = cDataSetCmdLoadMold) OR (sv_DataSet.iCommand = cDataSetCmdLoadMachine);


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fCheckConditions : BOOL
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
IF (sv_DataState <> nReady) THEN
    RETURN;
END_IF;

IF (NOT fIsOpModeAutoAllowed()) THEN
    IF (sv_OperationMode >= nHalfAutomatic) THEN
        RETURN;    
    END_IF;
END_IF;

fCheckConditions := TRUE;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fDisableAll : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 bDisable : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
IF (mDataActionsEnableAvailable) THEN 
   mpbAllowMoldLoad^ := NOT bDisable;
   mpbAllowMoldSave^ := NOT bDisable;
   mpbAllowMachineLoad^ := NOT bDisable;
   mpbAllowMachineSave^ := NOT bDisable;
   mpbAllowSeqLoad^ := NOT bDisable;
   mpbAllowSeqSave^ := NOT bDisable;
END_IF;


;#END_EDIT_BLOCK END_FUNCTION

POSTUPDATE_ALGORITHM pInit ON TaskVis(1) WITH sv_HostHmi.dataSet.bAvailable


VAR
 b : BOOL;
 s : KSYS_Status;
 dummy : DINT;
 dummyRef : REFTO UDINT;
END_VAR
#BEGIN_EDIT_BLOCK
mDataActionsEnableAvailable := TRUE;
mpbAllowMoldLoad := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMoldDataLoad", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowMoldSave := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMoldDataSave", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowMachineLoad := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMachineDataLoad", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowMachineSave := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMachineDataSave", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowSeqLoad := GET_SYNC_REFTO("system.sv_DataActionsEnable.bSequenceDataLoad", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowSeqSave := GET_SYNC_REFTO("system.sv_DataActionsEnable.bSequenceDataSave", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);

dummyRef := GET_SYNC_REFTO("system.sv_LockOperationModeAuto.sResourceLock.iLocked", T#0s, s);
mbOpModeLockAvailable := s = KSYS_Status_OK;

IF (evLockUnlock = EMPTY) THEN 
   dummy := Print("HostCommunication.ABDataSet: binary incompatible! recompile FU with correct iecproject!");
   b := ASSERT(FALSE, erAssert);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pTrigger ON TaskVis(2) WITH sv_DataSet.iTrigger


VAR
 b : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
IF (sv_DataSet.iTrigger MOD 2 = 0) THEN
    RETURN; 
END_IF;

sv_DataSet.iError := 0; 
IF (NOT sv_bInitDone) THEN
    sv_DataSet.iError := cDataSetErr_NotAllowed;
ELSIF (NOT sv_HostHmi.dataSet.bAvailable) THEN
    sv_DataSet.iError := cDataSetErr_NoAvailable;
ELSIF ((sv_DataSet.iCommand < cDataSetCmdLoadMold) OR (sv_DataSet.iCommand > cDataSetCmdSaveMachine)) THEN
    sv_DataSet.iError := cDataSetErr_InvalidCommand;
ELSIF (NOT fCheckConditions()) THEN
    sv_DataSet.iError := cDataSetErr_NotAllowed;
END_IF;
    
IF (sv_DataSet.iError > 0) THEN
    sv_DataSet.iTrigger := sv_DataSet.iTrigger + 1; 
    RETURN;
END_IF;

b := fDisableAll(TRUE);
    
START_PROCESS_ALGORITHM(paRun);


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskVis


VAR
 iStep : DINT;
 cnt : DINT;
 fbLockUnlock : FBLockUnlock;
 b : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
IF (iStep = 0) THEN
    IF (mbOpModeLockAvailable) THEN
        // op-mode will be locked by HMI (CR_0074160)
        iStep := 20; 
    ELSE 
        IF (NOT fIsOpModeAutoAllowed()) THEN
           fbLockUnlock.DeviceId.CompId := cCompOperationMode;
           fbLockUnlock.DeviceId.IndexId := 1;
           fbLockUnlock.MoveDir := cModeAutomatic;
           fbLockUnlock.MoveId := cModeAutomatic;
           fbLockUnlock(Mode := nLockAbort);
        END_IF;
        cnt := 10; 
        iStep := 10; 
    END_IF;
END_IF;
                                       
                                        
// CR_0074160: actually it is not possible to ensure there is no other load- or save-action in progress
// as a workaround lock the recipemask buttons and wait a second, then check conditions again
IF (iStep = 10) THEN
    cnt := cnt - 1;
    IF (cnt = 0) THEN
        iStep := 20;     
    END_IF;
END_IF;

IF (iStep = 20) THEN
    IF (NOT fCheckConditions()) THEN
        sv_DataSet.iError := cDataSetErr_NotAllowed;
        iStep := 1000; 
    ELSE
        iStep := 30; 
    END_IF;
END_IF;

IF (iStep = 30) THEN
    sv_HostHmi.dataSet.iCommand := sv_DataSet.iCommand;
    sv_HostHmi.dataSet.sFile := sv_DataSet.sFile;
    sv_HostHmi.dataSet.iTrigger := sv_HostHmi.dataSet.iTrigger + 1;
    iStep := 40; 
END_IF;

IF (iStep = 40) THEN
    IF (sv_HostHmi.dataSet.iTrigger MOD 2 = 0) THEN
        sv_DataSet.iError := sv_HostHmi.dataSet.iError;
        iStep := 1000;     
    END_IF;
END_IF;

IF (iStep = 1000) THEN
    b := fDisableAll(FALSE);
    IF (NOT mbOpModeLockAvailable) THEN
        fbLockUnlock(Mode := nUnlock);    
    END_IF;
    sv_DataSet.iTrigger := sv_DataSet.iTrigger + 1; 
    iStep := 0; 
    STOP_PROCESS_ALGORITHM();    
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 159 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
4 
@Var @RT(23)cDataSetErr_NoAvailable @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)cDataSetErr_NotAllowed @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)3 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cModeAutomatic @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)23 @RT(50)for locking/unlocking half and full automatic mode 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)cCompOperationMode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)111 @RT(24)Component Operation Mode 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABDataSet @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(60)IEC initialisation is finished (after movement registration) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)evLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tevLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)sv_HostHmi @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)tsHostHmi @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)sv_DataSet @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsHostDataSet @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_DataState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnDataState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)State of machine / mold data read @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)mpbAllowMoldLoad @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mpbAllowMoldSave @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mpbAllowMachineLoad @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mpbAllowMachineSave @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mpbAllowSeqLoad @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mpbAllowSeqSave @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbOpModeLockAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)mDataActionsEnableAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(20)fIsOpModeAutoAllowed @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(16)fCheckConditions @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(11)fDisableAll @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(8)bDisable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(29)sv_HostHmi.dataSet.bAvailable @RT(10)TaskVis(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)dummyRef @RT(0) @T @T @REFTO 0 @T @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(8)pTrigger @STRUCTURED_TEXT 
@RT(0) @RT(19)sv_DataSet.iTrigger @RT(10)TaskVis(2) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(5)iStep @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)cnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(3)

fIsOpModeAutoAllowed := NOT (sv_DataSet.iCommand = cDataSetCmdLoadMold) OR (sv_DataSet.iCommand = cDataSetCmdLoadMachine);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
IF (sv_DataState <> nReady) THEN
    RETURN;
END_IF;

IF (NOT fIsOpModeAutoAllowed()) THEN
    IF (sv_OperationMode >= nHalfAutomatic) THEN
        RETURN;    
    END_IF;
END_IF;

fCheckConditions := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
IF (mDataActionsEnableAvailable) THEN 
   mpbAllowMoldLoad^ := NOT bDisable;
   mpbAllowMoldSave^ := NOT bDisable;
   mpbAllowMachineLoad^ := NOT bDisable;
   mpbAllowMachineSave^ := NOT bDisable;
   mpbAllowSeqLoad^ := NOT bDisable;
   mpbAllowSeqSave^ := NOT bDisable;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(22)
mDataActionsEnableAvailable := TRUE;
mpbAllowMoldLoad := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMoldDataLoad", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowMoldSave := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMoldDataSave", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowMachineLoad := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMachineDataLoad", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowMachineSave := GET_SYNC_REFTO("system.sv_DataActionsEnable.bMachineDataSave", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowSeqLoad := GET_SYNC_REFTO("system.sv_DataActionsEnable.bSequenceDataLoad", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);
mpbAllowSeqSave := GET_SYNC_REFTO("system.sv_DataActionsEnable.bSequenceDataSave", T#0s, s);
mDataActionsEnableAvailable := mDataActionsEnableAvailable AND (s = KSYS_Status_OK);

dummyRef := GET_SYNC_REFTO("system.sv_LockOperationModeAuto.sResourceLock.iLocked", T#0s, s);
mbOpModeLockAvailable := s = KSYS_Status_OK;

IF (evLockUnlock = EMPTY) THEN 
   dummy := Print("HostCommunication.ABDataSet: binary incompatible! recompile FU with correct iecproject!");
   b := ASSERT(FALSE, erAssert);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(24)
IF (sv_DataSet.iTrigger MOD 2 = 0) THEN
    RETURN; 
END_IF;

sv_DataSet.iError := 0; 
IF (NOT sv_bInitDone) THEN
    sv_DataSet.iError := cDataSetErr_NotAllowed;
ELSIF (NOT sv_HostHmi.dataSet.bAvailable) THEN
    sv_DataSet.iError := cDataSetErr_NoAvailable;
ELSIF ((sv_DataSet.iCommand < cDataSetCmdLoadMold) OR (sv_DataSet.iCommand > cDataSetCmdSaveMachine)) THEN
    sv_DataSet.iError := cDataSetErr_InvalidCommand;
ELSIF (NOT fCheckConditions()) THEN
    sv_DataSet.iError := cDataSetErr_NotAllowed;
END_IF;
    
IF (sv_DataSet.iError > 0) THEN
    sv_DataSet.iTrigger := sv_DataSet.iTrigger + 1; 
    RETURN;
END_IF;

b := fDisableAll(TRUE);
    
START_PROCESS_ALGORITHM(paRun);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(61)
IF (iStep = 0) THEN
    IF (mbOpModeLockAvailable) THEN
        // op-mode will be locked by HMI (CR_0074160)
        iStep := 20; 
    ELSE 
        IF (NOT fIsOpModeAutoAllowed()) THEN
           fbLockUnlock.DeviceId.CompId := cCompOperationMode;
           fbLockUnlock.DeviceId.IndexId := 1;
           fbLockUnlock.MoveDir := cModeAutomatic;
           fbLockUnlock.MoveId := cModeAutomatic;
           fbLockUnlock(Mode := nLockAbort);
        END_IF;
        cnt := 10; 
        iStep := 10; 
    END_IF;
END_IF;
                                       
                                        
// CR_0074160: actually it is not possible to ensure there is no other load- or save-action in progress
// as a workaround lock the recipemask buttons and wait a second, then check conditions again
IF (iStep = 10) THEN
    cnt := cnt - 1;
    IF (cnt = 0) THEN
        iStep := 20;     
    END_IF;
END_IF;

IF (iStep = 20) THEN
    IF (NOT fCheckConditions()) THEN
        sv_DataSet.iError := cDataSetErr_NotAllowed;
        iStep := 1000; 
    ELSE
        iStep := 30; 
    END_IF;
END_IF;

IF (iStep = 30) THEN
    sv_HostHmi.dataSet.iCommand := sv_DataSet.iCommand;
    sv_HostHmi.dataSet.sFile := sv_DataSet.sFile;
    sv_HostHmi.dataSet.iTrigger := sv_HostHmi.dataSet.iTrigger + 1;
    iStep := 40; 
END_IF;

IF (iStep = 40) THEN
    IF (sv_HostHmi.dataSet.iTrigger MOD 2 = 0) THEN
        sv_DataSet.iError := sv_HostHmi.dataSet.iError;
        iStep := 1000;     
    END_IF;
END_IF;

IF (iStep = 1000) THEN
    b := fDisableAll(FALSE);
    IF (NOT mbOpModeLockAvailable) THEN
        fbLockUnlock(Mode := nUnlock);    
    END_IF;
    sv_DataSet.iTrigger := sv_DataSet.iTrigger + 1; 
    iStep := 0; 
    STOP_PROCESS_ALGORITHM();    
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
