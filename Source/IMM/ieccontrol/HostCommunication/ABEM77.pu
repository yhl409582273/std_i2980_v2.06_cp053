IMPORT_OVER_LISTFILE
 KCAT_GetHandle
, ASSERT
, KMSG_SetProtocolVariable
, KCAT_GetValue
, tsEM77
, KCAT_HandleData
, KCAT_Status
, KMSG_Status
, ABHeatingState

END_IMPORT

ALGORITHM_BLOCK ABEM77 #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_EM77 : tsEM77;
 sv_bInitDone : BOOL (* IEC initialisation is finished (after movement registration) *);
 sv_bInitStart : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 erAssert : ALARM;
 TaskVis : TASK;
END_OBJECT

POSTUPDATE_ALGORITHM pAvailable ON PU_Task_7 WITH sv_bInitStart,sv_EM77.bAvailable


VAR_TEMP
 hdlData : KCAT_HandleData;
 dummy : DINT;
 sProtocolVar : STRING(255);
 s : KCAT_Status;
 s2 : KMSG_Status;
 b : BOOL;
 i : INT;
 iMsgClass : DINT;
END_VAR

VAR
 msgClassFound : DWORD := 16#18020000;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_EM77.bAvailable AND sv_bInitStart) THEN
    // register protocol variable
    hdlData := KCAT_GetHandle("ILOG.varName");
    IF (hdlData.Status <> KCAT_Status_OK) THEN
        dummy := Print("ABEM77 Configuration problem: Production Counter for infolog not configured: ILOG.varName");
        b := ASSERT(FALSE, erAssert);    
    END_IF;
     
    s := KCAT_GetValue(hdlData.Handle, sProtocolVar);
    IF (s <> KCAT_Status_OK) THEN
        dummy := Print("ABEM77 Configuration problem: cannot read ILOG.varName");
        b := ASSERT(FALSE, erAssert);    
    END_IF;
    
    s2 := KMSG_SetProtocolVariable(CONCAT("APPL.", sProtocolVar));
    IF (s2 <> KMSG_Status_OK) THEN
        dummy := Print("ABEM77: cannot set variable ILOG.varName=%s as protocolvariable", sProtocolVar);
        b := ASSERT(FALSE, erAssert);    
    END_IF;     
    
    // check repsys config
    FOR i := 1 TO 32 DO
        hdlData := KCAT_GetHandle(CONCAT("RepSys.MsgClass:", INT_TO_STRING(i-1), ".msgClassNr"));
        IF (hdlData.Status = KCAT_Status_OK) THEN
              s := KCAT_GetValue(hdlData.Handle, iMsgClass);
              IF (s = KCAT_Status_OK) THEN
                  msgClassFound := msgClassFound AND (NOT (SHL(1, iMsgClass)));
                  IF (msgClassFound = 0) THEN
                      EXIT;
                  END_IF;
              END_IF;
        END_IF;
    END_FOR;
    
    IF (msgClassFound <> 0) THEN
        dummy := Print("ABEM77: Configuration problem - not all necessary RepSys classes configured!");
        b := ASSERT(FALSE, erAssert);        
    END_IF;
                                  
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pActivate ON TaskVis WITH sv_bInitDone,sv_EM77.bActivate

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_EM77.bActivate AND sv_bInitDone) THEN
    START_PROCESS_ALGORITHM(paRun);
ELSE
    STOP_PROCESS_ALGORITHM(paRun);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskVis


VAR
 iRedCnt : INT;
 abHeatingState : ABHeatingState;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (iRedCnt = 0) THEN
   iRedCnt := 5; 
    
   abHeatingState.aHeating(bEM63 := TRUE);
END_IF;

iRedCnt := iRedCnt - 1; 


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 179 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(14)KCAT_GetHandle @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)KMSG_SetProtocolVariable @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_GetValue @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(6)ABEM77 @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(7)sv_EM77 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)tsEM77 @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(60)IEC initialisation is finished (after movement registration) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pAvailable @STRUCTURED_TEXT 
@RT(0) @RT(32)sv_bInitStart,sv_EM77.bAvailable @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(7)hdlData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(12)sProtocolVar @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(2)s2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KMSG_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(9)iMsgClass @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(13)msgClassFound @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(11)16#18020000 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pActivate @STRUCTURED_TEXT 
@RT(0) @RT(30)sv_bInitDone,sv_EM77.bActivate @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)iRedCnt @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)abHeatingState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABHeatingState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(46)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_EM77.bAvailable AND sv_bInitStart) THEN
    // register protocol variable
    hdlData := KCAT_GetHandle("ILOG.varName");
    IF (hdlData.Status <> KCAT_Status_OK) THEN
        dummy := Print("ABEM77 Configuration problem: Production Counter for infolog not configured: ILOG.varName");
        b := ASSERT(FALSE, erAssert);    
    END_IF;
     
    s := KCAT_GetValue(hdlData.Handle, sProtocolVar);
    IF (s <> KCAT_Status_OK) THEN
        dummy := Print("ABEM77 Configuration problem: cannot read ILOG.varName");
        b := ASSERT(FALSE, erAssert);    
    END_IF;
    
    s2 := KMSG_SetProtocolVariable(CONCAT("APPL.", sProtocolVar));
    IF (s2 <> KMSG_Status_OK) THEN
        dummy := Print("ABEM77: cannot set variable ILOG.varName=%s as protocolvariable", sProtocolVar);
        b := ASSERT(FALSE, erAssert);    
    END_IF;     
    
    // check repsys config
    FOR i := 1 TO 32 DO
        hdlData := KCAT_GetHandle(CONCAT("RepSys.MsgClass:", INT_TO_STRING(i-1), ".msgClassNr"));
        IF (hdlData.Status = KCAT_Status_OK) THEN
              s := KCAT_GetValue(hdlData.Handle, iMsgClass);
              IF (s = KCAT_Status_OK) THEN
                  msgClassFound := msgClassFound AND (NOT (SHL(1, iMsgClass)));
                  IF (msgClassFound = 0) THEN
                      EXIT;
                  END_IF;
              END_IF;
        END_IF;
    END_FOR;
    
    IF (msgClassFound <> 0) THEN
        dummy := Print("ABEM77: Configuration problem - not all necessary RepSys classes configured!");
        b := ASSERT(FALSE, erAssert);        
    END_IF;
                                  
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_EM77.bActivate AND sv_bInitDone) THEN
    START_PROCESS_ALGORITHM(paRun);
ELSE
    STOP_PROCESS_ALGORITHM(paRun);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (iRedCnt = 0) THEN
   iRedCnt := 5; 
    
   abHeatingState.aHeating(bEM63 := TRUE);
END_IF;

iRedCnt := iRedCnt - 1; 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
