(*
Euromap63 and 83 specific heating zone states
*)

IMPORT_OVER_LISTFILE
 tsEM77
, tsEM63
, tenEM83ZoneMode
, tsHeatingGeneral
, tsHeatingZone
, KSYS_Status
, tyHeatingNozzle
, tyHeatingMold
, RTC
, tyHeatingNozzleGeneral

END_IMPORT

ALGORITHM_BLOCK ABHeatingState #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_EM77 : tsEM77;
 sv_EM63 : tsEM63;
END_VAR

VAR
 mbEM63 : BOOL;
END_VAR

FUNCTION fZoneModeToString : STRING(1)
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 zoneMode : tenEM83ZoneMode;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// mapping from EM83 zone mode (14.6 Table 63) to EM63 zone mode

//    "0" Barrel Zone is not supported    ... EM83: OTHER_0
//    "O" Barrel Zone is off              ... EM83: OFF_1, ONLY_MEASUREMENT_6
//    "A" Barrel Zone is in auto mode     ... EM83: AUTOMATIC_2
//    "T" Barrel Zone is in tuning mode   ... EM83: TUNING_3
//    "S" Barrel Zone is in standby mode  ... EM83: STANDBY_4 
//    "M" Barrel Zone is in manual mode   ... EM83: OPEN_LOOP_5

CASE (zoneMode) OF
    nOther_0: fZoneModeToString := "0";  
    nOff_1: fZoneModeToString := "O"; 
    nOnlyMeasurement_6: fZoneModeToString := "O";
    nAutomatic_2: fZoneModeToString := "A";
    nTuning_3: fZoneModeToString := "T";
    nStandby_4: fZoneModeToString := "S";
    nOpenLoop_5: fZoneModeToString := "M";
    
ELSE
    fZoneModeToString := "0";
END_CASE;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fUpdateHeatingZone : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 iZoneNr : DINT;
END_VAR

VAR_IN_OUT
 general : tsHeatingGeneral;
 zone : tsHeatingZone;
 zoneModeEM63 : STRING(1);
 zoneModeEM83 : tenEM83ZoneMode;
END_VAR

VAR
 zoneMode : tenEM83ZoneMode;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (zone.pZoneMode = EMPTY) THEN
   RETURN; 
END_IF;


IF (general.piZonesAvailable <> EMPTY) AND (iZoneNr > general.piZonesAvailable^) THEN
    zoneMode := nOther_0;
ELSIF (general.pbHeatingOn <> EMPTY) AND (NOT general.pbHeatingOn^) THEN
    zoneMode := nOff_1;
ELSIF NOT (zone.pbUsed^) THEN
    zoneMode := nOff_1;        
ELSIF (zone.pZoneMode^ = enZoneModeDisabled)  THEN
    zoneMode := nOff_1;
ELSIF (zone.pZoneMode^ = enZoneModeMeasure) THEN 
    zoneMode := nOnlyMeasurement_6;
ELSIF (zone.pZoneMode^ = enZoneModeConstant) THEN 
    zoneMode := nOpenLoop_5;
ELSIF (zone.pbOptimizingActive^) THEN
    zoneMode := nTuning_3;
ELSIF ((general.pbKeepWarmActive <> EMPTY) AND (general.pbKeepWarmActive^)) THEN 
    zoneMode := nStandby_4; 
ELSE
    zoneMode := nAutomatic_2;
END_IF;

IF (zoneModeEM83 <> zoneMode) THEN 
    zoneModeEM83 := zoneMode;
    IF (mbEM63) THEN 
       zoneModeEM63 := fZoneModeToString(zoneMode);
    END_IF;
END_IF;

fUpdateHeatingZone := TRUE; 


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fInitHeatingZone : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 sPrefix : STRING(31);
 iZoneNr : DINT;
END_VAR

VAR_IN_OUT
 zone : tsHeatingZone;
END_VAR

VAR
 sPrefixZone : STRING(127);
 s : KSYS_Status;
 pbLinked : REFTO BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

pbLinked := GET_SYNC_REFTO(CONCAT(sPrefix, "Array[", DINT_TO_STRING(iZoneNr),"].bLinked"), T#0s, s); 
IF ((pbLinked =EMPTY) OR (NOT pbLinked^)) THEN
    RETURN; 
END_IF;

sPrefixZone := CONCAT(sPrefix, DINT_TO_STRING(iZoneNr)); 
zone.pbOptimizingActive := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".bIsOptimizing"), t#0s, s);
zone.pbEmergencyOperation := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".bEmgOperation"), t#0s, s);
            
sPrefixZone := CONCAT(sPrefix, "Retain", DINT_TO_STRING(iZoneNr)); 
zone.pZoneMode := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".ModeVis"), t#0s, s);
zone.pbUsed := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".bUsed"), t#0s, s);

fInitHeatingZone := TRUE; 


;#END_EDIT_BLOCK END_FUNCTION

ALGORITHM aHeating


VAR_INPUT
 bEM63 : BOOL;
END_VAR

VAR_TEMP
 k : DINT;
 i : DINT;
END_VAR

VAR
 yHeatingZonesNozzle : tyHeatingNozzle;
 yHeatingZonesMold : tyHeatingMold;
 bInit : BOOL;
 rtc : RTC;
 ts : DT;
 t : TIME;
 b : BOOL;
 sPrefix : STRING(63);
 mHeatingMoldGeneral : tsHeatingGeneral;
 mHeatingNozzleGeneral : tyHeatingNozzleGeneral;
 s : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// SetCfgBrlZn, SetCfgMldZn

IF (NOT bInit) THEN
    mbEM63 := bEM63;
    rtc();
    ts := rtc.CDT;
    bInit := TRUE;
    FOR k := 1 TO cMaxInjectionUnits DO
        sPrefix := CONCAT("HeatingNozzle", DINT_TO_STRING(k));
        mHeatingNozzleGeneral[k].pbKeepWarmActive := GET_SYNC_REFTO(CONCAT(sPrefix, ".sv_bKeepWarmActive"), T#0s, s);
        mHeatingNozzleGeneral[k].pbHeatingOn := GET_SYNC_REFTO(CONCAT(sPrefix, ".sv_bHeatingOn"), T#0s, s);
        mHeatingNozzleGeneral[k].piZonesAvailable := GET_SYNC_REFTO(CONCAT(sPrefix, ".sv_iZonesAvailable"), T#0s, s);
        sPrefix := CONCAT(sPrefix, ".sv_Zone");
        
        FOR i := 1 TO cMaxHeatingNozzleZones DO
            b := fInitHeatingZone(sPrefix, i, yHeatingZonesNozzle[k, i]);
            IF (NOT b) THEN
               EXIT; 
            END_IF;
        END_FOR;
    END_FOR;

    sPrefix := "HeatingMold1.sv_Zone";
    mHeatingMoldGeneral.pbKeepWarmActive := GET_SYNC_REFTO("HeatingMold1.sv_bKeepWarmActive", T#0s, s);
    mHeatingMoldGeneral.pbHeatingOn := GET_SYNC_REFTO("HeatingMold1.sv_bHeatingOn", T#0s, s);
    mHeatingMoldGeneral.piZonesAvailable := GET_SYNC_REFTO("HeatingMold1.sv_iZonesAvailable", T#0s, s);
    FOR i := 1 TO cMaxHeatingMoldZones DO
        b := fInitHeatingZone(sPrefix, i, yHeatingZonesMold[i]);
        IF (NOT b) THEN
            EXIT;        
        END_IF;
    END_FOR;
    
    rtc();
    t := rtc.CDT - ts;
    
END_IF;


FOR k := 1 TO cMaxInjectionUnits DO
    FOR i := 1 TO cMaxHeatingNozzleZones DO
        b := fUpdateHeatingZone(i, mHeatingNozzleGeneral[k], yHeatingZonesNozzle[k,i], sv_EM63.SetCfgBrlZn[k,i], sv_EM77.SetCfgBrlZn[k,i]);
        IF (NOT b) THEN
           EXIT; 
        END_IF;
    END_FOR;
END_FOR;

FOR i := 1 TO cMaxHeatingMoldZones DO
    b := fUpdateHeatingZone(i, mHeatingMoldGeneral, yHeatingZonesMold[i], sv_EM63.SetCfgMldZn[i], sv_EM77.SetCfgMldZn[i]);
    IF (NOT b) THEN
        EXIT;        
    END_IF;
END_FOR;




;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 168 @Pou 25 
@@@BEG_Comment@@@
Euromap63 and 83 specific heating zone states
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABHeatingState @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(7)sv_EM77 @RT(0) @T @T @DERIVED 0 @F @RT(6)tsEM77 @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)sv_EM63 @RT(0) @T @T @DERIVED 0 @F @RT(6)tsEM63 @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)mbEM63 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(17)fZoneModeToString @STRUCTURED_TEXT 
@RT(9)STRING(1) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(8)zoneMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tenEM83ZoneMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(18)fUpdateHeatingZone @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(7)iZoneNr @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)general @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tsHeatingGeneral @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(4)zone @RT(0) @T @T @DERIVED 0 @F @RT(13)tsHeatingZone @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(12)zoneModeEM63 @RT(0) @T @F @DT @RT(9)STRING(1) @RT(0) @T @T @STRING 0 @F @RT(1)1 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(8)zoneMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tenEM83ZoneMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)zoneModeEM83 @RT(0) @T @T @DERIVED 0 @F @RT(15)tenEM83ZoneMode @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(16)fInitHeatingZone @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(7)sPrefix @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)iZoneNr @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)zone @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsHeatingZone @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(11)sPrefixZone @RT(0) @T @F @DT @RT(11)STRING(127) @RT(0) @T @T @STRING 0 @F @RT(3)127 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)pbLinked @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aHeating @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
14 
@Var @RT(19)yHeatingZonesNozzle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tyHeatingNozzle @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)yHeatingZonesMold @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tyHeatingMold @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)rtc @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)RTC @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)ts @RT(0) @T @F @DT @RT(2)DT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)k @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(7)sPrefix @RT(0) @T @F @DT @RT(10)STRING(63) @RT(0) @T @T @STRING 0 @F @RT(2)63 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mHeatingMoldGeneral @RT(0) @T @T @DERIVED 0 @F @RT(16)tsHeatingGeneral @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mHeatingNozzleGeneral @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tyHeatingNozzleGeneral @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bEM63 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(27)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// mapping from EM83 zone mode (14.6 Table 63) to EM63 zone mode

//    "0" Barrel Zone is not supported    ... EM83: OTHER_0
//    "O" Barrel Zone is off              ... EM83: OFF_1, ONLY_MEASUREMENT_6
//    "A" Barrel Zone is in auto mode     ... EM83: AUTOMATIC_2
//    "T" Barrel Zone is in tuning mode   ... EM83: TUNING_3
//    "S" Barrel Zone is in standby mode  ... EM83: STANDBY_4 
//    "M" Barrel Zone is in manual mode   ... EM83: OPEN_LOOP_5

CASE (zoneMode) OF
    nOther_0: fZoneModeToString := "0";  
    nOff_1: fZoneModeToString := "O"; 
    nOnlyMeasurement_6: fZoneModeToString := "O";
    nAutomatic_2: fZoneModeToString := "A";
    nTuning_3: fZoneModeToString := "T";
    nStandby_4: fZoneModeToString := "S";
    nOpenLoop_5: fZoneModeToString := "M";
    
ELSE
    fZoneModeToString := "0";
END_CASE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(39)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (zone.pZoneMode = EMPTY) THEN
   RETURN; 
END_IF;


IF (general.piZonesAvailable <> EMPTY) AND (iZoneNr > general.piZonesAvailable^) THEN
    zoneMode := nOther_0;
ELSIF (general.pbHeatingOn <> EMPTY) AND (NOT general.pbHeatingOn^) THEN
    zoneMode := nOff_1;
ELSIF NOT (zone.pbUsed^) THEN
    zoneMode := nOff_1;        
ELSIF (zone.pZoneMode^ = enZoneModeDisabled)  THEN
    zoneMode := nOff_1;
ELSIF (zone.pZoneMode^ = enZoneModeMeasure) THEN 
    zoneMode := nOnlyMeasurement_6;
ELSIF (zone.pZoneMode^ = enZoneModeConstant) THEN 
    zoneMode := nOpenLoop_5;
ELSIF (zone.pbOptimizingActive^) THEN
    zoneMode := nTuning_3;
ELSIF ((general.pbKeepWarmActive <> EMPTY) AND (general.pbKeepWarmActive^)) THEN 
    zoneMode := nStandby_4; 
ELSE
    zoneMode := nAutomatic_2;
END_IF;

IF (zoneModeEM83 <> zoneMode) THEN 
    zoneModeEM83 := zoneMode;
    IF (mbEM63) THEN 
       zoneModeEM63 := fZoneModeToString(zoneMode);
    END_IF;
END_IF;

fUpdateHeatingZone := TRUE; 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

pbLinked := GET_SYNC_REFTO(CONCAT(sPrefix, "Array[", DINT_TO_STRING(iZoneNr),"].bLinked"), T#0s, s); 
IF ((pbLinked =EMPTY) OR (NOT pbLinked^)) THEN
    RETURN; 
END_IF;

sPrefixZone := CONCAT(sPrefix, DINT_TO_STRING(iZoneNr)); 
zone.pbOptimizingActive := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".bIsOptimizing"), t#0s, s);
zone.pbEmergencyOperation := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".bEmgOperation"), t#0s, s);
            
sPrefixZone := CONCAT(sPrefix, "Retain", DINT_TO_STRING(iZoneNr)); 
zone.pZoneMode := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".ModeVis"), t#0s, s);
zone.pbUsed := GET_SYNC_REFTO(CONCAT(sPrefixZone, ".bUsed"), t#0s, s);

fInitHeatingZone := TRUE; 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(62)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// SetCfgBrlZn, SetCfgMldZn

IF (NOT bInit) THEN
    mbEM63 := bEM63;
    rtc();
    ts := rtc.CDT;
    bInit := TRUE;
    FOR k := 1 TO cMaxInjectionUnits DO
        sPrefix := CONCAT("HeatingNozzle", DINT_TO_STRING(k));
        mHeatingNozzleGeneral[k].pbKeepWarmActive := GET_SYNC_REFTO(CONCAT(sPrefix, ".sv_bKeepWarmActive"), T#0s, s);
        mHeatingNozzleGeneral[k].pbHeatingOn := GET_SYNC_REFTO(CONCAT(sPrefix, ".sv_bHeatingOn"), T#0s, s);
        mHeatingNozzleGeneral[k].piZonesAvailable := GET_SYNC_REFTO(CONCAT(sPrefix, ".sv_iZonesAvailable"), T#0s, s);
        sPrefix := CONCAT(sPrefix, ".sv_Zone");
        
        FOR i := 1 TO cMaxHeatingNozzleZones DO
            b := fInitHeatingZone(sPrefix, i, yHeatingZonesNozzle[k, i]);
            IF (NOT b) THEN
               EXIT; 
            END_IF;
        END_FOR;
    END_FOR;

    sPrefix := "HeatingMold1.sv_Zone";
    mHeatingMoldGeneral.pbKeepWarmActive := GET_SYNC_REFTO("HeatingMold1.sv_bKeepWarmActive", T#0s, s);
    mHeatingMoldGeneral.pbHeatingOn := GET_SYNC_REFTO("HeatingMold1.sv_bHeatingOn", T#0s, s);
    mHeatingMoldGeneral.piZonesAvailable := GET_SYNC_REFTO("HeatingMold1.sv_iZonesAvailable", T#0s, s);
    FOR i := 1 TO cMaxHeatingMoldZones DO
        b := fInitHeatingZone(sPrefix, i, yHeatingZonesMold[i]);
        IF (NOT b) THEN
            EXIT;        
        END_IF;
    END_FOR;
    
    rtc();
    t := rtc.CDT - ts;
    
END_IF;


FOR k := 1 TO cMaxInjectionUnits DO
    FOR i := 1 TO cMaxHeatingNozzleZones DO
        b := fUpdateHeatingZone(i, mHeatingNozzleGeneral[k], yHeatingZonesNozzle[k,i], sv_EM63.SetCfgBrlZn[k,i], sv_EM77.SetCfgBrlZn[k,i]);
        IF (NOT b) THEN
           EXIT; 
        END_IF;
    END_FOR;
END_FOR;

FOR i := 1 TO cMaxHeatingMoldZones DO
    b := fUpdateHeatingZone(i, mHeatingMoldGeneral, yHeatingZonesMold[i], sv_EM63.SetCfgMldZn[i], sv_EM77.SetCfgMldZn[i]);
    IF (NOT b) THEN
        EXIT;        
    END_IF;
END_FOR;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
