(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards". 

Helper for mold height adjustment
try to stretch the toggle lever
if not possible move backward a defined pos
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, REAL_TO_FORMATTED_STRING
, tevStartRequest
, tsTraceLevel
, FBDebugTrace
, tsDeviceId
, FBCheckReady
, FBCheckPosReached
, tevStartRequestData
, FBStop
, FBMoveMHTimeOrImpulses

END_IMPORT

ALGORITHM_BLOCK ABAdjustStretchToggleLever #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
 sv_bOpenMHUntilProtectStep : BOOL;
END_VAR

SYSTEM_OBJECT
 evStartRequest : tevStartRequest;
 erMoldHeightAdjustAborted : ALARM;
END_OBJECT

VAR
 fbDebugTrace : FBDebugTrace;
END_VAR

(*
Stretch the toggle lever:

try to close mold
if not possible (standstill before pos 0)
  open mold again
  move mold height backward
  try again
  
mold close possible -> done
*)

ALGORITHM aRun


VAR_INPUT
 bStop : BOOL;
 DeviceIdMold : tsDeviceId;
 DeviceIdMoldHeight : tsDeviceId;
 bUseImpulses : BOOL (* TRUE: count impulses in bwd movement FALSE: timed bwd movement *);
 iImpulses : UDINT (* impulses to move backward if mold can not close *);
 dTime : TIME (* time to move backward if mold can not close *);
END_VAR

VAR_OUTPUT
 bReady : BOOL (* movement stopped with error or success *);
 bSuccess : BOOL (* if the toggle lever could be stretched *);
END_VAR

VAR
 bMoldOpen : BOOL;
 fbCheckReady : FBCheckReady;
 fbCheckPosReached : FBCheckPosReached;
 evStartRequestData : tevStartRequestData;
 bMoldClosed : BOOL;
 bMoldCloseReady : BOOL;
 bMoldOpenReady : BOOL;
 fbStop : FBStop;
 dWaitAfterCloseDelay : TIME := t#100ms;
 fbMoveTimeOrImpulses : FBMoveMHTimeOrImpulses;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP START:
aPreparAdjustment (P);
END_STEP


(* steps *)
STEP S_MoldClose:
aCloseMold (P);
aCheckMoldClosed (N);
END_STEP

STEP Step35:
END_STEP

STEP S_OpenMold:
aOpenMold (P);
aCheckMoldOpen (N);
END_STEP

STEP S_MHBwd:
Action66 (N);
END_STEP

ACTION Action66: #BEGIN_EDIT_BLOCK
fbMoveTimeOrImpulses(bUseImpulses := bUseImpulses, dTime := dTime, iImpulses := iImpulses,
                    DeviceId := DeviceIdMoldHeight, MoveDir := cMoveBwd, MoveId := cMoveBwd);

;#END_EDIT_BLOCK END_ACTION (*Action66*)
STEP Step26:
END_STEP

STEP Step50:
Action67 (N);
END_STEP

ACTION Action67: #BEGIN_EDIT_BLOCK
SET_ALARM(erMoldHeightAdjustAborted);
//FIXME: maybe use different alarm

;#END_EDIT_BLOCK END_ACTION (*Action67*)
STEP S_TryAgain:
END_STEP

STEP S_Done:
aDone (P);
END_STEP

ACTION aDone: #BEGIN_EDIT_BLOCK
//toggle lever is stretched
bSuccess := TRUE;

;#END_EDIT_BLOCK END_ACTION (*aDone*)
STEP S_Stop:
aFailed (N);
END_STEP

ACTION aFailed: #BEGIN_EDIT_BLOCK
bSuccess := FALSE;

;#END_EDIT_BLOCK END_ACTION (*aFailed*)
STEP S_Restart:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
//stop active movement
IF bStop THEN
    fbStop(DeviceId := DeviceIdMold);
    fbStop(DeviceId := DeviceIdMoldHeight);
END_IF;

sv_bOpenMHUntilProtectStep :=FALSE;

bReady := TRUE;

;#END_EDIT_BLOCK END_ACTION (*AStop*)

(* transitions *)
TRANSITION TStart FROM START TO S_MoldClose :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TMoldCloseReady FROM S_MoldClose TO Step35 :=  #BEGIN_EDIT_BLOCK
S_MoldClose.T >= dWaitAfterCloseDelay AND bMoldCloseReady
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans54 FROM Step35 TO S_OpenMold :=  #BEGIN_EDIT_BLOCK
NOT bMoldClosed
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TMoldClosed FROM Step35 TO S_Done :=  #BEGIN_EDIT_BLOCK
bMoldClosed
// mold could be closed,
// our part is done
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TStopMoldClose FROM S_MoldClose TO S_Stop :=  #BEGIN_EDIT_BLOCK
S_MoldClose.T >= dWaitAfterCloseDelay AND bStop
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TMoldIsOpen FROM S_OpenMold TO S_MHBwd :=  #BEGIN_EDIT_BLOCK
bMoldOpenReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans76 FROM S_OpenMold TO S_Stop :=  #BEGIN_EDIT_BLOCK
bStop
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TAdjustBwdReady FROM S_MHBwd TO Step26 :=  #BEGIN_EDIT_BLOCK
fbMoveTimeOrImpulses.bDone

//AND
//fbMoveTimeOrImpulses.
//bAdjustBwdReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TStopAdjBwd FROM S_MHBwd TO S_Stop :=  #BEGIN_EDIT_BLOCK
bStop

//OR
//(fbMoveTimeOrImpulses.bDone AND NOT fbMoveTimeOrImpulses.bAtTargetPos)
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION AdjBwdPosReached FROM Step26 TO S_TryAgain :=  #BEGIN_EDIT_BLOCK
fbMoveTimeOrImpulses.bAtTargetPos

//sv_MoldHeightEndpoints.bPositionForStepReached
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION AdjBwdPosNotReached FROM Step26 TO Step50 :=  #BEGIN_EDIT_BLOCK
NOT fbMoveTimeOrImpulses.bAtTargetPos

//NOT sv_MoldHeightEndpoints.bPositionForStepReached
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans75 FROM Step50 TO S_Stop :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans60 FROM S_TryAgain TO S_MoldClose :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans57 FROM S_TryAgain TO S_Done :=  #BEGIN_EDIT_BLOCK
FALSE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans73 FROM S_Done TO S_Restart :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans71 FROM S_TryAgain TO S_Stop :=  #BEGIN_EDIT_BLOCK
FALSE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans72 FROM S_Stop TO S_Restart :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans74 FROM S_Restart TO START :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aPreparAdjustment: #BEGIN_EDIT_BLOCK
bReady := FALSE;
bSuccess := FALSE;

IF sv_TraceLevel.bApplication THEN   
    fbDebugTrace(sText := 'StretchToggleLever: start');
END_IF;


;#END_EDIT_BLOCK END_ACTION (*aPreparAdjustment*)
ACTION aCloseMold: #BEGIN_EDIT_BLOCK
// Start the mold close movement

IF sv_TraceLevel.bApplication THEN   
    fbDebugTrace(sText := 'StretchToggleLever: closing Mold');
END_IF;

evStartRequestData.DeviceId := DeviceIdMold;
evStartRequestData.MoveDir := cMoveFwd; 
evStartRequestData.MoveId := cMoveFwdForMHAdjustSetup;
SET_EVENT(evStartRequest, evStartRequestData);



;#END_EDIT_BLOCK END_ACTION (*aCloseMold*)
ACTION aCheckMoldClosed: #BEGIN_EDIT_BLOCK
//Check the status of mold close movement
// - Finished
// - PositionReached
fbCheckReady(DeviceId := DeviceIdMold,
             bReady => bMoldCloseReady);
fbCheckPosReached(DeviceId := DeviceIdMold,
                  MoveDir := cMoveFwd,
                  MoveId := cMoveFwdForMHAdjustSetup,
                  bPosReached => bMoldClosed);

;#END_EDIT_BLOCK END_ACTION (*aCheckMoldClosed*)
ACTION aOpenMold: #BEGIN_EDIT_BLOCK
// Start the mold open movement until protect step
IF sv_TraceLevel.bApplication THEN   
    fbDebugTrace(sText := 'StretchToggleLever: opening Mold');
END_IF;

sv_bOpenMHUntilProtectStep := TRUE;

evStartRequestData.DeviceId := DeviceIdMold;
evStartRequestData.MoveDir := cMoveBwd; 
evStartRequestData.MoveId := cMoveBwdForMHAdjustSetup;
SET_EVENT(evStartRequest, evStartRequestData); 

;#END_EDIT_BLOCK END_ACTION (*aOpenMold*)
ACTION aCheckMoldOpen: #BEGIN_EDIT_BLOCK
// MoldHeightAdjustN.ABAdjustForceOpenLoop.paRun.aCheckMoldOpen.Check the status of mold open movement
// - Finished
// - PositionReached

fbCheckReady(DeviceId := DeviceIdMold,
             bReady => bMoldOpenReady);
fbCheckPosReached(DeviceId := DeviceIdMold,
                  MoveDir := cMoveBwd,
                  MoveId := cMoveBwdForMHAdjustSetup,
                  bPosReached => bMoldOpen);

;#END_EDIT_BLOCK END_ACTION (*aCheckMoldOpen*)
(* end sfc-code *)


END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 30 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards". 

Helper for mold height adjustment
try to stretch the toggle lever
if not possible move backward a defined pos
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)REAL_TO_FORMATTED_STRING @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(26)ABAdjustStretchToggleLever @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(14)evStartRequest @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tevStartRequest @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)erMoldHeightAdjustAborted @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(26)sv_bOpenMHUntilProtectStep @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

1 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
18 
@Var @RT(5)bStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)DeviceIdMold @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)DeviceIdMoldHeight @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)bUseImpulses @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(62)TRUE: count impulses in bwd movement FALSE: timed bwd movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)iImpulses @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(47)impulses to move backward if mold can not close @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)dTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)time to move backward if mold can not close @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)movement stopped with error or success @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(8)bSuccess @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)if the toggle lever could be stretched @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)bMoldOpen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbCheckReady @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBCheckReady @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)fbCheckPosReached @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)FBCheckPosReached @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)evStartRequestData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tevStartRequestData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bMoldClosed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bMoldCloseReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)bMoldOpenReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)fbStop @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)FBStop @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)dWaitAfterCloseDelay @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(7)t#100ms @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)fbMoveTimeOrImpulses @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)FBMoveMHTimeOrImpulses @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_SfcBody 
68 51 77 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(5)START @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)aPreparAdjustment @F @F @RT(1)P @RT(0) @F @F @T @F 

@Trans @RT(6)TStart @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans1 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 9 
@Step @RT(11)S_MoldClose @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(10)aCloseMold @F @F @RT(1)P @RT(0) @F @F @T @F 
@Acb @RT(16)aCheckMoldClosed @F @F @RT(1)N @RT(0) @F @F @T @F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(15)TMoldCloseReady @F @T @F @F @T @T @TL(2)
S_MoldClose.T >= dWaitAfterCloseDelay AND bMoldCloseReady

@RT(7)Trans35 @F 
@Step @RT(6)Step35 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans54 @F @T @F @F @T @F @TL(2)
NOT bMoldClosed

@RT(7)Trans54 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(11)TMoldClosed @F @T @F @F @T @F @TL(4)
bMoldClosed
// mold could be closed,
// our part is done

@RT(7)Trans55 @F 
@Goto @RT(6)S_Done @F @F 



@TransSeq @RT(4)tseq @F 2 
@Trans @RT(14)TStopMoldClose @F @T @F @F @T @T @TL(2)
S_MoldClose.T >= dWaitAfterCloseDelay AND bStop

@RT(7)Trans36 @F 
@Goto @RT(6)S_Stop @F @F 


@Step @RT(10)S_OpenMold @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(9)aOpenMold @F @F @RT(1)P @RT(0) @F @F @T @F 
@Acb @RT(14)aCheckMoldOpen @F @F @RT(1)N @RT(0) @F @F @T @F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(11)TMoldIsOpen @F @T @F @F @T @T @TL(2)
bMoldOpenReady

@RT(7)Trans20 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans76 @F @T @F @F @T @T @TL(2)
bStop

@RT(7)Trans76 @F 
@Goto @RT(6)S_Stop @F @F 


@Step @RT(7)S_MHBwd @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action66 @F @T @RT(1)N @RT(0) @F @F @T @TL(3)
fbMoveTimeOrImpulses(bUseImpulses := bUseImpulses, dTime := dTime, iImpulses := iImpulses,
                    DeviceId := DeviceIdMoldHeight, MoveDir := cMoveBwd, MoveId := cMoveBwd);

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(15)TAdjustBwdReady @F @T @F @F @T @T @TL(6)
fbMoveTimeOrImpulses.bDone

//AND
//fbMoveTimeOrImpulses.
//bAdjustBwdReady

@RT(7)Trans38 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(11)TStopAdjBwd @F @T @F @F @T @T @TL(5)
bStop

//OR
//(fbMoveTimeOrImpulses.bDone AND NOT fbMoveTimeOrImpulses.bAtTargetPos)

@RT(7)Trans39 @F 
@Goto @RT(6)S_Stop @F @F 


@Step @RT(6)Step26 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(16)AdjBwdPosReached @F @T @F @F @T @F @TL(4)
fbMoveTimeOrImpulses.bAtTargetPos

//sv_MoldHeightEndpoints.bPositionForStepReached

@RT(6)Trans9 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(19)AdjBwdPosNotReached @F @T @F @F @T @F @TL(4)
NOT fbMoveTimeOrImpulses.bAtTargetPos

//NOT sv_MoldHeightEndpoints.bPositionForStepReached

@RT(7)Trans40 @F 
@Step @RT(6)Step50 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action67 @F @T @RT(1)N @RT(0) @F @F @T @TL(3)
SET_ALARM(erMoldHeightAdjustAborted);
//FIXME: maybe use different alarm

@F 

@Trans @RT(7)Trans75 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans75 @F 
@Goto @RT(6)S_Stop @F @F 


@Step @RT(10)S_TryAgain @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 


@Trans @RT(7)Trans60 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans60 @F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(7)Trans57 @F @T @F @F @T @T @TL(2)
FALSE

@RT(7)Trans57 @F 
@Step @RT(6)S_Done @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)aDone @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
//toggle lever is stretched
bSuccess := TRUE;

@F 

@Trans @RT(7)Trans73 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans73 @F 

@TransSeq @RT(4)tseq @F 3 
@Trans @RT(7)Trans71 @F @T @F @F @T @T @TL(2)
FALSE

@RT(7)Trans71 @F 
@Step @RT(6)S_Stop @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)aFailed @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
bSuccess := FALSE;

@F 

@Trans @RT(7)Trans72 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans72 @F 


@Step @RT(9)S_Restart @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(10)
//stop active movement
IF bStop THEN
    fbStop(DeviceId := DeviceIdMold);
    fbStop(DeviceId := DeviceIdMoldHeight);
END_IF;

sv_bOpenMHUntilProtectStep :=FALSE;

bReady := TRUE;

@F 


@Trans @RT(7)Trans74 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans74 @F 

@END_SfcData 
@SaActions 5 
@SaText @RT(17)aPreparAdjustment 1 @TL(8)
bReady := FALSE;
bSuccess := FALSE;

IF sv_TraceLevel.bApplication THEN   
    fbDebugTrace(sText := 'StretchToggleLever: start');
END_IF;



@SaText @RT(10)aCloseMold 1 @TL(13)
// Start the mold close movement

IF sv_TraceLevel.bApplication THEN   
    fbDebugTrace(sText := 'StretchToggleLever: closing Mold');
END_IF;

evStartRequestData.DeviceId := DeviceIdMold;
evStartRequestData.MoveDir := cMoveFwd; 
evStartRequestData.MoveId := cMoveFwdForMHAdjustSetup;
SET_EVENT(evStartRequest, evStartRequestData);




@SaText @RT(16)aCheckMoldClosed 1 @TL(10)
//Check the status of mold close movement
// - Finished
// - PositionReached
fbCheckReady(DeviceId := DeviceIdMold,
             bReady => bMoldCloseReady);
fbCheckPosReached(DeviceId := DeviceIdMold,
                  MoveDir := cMoveFwd,
                  MoveId := cMoveFwdForMHAdjustSetup,
                  bPosReached => bMoldClosed);


@SaText @RT(9)aOpenMold 1 @TL(12)
// Start the mold open movement until protect step
IF sv_TraceLevel.bApplication THEN   
    fbDebugTrace(sText := 'StretchToggleLever: opening Mold');
END_IF;

sv_bOpenMHUntilProtectStep := TRUE;

evStartRequestData.DeviceId := DeviceIdMold;
evStartRequestData.MoveDir := cMoveBwd; 
evStartRequestData.MoveId := cMoveBwdForMHAdjustSetup;
SET_EVENT(evStartRequest, evStartRequestData); 


@SaText @RT(14)aCheckMoldOpen 1 @TL(11)
// MoldHeightAdjustN.ABAdjustForceOpenLoop.paRun.aCheckMoldOpen.Check the status of mold open movement
// - Finished
// - PositionReached

fbCheckReady(DeviceId := DeviceIdMold,
             bReady => bMoldOpenReady);
fbCheckPosReached(DeviceId := DeviceIdMold,
                  MoveDir := cMoveBwd,
                  MoveId := cMoveBwdForMHAdjustSetup,
                  bPosReached => bMoldOpen);


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(9)
Stretch the toggle lever:

try to close mold
if not possible (standstill before pos 0)
  open mold again
  move mold height backward
  try again
  
mold close possible -> done
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
