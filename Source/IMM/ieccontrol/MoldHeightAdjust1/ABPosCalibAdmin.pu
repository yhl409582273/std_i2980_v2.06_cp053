(*
This algo block contains the function for:
- setting the mold height origin position
- calculation of the distance per impulse value for further position calculation
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, RESET_ALARM
, tsMoldHeightPositions
, tsMoldHeightSetupPosMeasurement

END_IMPORT

ALGORITHM_BLOCK ABPosCalibAdmin #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_MoldHeightPositions : tsMoldHeightPositions;
 sv_MoldHeightSetPosMeasurement : tsMoldHeightSetupPosMeasurement;
 sv_rDistancePerImpulse : REAL;
 sv_bSetMoldHeightOrigin : BOOL;
 sv_bCalculateDistancePerImpulse : BOOL;
 sv_rActMoldHeightPosition : REAL;
 sv_iAbsoluteImpulsesFromOrigin : DINT;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 erSetMoldHeightOriginFirst : ALARM;
 erMoveToDifferentMoldHeightPos : ALARM;
 erEnterActualMoldHeightPos : ALARM;
END_OBJECT

VAR
 bMoldHeightOriginSet : BOOL;
END_VAR

(*
This algo sets the mold height origin position
*)

POSTUPDATE_ALGORITHM pSetMoldHeightOrigin ON PU_Task_7 WITH sv_bSetMoldHeightOrigin

#BEGIN_EDIT_BLOCK
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetMoldHeightOrigin.Reset alarm which is activated if the
                                            user wanted to calculate the distance per impulse value 
                                            before setting the origin position.*)                     
IF sv_bSetMoldHeightOrigin THEN        
    RESET_ALARM(erSetMoldHeightOriginFirst);
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetMoldHeightOrigin.Store the actual mold height position 
                                            as origin position and indicate the successful setting.*)
    sv_rActMoldHeightPosition := sv_MoldHeightPositions.rOriginMoldHeightPosition;
    bMoldHeightOriginSet := TRUE;
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetMoldHeightOrigin.By setting the origin position the position measurement
                                            is not valid any more and a new calibration of mold height
                                            position measurement is required.*)
    sv_MoldHeightSetPosMeasurement.bDistancePerImpulseValid := FALSE;  
    sv_iAbsoluteImpulsesFromOrigin := 0;
    sv_bSetMoldHeightOrigin := FALSE;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

(*
Calculation of the distance per impulse value for further position calculation
*)

POSTUPDATE_ALGORITHM pSetDistancePerImpulse ON PU_Task_7 WITH sv_bCalculateDistancePerImpulse

#BEGIN_EDIT_BLOCK
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.Reset alarm which is activated if the
                                            user wanted to calculate the distance per impulse value 
                                            before setting the origin position.
                                            Set it again if the origin is still not set.
                                                Also Reset the alarm for telling the user that for
                                            calculating a distance per impulse value the mold height
                                            position must be different from the origin position
                                            (both, the measured position and the position set on the hmi.
                                            Set the alarms again if the position are still the same as 
                                            the origin position.*)  
IF sv_bCalculateDistancePerImpulse THEN
    RESET_ALARM(erSetMoldHeightOriginFirst);
    RESET_ALARM(erMoveToDifferentMoldHeightPos);
    RESET_ALARM(erEnterActualMoldHeightPos);                  
    
    
    IF bMoldHeightOriginSet THEN
        IF sv_iAbsoluteImpulsesFromOrigin <> 0 AND sv_MoldHeightSetPosMeasurement.rSecondPositionForCalculation <> sv_MoldHeightPositions.rOriginMoldHeightPosition THEN
    (*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.If the mold height origin is set, 
                                                the mold height has been moved AND a corresponding actual mold height 
                                                position has been entered the calculation of distance per impulse
                                                works like this:
                                                Distance = ABS(Origin Position - Actual Position)
                                                Distance per Impulse = Dinstance / Impulses from Origin to here.
                                                *)                     
            sv_rDistancePerImpulse := ABS(sv_MoldHeightPositions.rOriginMoldHeightPosition - sv_MoldHeightSetPosMeasurement.rSecondPositionForCalculation)/DINT_TO_REAL(ABS(sv_iAbsoluteImpulsesFromOrigin));
    (*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.Instead of showing a message that the calculation
                                                of distance per impulse is finished the 
                                                bDistancePerImpulseValid flag is displayed on the hmi.*)
            sv_MoldHeightSetPosMeasurement.bDistancePerImpulseValid := TRUE;
        ELSE
    (*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.If the conditions for distance per impulse calc
                                                are not fulfilled set the correspongin alarm.*)
            IF sv_iAbsoluteImpulsesFromOrigin <> 0 THEN
                SET_ALARM(erMoveToDifferentMoldHeightPos);
            ELSIF sv_MoldHeightSetPosMeasurement.rSecondPositionForCalculation <> sv_MoldHeightPositions.rOriginMoldHeightPosition THEN
                SET_ALARM(erEnterActualMoldHeightPos);        
            END_IF;
        END_IF;
    ELSE
        SET_ALARM(erSetMoldHeightOriginFirst);
    END_IF;
    sv_bCalculateDistancePerImpulse := FALSE;
END_IF;   


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@
This algo block contains the function for:
- setting the mold height origin position
- calculation of the distance per impulse value for further position calculation
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABPosCalibAdmin @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)sv_MoldHeightPositions @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tsMoldHeightPositions @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_MoldHeightSetPosMeasurement @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(31)tsMoldHeightSetupPosMeasurement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)bMoldHeightOriginSet @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(26)erSetMoldHeightOriginFirst @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(30)erMoveToDifferentMoldHeightPos @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)sv_rDistancePerImpulse @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bSetMoldHeightOrigin @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(31)sv_bCalculateDistancePerImpulse @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_rActMoldHeightPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_iAbsoluteImpulsesFromOrigin @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)erEnterActualMoldHeightPos @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pSetMoldHeightOrigin @STRUCTURED_TEXT 
@RT(0) @RT(23)sv_bSetMoldHeightOrigin @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(22)pSetDistancePerImpulse @STRUCTURED_TEXT 
@RT(0) @RT(31)sv_bCalculateDistancePerImpulse @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(18)
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetMoldHeightOrigin.Reset alarm which is activated if the
                                            user wanted to calculate the distance per impulse value 
                                            before setting the origin position.*)                     
IF sv_bSetMoldHeightOrigin THEN        
    RESET_ALARM(erSetMoldHeightOriginFirst);
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetMoldHeightOrigin.Store the actual mold height position 
                                            as origin position and indicate the successful setting.*)
    sv_rActMoldHeightPosition := sv_MoldHeightPositions.rOriginMoldHeightPosition;
    bMoldHeightOriginSet := TRUE;
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetMoldHeightOrigin.By setting the origin position the position measurement
                                            is not valid any more and a new calibration of mold height
                                            position measurement is required.*)
    sv_MoldHeightSetPosMeasurement.bDistancePerImpulseValid := FALSE;  
    sv_iAbsoluteImpulsesFromOrigin := 0;
    sv_bSetMoldHeightOrigin := FALSE;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
This algo sets the mold height origin position
@@@END_Comment@@@ 

@BEG_Body 
@TL(45)
(*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.Reset alarm which is activated if the
                                            user wanted to calculate the distance per impulse value 
                                            before setting the origin position.
                                            Set it again if the origin is still not set.
                                                Also Reset the alarm for telling the user that for
                                            calculating a distance per impulse value the mold height
                                            position must be different from the origin position
                                            (both, the measured position and the position set on the hmi.
                                            Set the alarms again if the position are still the same as 
                                            the origin position.*)  
IF sv_bCalculateDistancePerImpulse THEN
    RESET_ALARM(erSetMoldHeightOriginFirst);
    RESET_ALARM(erMoveToDifferentMoldHeightPos);
    RESET_ALARM(erEnterActualMoldHeightPos);                  
    
    
    IF bMoldHeightOriginSet THEN
        IF sv_iAbsoluteImpulsesFromOrigin <> 0 AND sv_MoldHeightSetPosMeasurement.rSecondPositionForCalculation <> sv_MoldHeightPositions.rOriginMoldHeightPosition THEN
    (*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.If the mold height origin is set, 
                                                the mold height has been moved AND a corresponding actual mold height 
                                                position has been entered the calculation of distance per impulse
                                                works like this:
                                                Distance = ABS(Origin Position - Actual Position)
                                                Distance per Impulse = Dinstance / Impulses from Origin to here.
                                                *)                     
            sv_rDistancePerImpulse := ABS(sv_MoldHeightPositions.rOriginMoldHeightPosition - sv_MoldHeightSetPosMeasurement.rSecondPositionForCalculation)/DINT_TO_REAL(ABS(sv_iAbsoluteImpulsesFromOrigin));
    (*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.Instead of showing a message that the calculation
                                                of distance per impulse is finished the 
                                                bDistancePerImpulseValid flag is displayed on the hmi.*)
            sv_MoldHeightSetPosMeasurement.bDistancePerImpulseValid := TRUE;
        ELSE
    (*@ MoldHeightAdjustN.ABPosCalibAdmin.pSetDistancePerImpulse.If the conditions for distance per impulse calc
                                                are not fulfilled set the correspongin alarm.*)
            IF sv_iAbsoluteImpulsesFromOrigin <> 0 THEN
                SET_ALARM(erMoveToDifferentMoldHeightPos);
            ELSIF sv_MoldHeightSetPosMeasurement.rSecondPositionForCalculation <> sv_MoldHeightPositions.rOriginMoldHeightPosition THEN
                SET_ALARM(erEnterActualMoldHeightPos);        
            END_IF;
        END_IF;
    ELSE
        SET_ALARM(erSetMoldHeightOriginFirst);
    END_IF;
    sv_bCalculateDistancePerImpulse := FALSE;
END_IF;   

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Calculation of the distance per impulse value for further position calculation
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
