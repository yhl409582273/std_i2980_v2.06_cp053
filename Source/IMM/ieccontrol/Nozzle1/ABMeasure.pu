(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This block measures the actual nozzle position and nozzle velocity if a transducer is mounted.
*)

IMPORT_OVER_LISTFILE
 GET_MY_FU_NAME
, KSWO_AddVariable
, RESET_ALARM
, WRITE_SVREAL_DIRECT
, KAPPL_LintabData_2P
, KAPPL_MeasureMonitoring
, tnMovementMode
, tsDeviceId
, ABMeasureAI
, KSWO_Status

END_IMPORT

ALGORITHM_BLOCK ABMeasure #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_rNozzlePosition : REAL;
 sv_rNozzleVelocity : REAL;
 ai_Position : REAL;
 sv_NozzleLintab : KAPPL_LintabData_2P;
 sv_bTransducerError : BOOL;
 sv_NozzlePosMonitorMeas : KAPPL_MeasureMonitoring;
 sv_rNozzlePositionOffset : REAL;
 sv_bDeviceReady : BOOL;
 sv_MovementMode : tnMovementMode;
 sv_DeviceId : tsDeviceId;
 ai_Position_stat : BOOL (* sensor state   (TRUE = sensor error) *);
END_VAR

SYSTEM_OBJECT
 TaskAnalog : TASK;
 TaskSlow : TASK;
 erAnalogInput : ALARM;
END_OBJECT

PROCESS_ALGORITHM paMeasure ON TaskAnalog(1000) AUTOSTART


VAR_TEMP
 rNozzlePosition : REAL;
 b : BOOL;
END_VAR

VAR
 abNozzleMeasure : ABMeasureAI;
 sSensorName : STRING(64);
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Start:
END_STEP


(* steps *)
STEP S_Stop:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStop*)
STEP S_Init:
AGetSensorName (P);
AInitMeasureBlock (P);
END_STEP

STEP S_Measure:
AMeasure (N);
END_STEP

STEP S_TransducerError:
AResetAlarm (P);
END_STEP

ACTION AResetAlarm: #BEGIN_EDIT_BLOCK
//reset alarm in case of transducer errror
//to allow autocycle if movement mode is not position dependent
RESET_ALARM(Name := erAnalogInput,
            SubID1 := sv_DeviceId.CompId,
            SubID2 := sv_DeviceId.IndexId,
            SubID3 := ANY);

;#END_EDIT_BLOCK END_ACTION (*AResetAlarm*)
STEP S_Restart:
ACheckSensorState (P);
END_STEP

ACTION ACheckSensorState: #BEGIN_EDIT_BLOCK
//set sensor alarm again if sensor state is still not ok
IF ai_Position_stat THEN
   SET_ALARM(Name := erAnalogInput,
             SubID1 := sv_DeviceId.CompId,
             SubID2 := sv_DeviceId.IndexId,
             Param1 := sSensorName);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACheckSensorState*)

(* transitions *)
TRANSITION TLinked (* TLinked *) FROM S_Start TO S_Init :=  #BEGIN_EDIT_BLOCK
IS_LINKED(ai_Position)
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TNotLinked (* TNotLinked *) FROM S_Start TO S_Stop :=  #BEGIN_EDIT_BLOCK
NOT IS_LINKED(ai_Position)
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TStop (* TStop *) FROM S_Stop TO S_Start :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TInitDone (* TInitDone *) FROM S_Init TO S_Measure :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TSensorError (* Trans5 *) FROM S_Measure TO S_TransducerError :=  #BEGIN_EDIT_BLOCK
sv_bTransducerError AND sv_MovementMode <> nPositionDependent 
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TRestartMeasure (* Trans7 *) FROM S_TransducerError TO S_Restart :=  #BEGIN_EDIT_BLOCK
sv_MovementMode = nPositionDependent
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TMeasure (* Trans6 *) FROM S_Restart TO S_Measure :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AGetSensorName: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sSensorName := CONCAT(GET_MY_FU_NAME(),'.ai_Position');

;#END_EDIT_BLOCK END_ACTION (*AGetSensorName*)
ACTION AMeasure: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abNozzleMeasure.aRun(bIdle := sv_bDeviceReady,
                     bSensorError => sv_bTransducerError);
b := WRITE_SVREAL_DIRECT(sv_rNozzleVelocity, abNozzleMeasure.aRun.rVelocity); 
rNozzlePosition := abNozzleMeasure.aRun.rValue + sv_rNozzlePositionOffset;
b := WRITE_SVREAL_DIRECT(sv_rNozzlePosition, rNozzlePosition); 

;#END_EDIT_BLOCK END_ACTION (*AMeasure*)
ACTION AInitMeasureBlock: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abNozzleMeasure.aInit(sRawValue := sSensorName,
                      pLintabPointArray := @sv_NozzleLintab.LintabPoints.Point,
                      piUsedLintabPoints := @sv_NozzleLintab.LintabPoints.uNoOfPoints);

abNozzleMeasure.aInitMonitoring(bEnable := sv_NozzlePosMonitorMeas.EnableMonitoring,
                                rLowLimit := sv_NozzlePosMonitorMeas.LowerLimit,
                                bLimitation := sv_NozzlePosMonitorMeas.Limitation,
                                rFailureFactor := sv_NozzlePosMonitorMeas.FailureFactor);

;#END_EDIT_BLOCK END_ACTION (*AInitMeasureBlock*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paInitDebugMeasurement ON TaskSlow AUTOSTART


VAR
 variableName : STRING(255);
 swoState : KSWO_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

variableName := CONCAT(GET_MY_FU_NAME(),'.rPosition mm');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rNozzlePosition);
variableName := CONCAT(GET_MY_FU_NAME(),'.rVelocity mm/s');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rNozzleVelocity);
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This block measures the actual nozzle position and nozzle velocity if a transducer is mounted.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(14)GET_MY_FU_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KSWO_AddVariable @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)WRITE_SVREAL_DIRECT @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
14 
@Var @RT(18)sv_rNozzlePosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_rNozzleVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)ai_Position @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_NozzleLintab @RT(0) @T @T @DERIVED 0 @F @RT(19)KAPPL_LintabData_2P @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_bTransducerError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_NozzlePosMonitorMeas @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)KAPPL_MeasureMonitoring @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_rNozzlePositionOffset @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)sv_MovementMode @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(14)tnMovementMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)erAnalogInput @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)ai_Position_stat @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)sensor state   (TRUE = sensor error) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(9)paMeasure @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(16)TaskAnalog(1000) @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(15)abNozzleMeasure @RT(0) @T @T @DERIVED 0 @F @RT(11)ABMeasureAI @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sSensorName @RT(0) @T @F @DT @RT(10)STRING(64) @RT(0) @T @T @STRING 0 @F @RT(2)64 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rNozzlePosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(22)paInitDebugMeasurement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(12)variableName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)swoState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_SfcBody 
7 8 8 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(7)S_Start @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)TLinked @F @T @F @F @T @T @TL(2)
IS_LINKED(ai_Position)

@RT(7)TLinked @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(10)TNotLinked @F @T @F @F @T @T @TL(2)
NOT IS_LINKED(ai_Position)

@RT(10)TNotLinked @F 
@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(5)TStop @F @T @F @F @T @T @TL(2)
TRUE

@RT(5)TStop @F 
@Goto @RT(7)S_Start @F @F 


@Step @RT(6)S_Init @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(14)AGetSensorName @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(17)AInitMeasureBlock @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(9)TInitDone @F @T @F @F @T @T @TL(2)
TRUE

@RT(9)TInitDone @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(9)S_Measure @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)AMeasure @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(12)TSensorError @F @T @F @F @T @T @TL(2)
sv_bTransducerError AND sv_MovementMode <> nPositionDependent 

@RT(6)Trans5 @F 
@Step @RT(17)S_TransducerError @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)AResetAlarm @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
//reset alarm in case of transducer errror
//to allow autocycle if movement mode is not position dependent
RESET_ALARM(Name := erAnalogInput,
            SubID1 := sv_DeviceId.CompId,
            SubID2 := sv_DeviceId.IndexId,
            SubID3 := ANY);

@F 

@Trans @RT(15)TRestartMeasure @F @T @F @F @T @T @TL(2)
sv_MovementMode = nPositionDependent

@RT(6)Trans7 @F 
@Step @RT(9)S_Restart @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)ACheckSensorState @F @T @RT(1)P @RT(0) @F @F @T @TL(8)
//set sensor alarm again if sensor state is still not ok
IF ai_Position_stat THEN
   SET_ALARM(Name := erAnalogInput,
             SubID1 := sv_DeviceId.CompId,
             SubID2 := sv_DeviceId.IndexId,
             Param1 := sSensorName);
END_IF;

@F 


@Trans @RT(8)TMeasure @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans6 @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(14)AGetSensorName 1 @TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sSensorName := CONCAT(GET_MY_FU_NAME(),'.ai_Position');


@SaText @RT(8)AMeasure 1 @TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abNozzleMeasure.aRun(bIdle := sv_bDeviceReady,
                     bSensorError => sv_bTransducerError);
b := WRITE_SVREAL_DIRECT(sv_rNozzleVelocity, abNozzleMeasure.aRun.rVelocity); 
rNozzlePosition := abNozzleMeasure.aRun.rValue + sv_rNozzlePositionOffset;
b := WRITE_SVREAL_DIRECT(sv_rNozzlePosition, rNozzlePosition); 


@SaText @RT(17)AInitMeasureBlock 1 @TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abNozzleMeasure.aInit(sRawValue := sSensorName,
                      pLintabPointArray := @sv_NozzleLintab.LintabPoints.Point,
                      piUsedLintabPoints := @sv_NozzleLintab.LintabPoints.uNoOfPoints);

abNozzleMeasure.aInitMonitoring(bEnable := sv_NozzlePosMonitorMeas.EnableMonitoring,
                                rLowLimit := sv_NozzlePosMonitorMeas.LowerLimit,
                                bLimitation := sv_NozzlePosMonitorMeas.Limitation,
                                rFailureFactor := sv_NozzlePosMonitorMeas.FailureFactor);


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

variableName := CONCAT(GET_MY_FU_NAME(),'.rPosition mm');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rNozzlePosition);
variableName := CONCAT(GET_MY_FU_NAME(),'.rVelocity mm/s');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rNozzleVelocity);
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
