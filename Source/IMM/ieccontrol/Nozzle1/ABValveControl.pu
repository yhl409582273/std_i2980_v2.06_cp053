(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This algorithm block is responsible for set and reset the nozzle valves
*)

IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, cMoveBwd
, cCompInjection
, cMoveDecompBefPlast
, cMovePlast
, cMoveInject
, tsMoveCtrl
, tevMovementState
, tsDeviceId
, tnOperationMode
, tevMovementStateData
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABValveControl #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 do_Forward : BOOL;
 do_Backward : BOOL;
 sv_bOutputActive : BOOL (* Output is active *);
 sv_bPreOutputReady : BOOL (* PreOutput is ready *);
 sv_DeviceId : tsDeviceId;
 sv_bFwdDuringInject : BOOL (* hold nozzle fwd during inject *);
 sv_bFwdDuringPlast : BOOL (* hold nozzle fwd during plasticizing *);
 sv_bNozzleFwd : BOOL (* nozzle in forward position *);
 sv_OperationMode : tnOperationMode;
 sv_bInitStart : BOOL;
 sv_dActPressureBuildUpTime : TIME (* actual time for nozzle fwd pressure build up *);
 sv_dPreValveCloseTime : TIME (* depending on this time the do_NozzleFwd will close before sv_dNozzleFwdContactFSet is over *);
 sv_bPressBuildUpActive : BOOL (* TRUE: pressure build up is active *);
 sv_dNozzleFwdContactFSet : TIME (* set time for output of nozzle fwd pressure build up movement *);
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 EV_Task_7 : TASK;
 TaskAnalog : TASK;
 evMovementState : tevMovementState;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
END_VAR

VAR
 mbShutOffNozzleAvailable : BOOL;
 mpbShutOffNozzleClosed : REFTO BOOL;
 mbpCombinedPlastReady : REFTO BOOL;
 mbNozzleHoldActive : BOOL;
END_VAR

ALGORITHM aResetNozzleFwd

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

do_Forward := FALSE;
mbNozzleHoldActive := FALSE;



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskAnalog(10001)


VAR
 bCloseValve : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP START:
END_STEP


(* steps *)
STEP Step19:
END_STEP

STEP SET_VALVE_FWD:
ASetFwd (P);
AValveCloseCondition (N);
END_STEP

ACTION ASetFwd: #BEGIN_EDIT_BLOCK
bCloseValve := FALSE;
do_Forward := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASetFwd*)
STEP RESET_VALVE_FWD:
AResetFwd (P);
END_STEP

ACTION AResetFwd: #BEGIN_EDIT_BLOCK
do_Forward := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetFwd*)
STEP SET_VALVE_BWD:
ASetBwd (P);
END_STEP

ACTION ASetBwd: #BEGIN_EDIT_BLOCK
do_Backward := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASetBwd*)
STEP RESET_VALVE_BWD:
AResetBwd (P);
END_STEP

ACTION AResetBwd: #BEGIN_EDIT_BLOCK
do_Backward := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetBwd*)
STEP END:
Action3 (P);
END_STEP

ACTION Action3: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*Action3*)

(* transitions *)
GO_ON_TRANSITION Trans32 (* Trans32 *) FROM START TO Step19 :=  #BEGIN_EDIT_BLOCK
sv_bPreOutputReady AND
sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans33 (* Trans33 *) FROM START TO END :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans1 (* Trans1 *) FROM Step19 TO SET_VALVE_FWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir =
cMoveFwd
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans28 (* Trans28 *) FROM SET_VALVE_FWD TO RESET_VALVE_FWD :=  #BEGIN_EDIT_BLOCK
bCloseValve
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans17 (* Trans17 *) FROM RESET_VALVE_FWD TO END :=  #BEGIN_EDIT_BLOCK
TRUE    
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans3 (* Trans3 *) FROM Step19 TO SET_VALVE_BWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir =
cMoveBwd
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans6 (* Trans6 *) FROM SET_VALVE_BWD TO RESET_VALVE_BWD :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans18 (* Trans18 *) FROM RESET_VALVE_BWD TO END :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans30 (* Trans30 *) FROM Step19 TO END :=  #BEGIN_EDIT_BLOCK
NOT sv_bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans16 (* Trans16 *) FROM END TO START :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AValveCloseCondition: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//close valve earlier during pressure build up is active
IF NOT sv_bOutputActive OR (sv_bPressBuildUpActive AND 
   (sv_dActPressureBuildUpTime >= (sv_dNozzleFwdContactFSet - sv_dPreValveCloseTime))) THEN
   bCloseValve := TRUE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AValveCloseCondition*)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pOutputActive ON TaskAnalog(10000) WITH sv_bOutputActive

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bOutputActive THEN

    START_PROCESS_ALGORITHM(paRun);    
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
This event algorithm reacts on movement state events from injection function units.
According to selector values and actual operation mode
the digital output for nozzle forward is set during inject, plast and intrusion.
After end of this movements the digital output for nozzle forward is set to false.
*)

EVENT_ALGORITHM evaMovementState ON EV_Task_7 WITH evMovementState


VAR_INPUT
 evMovementStateData : tevMovementStateData;
END_VAR

VAR
 bOpModeOk : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//react only on movement state events from injection function units
IF evMovementStateData.DeviceId.CompId <> cCompInjection OR
   evMovementStateData.DeviceId.IndexId <> sv_DeviceId.IndexId THEN
   RETURN;
END_IF;

//nozzle fwd should be done in every operation mode except setup
bOpModeOk := (sv_OperationMode > nSetup);

//nozzle fwd should be done only when shutoffnozzle is not closed
IF mbShutOffNozzleAvailable THEN
   bOpModeOk := bOpModeOk AND (NOT mpbShutOffNozzleClosed^);
END_IF;

IF evMovementStateData.State = nActive AND sv_bNozzleFwd AND bOpModeOk THEN
   //movement of injection fu active and nozzle in fwd position
   
   IF (evMovementStateData.MoveId = cMoveInject AND sv_bFwdDuringInject) OR
      (evMovementStateData.MoveId = cMoveHold AND sv_bFwdDuringInject) OR 
      (evMovementStateData.MoveId = cMovePlast AND sv_bFwdDuringPlast) OR
      (evMovementStateData.MoveId = cMoveIntrusion AND sv_bFwdDuringPlast) OR
      (evMovementStateData.MoveId = cMoveDecompBefPlast AND sv_bFwdDuringPlast) OR 
      (evMovementStateData.MoveId = cMoveDecompAftPlast AND sv_bFwdDuringPlast) THEN

      //set do_Forward during inject, plast and intrusion depending on selectors
      do_Forward := TRUE;
      mbNozzleHoldActive := TRUE;
   END_IF;      
END_IF;


IF evMovementStateData.State = nInactive AND mbNozzleHoldActive THEN
   //combined plast and opmode change handled in seperate postupdate algorithms
      
   IF (sv_OperationMode = nManual) THEN
      IF mbpCombinedPlastReady^ THEN
         //operation mode = manual and combined plast not active: 
         //reset nozzle fwd after according movement is ready
         aResetNozzleFwd();
      END_IF;         
   ELSIF ((evMovementStateData.MoveId = cMoveInject) AND (NOT sv_bFwdDuringPlast)) OR
      ((evMovementStateData.MoveId = cMoveIntrusion) AND (NOT sv_bFwdDuringInject)) THEN
      //half or full auto mode:
      //inject movement ready and sv_bFwdDuringPlast not activated or
      //intrusion ready and sv_bFwdDuringInject not activated -> reset DO
      aResetNozzleFwd();
   END_IF;
      
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart


VAR
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
   mpbShutOffNozzleClosed := GET_SYNC_REFTO('ShutOffNozzle1.sv_bClosed', T#0s, Status);
   mbShutOffNozzleAvailable := Status = KSYS_Status_OK;
   mbpCombinedPlastReady := GET_SYNC_REFTO('Injection1.sv_bCombinedPlastReady', T#0s, Status);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pPlastReady ON PU_Task_7 WITH mbpCombinedPlastReady^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbpCombinedPlastReady^ AND mbNozzleHoldActive THEN
   aResetNozzleFwd();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pOpMode ON PU_Task_7 WITH sv_OperationMode


VAR
 bAutoModeActive : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode >= nHalfAutomatic THEN
   bAutoModeActive := TRUE;
ELSE   
   IF bAutoModeActive THEN
      //opmode changed from HA or FA to manual or setup mode
      IF mbNozzleHoldActive THEN
         aResetNozzleFwd();
      END_IF;
      bAutoModeActive := FALSE;
   END_IF;   
END_IF; 


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This algorithm block is responsible for set and reset the nozzle valves
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cCompInjection @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)104 @RT(19)Component Injection 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)cMoveDecompBefPlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)26 @RT(26)decompression before plast 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cMovePlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)13 @RT(23)plast movement (rotate) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)cMoveInject @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)14 @RT(15)inject movement 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABValveControl @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
23 
@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(10)do_Forward @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)do_Backward @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bOutputActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Output is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bPreOutputReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)PreOutput is ready @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)evMovementState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tevMovementState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_bFwdDuringInject @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)hold nozzle fwd during inject @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bFwdDuringPlast @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)hold nozzle fwd during plasticizing @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bNozzleFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)nozzle in forward position @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)mbShutOffNozzleAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mpbShutOffNozzleClosed @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)sv_dActPressureBuildUpTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)actual time for nozzle fwd pressure build up @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_dPreValveCloseTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(90)depending on this time the do_NozzleFwd will close before sv_dNozzleFwdContactFSet is over @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bPressBuildUpActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)TRUE: pressure build up is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_dNozzleFwdContactFSet @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(60)set time for output of nozzle fwd pressure build up movement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)mbpCombinedPlastReady @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)mbNozzleHoldActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

7 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aResetNozzleFwd @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(17)TaskAnalog(10001) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(11)bCloseValve @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pOutputActive @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_bOutputActive @RT(17)TaskAnalog(10000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(16)evaMovementState @STRUCTURED_TEXT 
@RT(0) @RT(15)evMovementState @RT(9)EV_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(19)evMovementStateData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tevMovementStateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)bOpModeOk @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(11)pPlastReady @STRUCTURED_TEXT 
@RT(0) @RT(22)mbpCombinedPlastReady^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(7)pOpMode @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_OperationMode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(15)bAutoModeActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

do_Forward := FALSE;
mbNozzleHoldActive := FALSE;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
21 18 31 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(5)START @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans32 @F @T @F @F @T @F @TL(3)
sv_bPreOutputReady AND
sv_bOutputActive

@RT(7)Trans32 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans33 @F @T @F @F @T @T @TL(2)
NOT sv_bOutputActive

@RT(7)Trans33 @F 
@Goto @RT(3)END @F @F 


@Step @RT(6)Step19 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 3 
@TransSeq @RT(4)tseq @F 5 
@Trans @RT(6)Trans1 @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir =
cMoveFwd

@RT(6)Trans1 @F 
@Step @RT(13)SET_VALVE_FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(7)ASetFwd @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
bCloseValve := FALSE;
do_Forward := TRUE;

@F 
@Acb @RT(20)AValveCloseCondition @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(7)Trans28 @F @T @F @F @T @F @TL(2)
bCloseValve

@RT(7)Trans28 @F 
@Step @RT(15)RESET_VALVE_FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AResetFwd @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
do_Forward := FALSE;

@F 

@Trans @RT(7)Trans17 @F @T @F @F @T @F @TL(2)
TRUE    

@RT(7)Trans17 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(6)Trans3 @F @T @F @F @T @F @TL(3)
g_MoveCtrl.pData^.MoveDir =
cMoveBwd

@RT(6)Trans3 @F 
@Step @RT(13)SET_VALVE_BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)ASetBwd @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
do_Backward := TRUE;

@F 

@Trans @RT(6)Trans6 @F @T @F @F @T @F @TL(2)
NOT sv_bOutputActive

@RT(6)Trans6 @F 
@Step @RT(15)RESET_VALVE_BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AResetBwd @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
do_Backward := FALSE;

@F 

@Trans @RT(7)Trans18 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans18 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans30 @F @T @F @F @T @T @TL(2)
NOT sv_bOutputActive

@RT(7)Trans30 @F 
@Goto @RT(3)END @F @F 


@Step @RT(3)END @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action3 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(7)Trans16 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans16 @F 

@END_SfcData 
@SaActions 1 
@SaText @RT(20)AValveCloseCondition 1 @TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//close valve earlier during pressure build up is active
IF NOT sv_bOutputActive OR (sv_bPressBuildUpActive AND 
   (sv_dActPressureBuildUpTime >= (sv_dNozzleFwdContactFSet - sv_dPreValveCloseTime))) THEN
   bCloseValve := TRUE;
END_IF;


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bOutputActive THEN

    START_PROCESS_ALGORITHM(paRun);    
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(55)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//react only on movement state events from injection function units
IF evMovementStateData.DeviceId.CompId <> cCompInjection OR
   evMovementStateData.DeviceId.IndexId <> sv_DeviceId.IndexId THEN
   RETURN;
END_IF;

//nozzle fwd should be done in every operation mode except setup
bOpModeOk := (sv_OperationMode > nSetup);

//nozzle fwd should be done only when shutoffnozzle is not closed
IF mbShutOffNozzleAvailable THEN
   bOpModeOk := bOpModeOk AND (NOT mpbShutOffNozzleClosed^);
END_IF;

IF evMovementStateData.State = nActive AND sv_bNozzleFwd AND bOpModeOk THEN
   //movement of injection fu active and nozzle in fwd position
   
   IF (evMovementStateData.MoveId = cMoveInject AND sv_bFwdDuringInject) OR
      (evMovementStateData.MoveId = cMoveHold AND sv_bFwdDuringInject) OR 
      (evMovementStateData.MoveId = cMovePlast AND sv_bFwdDuringPlast) OR
      (evMovementStateData.MoveId = cMoveIntrusion AND sv_bFwdDuringPlast) OR
      (evMovementStateData.MoveId = cMoveDecompBefPlast AND sv_bFwdDuringPlast) OR 
      (evMovementStateData.MoveId = cMoveDecompAftPlast AND sv_bFwdDuringPlast) THEN

      //set do_Forward during inject, plast and intrusion depending on selectors
      do_Forward := TRUE;
      mbNozzleHoldActive := TRUE;
   END_IF;      
END_IF;


IF evMovementStateData.State = nInactive AND mbNozzleHoldActive THEN
   //combined plast and opmode change handled in seperate postupdate algorithms
      
   IF (sv_OperationMode = nManual) THEN
      IF mbpCombinedPlastReady^ THEN
         //operation mode = manual and combined plast not active: 
         //reset nozzle fwd after according movement is ready
         aResetNozzleFwd();
      END_IF;         
   ELSIF ((evMovementStateData.MoveId = cMoveInject) AND (NOT sv_bFwdDuringPlast)) OR
      ((evMovementStateData.MoveId = cMoveIntrusion) AND (NOT sv_bFwdDuringInject)) THEN
      //half or full auto mode:
      //inject movement ready and sv_bFwdDuringPlast not activated or
      //intrusion ready and sv_bFwdDuringInject not activated -> reset DO
      aResetNozzleFwd();
   END_IF;
      
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(4)
This event algorithm reacts on movement state events from injection function units.
According to selector values and actual operation mode
the digital output for nozzle forward is set during inject, plast and intrusion.
After end of this movements the digital output for nozzle forward is set to false.
@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
   mpbShutOffNozzleClosed := GET_SYNC_REFTO('ShutOffNozzle1.sv_bClosed', T#0s, Status);
   mbShutOffNozzleAvailable := Status = KSYS_Status_OK;
   mbpCombinedPlastReady := GET_SYNC_REFTO('Injection1.sv_bCombinedPlastReady', T#0s, Status);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbpCombinedPlastReady^ AND mbNozzleHoldActive THEN
   aResetNozzleFwd();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode >= nHalfAutomatic THEN
   bAutoModeActive := TRUE;
ELSE   
   IF bAutoModeActive THEN
      //opmode changed from HA or FA to manual or setup mode
      IF mbNozzleHoldActive THEN
         aResetNozzleFwd();
      END_IF;
      bAutoModeActive := FALSE;
   END_IF;   
END_IF; 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
