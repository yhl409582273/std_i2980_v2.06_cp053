(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB monitors following default conditions:
If the ejector is not bwd, all mold close movements are locked.
If the ejector is not bwd, all core movements are locked.

This default conditions are not monitored in the following cases:
+ The machine sequence is created by machine sequencer and not by ODC - files
+ monitoring is deactivated (sv_bIgnoreDefaultConditions = TRUE)
+ If "override core safety" is activated, the ejector position has no influence on core movements.

*)

IMPORT_OVER_LISTFILE
 cCompCore
, FBLockUnlock
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABDefaultConditions #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bEjectorBwd : BOOL;
 sv_bInitDone : BOOL;
 sv_bInitStart : BOOL;
 sv_bIgnoreDefaultConditions : BOOL;
 sv_bOverrideCoreSafety : BOOL;
 sv_bUseProgramSwitches : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 erEjectorNotBackward : ALARM;
 PU_Task_3 : TASK;
END_OBJECT

VAR
 mpiNewSequence : REFTO DINT;
END_VAR

ALGORITHM aLockUnlock


VAR
 fbLockUnlock : FBLockUnlock;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;  //no lock / unlock before sv_bInitDone
END_IF;

IF sv_bIgnoreDefaultConditions OR NOT sv_bUseProgramSwitches THEN
   //sequence programmmed by machine sequencer or 
   //default conditions deactivated
   fbLockUnlock.Mode := nUnlock;
ELSE
   //sequence programmed by files and default conditions activated
   //-> check default conditions
   IF sv_bEjectorBwd THEN
      fbLockUnlock.Mode := nUnlock;
   ELSE
      fbLockUnlock.Mode := nLockAbort;
   END_IF;
END_IF;

//lock /unlock mold close
fbLockUnlock.DeviceId.CompId := cCompMold;
fbLockUnlock.DeviceId.IndexId := 1;
fbLockUnlock.MoveDir := cMoveFwd;
fbLockUnlock.MoveId := cMoveAll;
fbLockUnlock.Alarm.AlarmId := erEjectorNotBackward;
fbLockUnlock();

//lock / unlock all core movements if ejector is not bwd
//also consider "override core safety"
IF sv_bOverrideCoreSafety THEN
   fbLockUnlock.Mode := nUnlock;
END_IF;
fbLockUnlock.DeviceId.CompId := cCompCore;
fbLockUnlock.DeviceId.IndexId := cAllDevIndex;
fbLockUnlock.MoveDir := cMoveAll;
fbLockUnlock.MoveId := cMoveAll;
fbLockUnlock.Alarm.AlarmId := erEjectorNotBackward;
fbLockUnlock();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart


VAR
 state : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get reference
mpiNewSequence := GET_SYNC_REFTO('ODC1.sv_iODCSequenceUpdated', T#0s, state);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pCheckDefaultConditions ON PU_Task_3 WITH sv_bEjectorBwd,mpiNewSequence^,sv_bIgnoreDefaultConditions,sv_bOverrideCoreSafety

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aLockUnlock();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 126 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB monitors following default conditions:
If the ejector is not bwd, all mold close movements are locked.
If the ejector is not bwd, all core movements are locked.

This default conditions are not monitored in the following cases:
+ The machine sequence is created by machine sequencer and not by ODC - files
+ monitoring is deactivated (sv_bIgnoreDefaultConditions = TRUE)
+ If "override core safety" is activated, the ejector position has no influence on core movements.

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(9)cCompCore @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)109 @RT(14)Component Core 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABDefaultConditions @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)sv_bEjectorBwd @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)erEjectorNotBackward @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)mpiNewSequence @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)sv_bIgnoreDefaultConditions @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bOverrideCoreSafety @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bUseProgramSwitches @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aLockUnlock @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(5)state @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(23)pCheckDefaultConditions @STRUCTURED_TEXT 
@RT(0) @RT(81)sv_bEjectorBwd,mpiNewSequence^,sv_bIgnoreDefaultConditions,sv_bOverrideCoreSafety @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(45)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;  //no lock / unlock before sv_bInitDone
END_IF;

IF sv_bIgnoreDefaultConditions OR NOT sv_bUseProgramSwitches THEN
   //sequence programmmed by machine sequencer or 
   //default conditions deactivated
   fbLockUnlock.Mode := nUnlock;
ELSE
   //sequence programmed by files and default conditions activated
   //-> check default conditions
   IF sv_bEjectorBwd THEN
      fbLockUnlock.Mode := nUnlock;
   ELSE
      fbLockUnlock.Mode := nLockAbort;
   END_IF;
END_IF;

//lock /unlock mold close
fbLockUnlock.DeviceId.CompId := cCompMold;
fbLockUnlock.DeviceId.IndexId := 1;
fbLockUnlock.MoveDir := cMoveFwd;
fbLockUnlock.MoveId := cMoveAll;
fbLockUnlock.Alarm.AlarmId := erEjectorNotBackward;
fbLockUnlock();

//lock / unlock all core movements if ejector is not bwd
//also consider "override core safety"
IF sv_bOverrideCoreSafety THEN
   fbLockUnlock.Mode := nUnlock;
END_IF;
fbLockUnlock.DeviceId.CompId := cCompCore;
fbLockUnlock.DeviceId.IndexId := cAllDevIndex;
fbLockUnlock.MoveDir := cMoveAll;
fbLockUnlock.MoveId := cMoveAll;
fbLockUnlock.Alarm.AlarmId := erEjectorNotBackward;
fbLockUnlock();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get reference
mpiNewSequence := GET_SYNC_REFTO('ODC1.sv_iODCSequenceUpdated', T#0s, state);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aLockUnlock();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
