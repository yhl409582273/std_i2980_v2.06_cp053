(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB starts and stopps the process algorithms for fast output and mid output.
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, GET_SYNC_REFTO
, WRITE_SVREAL_DIRECT
, FAddToScopeGroup
, ABAnalogOutput
, tnAnaOutputMode
, KAPPL_LintabData
, FBDebugTrace
, KSWO_Status

END_IMPORT

ALGORITHM_BLOCK ABSpeedPumpOutput #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_rPressure : REAL;
 sv_rVelocity : REAL;
 sv_rDrivePressure : REAL;
 sv_rDriveVelocity : REAL;
 sv_rAOVelocity : REAL;
 sv_rDriveScalingFactor : REAL (* Drive scaling factor *);
 sv_rMaxPressure : REAL;
END_VAR

SYSTEM_OBJECT
 TaskAnalog : TASK;
 TaskInject : TASK;
 TaskSlow : TASK;
END_OBJECT

VAR
 mbStop : BOOL;
 mbStopped : BOOL := TRUE;
 mprPressureSource : REFTO REAL;
 mprVelocitySource : REFTO REAL;
 abAnalogOutputP : ABAnalogOutput;
 abAnalogOutputV : ABAnalogOutput;
END_VAR

ALGORITHM aStart


VAR_INPUT
 AnaOutMode : tnAnaOutputMode;
 pLintabP : REFTO KAPPL_LintabData;
 pLintabV : REFTO KAPPL_LintabData;
 prPressure : REFTO REAL;
 prVelocity : REFTO REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStop := FALSE;
//make sure when we get a start and a stop very fast,
//we do not end up in a situation where mbStopped is FALSE but paXxxOutput is still running
mbStopped := FALSE;
 
abAnalogOutputP.aInit(pLintab := pLintabP);
abAnalogOutputV.aInit(pLintab := pLintabV);
 
mprPressureSource := prPressure;
mprVelocitySource := prVelocity;

CASE AnaOutMode OF

    nAnaOutputModeMid:  START_PROCESS_ALGORITHM(paMidOutput);
    nAnaOutputModeFast: START_PROCESS_ALGORITHM(paFastOutput);
END_CASE;    


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStop


VAR_OUTPUT
 bReady : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT mbStopped THEN
   mbStop := TRUE;
END_IF;
bReady := mbStopped;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSetErrorMessage


VAR
 fbDebugTrace : FBDebugTrace;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF abAnalogOutputP.aRun.bError THEN
   fbDebugTrace(CONCAT('ABSpeedPumpOutput: error ',DINT_TO_STRING(abAnalogOutputP.aRun.iErrorInfo),' in ABAnalogOutputP'));
END_IF;

IF abAnalogOutputV.aRun.bError THEN
   fbDebugTrace(CONCAT('ABSpeedPumpOutput: error ',DINT_TO_STRING(abAnalogOutputV.aRun.iErrorInfo),' in ABAnalogOutputV'));
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paFastOutput ON TaskInject(15000)


VAR
 b : BOOL;
 rPressure : REAL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP OUT:
Init (P);
AOUT (N);
END_STEP

ACTION Init: #BEGIN_EDIT_BLOCK
mbStopped := FALSE;

;#END_EDIT_BLOCK END_ACTION (*Init*)
ACTION AOUT: #BEGIN_EDIT_BLOCK
//limit pressure output to max. pressure of the pump
rPressure := MIN(sv_rMaxPressure, mprPressureSource^);  

b := WRITE_SVREAL_DIRECT(sv_rPressure, rPressure);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^);

(* Lintab Calculation *)
abAnalogOutputP.aRun(rSetValue := sv_rPressure);
abAnalogOutputV.aRun(rSetValue := sv_rVelocity);

(* pressure and velocity output *)              
b := WRITE_SVREAL_DIRECT(sv_rDrivePressure, abAnalogOutputP.aRun.rOutput * sv_rDriveScalingFactor);
b := WRITE_SVREAL_DIRECT(sv_rDriveVelocity, abAnalogOutputV.aRun.rOutput * sv_rDriveScalingFactor);

(* ao velocity for simulation *)
b := WRITE_SVREAL_DIRECT(sv_rAOVelocity, abAnalogOutputV.aRun.rOutput);



;#END_EDIT_BLOCK END_ACTION (*AOUT*)

(* steps *)
STEP ERROR_STOP:
AErrorStop (P);
END_STEP

ACTION AErrorStop: #BEGIN_EDIT_BLOCK
sv_rPressure := 0.0;
sv_rVelocity := 0.0;
aSetErrorMessage();

;#END_EDIT_BLOCK END_ACTION (*AErrorStop*)
STEP S_Stop:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
mbStop := FALSE; 

mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStop*)

(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM OUT TO ERROR_STOP :=  #BEGIN_EDIT_BLOCK
abAnalogOutputP.aRun.bError OR
abAnalogOutputV.aRun.bError
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans5 (* Trans5 *) FROM ERROR_STOP TO S_Stop :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TStop (* Trans4 *) FROM OUT TO S_Stop :=  #BEGIN_EDIT_BLOCK
mbStop
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TNewOutput (* Trans7 *) FROM S_Stop TO OUT :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
// ACTION ADitherSignal: #BEGIN_EDIT_BLOCK
// (**************************************** WARNING ********************************************
//  *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
//  ***                       For further information see Comment tab!                        ***
//  *********************************************************************************************)
// 
// //sinus signals for pressure and velocity dither
// IF sv_rDitherAmplitudeVel > 0.0 THEN
//    fbSinusVel(rAmplitude := sv_rDitherAmplitudeVel,
//               rFrequency := sv_rDitherFrequencyVel,
//               rOut => rDitherVel);
// ELSE
//    rDitherVel := 0.0;
// END_IF;
// 
// IF sv_rDitherAmplitudePres > 0.0 THEN
//    fbSinusPres(rAmplitude := sv_rDitherAmplitudePres,
//               rFrequency := sv_rDitherFrequencyPres,
//               rOut => rDitherPres);
// ELSE
//    rDitherPres := 0.0;
// END_IF;

// ;#END_EDIT_BLOCK END_ACTION (*ADitherSignal*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paMidOutput ON TaskAnalog(15000)


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 rPressure : REAL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP OUT:
Init (P);
AOUT (N);
END_STEP

ACTION Init: #BEGIN_EDIT_BLOCK
mbStopped := FALSE;

;#END_EDIT_BLOCK END_ACTION (*Init*)
ACTION AOUT: #BEGIN_EDIT_BLOCK
//limit pressure output to max. pressure of the pump
rPressure := MIN(sv_rMaxPressure, mprPressureSource^);  

b := WRITE_SVREAL_DIRECT(sv_rPressure, rPressure);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^);
   
(* Lintab Calculation *)
abAnalogOutputP.aRun(rSetValue := sv_rPressure);
abAnalogOutputV.aRun(rSetValue := sv_rVelocity);

(* pressure and velocity output *)    
b := WRITE_SVREAL_DIRECT(sv_rDrivePressure, abAnalogOutputP.aRun.rOutput * sv_rDriveScalingFactor);
b := WRITE_SVREAL_DIRECT(sv_rDriveVelocity, abAnalogOutputV.aRun.rOutput * sv_rDriveScalingFactor);

(* ao velocity for simulation*)
b := WRITE_SVREAL_DIRECT(sv_rAOVelocity, abAnalogOutputV.aRun.rOutput);

;#END_EDIT_BLOCK END_ACTION (*AOUT*)

(* steps *)
STEP ERROR_STOP:
AErrorStop (P);
END_STEP

ACTION AErrorStop: #BEGIN_EDIT_BLOCK
sv_rPressure := 0.0;
sv_rVelocity := 0.0;
aSetErrorMessage();

;#END_EDIT_BLOCK END_ACTION (*AErrorStop*)
STEP S_Stop:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
mbStop := FALSE; 

(* Stopping Analog Output*)
mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStop*)

(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM OUT TO ERROR_STOP :=  #BEGIN_EDIT_BLOCK
abAnalogOutputP.aRun.bError OR
abAnalogOutputV.aRun.bError
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans5 (* Trans5 *) FROM ERROR_STOP TO S_Stop :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TStop (* Trans4 *) FROM OUT TO S_Stop :=  #BEGIN_EDIT_BLOCK
mbStop
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TNewOutput (* Trans7 *) FROM S_Stop TO OUT :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paInitDebugMeasurement ON TaskSlow AUTOSTART


VAR
 fuName : STRING(255);
 variableName : STRING(255);
 swoState : KSWO_Status;
 b : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
fuName := GET_MY_FU_NAME();
variableName := CONCAT(fuName,'.rPressure Hydr bar');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rPressure);
b := FAddToScopeGroup(Task := TaskInject, 
                      Name := variableName, 
                      GroupId := cScopeGroupPump);
variableName := CONCAT(fuName,'.rVelocity %');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rVelocity);
b := FAddToScopeGroup(Task := TaskInject, 
                      Name := variableName, 
                      GroupId := cScopeGroupPump);

variableName := CONCAT(fuName,'.rPressure Hydr bar');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rPressure);
variableName := CONCAT(fuName,'.rVelocity %');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rVelocity);

STOP_PROCESS_ALGORITHM();



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB starts and stopps the process algorithms for fast output and mid output.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)WRITE_SVREAL_DIRECT @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)FAddToScopeGroup @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(17)ABSpeedPumpOutput @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_rPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_rVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_rDrivePressure @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_rDriveVelocity @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_rAOVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_rDriveScalingFactor @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)Drive scaling factor @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)mbStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mbStopped @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mprPressureSource @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mprVelocitySource @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abAnalogOutputP @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABAnalogOutput @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abAnalogOutputV @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABAnalogOutput @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)sv_rMaxPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aStart @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(10)AnaOutMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnAnaOutputMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)pLintabP @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)pLintabV @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)prPressure @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)prVelocity @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aStop @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)bReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aSetErrorMessage @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(12)paFastOutput @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(17)TaskInject(15000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)rPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(11)paMidOutput @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(17)TaskAnalog(15000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(9)rPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(22)paInitDebugMeasurement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(6)fuName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)variableName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)swoState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStop := FALSE;
//make sure when we get a start and a stop very fast,
//we do not end up in a situation where mbStopped is FALSE but paXxxOutput is still running
mbStopped := FALSE;
 
abAnalogOutputP.aInit(pLintab := pLintabP);
abAnalogOutputV.aInit(pLintab := pLintabV);
 
mprPressureSource := prPressure;
mprVelocitySource := prVelocity;

CASE AnaOutMode OF

    nAnaOutputModeMid:  START_PROCESS_ALGORITHM(paMidOutput);
    nAnaOutputModeFast: START_PROCESS_ALGORITHM(paFastOutput);
END_CASE;    

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT mbStopped THEN
   mbStop := TRUE;
END_IF;
bReady := mbStopped;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF abAnalogOutputP.aRun.bError THEN
   fbDebugTrace(CONCAT('ABSpeedPumpOutput: error ',DINT_TO_STRING(abAnalogOutputP.aRun.iErrorInfo),' in ABAnalogOutputP'));
END_IF;

IF abAnalogOutputV.aRun.bError THEN
   fbDebugTrace(CONCAT('ABSpeedPumpOutput: error ',DINT_TO_STRING(abAnalogOutputV.aRun.iErrorInfo),' in ABAnalogOutputV'));
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
10 7 8 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(3)OUT @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(4)Init @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
mbStopped := FALSE;

@F 
@Acb @RT(4)AOUT @F @T @RT(1)N @RT(0) @F @F @T @TL(19)
//limit pressure output to max. pressure of the pump
rPressure := MIN(sv_rMaxPressure, mprPressureSource^);  

b := WRITE_SVREAL_DIRECT(sv_rPressure, rPressure);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^);

(* Lintab Calculation *)
abAnalogOutputP.aRun(rSetValue := sv_rPressure);
abAnalogOutputV.aRun(rSetValue := sv_rVelocity);

(* pressure and velocity output *)              
b := WRITE_SVREAL_DIRECT(sv_rDrivePressure, abAnalogOutputP.aRun.rOutput * sv_rDriveScalingFactor);
b := WRITE_SVREAL_DIRECT(sv_rDriveVelocity, abAnalogOutputV.aRun.rOutput * sv_rDriveScalingFactor);

(* ao velocity for simulation *)
b := WRITE_SVREAL_DIRECT(sv_rAOVelocity, abAnalogOutputV.aRun.rOutput);



@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(3)
abAnalogOutputP.aRun.bError OR
abAnalogOutputV.aRun.bError

@RT(6)Trans1 @F 
@Step @RT(10)ERROR_STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(10)AErrorStop @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
sv_rPressure := 0.0;
sv_rVelocity := 0.0;
aSetErrorMessage();

@F 

@Trans @RT(6)Trans5 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans5 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(5)TStop @F @T @T @F @T @F @TL(2)
mbStop

@RT(6)Trans4 @F 


@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
mbStop := FALSE; 

mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(10)TNewOutput @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans7 @F 
@Goto @RT(3)OUT @F @F 
@END_SfcData 
@SaActions 1 
@SaText @RT(13)ADitherSignal 1 @TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//sinus signals for pressure and velocity dither
IF sv_rDitherAmplitudeVel > 0.0 THEN
   fbSinusVel(rAmplitude := sv_rDitherAmplitudeVel,
              rFrequency := sv_rDitherFrequencyVel,
              rOut => rDitherVel);
ELSE
   rDitherVel := 0.0;
END_IF;

IF sv_rDitherAmplitudePres > 0.0 THEN
   fbSinusPres(rAmplitude := sv_rDitherAmplitudePres,
              rFrequency := sv_rDitherFrequencyPres,
              rOut => rDitherPres);
ELSE
   rDitherPres := 0.0;
END_IF;


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
11 8 8 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(3)OUT @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(4)Init @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
mbStopped := FALSE;

@F 
@Acb @RT(4)AOUT @F @T @RT(1)N @RT(0) @F @F @T @TL(17)
//limit pressure output to max. pressure of the pump
rPressure := MIN(sv_rMaxPressure, mprPressureSource^);  

b := WRITE_SVREAL_DIRECT(sv_rPressure, rPressure);
b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^);
   
(* Lintab Calculation *)
abAnalogOutputP.aRun(rSetValue := sv_rPressure);
abAnalogOutputV.aRun(rSetValue := sv_rVelocity);

(* pressure and velocity output *)    
b := WRITE_SVREAL_DIRECT(sv_rDrivePressure, abAnalogOutputP.aRun.rOutput * sv_rDriveScalingFactor);
b := WRITE_SVREAL_DIRECT(sv_rDriveVelocity, abAnalogOutputV.aRun.rOutput * sv_rDriveScalingFactor);

(* ao velocity for simulation*)
b := WRITE_SVREAL_DIRECT(sv_rAOVelocity, abAnalogOutputV.aRun.rOutput);

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(3)
abAnalogOutputP.aRun.bError OR
abAnalogOutputV.aRun.bError

@RT(6)Trans1 @F 
@Step @RT(10)ERROR_STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(10)AErrorStop @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
sv_rPressure := 0.0;
sv_rVelocity := 0.0;
aSetErrorMessage();

@F 

@Trans @RT(6)Trans5 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans5 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(5)TStop @F @T @T @F @T @F @TL(2)
mbStop

@RT(6)Trans4 @F 


@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
mbStop := FALSE; 

(* Stopping Analog Output*)
mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(10)TNewOutput @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans7 @F 
@Goto @RT(3)OUT @F @F 
@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(28)
fuName := GET_MY_FU_NAME();
variableName := CONCAT(fuName,'.rPressure Hydr bar');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rPressure);
b := FAddToScopeGroup(Task := TaskInject, 
                      Name := variableName, 
                      GroupId := cScopeGroupPump);
variableName := CONCAT(fuName,'.rVelocity %');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rVelocity);
b := FAddToScopeGroup(Task := TaskInject, 
                      Name := variableName, 
                      GroupId := cScopeGroupPump);

variableName := CONCAT(fuName,'.rPressure Hydr bar');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rPressure);
variableName := CONCAT(fuName,'.rVelocity %');
swoState := KSWO_AddVariable( Task := TaskAnalog,
                              Name := variableName,
                              Variable := sv_rVelocity);

STOP_PROCESS_ALGORITHM();


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
