(*
Do steps for automatic pump velocity calibration
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, SET_EVENT
, tnCalibState_Running
, cCalibFileVel
, cCompNone
, cMinMoveIdent
, tnOperationMode
, tsCalibMovement
, KAPPL_LintabData3D
, tevStartRequest
, ABAutoCalibRedoListener
, tsTraceLevel
, FBCalibWriteLog
, KAPPL_LintabData
, tsPumpCalibError
, tsDeviceId
, tMoveIdent
, tsRequiredPumps
, tyCalibDevices
, tevStartRequestData
, FBCheckReady
, FBStopStartedMovements
, FBAutoCalibLog
, tyRequiredPumps
, ABCreateMeasureArray

END_IMPORT

ALGORITHM_BLOCK ABPumpVelocityCalibCycle #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_OperationMode : tnOperationMode;
 sv_CalibStatePumpVelocity : tsCalibMovement;
 sv_bDoPumpVelocityCalib : BOOL;
 sv_bPumpPreVelCalibDone : BOOL;
 sv_bPumpPreVelCalibAnotherStepN : BOOL;
 sv_TmpLintab : KAPPL_LintabData3D;
 sv_rTmpMaxAbsFlow : REAL;
 sv_TraceLevel : tsTraceLevel;
 sv_rAbsFlow : REAL (* absolute flow of pump in l/min *);
 sv_VelocityLintab : KAPPL_LintabData (* lintab for pump vel *);
 sv_PumpCalibError : tsPumpCalibError;
 sv_iCalibratingPump : DINT (* number of pump which is actually calibrating *);
 sv_DeviceId : tsDeviceId;
 sv_bInitDone : BOOL;
 sv_PumpCalibDevices : tyCalibDevices (* !!! device 1 - 20 reserved !!! *);
 sv_iDeviceForCalib : DINT;
END_VAR

SYSTEM_OBJECT
 TaskMid : TASK;
 PU_Task_7 : TASK;
 evStartRequest : tevStartRequest;
 TaskSlow : TASK;
 erPumpVelCalibNoValueChange : ALARM;
 erCalibrationVelocityNotStable : ALARM;
 PU_Task_13 : TASK;
END_OBJECT

VAR
 abAutoCalibRedoListenerVelocity : ABAutoCalibRedoListener;
 mbFilesDeleted : BOOL;
 fbCalibWriteLog : FBCalibWriteLog;
 mbLogFileSaved : BOOL := TRUE;
 mpbCalibError : REFTO BOOL;
 mMoveIdStartPos : tMoveIdent (* move id of the movement which must be started to move to velocity calib start position *);
 mMoveDirStartPos : tMoveIdent (* move direction of the movement which must be started to move to velocity calib start position *);
 mpRequiredPumps : REFTO tsRequiredPumps;
 mMoveDirCalib : tMoveIdent (* move direction of calibration movement *);
 mMoveIdCalib : tMoveIdent (* move id of calibration movement *);
 mDeviceForCalib : tsDeviceId;
END_VAR

POSTUPDATE_ALGORITHM pStart ON PU_Task_7 WITH sv_CalibStatePumpVelocity.Status

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN    
   IF sv_CalibStatePumpVelocity.Status = tnCalibState_Running THEN
      IF sv_CalibStatePumpVelocity.Group = tnCalibGroup_LintabOnly THEN
         //do not start pump calibration and set calib state to "done"
         sv_CalibStatePumpVelocity.Status := tnCalibState_Done;
      ELSE
         sv_PumpCalibError.bError := FALSE;
         sv_PumpCalibError.iErrorInfo := 0;
         mpbCalibError := @sv_PumpCalibError.bError;
         START_PROCESS_ALGORITHM(paRun);   
      END_IF;      
   END_IF;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskMid


VAR_TEMP
 uTmpCnt : UDINT;
END_VAR

VAR
 evStartRequestData : tevStartRequestData;
 fbCheckReady : FBCheckReady;
 fbStopStartedMovements : FBStopStartedMovements;
 fbLog : FBAutoCalibLog;
 OriginalPumpAssignment : tyRequiredPumps;
 NoAssignedPumps : tyRequiredPumps;
 tmpAssignment : tyRequiredPumps;
 abCreateMeasureArray : ABCreateMeasureArray;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_INIT:
AInit (P);
APumpAssignment (P);
END_STEP

ACTION AInit: #BEGIN_EDIT_BLOCK
sv_bDoPumpVelocityCalib := TRUE;
sv_bPumpPreVelCalibAnotherStepN := FALSE;
sv_bPumpPreVelCalibDone := FALSE;
sv_iCalibratingPump := sv_DeviceId.IndexId;
sv_CalibStatePumpVelocity.prGlobalMaxX^ := 100.0; //%
sv_CalibStatePumpVelocity.prGlobalMaxY^ := 10.0;  //V

abCreateMeasureArray.aInit();  //create dynamic arrays
fbLog('velocity calib started');

;#END_EDIT_BLOCK END_ACTION (*AInit*)
ACTION APumpAssignment: #BEGIN_EDIT_BLOCK
//save actual pump assigment
OriginalPumpAssignment := mpRequiredPumps^.RequiredPumps;

//change assignment to the pump which should be calibrated
tmpAssignment := NoAssignedPumps;
tmpAssignment[sv_iCalibratingPump] := TRUE;
mpRequiredPumps^.RequiredPumps := tmpAssignment;

;#END_EDIT_BLOCK END_ACTION (*APumpAssignment*)

(* steps *)
STEP S_RESET:
AStopmovements (P);
Action24 (P);
AWaitReady (N);
END_STEP

ACTION Action24: #BEGIN_EDIT_BLOCK
IF sv_CalibStatePumpVelocity.Status <> tnCalibState_Error THEN  
   fbLog('velocity calib aborted');
   sv_CalibStatePumpVelocity.Status := tnCalibState_Aborted;
ELSE
   fbLog('velocity calib failure');
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action24*)
ACTION AWaitReady: #BEGIN_EDIT_BLOCK
fbCheckReady(DeviceId := mDeviceForCalib);

;#END_EDIT_BLOCK END_ACTION (*AWaitReady*)
STEP S_STOP:
Action22 (P);
END_STEP

ACTION Action22: #BEGIN_EDIT_BLOCK
sv_bDoPumpVelocityCalib := FALSE;
mpbCalibError := EMPTY;
sv_iCalibratingPump := 0;
//restore original assignment
mpRequiredPumps^.RequiredPumps := OriginalPumpAssignment;

//delete dynamic arrays
abCreateMeasureArray.aRelease();

STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*Action22*)
STEP Step12:
Delete_LogFiles (P);
END_STEP

STEP S_DELAY1:
END_STEP

STEP S_StartPos:
AMoveStartPos (P);
Action8 (N);
END_STEP

ACTION Action8: #BEGIN_EDIT_BLOCK
fbCheckReady(DeviceId := mDeviceForCalib)

;#END_EDIT_BLOCK END_ACTION (*Action8*)
STEP S_DELAY2:
END_STEP

STEP S_Calib:
ACalib (P);
Action9 (N);
END_STEP

ACTION Action9: #BEGIN_EDIT_BLOCK
fbCheckReady(DeviceId := mDeviceForCalib)

;#END_EDIT_BLOCK END_ACTION (*Action9*)
STEP S_WAIT_CALC:
Action30 (P);
END_STEP

ACTION Action30: #BEGIN_EDIT_BLOCK
//show lintab during calibration
sv_CalibStatePumpVelocity.pDisplayLintab^.LintabPoints.uNoOfPoints := sv_TmpLintab.LintabPoints.uNoOfPoints;
FOR uTmpCnt := 1 TO sv_TmpLintab.LintabPoints.uNoOfPoints DO
   sv_CalibStatePumpVelocity.pDisplayLintab^.LintabPoints.Point[uTmpCnt].rX:= sv_TmpLintab.LintabPoints.Point[uTmpCnt].rX;
   sv_CalibStatePumpVelocity.pDisplayLintab^.LintabPoints.Point[uTmpCnt].rY:= sv_TmpLintab.LintabPoints.Point[uTmpCnt].rY;
END_FOR;


;#END_EDIT_BLOCK END_ACTION (*Action30*)
STEP Step13:
Write_LogFile (P);
END_STEP

STEP Step14:
END_STEP

STEP S_DONE:
Action18 (P);
END_STEP

ACTION Action18: #BEGIN_EDIT_BLOCK
//copy lintab and absolute flow, update calib state
fbLog('velocity calib finished');
sv_VelocityLintab := sv_CalibStatePumpVelocity.pDisplayLintab^;
sv_rAbsFlow := sv_rTmpMaxAbsFlow;
sv_CalibStatePumpVelocity.Status := tnCalibState_Done;

;#END_EDIT_BLOCK END_ACTION (*Action18*)

(* transitions *)
TRANSITION TCalibDeviceReady (* Trans15 *) FROM S_RESET TO S_STOP :=  #BEGIN_EDIT_BLOCK
fbCheckReady.bReady AND mbLogFileSaved
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans18 (* Trans18 *) FROM S_STOP TO S_INIT :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans1 (* Trans1 *) FROM S_INIT TO Step12 :=  #BEGIN_EDIT_BLOCK
sv_TraceLevel.bDebugCalibration
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans12 (* Trans12 *) FROM Step12 TO S_DELAY1 :=  #BEGIN_EDIT_BLOCK
mbFilesDeleted
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans14 (* Trans14 *) FROM S_INIT TO S_DELAY1 :=  #BEGIN_EDIT_BLOCK
NOT sv_TraceLevel.bDebugCalibration
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TDelay1 (* TDelay1 *) FROM S_DELAY1 TO S_StartPos :=  #BEGIN_EDIT_BLOCK
S_DELAY1.T >= t#0.5s
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TBwdReady (* TDecompReady *) FROM S_StartPos TO S_DELAY2 :=  #BEGIN_EDIT_BLOCK
fbCheckReady.bReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TDelay2 (* TDelay2 *) FROM S_DELAY2 TO S_Calib :=  #BEGIN_EDIT_BLOCK
S_DELAY2.T >= t#0.5s
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TCalibReady (* TInjectReady *) FROM S_Calib TO S_WAIT_CALC :=  #BEGIN_EDIT_BLOCK
fbCheckReady.bReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans25 (* Trans15 *) FROM S_WAIT_CALC TO Step13 :=  #BEGIN_EDIT_BLOCK
sv_TraceLevel.bDebugCalibration 
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans16 (* Trans16 *) FROM Step13 TO Step14 :=  #BEGIN_EDIT_BLOCK
mbLogFileSaved

;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans17 (* Trans17 *) FROM S_WAIT_CALC TO Step14 :=  #BEGIN_EDIT_BLOCK
NOT sv_TraceLevel.bDebugCalibration 
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans22 (* Trans22 *) FROM Step14 TO S_DELAY1 :=  #BEGIN_EDIT_BLOCK
sv_bPumpPreVelCalibAnotherStepN
// another step needed
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans21 (* Trans21 *) FROM Step14 TO S_DONE :=  #BEGIN_EDIT_BLOCK
sv_bPumpPreVelCalibDone
//calib finished
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans23 (* Trans23 *) FROM Step14 TO S_RESET :=  #BEGIN_EDIT_BLOCK
NOT sv_bPumpPreVelCalibAnotherStepN 
AND NOT sv_bPumpPreVelCalibDone
//maybe remove in vlavour of exit
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans19 (* Trans19 *) FROM S_DONE TO S_STOP :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AMoveStartPos: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := mDeviceForCalib;
evStartRequestData.MoveDir := mMoveDirStartPos; 
evStartRequestData.MoveId := mMoveIdStartPos;
SET_EVENT(evStartRequest, evStartRequestData); 

;#END_EDIT_BLOCK END_ACTION (*AMoveStartPos*)
ACTION AStopmovements: #BEGIN_EDIT_BLOCK
fbStopStartedMovements();

;#END_EDIT_BLOCK END_ACTION (*AStopmovements*)
ACTION ACalib: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := mDeviceForCalib;
evStartRequestData.MoveDir := mMoveDirCalib; 
evStartRequestData.MoveId := mMoveIdCalib;
SET_EVENT(evStartRequest, evStartRequestData); 

;#END_EDIT_BLOCK END_ACTION (*ACalib*)
ACTION Delete_LogFiles: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbFilesDeleted := FALSE;
START_PROCESS_ALGORITHM(paDeleteLogFiles);


;#END_EDIT_BLOCK END_ACTION (*Delete_LogFiles*)
ACTION Write_LogFile: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbLogFileSaved := FALSE;
START_PROCESS_ALGORITHM(paWriteLogFile);

;#END_EDIT_BLOCK END_ACTION (*Write_LogFile*)

(* exits *)

EXIT_TRANSITION E_NotSetupMode := #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_OperationMode <> nSetup
;#END_EDIT_BLOCK
PRIORITY 1 WITH  INITIAL_STEP S_RESET: END_STEP
END_TRANSITION

EXIT_TRANSITION E_NotCalibratingAnymore := #BEGIN_EDIT_BLOCK
// abort calibration, when not in running state and not finished
(sv_CalibStatePumpVelocity.Status <> tnCalibState_Running) AND 
(S_INIT.X OR S_StartPos.X OR S_Calib.X OR S_WAIT_CALC.X OR S_DELAY1.X OR S_DELAY2.X)
;#END_EDIT_BLOCK
PRIORITY 1 WITH  INITIAL_STEP S_RESET: END_STEP
END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paDeleteLogFiles ON TaskSlow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:=cCalibFileVel,bDeleteFiles:=TRUE);
mbFilesDeleted := TRUE;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paWriteLogFile ON TaskSlow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:= cCalibFileVel,bDeleteFiles := FALSE);
mbLogFileSaved := TRUE;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pPumpCalibError ON PU_Task_7 WITH mpbCalibError^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_PumpCalibError.bError THEN
  
   sv_CalibStatePumpVelocity.Status := tnCalibState_Error;
   IF sv_PumpCalibError.iErrorInfo = cValueChangeDuringCalibTooLow THEN
      SET_ALARM(erPumpVelCalibNoValueChange);
   ELSE
      SET_ALARM(erCalibrationVelocityNotStable);
   END_IF;
     
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInit ON PU_Task_13 WITH sv_bInitDone,sv_iDeviceForCalib

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mDeviceForCalib.CompId := cMinCompId;
mDeviceForCalib.IndexId := cMinMoveIdent;
mMoveDirStartPos := cMinMoveIdent;
mMoveIdStartPos := cMinMoveIdent;
mMoveDirCalib := cMinMoveIdent;
mMoveIdCalib := cMinMoveIdent;
mpRequiredPumps := EMPTY;
sv_CalibStatePumpVelocity.prInputSensor := EMPTY;
sv_CalibStatePumpVelocity.Group := tnCalibGroup_LintabOnly;

IF (sv_iDeviceForCalib > 0) AND (sv_iDeviceForCalib <= cMaxCalibDevices) THEN   
   mDeviceForCalib := sv_PumpCalibDevices[sv_iDeviceForCalib].DeviceId;
   
   IF CHECK_REF(sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibStartPosMovement^) THEN
      mMoveDirStartPos := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibStartPosMovement^.MoveDir;
      mMoveIdStartPos :=  sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibStartPosMovement^.MoveId;
   END_IF;
   
   IF CHECK_REF(sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^) THEN
      mMoveDirCalib := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.MoveDir;
      mMoveIdCalib := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.MoveId;
      mpRequiredPumps := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.AnaOutData.pRequiredPumps;
   END_IF;
   
   IF CHECK_REF(sv_PumpCalibDevices[sv_iDeviceForCalib].prActVelocity^) THEN
      sv_CalibStatePumpVelocity.prInputSensor := sv_PumpCalibDevices[sv_iDeviceForCalib].prActVelocity;
      sv_CalibStatePumpVelocity.Group := tnCalibGroup_Velocity;
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@
Do steps for automatic pump velocity calibration
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
4 
@Var @RT(20)tnCalibState_Running @RT(0) @T @T @DERIVED 0 @F @RT(12)tnCalibState @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(23)calibration in progress 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cCalibFileVel @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(14)'CalibPumpVel' @RT(42)Filename for Pump Velocity Calib Debug-Log 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cCompNone @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(10)cMinCompId @RT(4)None 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cMinMoveIdent @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(32)lower limit for MoveId / MoveDir 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(24)ABPumpVelocityCalibCycle @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
34 
@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_CalibStatePumpVelocity @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsCalibMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bDoPumpVelocityCalib @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bPumpPreVelCalibDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(31)sv_bPumpPreVelCalibAnotherStepN @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_TmpLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)KAPPL_LintabData3D @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_rTmpMaxAbsFlow @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)evStartRequest @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tevStartRequest @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(31)abAutoCalibRedoListenerVelocity @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)ABAutoCalibRedoListener @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbFilesDeleted @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)fbCalibWriteLog @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)FBCalibWriteLog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)mbLogFileSaved @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sv_rAbsFlow @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)absolute flow of pump in l/min @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_VelocityLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)lintab for pump vel @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_PumpCalibError @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tsPumpCalibError @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)mpbCalibError @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)erPumpVelCalibNoValueChange @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(30)erCalibrationVelocityNotStable @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)sv_iCalibratingPump @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)number of pump which is actually calibrating @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)mMoveIdStartPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(86)move id of the movement which must be started to move to velocity calib start position @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mMoveDirStartPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(93)move direction of the movement which must be started to move to velocity calib start position @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mpRequiredPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mMoveDirCalib @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)move direction of calibration movement @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mMoveIdCalib @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(31)move id of calibration movement @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mDeviceForCalib @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)sv_PumpCalibDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tyCalibDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)!!! device 1 - 20 reserved !!! @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iDeviceForCalib @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(32)sv_CalibStatePumpVelocity.Status @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(7)uTmpCnt @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(18)evStartRequestData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tevStartRequestData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbCheckReady @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBCheckReady @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)fbStopStartedMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)FBStopStartedMovements @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)fbLog @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)FBAutoCalibLog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)OriginalPumpAssignment @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tyRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)NoAssignedPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tyRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)tmpAssignment @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tyRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)abCreateMeasureArray @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)ABCreateMeasureArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paDeleteLogFiles @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(14)paWriteLogFile @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pPumpCalibError @STRUCTURED_TEXT 
@RT(0) @RT(14)mpbCalibError^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(31)sv_bInitDone,sv_iDeviceForCalib @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN    
   IF sv_CalibStatePumpVelocity.Status = tnCalibState_Running THEN
      IF sv_CalibStatePumpVelocity.Group = tnCalibGroup_LintabOnly THEN
         //do not start pump calibration and set calib state to "done"
         sv_CalibStatePumpVelocity.Status := tnCalibState_Done;
      ELSE
         sv_PumpCalibError.bError := FALSE;
         sv_PumpCalibError.iErrorInfo := 0;
         mpbCalibError := @sv_PumpCalibError.bError;
         START_PROCESS_ALGORITHM(paRun);   
      END_IF;      
   END_IF;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
20 16 19 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 11 
@Step @RT(7)S_RESET @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 3 
@Acb @RT(14)AStopmovements @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(8)Action24 @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
IF sv_CalibStatePumpVelocity.Status <> tnCalibState_Error THEN  
   fbLog('velocity calib aborted');
   sv_CalibStatePumpVelocity.Status := tnCalibState_Aborted;
ELSE
   fbLog('velocity calib failure');
END_IF;

@F 
@Acb @RT(10)AWaitReady @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
fbCheckReady(DeviceId := mDeviceForCalib);

@F 

@Trans @RT(17)TCalibDeviceReady @F @T @F @F @T @T @TL(2)
fbCheckReady.bReady AND mbLogFileSaved

@RT(7)Trans15 @F 
@Step @RT(6)S_STOP @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action22 @F @T @RT(1)P @RT(0) @F @F @T @TL(11)
sv_bDoPumpVelocityCalib := FALSE;
mpbCalibError := EMPTY;
sv_iCalibratingPump := 0;
//restore original assignment
mpRequiredPumps^.RequiredPumps := OriginalPumpAssignment;

//delete dynamic arrays
abCreateMeasureArray.aRelease();

STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(7)Trans18 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans18 @F 
@Step @RT(6)S_INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(5)AInit @F @T @RT(1)P @RT(0) @F @F @T @TL(10)
sv_bDoPumpVelocityCalib := TRUE;
sv_bPumpPreVelCalibAnotherStepN := FALSE;
sv_bPumpPreVelCalibDone := FALSE;
sv_iCalibratingPump := sv_DeviceId.IndexId;
sv_CalibStatePumpVelocity.prGlobalMaxX^ := 100.0; //%
sv_CalibStatePumpVelocity.prGlobalMaxY^ := 10.0;  //V

abCreateMeasureArray.aInit();  //create dynamic arrays
fbLog('velocity calib started');

@F 
@Acb @RT(15)APumpAssignment @F @T @RT(1)P @RT(0) @F @F @T @TL(8)
//save actual pump assigment
OriginalPumpAssignment := mpRequiredPumps^.RequiredPumps;

//change assignment to the pump which should be calibrated
tmpAssignment := NoAssignedPumps;
tmpAssignment[sv_iCalibratingPump] := TRUE;
mpRequiredPumps^.RequiredPumps := tmpAssignment;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
sv_TraceLevel.bDebugCalibration

@RT(6)Trans1 @F 
@Step @RT(6)Step12 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(15)Delete_LogFiles @F @F @RT(1)P @RT(0) @F @F @T @F 

@Trans @RT(7)Trans12 @F @T @F @F @T @T @TL(2)
mbFilesDeleted

@RT(7)Trans12 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans14 @F @T @T @F @T @T @TL(2)
NOT sv_TraceLevel.bDebugCalibration

@RT(7)Trans14 @F 


@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 11 
@Step @RT(8)S_DELAY1 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(7)TDelay1 @F @T @F @F @T @T @TL(2)
S_DELAY1.T >= t#0.5s

@RT(7)TDelay1 @F 
@Step @RT(10)S_StartPos @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(13)AMoveStartPos @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(7)Action8 @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
fbCheckReady(DeviceId := mDeviceForCalib)

@F 

@Trans @RT(9)TBwdReady @F @T @F @F @T @T @TL(2)
fbCheckReady.bReady

@RT(12)TDecompReady @F 
@Step @RT(8)S_DELAY2 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(7)TDelay2 @F @T @F @F @T @T @TL(2)
S_DELAY2.T >= t#0.5s

@RT(7)TDelay2 @F 
@Step @RT(7)S_Calib @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(6)ACalib @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(7)Action9 @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
fbCheckReady(DeviceId := mDeviceForCalib)

@F 

@Trans @RT(11)TCalibReady @F @T @F @F @T @T @TL(2)
fbCheckReady.bReady

@RT(12)TInjectReady @F 
@Step @RT(11)S_WAIT_CALC @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action30 @F @T @RT(1)P @RT(0) @F @F @T @TL(8)
//show lintab during calibration
sv_CalibStatePumpVelocity.pDisplayLintab^.LintabPoints.uNoOfPoints := sv_TmpLintab.LintabPoints.uNoOfPoints;
FOR uTmpCnt := 1 TO sv_TmpLintab.LintabPoints.uNoOfPoints DO
   sv_CalibStatePumpVelocity.pDisplayLintab^.LintabPoints.Point[uTmpCnt].rX:= sv_TmpLintab.LintabPoints.Point[uTmpCnt].rX;
   sv_CalibStatePumpVelocity.pDisplayLintab^.LintabPoints.Point[uTmpCnt].rY:= sv_TmpLintab.LintabPoints.Point[uTmpCnt].rY;
END_FOR;


@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(7)Trans25 @F @T @F @F @T @T @TL(2)
sv_TraceLevel.bDebugCalibration 

@RT(7)Trans15 @F 
@Step @RT(6)Step13 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(13)Write_LogFile @F @F @RT(1)P @RT(0) @F @F @T @F 

@Trans @RT(7)Trans16 @F @T @F @F @T @T @TL(3)
mbLogFileSaved


@RT(7)Trans16 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans17 @F @T @T @F @T @T @TL(2)
NOT sv_TraceLevel.bDebugCalibration 

@RT(7)Trans17 @F 


@Step @RT(6)Step14 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 


@Trans @RT(7)Trans22 @F @T @T @T @T @T @TL(3)
sv_bPumpPreVelCalibAnotherStepN
// another step needed

@RT(7)Trans22 @F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans21 @F @T @F @F @T @T @TL(3)
sv_bPumpPreVelCalibDone
//calib finished

@RT(7)Trans21 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans23 @F @T @F @F @T @T @TL(4)
NOT sv_bPumpPreVelCalibAnotherStepN 
AND NOT sv_bPumpPreVelCalibDone
//maybe remove in vlavour of exit

@RT(7)Trans23 @F 
@Goto @RT(7)S_RESET @F @F 


@Step @RT(6)S_DONE @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action18 @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
//copy lintab and absolute flow, update calib state
fbLog('velocity calib finished');
sv_VelocityLintab := sv_CalibStatePumpVelocity.pDisplayLintab^;
sv_rAbsFlow := sv_rTmpMaxAbsFlow;
sv_CalibStatePumpVelocity.Status := tnCalibState_Done;

@F 

@Trans @RT(7)Trans19 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans19 @F 
@Goto @RT(6)S_STOP @F @F 
@END_SfcData 
@SaActions 5 
@SaText @RT(13)AMoveStartPos 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := mDeviceForCalib;
evStartRequestData.MoveDir := mMoveDirStartPos; 
evStartRequestData.MoveId := mMoveIdStartPos;
SET_EVENT(evStartRequest, evStartRequestData); 


@SaText @RT(14)AStopmovements 1 @TL(2)
fbStopStartedMovements();


@SaText @RT(6)ACalib 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := mDeviceForCalib;
evStartRequestData.MoveDir := mMoveDirCalib; 
evStartRequestData.MoveId := mMoveIdCalib;
SET_EVENT(evStartRequest, evStartRequestData); 


@SaText @RT(15)Delete_LogFiles 1 @TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbFilesDeleted := FALSE;
START_PROCESS_ALGORITHM(paDeleteLogFiles);



@SaText @RT(13)Write_LogFile 1 @TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbLogFileSaved := FALSE;
START_PROCESS_ALGORITHM(paWriteLogFile);


@SaTrans 0 
@SaExits 2 
@SaExit @SaText @RT(14)E_NotSetupMode 1 @TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_OperationMode <> nSetup

@RT(7)S_RESET @RT(1)1 @F @F @SaSfc @RT(14)E_NotSetupMode 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(8)unnamed1 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(8)unnamed3 @F @T @F @F @T @T @TL(2)


@RT(8)unnamed3 @F 
@Goto @RT(9)unlabeled @F @F 
@END_SfcData 

@SaExit @SaText @RT(23)E_NotCalibratingAnymore 1 @TL(4)
// abort calibration, when not in running state and not finished
(sv_CalibStatePumpVelocity.Status <> tnCalibState_Running) AND 
(S_INIT.X OR S_StartPos.X OR S_Calib.X OR S_WAIT_CALC.X OR S_DELAY1.X OR S_DELAY2.X)

@RT(7)S_RESET @RT(1)1 @F @F @SaSfc @RT(23)E_NotCalibratingAnymore 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(8)unnamed4 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(8)unnamed6 @F @T @F @F @T @T @TL(2)


@RT(8)unnamed6 @F 
@Goto @RT(9)unlabeled @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:=cCalibFileVel,bDeleteFiles:=TRUE);
mbFilesDeleted := TRUE;
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:= cCalibFileVel,bDeleteFiles := FALSE);
mbLogFileSaved := TRUE;
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_PumpCalibError.bError THEN
  
   sv_CalibStatePumpVelocity.Status := tnCalibState_Error;
   IF sv_PumpCalibError.iErrorInfo = cValueChangeDuringCalibTooLow THEN
      SET_ALARM(erPumpVelCalibNoValueChange);
   ELSE
      SET_ALARM(erCalibrationVelocityNotStable);
   END_IF;
     
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(35)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mDeviceForCalib.CompId := cMinCompId;
mDeviceForCalib.IndexId := cMinMoveIdent;
mMoveDirStartPos := cMinMoveIdent;
mMoveIdStartPos := cMinMoveIdent;
mMoveDirCalib := cMinMoveIdent;
mMoveIdCalib := cMinMoveIdent;
mpRequiredPumps := EMPTY;
sv_CalibStatePumpVelocity.prInputSensor := EMPTY;
sv_CalibStatePumpVelocity.Group := tnCalibGroup_LintabOnly;

IF (sv_iDeviceForCalib > 0) AND (sv_iDeviceForCalib <= cMaxCalibDevices) THEN   
   mDeviceForCalib := sv_PumpCalibDevices[sv_iDeviceForCalib].DeviceId;
   
   IF CHECK_REF(sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibStartPosMovement^) THEN
      mMoveDirStartPos := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibStartPosMovement^.MoveDir;
      mMoveIdStartPos :=  sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibStartPosMovement^.MoveId;
   END_IF;
   
   IF CHECK_REF(sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^) THEN
      mMoveDirCalib := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.MoveDir;
      mMoveIdCalib := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.MoveId;
      mpRequiredPumps := sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.AnaOutData.pRequiredPumps;
   END_IF;
   
   IF CHECK_REF(sv_PumpCalibDevices[sv_iDeviceForCalib].prActVelocity^) THEN
      sv_CalibStatePumpVelocity.prInputSensor := sv_PumpCalibDevices[sv_iDeviceForCalib].prActVelocity;
      sv_CalibStatePumpVelocity.Group := tnCalibGroup_Velocity;
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
