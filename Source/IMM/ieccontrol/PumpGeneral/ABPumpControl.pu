(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB controls the analog output to a pump.
Depending on the evAnaDevCmd events (sent by outputcoordination), the output blocks are started or stopped.
The response event (evAnaDevResponse) is sent after the output block is stopped (nAnaDevStopped).

Attention!!
It is not allowed to send response events without receiving an according nAnaDevCmd event before.


*)

IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, SET_EVENT
, tevAnaDevCmd
, tsDeviceId
, KAPPL_LintabData
, ABPumpOutput
, tevAnaDevResponse
, tevAnaDevResponseData
, tyPumpData
, tyCalibDevices
, KSYS_Status
, tevAnaDevCmdData

END_IMPORT

ALGORITHM_BLOCK ABPumpControl #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
 sv_rPressure : REAL;
 sv_rVelocity : REAL;
 sv_rAbsFlow : REAL;
 sv_VelocityLintab : KAPPL_LintabData;
 sv_PressureLintab : KAPPL_LintabData;
 sv_VelocityLintabPVCalib : KAPPL_LintabData (* lintab for pump PV calib -> to directly output voltage *);
 sv_PressureLintabPVCalib : KAPPL_LintabData (* lintab for pump PV calib -> to directly output voltage *);
 sv_iPumpFlowChanged : DINT (* must be increased by every pump if sv_rAbsFlow is changed *);
 sv_rMaxPressure : REAL;
 sv_iPumpPressureChanged : DINT (* must be increased by every pump if sv_rMaxPressure is changed *);
 ao_Pressure : REAL;
 ao_Velocity : REAL;
 sv_PumpData : tyPumpData;
 sv_PumpCalibDevices : tyCalibDevices (* !!! device 1 - 20 reserved !!! *);
 sv_iDeviceForCalib : DINT (* index in sv_PumpCalibDevices - list *);
 sv_bDoPumpPressureCalib : BOOL;
 sv_bDoPumpVelocityCalib : BOOL;
 sv_iCalibratingPump : DINT (* number of pump which is actually calibrating *);
 sv_rMaximumPressure : REAL;
 sv_rActPressureHydr : REAL (* actual pressure in bar (measured by pressure sensor) *);
 ai_SysPressure : REAL;
 sv_bDeviceReady : BOOL;
 sv_rMaxVoltagePressure : REAL;
 sv_rMaxVoltageVelocity : REAL;
 sv_rMaxVoltagePressOutput : REAL;
 sv_rMaxVoltageVelOutput : REAL;
END_VAR

SYSTEM_OBJECT
 evAnaDevCmd : tevAnaDevCmd;
 EV_Task_1 : TASK;
 TaskMid : TASK;
 evAnaDevResponse : tevAnaDevResponse;
 PU_Task_7 : TASK;
 TaskInject : TASK;
END_OBJECT

VAR
 abPumpOutput : ABPumpOutput;
 mbStop : BOOL;
 evAnaDevResponseData : tevAnaDevResponseData;
 mprMaxPressure : REFTO REAL;
 mprMaxVoltagePress : REFTO REAL;
 mprMaxVoltageVel : REFTO REAL;
END_VAR

PROCESS_ALGORITHM paInit ON TaskMid AUTOSTART


VAR
 prSysPressure : REFTO REAL;
 s : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//write information to sv_PumpData
IF sv_DeviceId.IndexId <= cMaxNrOfPumps THEN
   sv_PumpData[sv_DeviceId.IndexId].prAbsFlow := @sv_rAbsFlow;
   sv_PumpData[sv_DeviceId.IndexId].prAnaOutP := @sv_rPressure;
   sv_PumpData[sv_DeviceId.IndexId].prAnaOutV := @sv_rVelocity;
   
   //compatibility:
   //use sv_rMaximumPressure for first pump
   //use Injection1.ai_SysPressure for actual system pressure of first pump
   IF sv_DeviceId.IndexId = 1 THEN
      sv_PumpData[sv_DeviceId.IndexId].prMaxPressure := @sv_rMaximumPressure;
      prSysPressure := GET_SYNC_REFTO("Injection1.ai_SysPressure", T#0s, s);
      IF s = KSYS_Status_OK THEN
         prSysPressure := GET_SYNC_REFTO("Injection1.sv_rActSysPressure", T#0s, s);
         sv_PumpData[sv_DeviceId.IndexId].prActSysPressure := prSysPressure;
      END_IF;
      mprMaxVoltagePress := @sv_rMaxVoltagePressure;
      mprMaxVoltageVel := @sv_rMaxVoltageVelocity;
   ELSE
      sv_PumpData[sv_DeviceId.IndexId].prMaxPressure := @sv_rMaxPressure;
      IF IS_LINKED(ai_SysPressure) THEN
         sv_PumpData[sv_DeviceId.IndexId].prActSysPressure := @sv_rActPressureHydr; 
      END_IF;
   END_IF;   
   
   sv_PumpData[sv_DeviceId.IndexId].prActVoltageP := @ao_Pressure;
   sv_PumpData[sv_DeviceId.IndexId].prActVoltageV := @ao_Velocity;
   sv_PumpData[sv_DeviceId.IndexId].prMaxVoltageP := @sv_rMaxVoltagePressOutput;
   sv_PumpData[sv_DeviceId.IndexId].prMaxVoltageV := @sv_rMaxVoltageVelOutput;
   
   mprMaxPressure := sv_PumpData[sv_DeviceId.IndexId].prMaxPressure;
END_IF;

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaAnaDevCmd ON EV_Task_1 WITH evAnaDevCmd


VAR_INPUT
 evAnaDevCmdData : tevAnaDevCmdData;
END_VAR

VAR
 bPumpCalibActive : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
IF evAnaDevCmdData.DeviceId = sv_DeviceId THEN
(* received command from OutputCoordination *)    
    CASE evAnaDevCmdData.Cmd OF
        
       nAnaDevStart:    // start pump output
                        mbStop := FALSE;
                        
                        bPumpCalibActive := FALSE;
                        IF sv_iCalibratingPump = sv_DeviceId.IndexId THEN
                           IF ((sv_bDoPumpVelocityCalib AND evAnaDevCmdData.MoveId = sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.MoveId) OR
                              (sv_bDoPumpPressureCalib AND evAnaDevCmdData.MoveId = sv_PumpCalibDevices[sv_iDeviceForCalib].pPresCalibMovement^.MoveId)) THEN
                              bPumpCalibActive := TRUE;
                           END_IF;
                        END_IF;
                                          
                        IF bPumpCalibActive OR evAnaDevCmdData.MoveId = cMoveServoCalib THEN
                           abPumpOutput.aStart.pLintabP := @sv_PressureLintabPVCalib;
                           abPumpOutput.aStart.pLintabV := @sv_VelocityLintabPVCalib;                                                                
                        ELSE                          
                           abPumpOutput.aStart.pLintabP := @sv_PressureLintab;
                           abPumpOutput.aStart.pLintabV := @sv_VelocityLintab;                           
                        END_IF;
                      
                        abPumpOutput.aStart(AnaOutMode := evAnaDevCmdData.Mode,
                                            prPressure := evAnaDevCmdData.prAnaOutP,
                                            prVelocity := evAnaDevCmdData.prAnaOutV);
                                          
                        sv_bDeviceReady := FALSE;                 
       
                        START_PROCESS_ALGORITHM(paRun);

       nAnaDevStop:     // stop pump output                                              
                        mbStop := TRUE;                       

    END_CASE;    
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskInject AUTOSTART


(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
END_STEP


(* steps *)
STEP WAIT_FOR_STOP_CMD:
END_STEP

STEP STOP_OUTPUT:
AStop (N);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
(* Stopping Pump Output *)
abPumpOutput.aStop();

;#END_EDIT_BLOCK END_ACTION (*AStop*)
STEP STOPPED:
AStopped (P);
END_STEP

ACTION AStopped: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();
// send response to OutputCoordination
evAnaDevResponseData.DeviceId := sv_DeviceId;
evAnaDevResponseData.State := nAnaDevStopped;
SET_EVENT(evAnaDevResponse, evAnaDevResponseData);

sv_bDeviceReady := TRUE; 

;#END_EDIT_BLOCK END_ACTION (*AStopped*)

(* transitions *)
GO_ON_TRANSITION Trans1 (* Trans1 *) FROM INIT TO WAIT_FOR_STOP_CMD :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TStopCmdReceived (* Trans2 *) FROM WAIT_FOR_STOP_CMD TO STOP_OUTPUT :=  #BEGIN_EDIT_BLOCK
mbStop
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TOutputStopped (* Trans7 *) FROM STOP_OUTPUT TO STOPPED :=  #BEGIN_EDIT_BLOCK
abPumpOutput.aStop.bReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans3 (* Trans3 *) FROM STOPPED TO WAIT_FOR_STOP_CMD :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pAbsFlowChanged ON PU_Task_7 WITH sv_rAbsFlow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_iPumpFlowChanged := sv_iPumpFlowChanged + 1;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMaxPressureChanged ON PU_Task_7 WITH mprMaxPressure^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_iPumpPressureChanged := sv_iPumpPressureChanged + 1;

IF (sv_DeviceId.IndexId = 1) THEN
   //only for pump1: copy new maximum pressure to Pump1.sv_rMaxPressure
   //because otherwise some plausibilities are not ok
   sv_rMaxPressure := sv_rMaximumPressure;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMaxOutputVoltage ON PU_Task_7 WITH mprMaxVoltagePress^,mprMaxVoltageVel^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//this code is only necessary for pump1 (due to compatibility reasons)  
sv_rMaxVoltagePressOutput := mprMaxVoltagePress^;
sv_rMaxVoltageVelOutput := mprMaxVoltageVel^


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB controls the analog output to a pump.
Depending on the evAnaDevCmd events (sent by outputcoordination), the output blocks are started or stopped.
The response event (evAnaDevResponse) is sent after the output block is stopped (nAnaDevStopped).

Attention!!
It is not allowed to send response events without receiving an according nAnaDevCmd event before.


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABPumpControl @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
39 
@Var @RT(11)evAnaDevCmd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tevAnaDevCmd @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_1 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_rPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_rVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_rAbsFlow @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_VelocityLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_PressureLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)abPumpOutput @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)ABPumpOutput @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(6)mbStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)evAnaDevResponse @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevAnaDevResponse @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)evAnaDevResponseData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tevAnaDevResponseData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)sv_VelocityLintabPVCalib @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(54)lintab for pump PV calib -> to directly output voltage @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_PressureLintabPVCalib @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(54)lintab for pump PV calib -> to directly output voltage @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)sv_iPumpFlowChanged @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)must be increased by every pump if sv_rAbsFlow is changed @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_rMaxPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_iPumpPressureChanged @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(61)must be increased by every pump if sv_rMaxPressure is changed @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)ao_Pressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)ao_Velocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_PumpData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tyPumpData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_PumpCalibDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tyCalibDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)!!! device 1 - 20 reserved !!! @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iDeviceForCalib @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)index in sv_PumpCalibDevices - list @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bDoPumpPressureCalib @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bDoPumpVelocityCalib @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_iCalibratingPump @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)number of pump which is actually calibrating @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rMaximumPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)mprMaxPressure @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)sv_rActPressureHydr @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(52)actual pressure in bar (measured by pressure sensor) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)ai_SysPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)sv_rMaxVoltagePressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_rMaxVoltageVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_rMaxVoltagePressOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_rMaxVoltageVelOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)mprMaxVoltagePress @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mprMaxVoltageVel @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(13)prSysPressure @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(12)evaAnaDevCmd @STRUCTURED_TEXT 
@RT(0) @RT(11)evAnaDevCmd @RT(9)EV_Task_1 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(15)evAnaDevCmdData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tevAnaDevCmdData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)bPumpCalibActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskInject @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pAbsFlowChanged @STRUCTURED_TEXT 
@RT(0) @RT(11)sv_rAbsFlow @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(19)pMaxPressureChanged @STRUCTURED_TEXT 
@RT(0) @RT(15)mprMaxPressure^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pMaxOutputVoltage @STRUCTURED_TEXT 
@RT(0) @RT(37)mprMaxVoltagePress^,mprMaxVoltageVel^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(40)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//write information to sv_PumpData
IF sv_DeviceId.IndexId <= cMaxNrOfPumps THEN
   sv_PumpData[sv_DeviceId.IndexId].prAbsFlow := @sv_rAbsFlow;
   sv_PumpData[sv_DeviceId.IndexId].prAnaOutP := @sv_rPressure;
   sv_PumpData[sv_DeviceId.IndexId].prAnaOutV := @sv_rVelocity;
   
   //compatibility:
   //use sv_rMaximumPressure for first pump
   //use Injection1.ai_SysPressure for actual system pressure of first pump
   IF sv_DeviceId.IndexId = 1 THEN
      sv_PumpData[sv_DeviceId.IndexId].prMaxPressure := @sv_rMaximumPressure;
      prSysPressure := GET_SYNC_REFTO("Injection1.ai_SysPressure", T#0s, s);
      IF s = KSYS_Status_OK THEN
         prSysPressure := GET_SYNC_REFTO("Injection1.sv_rActSysPressure", T#0s, s);
         sv_PumpData[sv_DeviceId.IndexId].prActSysPressure := prSysPressure;
      END_IF;
      mprMaxVoltagePress := @sv_rMaxVoltagePressure;
      mprMaxVoltageVel := @sv_rMaxVoltageVelocity;
   ELSE
      sv_PumpData[sv_DeviceId.IndexId].prMaxPressure := @sv_rMaxPressure;
      IF IS_LINKED(ai_SysPressure) THEN
         sv_PumpData[sv_DeviceId.IndexId].prActSysPressure := @sv_rActPressureHydr; 
      END_IF;
   END_IF;   
   
   sv_PumpData[sv_DeviceId.IndexId].prActVoltageP := @ao_Pressure;
   sv_PumpData[sv_DeviceId.IndexId].prActVoltageV := @ao_Velocity;
   sv_PumpData[sv_DeviceId.IndexId].prMaxVoltageP := @sv_rMaxVoltagePressOutput;
   sv_PumpData[sv_DeviceId.IndexId].prMaxVoltageV := @sv_rMaxVoltageVelOutput;
   
   mprMaxPressure := sv_PumpData[sv_DeviceId.IndexId].prMaxPressure;
END_IF;

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(42)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
IF evAnaDevCmdData.DeviceId = sv_DeviceId THEN
(* received command from OutputCoordination *)    
    CASE evAnaDevCmdData.Cmd OF
        
       nAnaDevStart:    // start pump output
                        mbStop := FALSE;
                        
                        bPumpCalibActive := FALSE;
                        IF sv_iCalibratingPump = sv_DeviceId.IndexId THEN
                           IF ((sv_bDoPumpVelocityCalib AND evAnaDevCmdData.MoveId = sv_PumpCalibDevices[sv_iDeviceForCalib].pVelCalibMovement^.MoveId) OR
                              (sv_bDoPumpPressureCalib AND evAnaDevCmdData.MoveId = sv_PumpCalibDevices[sv_iDeviceForCalib].pPresCalibMovement^.MoveId)) THEN
                              bPumpCalibActive := TRUE;
                           END_IF;
                        END_IF;
                                          
                        IF bPumpCalibActive OR evAnaDevCmdData.MoveId = cMoveServoCalib THEN
                           abPumpOutput.aStart.pLintabP := @sv_PressureLintabPVCalib;
                           abPumpOutput.aStart.pLintabV := @sv_VelocityLintabPVCalib;                                                                
                        ELSE                          
                           abPumpOutput.aStart.pLintabP := @sv_PressureLintab;
                           abPumpOutput.aStart.pLintabV := @sv_VelocityLintab;                           
                        END_IF;
                      
                        abPumpOutput.aStart(AnaOutMode := evAnaDevCmdData.Mode,
                                            prPressure := evAnaDevCmdData.prAnaOutP,
                                            prVelocity := evAnaDevCmdData.prAnaOutV);
                                          
                        sv_bDeviceReady := FALSE;                 
       
                        START_PROCESS_ALGORITHM(paRun);

       nAnaDevStop:     // stop pump output                                              
                        mbStop := TRUE;                       

    END_CASE;    
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
12 8 8 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(6)Trans1 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans1 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(17)WAIT_FOR_STOP_CMD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(16)TStopCmdReceived @F @T @F @F @T @F @TL(2)
mbStop

@RT(6)Trans2 @F 
@Step @RT(11)STOP_OUTPUT @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)N @RT(0) @F @F @T @TL(3)
(* Stopping Pump Output *)
abPumpOutput.aStop();

@F 

@Trans @RT(14)TOutputStopped @F @T @F @F @T @F @TL(2)
abPumpOutput.aStop.bReady

@RT(6)Trans7 @F 
@Step @RT(7)STOPPED @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)AStopped @F @T @RT(1)P @RT(0) @F @F @T @TL(8)
STOP_PROCESS_ALGORITHM();
// send response to OutputCoordination
evAnaDevResponseData.DeviceId := sv_DeviceId;
evAnaDevResponseData.State := nAnaDevStopped;
SET_EVENT(evAnaDevResponse, evAnaDevResponseData);

sv_bDeviceReady := TRUE; 

@F 


@Trans @RT(6)Trans3 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans3 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_iPumpFlowChanged := sv_iPumpFlowChanged + 1;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_iPumpPressureChanged := sv_iPumpPressureChanged + 1;

IF (sv_DeviceId.IndexId = 1) THEN
   //only for pump1: copy new maximum pressure to Pump1.sv_rMaxPressure
   //because otherwise some plausibilities are not ok
   sv_rMaxPressure := sv_rMaximumPressure;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//this code is only necessary for pump1 (due to compatibility reasons)  
sv_rMaxVoltagePressOutput := mprMaxVoltagePress^;
sv_rMaxVoltageVelOutput := mprMaxVoltageVel^

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
