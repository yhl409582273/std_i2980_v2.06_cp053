IMPORT_OVER_LISTFILE
 IS_LINKED
, tyPanelButton
, tevPanelButtonRegisterData
, tevPanelButtonRegister
, tsDeviceId
, ABManualButton
, tsPanelButton

END_IMPORT

ALGORITHM_BLOCK ABButtonControl #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitStart : BOOL;
 sv_rScrewPosition : REAL;
 sv_bPlastEndReached : BOOL;
 sv_bInjectEnd : BOOL;
 sv_rScrewVolume : REAL;
 sv_iPanelMovementSelector : DINT;
 sv_PanelButtons : tyPanelButton;
 sv_DeviceId : tsDeviceId;
 sv_bDeviceReady : BOOL;
 di_ButtonInject : BOOL;
 di_ButtonDecomp : BOOL;
 di_ButtonPlast : BOOL;
 di_ButtonGeneral1 : BOOL;
 di_ButtonGeneral2 : BOOL;
 sv_bButtonInject : BOOL;
 sv_bButtonDecomp : BOOL;
 sv_bButtonPlast : BOOL;
END_VAR

SYSTEM_OBJECT
 evPanelButtonRegister : tevPanelButtonRegister;
 PU_Task_7 : TASK;
 PU_Task_13 : TASK;
END_OBJECT

VAR
 evPanelButtonRegisterData : tevPanelButtonRegisterData;
 abManualButton : ABManualButton;
 mpbButtonGeneralInject : REFTO BOOL;
 mpbButtonGeneralDecomp : REFTO BOOL;
 mpbButtonGeneralPlast : REFTO BOOL;
 mbDIButtonInjectLinked : BOOL;
 mbDIButtonPlastLinked : BOOL;
 mbDIButtonDecompLinked : BOOL;
 mbDIButtonGeneral1Linked : BOOL;
 mbDIButtonGeneral2Linked : BOOL;
 mpiPanelMovementSelector : REFTO DINT;
END_VAR

VAR CONSTANT
 cButtonMoveInjectDecomp : DINT := 1;
 cButtonMovePlast : DINT := 2;
END_VAR

POSTUPDATE_ALGORITHM pRegisterButtons ON PU_Task_13 WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbButtonGeneralInject := EMPTY;
mpbButtonGeneralDecomp := EMPTY;
mpbButtonGeneralPlast := EMPTY;

mbDIButtonInjectLinked := IS_LINKED(di_ButtonInject);
mbDIButtonPlastLinked := IS_LINKED(di_ButtonPlast);
mbDIButtonDecompLinked := IS_LINKED(di_ButtonDecomp);

mbDIButtonGeneral1Linked := IS_LINKED(di_ButtonGeneral1);
mbDIButtonGeneral2Linked := IS_LINKED(di_ButtonGeneral2);

IF (mbDIButtonGeneral1Linked AND mbDIButtonGeneral2Linked) THEN
    mpiPanelMovementSelector := @sv_iPanelMovementSelector;
END_IF;

// register combined decomp-inject button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonMovement; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonMoveInjectDecomp;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonInject;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonDecomp;
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch1 := @sv_bInjectEnd;
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch2 := @sv_bPlastEndReached;
evPanelButtonRegisterData.Button.Optional.prActVar := @sv_rScrewPosition;
evPanelButtonRegisterData.Button.Optional.prMaxVar := @sv_rScrewVolume;
evPanelButtonRegisterData.Button.Optional.prMinVar :=  EMPTY;
evPanelButtonRegisterData.Button.Optional.iBarAttr := cBarInvert;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register plast button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonMovement; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonMovePlast;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonPlast;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonPlast;     
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch1 := EMPTY;
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch2 := EMPTY;
evPanelButtonRegisterData.Button.Optional.prActVar := @sv_rScrewPosition;
evPanelButtonRegisterData.Button.Optional.prMaxVar := EMPTY;
evPanelButtonRegisterData.Button.Optional.prMinVar := EMPTY;
evPanelButtonRegisterData.Button.Optional.iBarAttr := 0;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pButtonInject ON PU_Task_7 WITH di_ButtonInject, sv_bButtonInject,mpbButtonGeneralInject^


VAR
 bButton : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// soft panel button
bButton := sv_bButtonInject;

// hw panel button
IF mbDIButtonInjectLinked THEN
    bButton := bButton OR di_ButtonInject;    
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralInject^) THEN
    bButton := bButton OR mpbButtonGeneralInject^;
END_IF;

abManualButton.aButtonInject(bButtonInject := bButton);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pButtonDecomp ON PU_Task_7 WITH di_ButtonDecomp, sv_bButtonDecomp,mpbButtonGeneralDecomp^


VAR
 bButton : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// soft panel button
bButton := sv_bButtonDecomp;

// hw panel button
IF mbDIButtonDecompLinked THEN
    bButton := bButton OR di_ButtonDecomp;    
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralDecomp^) THEN
    bButton := bButton OR mpbButtonGeneralDecomp^;
END_IF;

abManualButton.aButtonDecomp(bButtonDecomp := bButton);



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pButtonPlast ON PU_Task_7 WITH di_ButtonPlast, sv_bButtonPlast, mpbButtonGeneralPlast^


VAR
 bButton : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// soft panel button
bButton := sv_bButtonPlast;

// hw panel button
IF mbDIButtonPlastLinked THEN
    bButton := bButton OR di_ButtonPlast;    
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralPlast^) THEN
    bButton := bButton OR mpbButtonGeneralPlast^;
END_IF;

abManualButton.aButtonPlast(bButtonPlast := bButton);



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMoveSelectorChanged ON PU_Task_7 WITH mpiPanelMovementSelector^


VAR
 Button : tsPanelButton;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbButtonGeneralInject := EMPTY;
mpbButtonGeneralDecomp := EMPTY;
mpbButtonGeneralPlast := EMPTY;

IF (NOT sv_bDeviceReady) THEN
    // stop active movements
    abManualButton.aButtonInject(bButtonInject := FALSE);
    abManualButton.aButtonDecomp(bButtonDecomp := FALSE);
    abManualButton.aButtonPlast(bButtonPlast := FALSE);
END_IF;

IF (sv_iPanelMovementSelector > 0) THEN                        
    Button := sv_PanelButtons[sv_iPanelMovementSelector];
    IF (Button.iCompId = sv_DeviceId.CompId AND 
        Button.iIndexId = sv_DeviceId.IndexId) THEN
        IF Button.iButtonId = cButtonMoveInjectDecomp THEN
            // combined inject/decomp
            mpbButtonGeneralInject := @di_ButtonGeneral1;
            mpbButtonGeneralDecomp := @di_ButtonGeneral2; 
        ELSIF Button.iButtonId = cButtonMovePlast THEN
            // plast
            mpbButtonGeneralPlast := @di_ButtonGeneral1;
        END_IF;    
    END_IF;        
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 150 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)IS_LINKED @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABButtonControl @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
33 
@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_rScrewPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_bPlastEndReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInjectEnd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_rScrewVolume @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_iPanelMovementSelector @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_PanelButtons @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tyPanelButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)evPanelButtonRegisterData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevPanelButtonRegisterData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)evPanelButtonRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevPanelButtonRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)di_ButtonInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)di_ButtonDecomp @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)di_ButtonPlast @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_ButtonGeneral1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_ButtonGeneral2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bButtonInject @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bButtonDecomp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bButtonPlast @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)abManualButton @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABManualButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)mpbButtonGeneralInject @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mpbButtonGeneralDecomp @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mpbButtonGeneralPlast @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mbDIButtonInjectLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbDIButtonPlastLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mbDIButtonDecompLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbDIButtonGeneral1Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbDIButtonGeneral2Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)cButtonMoveInjectDecomp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)1 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(16)cButtonMovePlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)2 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)mpiPanelMovementSelector @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pRegisterButtons @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pButtonInject @STRUCTURED_TEXT 
@RT(0) @RT(57)di_ButtonInject, sv_bButtonInject,mpbButtonGeneralInject^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)bButton @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pButtonDecomp @STRUCTURED_TEXT 
@RT(0) @RT(57)di_ButtonDecomp, sv_bButtonDecomp,mpbButtonGeneralDecomp^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)bButton @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(12)pButtonPlast @STRUCTURED_TEXT 
@RT(0) @RT(55)di_ButtonPlast, sv_bButtonPlast, mpbButtonGeneralPlast^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)bButton @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pMoveSelectorChanged @STRUCTURED_TEXT 
@RT(0) @RT(25)mpiPanelMovementSelector^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Button @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsPanelButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(50)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbButtonGeneralInject := EMPTY;
mpbButtonGeneralDecomp := EMPTY;
mpbButtonGeneralPlast := EMPTY;

mbDIButtonInjectLinked := IS_LINKED(di_ButtonInject);
mbDIButtonPlastLinked := IS_LINKED(di_ButtonPlast);
mbDIButtonDecompLinked := IS_LINKED(di_ButtonDecomp);

mbDIButtonGeneral1Linked := IS_LINKED(di_ButtonGeneral1);
mbDIButtonGeneral2Linked := IS_LINKED(di_ButtonGeneral2);

IF (mbDIButtonGeneral1Linked AND mbDIButtonGeneral2Linked) THEN
    mpiPanelMovementSelector := @sv_iPanelMovementSelector;
END_IF;

// register combined decomp-inject button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonMovement; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonMoveInjectDecomp;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonInject;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonDecomp;
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch1 := @sv_bInjectEnd;
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch2 := @sv_bPlastEndReached;
evPanelButtonRegisterData.Button.Optional.prActVar := @sv_rScrewPosition;
evPanelButtonRegisterData.Button.Optional.prMaxVar := @sv_rScrewVolume;
evPanelButtonRegisterData.Button.Optional.prMinVar :=  EMPTY;
evPanelButtonRegisterData.Button.Optional.iBarAttr := cBarInvert;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register plast button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonMovement; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonMovePlast;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonPlast;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonPlast;     
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch1 := EMPTY;
evPanelButtonRegisterData.Button.Optional.pbLimitSwitch2 := EMPTY;
evPanelButtonRegisterData.Button.Optional.prActVar := @sv_rScrewPosition;
evPanelButtonRegisterData.Button.Optional.prMaxVar := EMPTY;
evPanelButtonRegisterData.Button.Optional.prMinVar := EMPTY;
evPanelButtonRegisterData.Button.Optional.iBarAttr := 0;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// soft panel button
bButton := sv_bButtonInject;

// hw panel button
IF mbDIButtonInjectLinked THEN
    bButton := bButton OR di_ButtonInject;    
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralInject^) THEN
    bButton := bButton OR mpbButtonGeneralInject^;
END_IF;

abManualButton.aButtonInject(bButtonInject := bButton);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// soft panel button
bButton := sv_bButtonDecomp;

// hw panel button
IF mbDIButtonDecompLinked THEN
    bButton := bButton OR di_ButtonDecomp;    
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralDecomp^) THEN
    bButton := bButton OR mpbButtonGeneralDecomp^;
END_IF;

abManualButton.aButtonDecomp(bButtonDecomp := bButton);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// soft panel button
bButton := sv_bButtonPlast;

// hw panel button
IF mbDIButtonPlastLinked THEN
    bButton := bButton OR di_ButtonPlast;    
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralPlast^) THEN
    bButton := bButton OR mpbButtonGeneralPlast^;
END_IF;

abManualButton.aButtonPlast(bButtonPlast := bButton);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(31)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbButtonGeneralInject := EMPTY;
mpbButtonGeneralDecomp := EMPTY;
mpbButtonGeneralPlast := EMPTY;

IF (NOT sv_bDeviceReady) THEN
    // stop active movements
    abManualButton.aButtonInject(bButtonInject := FALSE);
    abManualButton.aButtonDecomp(bButtonDecomp := FALSE);
    abManualButton.aButtonPlast(bButtonPlast := FALSE);
END_IF;

IF (sv_iPanelMovementSelector > 0) THEN                        
    Button := sv_PanelButtons[sv_iPanelMovementSelector];
    IF (Button.iCompId = sv_DeviceId.CompId AND 
        Button.iIndexId = sv_DeviceId.IndexId) THEN
        IF Button.iButtonId = cButtonMoveInjectDecomp THEN
            // combined inject/decomp
            mpbButtonGeneralInject := @di_ButtonGeneral1;
            mpbButtonGeneralDecomp := @di_ButtonGeneral2; 
        ELSIF Button.iButtonId = cButtonMovePlast THEN
            // plast
            mpbButtonGeneralPlast := @di_ButtonGeneral1;
        END_IF;    
    END_IF;        
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
