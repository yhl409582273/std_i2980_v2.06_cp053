(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

ABMoveCombinedPlast is a combination of the following movements:
- decompression before plast
- plast
- decompression after plast

Therefore the movement sv_MoveCombinedPlast is registered

After receiving a start event for the movement with moveId cMoveCombinedPlast this block
coordinates decompression and plast by sending the start events to this movements.

Attention:
To avoid that autocycle continues to early the pbDeviceReady flag is modified.
During this combined movement is active, pbDeviceReady refers to sv_bCombinedPlastReady.
After the movement was stopped or it is finished, pbDeviceReady refers to sv_bDeviceReady again. 
*)

IMPORT_OVER_LISTFILE
 SET_EVENT
, cCompInjection
, cMoveDecompBefPlast
, cMoveCombinedPlast
, tsMoveData
, tevStart
, tevStop
, tsDeviceId
, FBDebugTrace
, tsTraceLevel
, tDeviceMovementList
, tevStartedStopped
, tevStartedStoppedData
, tsCombinedPlastData
, KAPPL_VisProfilePlast
, tsSetTimes
, tsDecompParam
, tnOperationMode
, tsActTimes
, ABMovementRegister
, tevStartData
, tevStopData
, FBStart
, FBDebugTrace2
, TON
, FBUpdateEditorProperties

END_IMPORT

ALGORITHM_BLOCK ABMoveCombinedPlast #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_MoveCombinedPlast : tsMoveData (* combined plast movement (decomp bef -> plast -> decomp after) *);
 sv_bInitStart : BOOL;
 sv_DeviceId : tsDeviceId;
 sv_TraceLevel : tsTraceLevel;
 sv_bDeviceReady : BOOL;
 sv_DeviceMovements : tDeviceMovementList;
 sv_bCombinedPlastReady : BOOL (* combined plast ready *);
 sv_CombinedPlastData : tsCombinedPlastData (* necessary data for diplaying combined plast movement in odc editor *);
 sv_PlastProfVis : KAPPL_VisProfilePlast;
 sv_dCalculatedDurationDecompAft : TIME;
 sv_dCalculatedDurationDecompBef : TIME;
 sv_dCalculatedDurationPlast : TIME;
 sv_dDurationCombinedPlast : TIME (* Calculated duration for combined plasticizing *);
 sv_PlastTimesSet : tsSetTimes;
 sv_DecompAftPlastSettings : tsDecompParam;
 sv_DecompBefPlastSettings : tsDecompParam;
 sv_DecompTimesSet : tsSetTimes;
 sv_bPlastEndReached : BOOL (* flag if plast icizing endposition is reached *);
 sv_OperationMode : tnOperationMode;
 sv_rTargetValueDecBefPlast : REAL (* target value of decomp before plast (in cm³) *);
 sv_dActPlastDecompTime : TIME (* act time for combined plast movement *);
 sv_bActivatedDecompBeforePlast : BOOL (* indicates if movement decompress should be activated if start event is sent *);
 sv_bActivatedDecompAfterPlast : BOOL (* indicates if movement decompress should be activated if start event is sent *);
 sv_bMoveRegisterDone : BOOL;
 sv_PlastTimesAct : tsActTimes;
 sv_rPlastStartPosition : REAL (* position at starting plasticizing *);
 sv_rPlastEndPosition : REAL (* position at end of plasticizing *);
 sv_rScrewPosition : REAL (* specific screw position im cm³ *);
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 EV_Task_3 : TASK;
 evStart : tevStart;
 evStop : tevStop;
 evStartedStopped : tevStartedStopped;
 TaskSequencer : TASK;
END_OBJECT

VAR
 mbStop : BOOL;
 fbDebugTrace : FBDebugTrace;
 evStartedStoppedData : tevStartedStoppedData;
 miIndex : DINT (* index of this FU in sv_DeviceMovement - list *);
END_VAR

ALGORITHM aRegister


VAR
 abCombinedPlastRegister : ABMovementRegister;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//register inject movement
sv_MoveCombinedPlast.LockGroups[1] := cLockGroupHeatingNozzle;
sv_MoveCombinedPlast.LockGroups[2] := cLockGroupSafetyGateNozzle;
sv_MoveCombinedPlast.LockGroups[3] := cLockGroupSafetyGateMold;
sv_MoveCombinedPlast.sIconPath := CONCAT(GET_MY_FU_NAME(),"\hmi\images\movScrewRotate.gif");

abCombinedPlastRegister.aRegister(@sv_MoveCombinedPlast);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
   aRegister();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
This Algo receives the evStart event, checks the startconditions and starts paMoveControl.

*)

EVENT_ALGORITHM evaStart ON EV_Task_3 WITH evStart


VAR_INPUT
 evStartData : tevStartData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId.CompId = sv_DeviceId.CompId AND
   evStartData.DeviceId.IndexId = sv_DeviceId.IndexId  THEN
   
   IF evStartData.MoveId = cMoveCombinedPlast THEN
                
      //modify pbDeviceReady
      sv_DeviceMovements[miIndex].pbDeviceReady := @sv_bCombinedPlastReady;
      
      // sending stopped-Message
      evStartedStoppedData.DeviceId := sv_DeviceId;
      evStartedStoppedData.MoveId := cMoveCombinedPlast;
      evStartedStoppedData.MoveDir := cMoveBwd;
      evStartedStoppedData.State := nStarted;
      SET_EVENT(evStartedStopped,evStartedStoppedData);
      
      sv_bCombinedPlastReady := FALSE;
      mbStop := FALSE;
      
      START_PROCESS_ALGORITHM(paMoveControl);
   END_IF;
    
END_IF;
                                       


;#END_EDIT_BLOCK END_ALGORITHM

(*
Receives the stopevent and signalls paMoveControl to stop the running movement.
*)

EVENT_ALGORITHM evaStop ON EV_Task_3 WITH evStop


VAR_INPUT
 evStopData : tevStopData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStopData.DeviceId = sv_DeviceId THEN
   
    IF sv_TraceLevel.bDeviceState THEN
            fbDebugTrace(sText := 'ABMoveCombinedPlast : evStop received');
    END_IF;

   //stopping movement
   mbStop := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paMoveControl ON TaskSequencer(1)


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 fbStart : FBStart;
 fbDebugTrace2 : FBDebugTrace2;
 fbMoveTime : TON;
 dNull : TIME;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
END_STEP


(* steps *)
STEP S_Start:
AStart (P);
AMoveTime (S);
END_STEP

ACTION AStart: #BEGIN_EDIT_BLOCK
fbDebugTrace2(nDeviceState, 'Combined Plast Started');
fbMoveTime(IN := FALSE,
           PT := t#20d);

;#END_EDIT_BLOCK END_ACTION (*AStart*)
STEP S_DecBefPlast:
AStartDecBefPlast (P);
END_STEP

ACTION AStartDecBefPlast: #BEGIN_EDIT_BLOCK
fbStart(DeviceId := sv_DeviceId,
        MoveDir := cMoveBwd,
        MoveId := cMoveDecompBefPlast);

;#END_EDIT_BLOCK END_ACTION (*AStartDecBefPlast*)
STEP S_Plast:
AStartPlast (P);
END_STEP

ACTION AStartPlast: #BEGIN_EDIT_BLOCK
IF NOT sv_bPlastEndReached THEN
   fbStart(DeviceId := sv_DeviceId,
        MoveDir := cMoveBwd,
        MoveId := cMovePlast);
ELSE
   //plast not started
   b := WRITE_SV_DIRECT(sv_PlastTimesAct.dActMoveTime, dNull);
   sv_rPlastStartPosition := sv_rScrewPosition;
   b := WRITE_SVREAL_DIRECT(sv_rPlastEndPosition, sv_rPlastStartPosition); 
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AStartPlast*)
STEP S_CheckDecAftPlast:
END_STEP

STEP S_DecAftPlast:
AStartDecAftPlast (P);
END_STEP

ACTION AStartDecAftPlast: #BEGIN_EDIT_BLOCK
fbStart(DeviceId := sv_DeviceId,
        MoveDir := cMoveBwd,
        MoveId := cMoveDecompAftPlast);

;#END_EDIT_BLOCK END_ACTION (*AStartDecAftPlast*)
STEP S_Ready:
END_STEP

STEP S_Stop:
AReady (P);
Action17 (P);
AMoveTime (R);
END_STEP

ACTION AReady: #BEGIN_EDIT_BLOCK
fbDebugTrace2(nDeviceState, 'Combined Plast Ready');
sv_bCombinedPlastReady := TRUE;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AReady*)
ACTION Action17: #BEGIN_EDIT_BLOCK
//modify pbDeviceReady
sv_DeviceMovements[miIndex].pbDeviceReady := @sv_bDeviceReady;

// sending stopped-Message
evStartedStoppedData.DeviceId := sv_DeviceId;
evStartedStoppedData.MoveId := cMoveCombinedPlast;
evStartedStoppedData.MoveDir := cMoveBwd;
evStartedStoppedData.State := nStopped;
SET_EVENT(evStartedStopped,evStartedStoppedData);

;#END_EDIT_BLOCK END_ACTION (*Action17*)

(* transitions *)
GO_ON_TRANSITION Trans1 (* Trans1 *) FROM S_Init TO S_Start :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDecBefPlastActivated (* Trans10 *) FROM S_Start TO S_DecBefPlast :=  #BEGIN_EDIT_BLOCK
sv_bActivatedDecompBeforePlast
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDecBefPlastReady (* Trans6 *) FROM S_DecBefPlast TO S_Plast :=  #BEGIN_EDIT_BLOCK
sv_bDeviceReady
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDecBefPlastNotActivated (* Trans29 *) FROM S_Start TO S_Plast :=  #BEGIN_EDIT_BLOCK
NOT sv_bActivatedDecompBeforePlast
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TPlastReady (* Trans2 *) FROM S_Plast TO S_CheckDecAftPlast :=  #BEGIN_EDIT_BLOCK
sv_bDeviceReady
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDecAftPlastActivated (* Trans31 *) FROM S_CheckDecAftPlast TO S_DecAftPlast :=  #BEGIN_EDIT_BLOCK
sv_bActivatedDecompAfterPlast
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDecAftPastReady (* Trans6 *) FROM S_DecAftPlast TO S_Ready :=  #BEGIN_EDIT_BLOCK
sv_bDeviceReady 
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDecAftPlastNotActivated (* Trans30 *) FROM S_CheckDecAftPlast TO S_Ready :=  #BEGIN_EDIT_BLOCK
NOT sv_bActivatedDecompAfterPlast
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDeviceReady (* Trans28 *) FROM S_Ready TO S_Stop :=  #BEGIN_EDIT_BLOCK
sv_bDeviceReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans11 (* Trans11 *) FROM S_Stop TO S_Start :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AMoveTime: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbMoveTime(IN := TRUE);
b := WRITE_SV_DIRECT(sv_dActPlastDecompTime, fbMoveTime.ET)

;#END_EDIT_BLOCK END_ACTION (*AMoveTime*)

(* exits *)

EXIT_TRANSITION Stop := #BEGIN_EDIT_BLOCK
mbStop
;#END_EDIT_BLOCK
PRIORITY 1 WITH 
(* init step *)
INITIAL_STEP Step18:
Action24 (P);
END_STEP

ACTION Action24: #BEGIN_EDIT_BLOCK
mbStop := FALSE;

;#END_EDIT_BLOCK END_ACTION (*Action24*)
STEP S_Ready:
END_STEP


(* steps *)

(* transitions *)
GO_ON_TRANSITION Trans19 (* Trans19 *) FROM Step18 TO S_Ready :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pPlastProfile ON PU_Task_7 WITH sv_bInitStart,sv_PlastProfVis.Profile,sv_rTargetValueDecBefPlast

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_rTargetValueDecBefPlast < sv_PlastProfVis.Profile.Points[(sv_PlastProfVis.Profile.iNoOfPoints+1)].rStartPos THEN
   sv_CombinedPlastData.Plast.prTargetValue := @sv_PlastProfVis.Profile.Points[(sv_PlastProfVis.Profile.iNoOfPoints+1)].rStartPos;
   
   //set plast duration to a default value
   //(for displaying in machine sequencer)
   sv_dCalculatedDurationPlast := t#2s;
ELSE
   //decomp before bigger than plast endpos
   sv_CombinedPlastData.Plast.prTargetValue := @sv_rTargetValueDecBefPlast;
   
   //set plast duration to 0.0s
   sv_dCalculatedDurationPlast := t#0s;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pDuration ON PU_Task_7 WITH sv_dCalculatedDurationDecompAft,sv_dCalculatedDurationDecompBef,sv_dCalculatedDurationPlast,sv_PlastTimesSet.dSetDelayTime,sv_DecompTimesSet.dSetDelayTime,sv_DecompAftPlastSettings.Mode,sv_DecompBefPlastSettings.Mode


VAR
 dDelayDecompBefore : TIME;
 dDelayDecompAfter : TIME;
 dMoveTime : TIME;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_DecompBefPlastSettings.Mode <> nNotUsed THEN
   dDelayDecompBefore := sv_DecompTimesSet.dSetDelayTime;
   sv_CombinedPlastData.DecompBefore.pdDelayTime := @sv_DecompTimesSet.dSetDelayTime;
ELSE
   dDelayDecompBefore := t#0s;
   sv_CombinedPlastData.DecompBefore.pdDelayTime := EMPTY;
END_IF;

IF sv_DecompAftPlastSettings.Mode <> nNotUsed THEN
   dDelayDecompAfter := sv_DecompTimesSet.dSetDelayTime;
   sv_CombinedPlastData.DecompAfter.pdDelayTime := @sv_DecompTimesSet.dSetDelayTime;
ELSE
   dDelayDecompAfter := t#0s;
   sv_CombinedPlastData.DecompAfter.pdDelayTime := EMPTY;
END_IF;
 
IF sv_OperationMode <= nHalfAutomatic THEN
   //in HA and FA the duration of combined plast movement is updated by ODC
   dMoveTime := sv_dCalculatedDurationDecompAft +  sv_dCalculatedDurationDecompBef + sv_dCalculatedDurationPlast; 
   sv_dDurationCombinedPlast := dMoveTime + dDelayDecompBefore + dDelayDecompAfter + sv_PlastTimesSet.dSetDelayTime;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pCompleteDuration ON PU_Task_7 WITH sv_dDurationCombinedPlast


VAR
 fbUpdateProperties : FBUpdateEditorProperties;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbUpdateProperties();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMoveRegisterDone ON PU_Task_7 WITH sv_bMoveRegisterDone


VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get index of function unit in sv_DeviceMovements - list
FOR i := 1 TO cMaxMoveDevicesRegistered DO
   IF sv_DeviceMovements[i].DeviceId = sv_DeviceId THEN
      miIndex := i;
      EXIT;           
   END_IF;
END_FOR;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 103 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

ABMoveCombinedPlast is a combination of the following movements:
- decompression before plast
- plast
- decompression after plast

Therefore the movement sv_MoveCombinedPlast is registered

After receiving a start event for the movement with moveId cMoveCombinedPlast this block
coordinates decompression and plast by sending the start events to this movements.

Attention:
To avoid that autocycle continues to early the pbDeviceReady flag is modified.
During this combined movement is active, pbDeviceReady refers to sv_bCombinedPlastReady.
After the movement was stopped or it is finished, pbDeviceReady refers to sv_bDeviceReady again. 
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
3 
@Var @RT(14)cCompInjection @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)104 @RT(19)Component Injection 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)cMoveDecompBefPlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)26 @RT(26)decompression before plast 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)cMoveCombinedPlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)55 @RT(60)combined plast movement (decomp before, plast, decomp after) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABMoveCombinedPlast @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
38 
@Var @RT(20)sv_MoveCombinedPlast @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(61)combined plast movement (decomp bef -> plast -> decomp after) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)mbStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)evStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(6)evStop @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tevStop @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_DeviceMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tDeviceMovementList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bCombinedPlastReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)combined plast ready @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)evStartedStopped @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevStartedStopped @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)evStartedStoppedData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tevStartedStoppedData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)sv_CombinedPlastData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tsCombinedPlastData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(66)necessary data for diplaying combined plast movement in odc editor @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_PlastProfVis @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KAPPL_VisProfilePlast @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(31)sv_dCalculatedDurationDecompAft @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(31)sv_dCalculatedDurationDecompBef @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(27)sv_dCalculatedDurationPlast @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_dDurationCombinedPlast @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(45)Calculated duration for combined plasticizing @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_PlastTimesSet @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_DecompAftPlastSettings @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsDecompParam @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_DecompBefPlastSettings @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsDecompParam @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_DecompTimesSet @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_bPlastEndReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)flag if plast icizing endposition is reached @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)sv_rTargetValueDecBefPlast @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)target value of decomp before plast (in cm³) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)TaskSequencer @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)sv_dActPlastDecompTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)act time for combined plast movement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_bActivatedDecompBeforePlast @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(75)indicates if movement decompress should be activated if start event is sent @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(29)sv_bActivatedDecompAfterPlast @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(75)indicates if movement decompress should be activated if start event is sent @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bMoveRegisterDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)miIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)index of this FU in sv_DeviceMovement - list @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)sv_PlastTimesAct @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsActTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_rPlastStartPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)position at starting plasticizing @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_rPlastEndPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(31)position at end of plasticizing @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_rScrewPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)specific screw position im cm³ @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

9 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aRegister @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(23)abCombinedPlastRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)ABMovementRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(8)evaStart @STRUCTURED_TEXT 
@RT(0) @RT(7)evStart @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(11)evStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tevStartData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(7)evaStop @STRUCTURED_TEXT 
@RT(0) @RT(6)evStop @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(10)evStopData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tevStopData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(13)paMoveControl @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(16)TaskSequencer(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(7)fbStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)FBStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbDebugTrace2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBDebugTrace2 @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)fbMoveTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)dNull @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pPlastProfile @STRUCTURED_TEXT 
@RT(0) @RT(64)sv_bInitStart,sv_PlastProfVis.Profile,sv_rTargetValueDecBefPlast @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pDuration @STRUCTURED_TEXT 
@RT(0) @RT(216)sv_dCalculatedDurationDecompAft,sv_dCalculatedDurationDecompBef,sv_dCalculatedDurationPlast,sv_PlastTimesSet.dSetDelayTime,sv_DecompTimesSet.dSetDelayTime,sv_DecompAftPlastSettings.Mode,sv_DecompBefPlastSettings.Mode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(18)dDelayDecompBefore @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)dDelayDecompAfter @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)dMoveTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pCompleteDuration @STRUCTURED_TEXT 
@RT(0) @RT(25)sv_dDurationCombinedPlast @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbUpdateProperties @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(24)FBUpdateEditorProperties @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pMoveRegisterDone @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_bMoveRegisterDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//register inject movement
sv_MoveCombinedPlast.LockGroups[1] := cLockGroupHeatingNozzle;
sv_MoveCombinedPlast.LockGroups[2] := cLockGroupSafetyGateNozzle;
sv_MoveCombinedPlast.LockGroups[3] := cLockGroupSafetyGateMold;
sv_MoveCombinedPlast.sIconPath := CONCAT(GET_MY_FU_NAME(),"\hmi\images\movScrewRotate.gif");

abCombinedPlastRegister.aRegister(@sv_MoveCombinedPlast);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
   aRegister();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(29)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId.CompId = sv_DeviceId.CompId AND
   evStartData.DeviceId.IndexId = sv_DeviceId.IndexId  THEN
   
   IF evStartData.MoveId = cMoveCombinedPlast THEN
                
      //modify pbDeviceReady
      sv_DeviceMovements[miIndex].pbDeviceReady := @sv_bCombinedPlastReady;
      
      // sending stopped-Message
      evStartedStoppedData.DeviceId := sv_DeviceId;
      evStartedStoppedData.MoveId := cMoveCombinedPlast;
      evStartedStoppedData.MoveDir := cMoveBwd;
      evStartedStoppedData.State := nStarted;
      SET_EVENT(evStartedStopped,evStartedStoppedData);
      
      sv_bCombinedPlastReady := FALSE;
      mbStop := FALSE;
      
      START_PROCESS_ALGORITHM(paMoveControl);
   END_IF;
    
END_IF;
                                       

@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
This Algo receives the evStart event, checks the startconditions and starts paMoveControl.

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStopData.DeviceId = sv_DeviceId THEN
   
    IF sv_TraceLevel.bDeviceState THEN
            fbDebugTrace(sText := 'ABMoveCombinedPlast : evStop received');
    END_IF;

   //stopping movement
   mbStop := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Receives the stopevent and signalls paMoveControl to stop the running movement.
@@@END_Comment@@@ 

@BEG_SfcBody 
40 29 31 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(6)S_Init @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(6)Trans1 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans1 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 9 
@Step @RT(7)S_Start @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(6)AStart @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
fbDebugTrace2(nDeviceState, 'Combined Plast Started');
fbMoveTime(IN := FALSE,
           PT := t#20d);

@F 
@Acb @RT(9)AMoveTime @F @F @RT(1)S @RT(0) @F @F @F @F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(21)TDecBefPlastActivated @F @T @F @F @T @F @TL(2)
sv_bActivatedDecompBeforePlast

@RT(7)Trans10 @F 
@Step @RT(13)S_DecBefPlast @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)AStartDecBefPlast @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
fbStart(DeviceId := sv_DeviceId,
        MoveDir := cMoveBwd,
        MoveId := cMoveDecompBefPlast);

@F 

@Trans @RT(17)TDecBefPlastReady @F @T @F @F @T @F @TL(2)
sv_bDeviceReady

@RT(6)Trans6 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(24)TDecBefPlastNotActivated @F @T @T @F @T @F @TL(2)
NOT sv_bActivatedDecompBeforePlast

@RT(7)Trans29 @F 


@Step @RT(7)S_Plast @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)AStartPlast @F @T @RT(1)P @RT(0) @F @F @T @TL(11)
IF NOT sv_bPlastEndReached THEN
   fbStart(DeviceId := sv_DeviceId,
        MoveDir := cMoveBwd,
        MoveId := cMovePlast);
ELSE
   //plast not started
   b := WRITE_SV_DIRECT(sv_PlastTimesAct.dActMoveTime, dNull);
   sv_rPlastStartPosition := sv_rScrewPosition;
   b := WRITE_SVREAL_DIRECT(sv_rPlastEndPosition, sv_rPlastStartPosition); 
END_IF;

@F 

@Trans @RT(11)TPlastReady @F @T @F @F @T @F @TL(2)
sv_bDeviceReady

@RT(6)Trans2 @F 
@Step @RT(18)S_CheckDecAftPlast @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(21)TDecAftPlastActivated @F @T @F @F @T @F @TL(2)
sv_bActivatedDecompAfterPlast

@RT(7)Trans31 @F 
@Step @RT(13)S_DecAftPlast @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)AStartDecAftPlast @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
fbStart(DeviceId := sv_DeviceId,
        MoveDir := cMoveBwd,
        MoveId := cMoveDecompAftPlast);

@F 

@Trans @RT(16)TDecAftPastReady @F @T @F @F @T @F @TL(2)
sv_bDeviceReady 

@RT(6)Trans6 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(24)TDecAftPlastNotActivated @F @T @T @F @T @F @TL(2)
NOT sv_bActivatedDecompAfterPlast

@RT(7)Trans30 @F 


@Step @RT(7)S_Ready @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(12)TDeviceReady @F @T @F @F @T @F @TL(2)
sv_bDeviceReady

@RT(7)Trans28 @F 
@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 3 
@Acb @RT(6)AReady @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
fbDebugTrace2(nDeviceState, 'Combined Plast Ready');
sv_bCombinedPlastReady := TRUE;
STOP_PROCESS_ALGORITHM();

@F 
@Acb @RT(8)Action17 @F @T @RT(1)P @RT(0) @F @F @T @TL(10)
//modify pbDeviceReady
sv_DeviceMovements[miIndex].pbDeviceReady := @sv_bDeviceReady;

// sending stopped-Message
evStartedStoppedData.DeviceId := sv_DeviceId;
evStartedStoppedData.MoveId := cMoveCombinedPlast;
evStartedStoppedData.MoveDir := cMoveBwd;
evStartedStoppedData.State := nStopped;
SET_EVENT(evStartedStopped,evStartedStoppedData);

@F 
@Acb @RT(9)AMoveTime @F @F @RT(1)R @RT(0) @F @F @F @F 


@Trans @RT(7)Trans11 @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans11 @F 

@END_SfcData 
@SaActions 1 
@SaText @RT(9)AMoveTime 1 @TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbMoveTime(IN := TRUE);
b := WRITE_SV_DIRECT(sv_dActPlastDecompTime, fbMoveTime.ET)


@SaTrans 0 
@SaExits 1 
@SaExit @SaText @RT(4)Stop 1 @TL(2)
mbStop

@RT(6)S_Stop @RT(1)1 @T @F @SaSfc @RT(4)Stop 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(6)Step18 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action24 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
mbStop := FALSE;

@F 

@Trans @RT(7)Trans19 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans19 @F 
@Goto @RT(7)S_Ready @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_rTargetValueDecBefPlast < sv_PlastProfVis.Profile.Points[(sv_PlastProfVis.Profile.iNoOfPoints+1)].rStartPos THEN
   sv_CombinedPlastData.Plast.prTargetValue := @sv_PlastProfVis.Profile.Points[(sv_PlastProfVis.Profile.iNoOfPoints+1)].rStartPos;
   
   //set plast duration to a default value
   //(for displaying in machine sequencer)
   sv_dCalculatedDurationPlast := t#2s;
ELSE
   //decomp before bigger than plast endpos
   sv_CombinedPlastData.Plast.prTargetValue := @sv_rTargetValueDecBefPlast;
   
   //set plast duration to 0.0s
   sv_dCalculatedDurationPlast := t#0s;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(27)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_DecompBefPlastSettings.Mode <> nNotUsed THEN
   dDelayDecompBefore := sv_DecompTimesSet.dSetDelayTime;
   sv_CombinedPlastData.DecompBefore.pdDelayTime := @sv_DecompTimesSet.dSetDelayTime;
ELSE
   dDelayDecompBefore := t#0s;
   sv_CombinedPlastData.DecompBefore.pdDelayTime := EMPTY;
END_IF;

IF sv_DecompAftPlastSettings.Mode <> nNotUsed THEN
   dDelayDecompAfter := sv_DecompTimesSet.dSetDelayTime;
   sv_CombinedPlastData.DecompAfter.pdDelayTime := @sv_DecompTimesSet.dSetDelayTime;
ELSE
   dDelayDecompAfter := t#0s;
   sv_CombinedPlastData.DecompAfter.pdDelayTime := EMPTY;
END_IF;
 
IF sv_OperationMode <= nHalfAutomatic THEN
   //in HA and FA the duration of combined plast movement is updated by ODC
   dMoveTime := sv_dCalculatedDurationDecompAft +  sv_dCalculatedDurationDecompBef + sv_dCalculatedDurationPlast; 
   sv_dDurationCombinedPlast := dMoveTime + dDelayDecompBefore + dDelayDecompAfter + sv_PlastTimesSet.dSetDelayTime;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbUpdateProperties();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get index of function unit in sv_DeviceMovements - list
FOR i := 1 TO cMaxMoveDevicesRegistered DO
   IF sv_DeviceMovements[i].DeviceId = sv_DeviceId THEN
      miIndex := i;
      EXIT;           
   END_IF;
END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
