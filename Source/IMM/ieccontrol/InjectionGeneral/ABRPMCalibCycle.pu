(*
Do steps for automatic RPM calibration of machine
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, cMovePlast
, cCalibFileRpm
, tsCalibMovement
, tsDeviceId
, tnOperationMode
, tevStartRequest
, KAPPL_LintabData
, ABAutoCalibRedoListener
, FBCalibWriteLog
, tsTraceLevel
, FBCheckReady
, tevStartRequestData
, FBStopStartedMovements
, FBAutoCalibLog
, ABCreateMeasureArray

END_IMPORT

ALGORITHM_BLOCK ABRPMCalibCycle #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bDoRPMCalib : BOOL (* indicator for RPM calibration *);
 sv_CalibStateRPM : tsCalibMovement;
 sv_DeviceId : tsDeviceId;
 sv_OperationMode : tnOperationMode;
 sv_ScrewRevVelLintab : KAPPL_LintabData (* Correct lintab of RPM *);
 sv_TmpRpmLintab : KAPPL_LintabData (* Temporary lintab, after successful calibration copy to the correct lintab *);
 sv_rMaxRpm : REAL (* Maximal rotaion speed *);
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 TaskMid : TASK;
 PU_Task_7 : TASK;
 evStartRequest : tevStartRequest;
 TaskSlow : TASK;
END_OBJECT

VAR
 abAutoCalibRedoListenerRPM : ABAutoCalibRedoListener;
 mbLogFileSaved : BOOL := TRUE;
 mbFilesDeleted : BOOL;
 fbCalibWriteLog : FBCalibWriteLog;
END_VAR

(*
Start RPM calibration
*)

POSTUPDATE_ALGORITHM pStart ON PU_Task_7 WITH sv_CalibStateRPM.Status

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN    
   IF sv_CalibStateRPM.Status = tnCalibState_Running THEN
      START_PROCESS_ALGORITHM(paRun);
   END_IF;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskMid


VAR_TEMP
 evStartRequestData : tevStartRequestData;
END_VAR

VAR
 fbCheckReady : FBCheckReady;
 fbStopStartedMovements : FBStopStartedMovements;
 fbLog : FBAutoCalibLog;
 abCreateMeasureArray : ABCreateMeasureArray;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_INIT:
AInit (P);
END_STEP

ACTION AInit: #BEGIN_EDIT_BLOCK
sv_bDoRPMCalib := TRUE;
sv_CalibStateRPM.prGlobalMaxX^ := sv_rMaxRpm;
sv_CalibStateRPM.prGlobalMaxY^ := 100.0; // %
abCreateMeasureArray.aInit();  //create dynamic arrays
fbLog('RPM calib started');

;#END_EDIT_BLOCK END_ACTION (*AInit*)

(* steps *)
STEP S_RESET:
AStopmovements (P);
Action24 (P);
END_STEP

ACTION Action24: #BEGIN_EDIT_BLOCK
IF sv_CalibStateRPM.Status = tnCalibState_Error THEN
   fbLog('RPM calib error'); 
ELSE
   fbLog('RPM calib aborted');
   sv_CalibStateRPM.Status := tnCalibState_Aborted;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action24*)
STEP S_STOP:
Action22 (P);
END_STEP

ACTION Action22: #BEGIN_EDIT_BLOCK
sv_bDoRPMCalib := FALSE;

//delete dynamic arrays
abCreateMeasureArray.aRelease();

STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*Action22*)
STEP Step6:
Delete_LogFiles (P);
END_STEP

STEP S_PLAST:
ADoPlasticize (P);
Action8 (N);
END_STEP

ACTION Action8: #BEGIN_EDIT_BLOCK
fbCheckReady(DeviceId := sv_DeviceId)

;#END_EDIT_BLOCK END_ACTION (*Action8*)
STEP Step9:
END_STEP

STEP Step8:
Write_LogFile (P);
END_STEP

STEP S_CHECK:
Action17 (P);
END_STEP

ACTION Action17: #BEGIN_EDIT_BLOCK
// check lintab for sanity, then save it
IF sv_TmpRpmLintab.LintabPoints.uNoOfPoints >= 2 THEN
   sv_ScrewRevVelLintab := sv_TmpRpmLintab;
   sv_rMaxRpm := sv_TmpRpmLintab.LintabPoints.Point[sv_TmpRpmLintab.LintabPoints.uNoOfPoints].rX;
   sv_CalibStateRPM.Status := tnCalibState_Done;
ELSE
   fbLog('RMP calib -> invalid number of lintab points');
   sv_CalibStateRPM.Status := tnCalibState_Error;
END_IF;


;#END_EDIT_BLOCK END_ACTION (*Action17*)

(* transitions *)
GO_ON_TRANSITION Trans15 (* Trans15 *) FROM S_RESET TO S_STOP :=  #BEGIN_EDIT_BLOCK
mbLogFileSaved
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans18 (* Trans18 *) FROM S_STOP TO S_INIT :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans6 (* Trans6 *) FROM S_INIT TO Step6 :=  #BEGIN_EDIT_BLOCK
sv_TraceLevel.bDebugCalibration
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans1 (* Trans1 *) FROM Step6 TO S_PLAST :=  #BEGIN_EDIT_BLOCK
mbFilesDeleted
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans7 (* Trans7 *) FROM S_INIT TO S_PLAST :=  #BEGIN_EDIT_BLOCK
NOT sv_TraceLevel.bDebugCalibration
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TPlastReady (* Trans11 *) FROM S_PLAST TO Step9 :=  #BEGIN_EDIT_BLOCK
fbCheckReady.bReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans5 (* Trans5 *) FROM Step9 TO Step8 :=  #BEGIN_EDIT_BLOCK
sv_TraceLevel.bDebugCalibration
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans9 (* Trans9 *) FROM Step8 TO S_CHECK :=  #BEGIN_EDIT_BLOCK
mbLogFileSaved
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans10 (* Trans10 *) FROM Step9 TO S_CHECK :=  #BEGIN_EDIT_BLOCK
NOT sv_TraceLevel.bDebugCalibration
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans19 (* Trans19 *) FROM S_CHECK TO S_STOP :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION ADoPlasticize: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := sv_DeviceId;
evStartRequestData.MoveDir := cMoveBwd; 
evStartRequestData.MoveId := cMovePlast;
SET_EVENT(evStartRequest, evStartRequestData);




;#END_EDIT_BLOCK END_ACTION (*ADoPlasticize*)
ACTION AStopmovements: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbStopStartedMovements();


;#END_EDIT_BLOCK END_ACTION (*AStopmovements*)
ACTION Delete_LogFiles: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbFilesDeleted := FALSE;
START_PROCESS_ALGORITHM(paDeleteLogFiles);


;#END_EDIT_BLOCK END_ACTION (*Delete_LogFiles*)
ACTION Write_LogFile: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbLogFileSaved := FALSE;
START_PROCESS_ALGORITHM(paWriteLogFile);

;#END_EDIT_BLOCK END_ACTION (*Write_LogFile*)

(* exits *)

EXIT_TRANSITION E_NotSetupMode := #BEGIN_EDIT_BLOCK
sv_OperationMode <> nSetup

;#END_EDIT_BLOCK
PRIORITY 1 WITH  INITIAL_STEP S_RESET: END_STEP
END_TRANSITION

EXIT_TRANSITION E_NotCalibratingAnymore := #BEGIN_EDIT_BLOCK
// abort calibration, when not in running state and not finished
sv_CalibStateRPM.Status <> tnCalibState_Running //AND (S_INIT.X OR S_FORWARD.X OR S_BACKWARD.X)
//do not reset if we are in a initalisation, else the ProcessAlgo will stop itself again
AND S_PLAST.X// NOT (S_INIT.X OR S_STOP.X OR S_RESET.X)
;#END_EDIT_BLOCK
PRIORITY 1 WITH  INITIAL_STEP S_RESET: END_STEP
END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paDeleteLogFiles ON TaskSlow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:=cCalibFileRpm,bDeleteFiles:=TRUE);
mbFilesDeleted := TRUE;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paWriteLogFile ON TaskSlow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:= cCalibFileRpm,bDeleteFiles := FALSE);
mbLogFileSaved := TRUE;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
Do steps for automatic RPM calibration of machine
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(10)cMovePlast @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)13 @RT(23)plast movement (rotate) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cCalibFileRpm @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(10)'CalibRpm' @RT(32)Filename for RPM Calib Debug-Log 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABRPMCalibCycle @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(7)TaskMid @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)sv_bDoRPMCalib @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)indicator for RPM calibration @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_CalibStateRPM @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsCalibMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)evStartRequest @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tevStartRequest @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)sv_ScrewRevVelLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Correct lintab of RPM @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)abAutoCalibRedoListenerRPM @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)ABAutoCalibRedoListener @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)sv_TmpRpmLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(73)Temporary lintab, after successful calibration copy to the correct lintab @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)sv_rMaxRpm @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Maximal rotaion speed @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)mbLogFileSaved @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbFilesDeleted @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbCalibWriteLog @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)FBCalibWriteLog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(23)sv_CalibStateRPM.Status @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(12)fbCheckReady @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(12)FBCheckReady @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)evStartRequestData @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(19)tevStartRequestData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(22)fbStopStartedMovements @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(22)FBStopStartedMovements @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)fbLog @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)FBAutoCalibLog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)abCreateMeasureArray @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)ABCreateMeasureArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paDeleteLogFiles @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(14)paWriteLogFile @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN    
   IF sv_CalibStateRPM.Status = tnCalibState_Running THEN
      START_PROCESS_ALGORITHM(paRun);
   END_IF;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Start RPM calibration
@@@END_Comment@@@ 

@BEG_SfcBody 
10 10 12 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 13 
@Step @RT(7)S_RESET @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(14)AStopmovements @F @F @RT(1)P @RT(0) @F @F @T @F 
@Acb @RT(8)Action24 @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
IF sv_CalibStateRPM.Status = tnCalibState_Error THEN
   fbLog('RPM calib error'); 
ELSE
   fbLog('RPM calib aborted');
   sv_CalibStateRPM.Status := tnCalibState_Aborted;
END_IF;

@F 

@Trans @RT(7)Trans15 @F @T @F @F @T @F @TL(2)
mbLogFileSaved

@RT(7)Trans15 @F 
@Step @RT(6)S_STOP @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action22 @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
sv_bDoRPMCalib := FALSE;

//delete dynamic arrays
abCreateMeasureArray.aRelease();

STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(7)Trans18 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans18 @F 
@Step @RT(6)S_INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AInit @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
sv_bDoRPMCalib := TRUE;
sv_CalibStateRPM.prGlobalMaxX^ := sv_rMaxRpm;
sv_CalibStateRPM.prGlobalMaxY^ := 100.0; // %
abCreateMeasureArray.aInit();  //create dynamic arrays
fbLog('RPM calib started');

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans6 @F @T @F @F @T @T @TL(2)
sv_TraceLevel.bDebugCalibration

@RT(6)Trans6 @F 
@Step @RT(5)Step6 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(15)Delete_LogFiles @F @F @RT(1)P @RT(0) @F @F @T @F 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
mbFilesDeleted

@RT(6)Trans1 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(6)Trans7 @F @T @T @F @T @T @TL(2)
NOT sv_TraceLevel.bDebugCalibration

@RT(6)Trans7 @F 


@Step @RT(7)S_PLAST @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(13)ADoPlasticize @F @F @RT(1)P @RT(0) @F @F @T @F 
@Acb @RT(7)Action8 @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
fbCheckReady(DeviceId := sv_DeviceId)

@F 

@Trans @RT(11)TPlastReady @F @T @F @F @T @T @TL(2)
fbCheckReady.bReady

@RT(7)Trans11 @F 
@Step @RT(5)Step9 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans5 @F @T @F @F @T @T @TL(2)
sv_TraceLevel.bDebugCalibration

@RT(6)Trans5 @F 
@Step @RT(5)Step8 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(13)Write_LogFile @F @F @RT(1)P @RT(0) @F @F @T @F 

@Trans @RT(6)Trans9 @F @T @F @F @T @T @TL(2)
mbLogFileSaved

@RT(6)Trans9 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans10 @F @T @T @F @T @T @TL(2)
NOT sv_TraceLevel.bDebugCalibration

@RT(7)Trans10 @F 


@Step @RT(7)S_CHECK @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action17 @F @T @RT(1)P @RT(0) @F @F @T @TL(11)
// check lintab for sanity, then save it
IF sv_TmpRpmLintab.LintabPoints.uNoOfPoints >= 2 THEN
   sv_ScrewRevVelLintab := sv_TmpRpmLintab;
   sv_rMaxRpm := sv_TmpRpmLintab.LintabPoints.Point[sv_TmpRpmLintab.LintabPoints.uNoOfPoints].rX;
   sv_CalibStateRPM.Status := tnCalibState_Done;
ELSE
   fbLog('RMP calib -> invalid number of lintab points');
   sv_CalibStateRPM.Status := tnCalibState_Error;
END_IF;


@F 

@Trans @RT(7)Trans19 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans19 @F 
@Goto @RT(6)S_STOP @F @F 
@END_SfcData 
@SaActions 4 
@SaText @RT(13)ADoPlasticize 1 @TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := sv_DeviceId;
evStartRequestData.MoveDir := cMoveBwd; 
evStartRequestData.MoveId := cMovePlast;
SET_EVENT(evStartRequest, evStartRequestData);





@SaText @RT(14)AStopmovements 1 @TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbStopStartedMovements();



@SaText @RT(15)Delete_LogFiles 1 @TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbFilesDeleted := FALSE;
START_PROCESS_ALGORITHM(paDeleteLogFiles);



@SaText @RT(13)Write_LogFile 1 @TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbLogFileSaved := FALSE;
START_PROCESS_ALGORITHM(paWriteLogFile);


@SaTrans 0 
@SaExits 2 
@SaExit @SaText @RT(14)E_NotSetupMode 1 @TL(3)
sv_OperationMode <> nSetup


@RT(7)S_RESET @RT(1)1 @F @F @SaSfc @RT(14)E_NotSetupMode 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(6)Step12 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action20 @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(7)Trans16 @F @T @T @F @T @T @TL(2)
(*inl.*)

@RT(7)Trans16 @F 
@Goto @RT(9)unlabeled @F @F 
@END_SfcData 

@SaExit @SaText @RT(23)E_NotCalibratingAnymore 1 @TL(5)
// abort calibration, when not in running state and not finished
sv_CalibStateRPM.Status <> tnCalibState_Running //AND (S_INIT.X OR S_FORWARD.X OR S_BACKWARD.X)
//do not reset if we are in a initalisation, else the ProcessAlgo will stop itself again
AND S_PLAST.X// NOT (S_INIT.X OR S_STOP.X OR S_RESET.X)

@RT(7)S_RESET @RT(1)1 @F @F @SaSfc @RT(23)E_NotCalibratingAnymore 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(6)Step16 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action28 @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(7)Trans22 @F @T @F @F @T @T @TL(2)
(*inl.*)

@RT(7)Trans22 @F 
@Goto @RT(9)unlabeled @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:=cCalibFileRpm,bDeleteFiles:=TRUE);
mbFilesDeleted := TRUE;
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbCalibWriteLog(fileName:= cCalibFileRpm,bDeleteFiles := FALSE);
mbLogFileSaved := TRUE;
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
