IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, SET_ALARM
, FCalcSetVelocity
, SET_EVENT
, KMEM_ArraySet
, GET_MY_FU_NAME
, KMEM_ArrayCreate
, nSetup
, cAutoIdentNoCycles
, cMoveFwd
, cMoveBwd
, cIdentFileEjectorFwd
, cIdentFileEjectorBwd
, IDENT_MEASURE_ARRAY_S
, IDENT_MEASURE_ARRAY_VSet
, IDENT_MEASURE_ARRAY_VAct
, IDENT_MEASURE_ARRAY_PSet
, IDENT_MEASURE_ARRAY_PAct
, IDENT_MEASURE_ARRAY_T
, KMEM_CreateData
, ABSignalAnalyze
, KSWO_Status
, RTC
, KMEM_Status
, KCTRL_Filter_Param

END_IMPORT

ALGORITHM_BLOCK ABAutoIdentSpeedMeasure #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 TaskAnalog : TASK;
END_OBJECT

VAR
 mbInit : BOOL (* Check init done *);
 muCount : UDINT (* Number of measured points *);
 mbRestart : BOOL;
 mrMaxSetSpeed : REAL;
 mrMaxSetPressure : REAL;
 mrMaxActSpeed : REAL;
 mrMinActSpeed : REAL;
 mrMaxActPressure : REAL;
 mrMinActPressure : REAL;
 mbSpeedLimitUnStable : BOOL;
 mbPressureLimitReached : BOOL;
 mbSpeedLimitReached : BOOL;
 mrSpeedLimit : REAL;
 arrayIdentHandle_rS : KMEM_CreateData (* Handle of dynamic array *);
 arrayIdentHandle_rVSet : KMEM_CreateData (* Handle of dynamic array *);
 arrayIdentHandle_rVAct : KMEM_CreateData (* Handle of dynamic array *);
 arrayIdentHandle_rPSet : KMEM_CreateData (* Handle of dynamic array *);
 arrayIdentHandle_rPAct : KMEM_CreateData (* Handle of dynamic array *);
 arrayIdentHandle_dT : KMEM_CreateData (* Handle of dynamic array *);
 abSignalAnalyze : ABSignalAnalyze;
 mrActSpeed : REAL;
 mrActPres : REAL;
 mrActPos : REAL;
 mrFilteredSpeed : REAL;
 mbArraysCreated : BOOL;
END_VAR

ALGORITHM aInit


VAR_OUTPUT
 bDone : BOOL (* Init done *);
 bError : BOOL (* Error flag (if TRUE an error occured) *);
 iErrorInfo : DINT (* Additional error info *);
END_VAR

VAR
 iSize : UDINT;
 rInitValue : REAL := 0.0;
 dInitValue : TIME := T#0s;
 variableName : STRING(255);
 swoState : KSWO_Status;
 bSwoInitDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
mbInit   := FALSE;
bDone    := FALSE;

iSize := MAX_MEASURE_POINTS;

IF NOT mbArraysCreated THEN
   arrayIdentHandle_rS := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_S,rInitValue,iSize);
   arrayIdentHandle_rS := KMEM_GetHandle(IDENT_MEASURE_ARRAY_S);
   arrayIdentHandle_rVSet := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_VSet,rInitValue,iSize);
   arrayIdentHandle_rVSet := KMEM_GetHandle(IDENT_MEASURE_ARRAY_VSet);
   arrayIdentHandle_rVAct := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_VAct,rInitValue,iSize);
   arrayIdentHandle_rVAct := KMEM_GetHandle(IDENT_MEASURE_ARRAY_VAct);
   arrayIdentHandle_rPSet := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_PSet,rInitValue,iSize);
   arrayIdentHandle_rPSet := KMEM_GetHandle(IDENT_MEASURE_ARRAY_PSet);
   arrayIdentHandle_rPAct := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_PAct,rInitValue,iSize);
   arrayIdentHandle_rPAct := KMEM_GetHandle(IDENT_MEASURE_ARRAY_PAct);
   arrayIdentHandle_dT := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_T,dInitValue,iSize);
   arrayIdentHandle_dT := KMEM_GetHandle(IDENT_MEASURE_ARRAY_T);
END_IF;

IF arrayIdentHandle_rS.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rVSet.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rVAct.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rPSet.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rPAct.Status <> KMEM_Status_OK OR
   arrayIdentHandle_dT.Status <> KMEM_Status_OK    THEN

   bError := TRUE;
   iErrorInfo := -401;
   mbInit := FALSE; 
ELSE
   mbInit := TRUE; 
   bError   := FALSE;
   iErrorInfo := 0;
   mbRestart := TRUE;
   mbArraysCreated := TRUE;
END_IF;

IF NOT bSwoInitDone THEN
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.Unstable');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mbSpeedLimitUnStable);
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.PresLimitReached');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mbPressureLimitReached);
   
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.ActPos');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrActPos);
   
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.ActSpeed');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrActSpeed);
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.SpeedLimit');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrSpeedLimit);
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.FilteredSpeed');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrFilteredSpeed);
   
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.ActPres');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrActPres);
   
   bSwoInitDone := TRUE;
END_IF;

bDone := TRUE;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aReset


VAR_OUTPUT
 bDone : BOOL (* initialization done *);
 bError : BOOL (* error at initialization *);
 iErrorInfo : DINT (* additional error info *);
END_VAR
#BEGIN_EDIT_BLOCK
mrMaxActSpeed := 0.0;
mrMaxSetSpeed := 0.0;
mrMaxSetPressure := 0.0;
mrMaxActPressure := 0.0;
mbSpeedLimitUnStable := FALSE;

mbRestart := TRUE;

bDone := TRUE;
bError := FALSE;
iErrorInfo := 0;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aMeasure


VAR_INPUT
 bRestart : BOOL (* restart measurement *);
 rPosition : REAL (* actual position *);
 rRefVelocity : REAL (* velocity reference *);
 rActVelocity : REAL (* actual velocity *);
 rRefPressure : REAL (* pressure reference *);
 rActPressure : REAL (* actual pressure *);
 rMaxLimitPosition : REAL (* actual pressure *);
 rMinLimitPosition : REAL (* actual pressure *);
END_VAR

VAR_OUTPUT
 bSpeedUnStable : BOOL (* act velocity is unstable *);
 bDone : BOOL (* Init done *);
 bError : BOOL (* Error flag (if TRUE an error occured) *);
 iErrorInfo : DINT (* Additional error info *);
END_VAR

VAR
 fbGetTime : RTC;
 dStartTime : TIME;
 dActTime : TIME;
 statusKMEM : KMEM_Status;
 local_rReal : REAL;
 local_dTime : TIME;
 rStartPosition : REAL;
 dCyleTime : TIME;
 FilterParam : KCTRL_Filter_Param := (uDegree:=1,rCutoffFrequency:=10.0);
 rPressFactor : REAL := 0.9;
 bCheckStability : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
IF (NOT mbInit) THEN
   bDone := FALSE;
   bError := TRUE;
   iErrorInfo := -0815;
   RETURN;
END_IF;
fbGetTime();
IF (bRestart OR mbRestart) THEN
   dStartTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT)); 
   rStartPosition := rPosition;
   mrMaxActSpeed := 0.0;
   mrMinActSpeed := 0.0;
   mrMaxActPressure := 0.0;
   mrMinActPressure := 0.0;
   muCount := 0;
   dCyleTime := GET_TASK_INTERVAL();
   abSignalAnalyze.aInit(FilterParam := FilterParam,
                         dMeasCycleTime := dCyleTime);
   abSignalAnalyze.aAnalyzeOnline(bStart := FALSE, rActValue := rPosition);
   mbSpeedLimitUnStable := FALSE;
   mbPressureLimitReached := FALSE;
   bSpeedUnStable := FALSE;
   mbRestart := FALSE;
END_IF;
dActTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT)) - dStartTime;

muCount := muCount+1;
IF (muCount>MAX_MEASURE_POINTS) THEN
   bError   := TRUE;
   iErrorInfo := -4711;
   bDone    := FALSE;    
   muCount  := MAX_MEASURE_POINTS;
ELSE
   IF (rPosition >= rMinLimitPosition) AND (rPosition <= rMaxLimitPosition) THEN   
      bCheckStability := TRUE;
      IF (rActVelocity > mrMaxActSpeed) THEN
         mrMaxActSpeed := rActVelocity;
      END_IF;
      IF (rActVelocity < mrMinActSpeed) THEN
         mrMinActSpeed := rActVelocity;
      END_IF;
      IF (rActPressure > mrMaxActPressure) THEN
         mrMaxActPressure := rActPressure;
      END_IF;
      IF (rActPressure < mrMinActPressure) THEN
         mrMinActPressure := rActPressure;
      END_IF;
      IF (mrMaxActPressure > rPressFactor * rRefPressure) THEN
         mbPressureLimitReached := TRUE;
      END_IF;
      
      local_rReal := rRefVelocity;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rVSet.Handle,local_rReal,muCount);
   
      local_rReal := rRefPressure;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rPSet.Handle,local_rReal,muCount);
   ELSE
      bCheckStability := FALSE;
   
      local_rReal := 0.0;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rVSet.Handle,local_rReal,muCount);
   
      local_rReal := 0.0;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rPSet.Handle,local_rReal,muCount);     
   END_IF;
   abSignalAnalyze.aAnalyzeOnline(bStart := TRUE,
                                  rActValue := rPosition,
                                  rActVel := rActVelocity,
                                  bCheckStability := bCheckStability);
   mbSpeedLimitUnStable := abSignalAnalyze.aAnalyzeOnline.bUnStable;
   bSpeedUnStable := mbSpeedLimitUnStable;

   local_rReal := rPosition; //VAR_INPUT can not be used for KMEM_ArraySet;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_rS.Handle,local_rReal,muCount);
        
        
   local_rReal := abSignalAnalyze.aAnalyzeOnline.rFilteredVel; //rActVelocity;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_rVAct.Handle,local_rReal,muCount);
        
   local_rReal := rActPressure;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_rPAct.Handle,local_rReal,muCount);
        
   local_dTime := dActTime; //VAR_INPUT can not be used for KMEM_ArraySet;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_dT.Handle,local_dTime,muCount);
   

   mrActSpeed := rActVelocity;
   mrSpeedLimit := abSignalAnalyze.aAnalyzeOnline.rMeanValue;
   mrFilteredSpeed := abSignalAnalyze.aAnalyzeOnline.rFilteredVel;
   
   mrActPos := rPosition;

   mrActPres := rActPressure;

END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCloseMeasure


VAR
 statusKMEM : KMEM_Status;
 local_rReal : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
local_rReal := UDINT_TO_REAL(muCount); 
statusKMEM := KMEM_ArraySet(arrayIdentHandle_rS.Handle,local_rReal,0);




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetMaxValues


VAR_OUTPUT
 rMaxSpeed : REAL (* Max measuren velocity *);
 rMinSpeed : REAL (* Min measuren velocity *);
 rMaxPressure : REAL (* Max measured pressure *);
 rMinPressure : REAL (* Min measured pressure *);
 bSpeedLimitUnStable : BOOL (* Measured speed is unstabel *);
 bPressureLimitReached : BOOL (* Pressure limit is reached *);
 bSpeedLimitReached : BOOL (* Reference velocity reached *);
 bDone : BOOL (* Init done *);
 bError : BOOL (* Error flag (if TRUE an error occured) *);
 iErrorInfo : DINT (* Additional error info *);
END_VAR
#BEGIN_EDIT_BLOCK
bDone :=FALSE;

rMaxSpeed := mrMaxActSpeed;
rMinSpeed := mrMinActSpeed;
rMaxPressure := mrMaxActPressure;
rMinPressure := mrMinActPressure;
bSpeedLimitUnStable := mbSpeedLimitUnStable;
bPressureLimitReached := mbPressureLimitReached;
IF (mrMaxActSpeed >= mrMaxSetSpeed * 0.95) THEN
   mbSpeedLimitReached := TRUE;
ELSE
   mbSpeedLimitReached := FALSE;
END_IF;
bSpeedLimitReached := mbSpeedLimitReached;

bDone :=TRUE;
bError := FALSE;
iErrorInfo := 0;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aEnd


VAR
 s : KMEM_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//release memory
s := KMEM_ArrayDelete(arrayIdentHandle_rS.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rVSet.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rVAct.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rPSet.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rPAct.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_dT.Handle);

mbArraysCreated := FALSE;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 120 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
7 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)FCalcSetVelocity @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KMEM_ArraySet @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_MY_FU_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KMEM_ArrayCreate @RT(0) @T @T @DERIVED 0 @F @RT(40)KEBA_STANDARD_FUNCTION : KMEM_CreateData @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
12 
@Var @RT(6)nSetup @RT(0) @T @T @DERIVED 0 @F @RT(15)tnOperationMode @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(36)Setup mode only for service engineer 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)cAutoIdentNoCycles @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)10 @RT(49)number of cycles for auto identification of ramps 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cIdentFileEjectorFwd @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(21)'IdentEjectorRampFwd' @RT(30)Filename for Ident Ejector Fwd 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cIdentFileEjectorBwd @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(21)'IdentEjectorRampBwd' @RT(30)Filename for Ident Ejector Bwd 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)IDENT_MEASURE_ARRAY_S @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(22)'IdentMeasureArray_rS' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)IDENT_MEASURE_ARRAY_VSet @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(25)'IdentMeasureArray_rVSet' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)IDENT_MEASURE_ARRAY_VAct @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(25)'IdentMeasureArray_rVAct' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)IDENT_MEASURE_ARRAY_PSet @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(25)'IdentMeasureArray_rPSet' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)IDENT_MEASURE_ARRAY_PAct @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(25)'IdentMeasureArray_rPAct' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)IDENT_MEASURE_ARRAY_T @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(22)'IdentMeasureArray_dT' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(23)ABAutoIdentSpeedMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
26 
@Var @RT(6)mbInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)Check init done @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)muCount @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)Number of measured points @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mbRestart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mrMaxSetSpeed @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mrMaxSetPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mrMaxActSpeed @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mrMinActSpeed @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mrMaxActPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mrMinActPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mbSpeedLimitUnStable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mbPressureLimitReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbSpeedLimitReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mrSpeedLimit @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)arrayIdentHandle_rS @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMEM_CreateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)Handle of dynamic array @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)arrayIdentHandle_rVSet @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMEM_CreateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)Handle of dynamic array @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)arrayIdentHandle_rVAct @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMEM_CreateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)Handle of dynamic array @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)arrayIdentHandle_rPSet @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMEM_CreateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)Handle of dynamic array @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)arrayIdentHandle_rPAct @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMEM_CreateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)Handle of dynamic array @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)arrayIdentHandle_dT @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KMEM_CreateData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)Handle of dynamic array @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abSignalAnalyze @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABSignalAnalyze @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)mrActSpeed @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mrActPres @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)mrActPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mrFilteredSpeed @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mbArraysCreated @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Init done @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)Error flag (if TRUE an error occured) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)iSize @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rInitValue @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dInitValue @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)T#0s @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)variableName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)swoState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)bSwoInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aReset @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)initialization done @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)error at initialization @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
23 
@Var @RT(8)bRestart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)restart measurement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)rPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)rRefVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)velocity reference @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)rActVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual velocity @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)rRefPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)pressure reference @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)rActPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual pressure @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)rMaxLimitPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual pressure @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)rMinLimitPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual pressure @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)bSpeedUnStable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)act velocity is unstable @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Init done @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)Error flag (if TRUE an error occured) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)fbGetTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)RTC @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dStartTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)dActTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)statusKMEM @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KMEM_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)local_rReal @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)local_dTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)rStartPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)dCyleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)FilterParam @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)KCTRL_Filter_Param @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(35)(uDegree:=1,rCutoffFrequency:=10.0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rPressFactor @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.9 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bCheckStability @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(13)aCloseMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(10)statusKMEM @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KMEM_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)local_rReal @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(13)aGetMaxValues @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(9)rMaxSpeed @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Max measuren velocity @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)rMinSpeed @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Min measuren velocity @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)rMaxPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Max measured pressure @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)rMinPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Min measured pressure @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(19)bSpeedLimitUnStable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)Measured speed is unstabel @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(21)bPressureLimitReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)Pressure limit is reached @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(18)bSpeedLimitReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)Reference velocity reached @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Init done @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)Error flag (if TRUE an error occured) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)Additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aEnd @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KMEM_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(78)
mbInit   := FALSE;
bDone    := FALSE;

iSize := MAX_MEASURE_POINTS;

IF NOT mbArraysCreated THEN
   arrayIdentHandle_rS := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_S,rInitValue,iSize);
   arrayIdentHandle_rS := KMEM_GetHandle(IDENT_MEASURE_ARRAY_S);
   arrayIdentHandle_rVSet := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_VSet,rInitValue,iSize);
   arrayIdentHandle_rVSet := KMEM_GetHandle(IDENT_MEASURE_ARRAY_VSet);
   arrayIdentHandle_rVAct := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_VAct,rInitValue,iSize);
   arrayIdentHandle_rVAct := KMEM_GetHandle(IDENT_MEASURE_ARRAY_VAct);
   arrayIdentHandle_rPSet := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_PSet,rInitValue,iSize);
   arrayIdentHandle_rPSet := KMEM_GetHandle(IDENT_MEASURE_ARRAY_PSet);
   arrayIdentHandle_rPAct := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_PAct,rInitValue,iSize);
   arrayIdentHandle_rPAct := KMEM_GetHandle(IDENT_MEASURE_ARRAY_PAct);
   arrayIdentHandle_dT := KMEM_ArrayCreate(IDENT_MEASURE_ARRAY_T,dInitValue,iSize);
   arrayIdentHandle_dT := KMEM_GetHandle(IDENT_MEASURE_ARRAY_T);
END_IF;

IF arrayIdentHandle_rS.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rVSet.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rVAct.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rPSet.Status <> KMEM_Status_OK OR
   arrayIdentHandle_rPAct.Status <> KMEM_Status_OK OR
   arrayIdentHandle_dT.Status <> KMEM_Status_OK    THEN

   bError := TRUE;
   iErrorInfo := -401;
   mbInit := FALSE; 
ELSE
   mbInit := TRUE; 
   bError   := FALSE;
   iErrorInfo := 0;
   mbRestart := TRUE;
   mbArraysCreated := TRUE;
END_IF;

IF NOT bSwoInitDone THEN
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.Unstable');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mbSpeedLimitUnStable);
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.PresLimitReached');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mbPressureLimitReached);
   
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.ActPos');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrActPos);
   
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.ActSpeed');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrActSpeed);
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.SpeedLimit');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrSpeedLimit);
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.FilteredSpeed');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrFilteredSpeed);
   
   variableName := CONCAT(GET_MY_FU_NAME(),'.IdentSpeed.ActPres');
   swoState := KSWO_AddVariable(Task := TaskAnalog,//TaskInject,
                              Name := variableName,
                              Variable := mrActPres);
   
   bSwoInitDone := TRUE;
END_IF;

bDone := TRUE;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
mrMaxActSpeed := 0.0;
mrMaxSetSpeed := 0.0;
mrMaxSetPressure := 0.0;
mrMaxActPressure := 0.0;
mbSpeedLimitUnStable := FALSE;

mbRestart := TRUE;

bDone := TRUE;
bError := FALSE;
iErrorInfo := 0;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(98)
IF (NOT mbInit) THEN
   bDone := FALSE;
   bError := TRUE;
   iErrorInfo := -0815;
   RETURN;
END_IF;
fbGetTime();
IF (bRestart OR mbRestart) THEN
   dStartTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT)); 
   rStartPosition := rPosition;
   mrMaxActSpeed := 0.0;
   mrMinActSpeed := 0.0;
   mrMaxActPressure := 0.0;
   mrMinActPressure := 0.0;
   muCount := 0;
   dCyleTime := GET_TASK_INTERVAL();
   abSignalAnalyze.aInit(FilterParam := FilterParam,
                         dMeasCycleTime := dCyleTime);
   abSignalAnalyze.aAnalyzeOnline(bStart := FALSE, rActValue := rPosition);
   mbSpeedLimitUnStable := FALSE;
   mbPressureLimitReached := FALSE;
   bSpeedUnStable := FALSE;
   mbRestart := FALSE;
END_IF;
dActTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT)) - dStartTime;

muCount := muCount+1;
IF (muCount>MAX_MEASURE_POINTS) THEN
   bError   := TRUE;
   iErrorInfo := -4711;
   bDone    := FALSE;    
   muCount  := MAX_MEASURE_POINTS;
ELSE
   IF (rPosition >= rMinLimitPosition) AND (rPosition <= rMaxLimitPosition) THEN   
      bCheckStability := TRUE;
      IF (rActVelocity > mrMaxActSpeed) THEN
         mrMaxActSpeed := rActVelocity;
      END_IF;
      IF (rActVelocity < mrMinActSpeed) THEN
         mrMinActSpeed := rActVelocity;
      END_IF;
      IF (rActPressure > mrMaxActPressure) THEN
         mrMaxActPressure := rActPressure;
      END_IF;
      IF (rActPressure < mrMinActPressure) THEN
         mrMinActPressure := rActPressure;
      END_IF;
      IF (mrMaxActPressure > rPressFactor * rRefPressure) THEN
         mbPressureLimitReached := TRUE;
      END_IF;
      
      local_rReal := rRefVelocity;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rVSet.Handle,local_rReal,muCount);
   
      local_rReal := rRefPressure;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rPSet.Handle,local_rReal,muCount);
   ELSE
      bCheckStability := FALSE;
   
      local_rReal := 0.0;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rVSet.Handle,local_rReal,muCount);
   
      local_rReal := 0.0;
      statusKMEM := KMEM_ArraySet(arrayIdentHandle_rPSet.Handle,local_rReal,muCount);     
   END_IF;
   abSignalAnalyze.aAnalyzeOnline(bStart := TRUE,
                                  rActValue := rPosition,
                                  rActVel := rActVelocity,
                                  bCheckStability := bCheckStability);
   mbSpeedLimitUnStable := abSignalAnalyze.aAnalyzeOnline.bUnStable;
   bSpeedUnStable := mbSpeedLimitUnStable;

   local_rReal := rPosition; //VAR_INPUT can not be used for KMEM_ArraySet;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_rS.Handle,local_rReal,muCount);
        
        
   local_rReal := abSignalAnalyze.aAnalyzeOnline.rFilteredVel; //rActVelocity;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_rVAct.Handle,local_rReal,muCount);
        
   local_rReal := rActPressure;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_rPAct.Handle,local_rReal,muCount);
        
   local_dTime := dActTime; //VAR_INPUT can not be used for KMEM_ArraySet;
   statusKMEM := KMEM_ArraySet(arrayIdentHandle_dT.Handle,local_dTime,muCount);
   

   mrActSpeed := rActVelocity;
   mrSpeedLimit := abSignalAnalyze.aAnalyzeOnline.rMeanValue;
   mrFilteredSpeed := abSignalAnalyze.aAnalyzeOnline.rFilteredVel;
   
   mrActPos := rPosition;

   mrActPres := rActPressure;

END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(5)
local_rReal := UDINT_TO_REAL(muCount); 
statusKMEM := KMEM_ArraySet(arrayIdentHandle_rS.Handle,local_rReal,0);



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(19)
bDone :=FALSE;

rMaxSpeed := mrMaxActSpeed;
rMinSpeed := mrMinActSpeed;
rMaxPressure := mrMaxActPressure;
rMinPressure := mrMinActPressure;
bSpeedLimitUnStable := mbSpeedLimitUnStable;
bPressureLimitReached := mbPressureLimitReached;
IF (mrMaxActSpeed >= mrMaxSetSpeed * 0.95) THEN
   mbSpeedLimitReached := TRUE;
ELSE
   mbSpeedLimitReached := FALSE;
END_IF;
bSpeedLimitReached := mbSpeedLimitReached;

bDone :=TRUE;
bError := FALSE;
iErrorInfo := 0;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//release memory
s := KMEM_ArrayDelete(arrayIdentHandle_rS.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rVSet.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rVAct.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rPSet.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_rPAct.Handle);
s := KMEM_ArrayDelete(arrayIdentHandle_dT.Handle);

mbArraysCreated := FALSE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
