(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Folowing functions are implemented in this block
- reset shot counter (by hmi or after loading mold data)
- maintenance of production counter
- stop cycle if set production counter is reached 
- register movement for increasing shot counter

@FunctionID: S_ALLG_13
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, tnDataState
, tsMoveData
, tevStart
, tsDeviceId
, ABProduction
, ABMovementRegister
, tevStartData

END_IMPORT

ALGORITHM_BLOCK ABShotCounter #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bResetShotCounter : BOOL;
 sv_iProdCounterAct : DINT;
 sv_iCavities : DINT;
 sv_iProdCounterSet : DINT (* shot limit *);
 sv_bTIGAvailable : BOOL;
 sv_iShotCounterAct : DINT;
 sv_bUseProdCounter : BOOL (* use shot counter *);
 sv_DataState : tnDataState;
 sv_bInitStart : BOOL;
 sv_MoveShotCounter : tsMoveData;
 sv_DeviceId : tsDeviceId;
 sv_iShotCounterRetain : UDINT;
 sv_rProdTimeAct : REAL;
 sv_rProdTimeTotal : REAL;
 sv_rProdTimeRemaining : REAL;
 sv_iProdCounterRemaining : DINT;
 sv_dCycleTime : TIME;
 sv_dLastCycleTime : TIME;
 sv_bEvenCycle : BOOL;
 sv_dCycleDelaySet : TIME;
 sv_iProdStartCounter : DINT;
 sv_sMoldData : STRING(99);
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 erProdLimitReached : ALARM;
 TaskSlow : TASK;
 EV_Task_3 : TASK;
 evStart : tevStart;
END_OBJECT

VAR
 mbTIGAvailable : BOOL;
 abProduction : ABProduction;
END_VAR

(*
Calculates the productiontimes depending on the productcounter and cavities
*)

ALGORITHM aCalcProdTimes


VAR_INPUT
 dCycleTime : TIME (* cycle time, which should be used for calculation *);
END_VAR

VAR
 iRemainingShots : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//Calculates the remaining production time in hours
IF (sv_iProdCounterAct <= sv_iProdCounterSet) THEN
      
   sv_iProdCounterRemaining := sv_iProdCounterSet - sv_iProdCounterAct; 
   
   //calculate remaining shots (consider number of cavities!)
   iRemainingShots := (sv_iProdCounterRemaining / sv_iCavities);
   IF MOD(sv_iProdCounterRemaining, sv_iCavities) <> 0 THEN
      iRemainingShots := iRemainingShots + 1;
   END_IF;
   
   sv_rProdTimeRemaining := DINT_TO_REAL(iRemainingShots) * (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))/1000000.0/3600.0);
   sv_rProdTimeTotal := sv_rProdTimeAct + sv_rProdTimeRemaining;
   
ELSE
   sv_rProdTimeRemaining := 0.0; 
   sv_iProdCounterRemaining := 0; 
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pReCalcProdTimes ON PU_Task_7 WITH sv_iProdCounterSet,sv_iCavities

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
//use last cycle time because the production counter can be changed
//during a running autocycle (sv_dCycleTime is not correct in this situation)
//sv_dLastCycleTime already includes cycle delay time
aCalcProdTimes(dCycleTime := sv_dLastCycleTime);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pResetShotCounter ON PU_Task_7 WITH sv_bResetShotCounter

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
IF sv_bResetShotCounter THEN
    //reset shot counter
    sv_iShotCounterAct := 0;
    sv_iProdCounterAct := 0; 
    abProduction.aResetData();
    sv_bResetShotCounter := FALSE;
    sv_rProdTimeAct := 0.0;
    sv_rProdTimeRemaining := 0.0;
    sv_rProdTimeTotal := 0.0;
    sv_iProdCounterRemaining := 0;
    sv_iProdStartCounter := sv_iProdStartCounter + 1;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLoadSaveMoldData ON PU_Task_7 WITH sv_DataState


VAR
 bLoadMoldDataInProgress : BOOL;
 bSaveMoldDataInProgress : BOOL;
 sMoldData : STRING(99);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_DataState = nReadMoldData) THEN
    bLoadMoldDataInProgress := TRUE;
ELSIF (sv_DataState = nWriteMoldData) THEN
    bSaveMoldDataInProgress := TRUE;
    sMoldData := sv_sMoldData;    
END_IF;

IF sv_DataState = nReady THEN
    //mold data loading/saving finished -> reset shot counter
    //mold data saving also indicates the start of a new production
    IF (bLoadMoldDataInProgress OR (bSaveMoldDataInProgress AND sMoldData <> sv_sMoldData)) THEN
        sv_bResetShotCounter := TRUE;                                                              
    END_IF;
    bSaveMoldDataInProgress := FALSE;
    bLoadMoldDataInProgress := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskSlow AUTOSTART

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(sv_bTIGAvailable) THEN
    mbTIGAvailable := sv_bTIGAvailable; 
END_IF;

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart


VAR
 abMoveShotCounterRegister : ABMovementRegister;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
   //register movement for shotcounter increasing    
   abMoveShotCounterRegister.aRegister(@sv_MoveShotCounter);
END_IF;

sv_bEvenCycle := (MOD(sv_iShotCounterAct, 2) = 0);



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCalcProdCnt

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT mbTIGAvailable THEN // calculate production counter here, if TIG available then production counter is set in FU TIG 
   IF sv_iShotCounterAct <> 0 THEN
       sv_iProdCounterAct := sv_iProdCounterAct + sv_iCavities;    
   END_IF;    
END_IF;

// check production limit 
IF (sv_iProdCounterAct >= sv_iProdCounterSet) AND sv_bUseProdCounter THEN 
   SET_ALARM(Name := erProdLimitReached);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
taskslot is assigned to execute before evaFinishCycleAndStop in ABODC.pu
*)

EVENT_ALGORITHM evaStart ON EV_Task_3(100) WITH evStart


VAR_INPUT
 evStartData : tevStartData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId <> sv_DeviceId THEN
   RETURN;
END_IF;

IF evStartData.MoveDir = sv_MoveShotCounter.MoveDir AND evStartData.MoveId = sv_MoveShotCounter.MoveId THEN
   
   //increase shot counter
   abProduction.aNewCycle();
   sv_iShotCounterRetain := sv_iShotCounterRetain + 1;
   
   sv_iShotCounterAct := sv_iShotCounterAct + 1;
   sv_rProdTimeAct := sv_rProdTimeAct + (LINT_TO_REAL(TIME_TO_LINT(sv_dCycleTime))/1000000.0/3600.0);
   
   sv_bEvenCycle := (MOD(sv_iShotCounterAct, 2) = 0);
   
   aCalcProdCnt();
   
   aCalcProdTimes(dCycleTime := (sv_dCycleTime + sv_dCycleDelaySet));
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 94 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Folowing functions are implemented in this block
- reset shot counter (by hmi or after loading mold data)
- maintenance of production counter
- stop cycle if set production counter is reached 
- register movement for increasing shot counter

@FunctionID: S_ALLG_13
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABShotCounter @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
29 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)sv_bResetShotCounter @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iProdCounterAct @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_iCavities @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iProdCounterSet @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)shot limit @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)erProdLimitReached @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_bTIGAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iShotCounterAct @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bUseProdCounter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)use shot counter @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_DataState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnDataState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)mbTIGAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_MoveShotCounter @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)evStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_iShotCounterRetain @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)abProduction @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)ABProduction @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)sv_rProdTimeAct @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_rProdTimeTotal @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_rProdTimeRemaining @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_iProdCounterRemaining @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_dLastCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bEvenCycle @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_dCycleDelaySet @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_iProdStartCounter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_sMoldData @RT(0) @T @F @DT @RT(10)STRING(99) @RT(0) @T @T @STRING 0 @F @RT(2)99 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

8 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(14)aCalcProdTimes @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(48)cycle time, which should be used for calculation @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)iRemainingShots @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pReCalcProdTimes @STRUCTURED_TEXT 
@RT(0) @RT(31)sv_iProdCounterSet,sv_iCavities @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pResetShotCounter @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_bResetShotCounter @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pLoadSaveMoldData @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_DataState @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(23)bLoadMoldDataInProgress @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)bSaveMoldDataInProgress @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sMoldData @RT(0) @T @F @DT @RT(10)STRING(99) @RT(0) @T @T @STRING 0 @F @RT(2)99 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(25)abMoveShotCounterRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)ABMovementRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aCalcProdCnt @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(8)evaStart @STRUCTURED_TEXT 
@RT(0) @RT(7)evStart @RT(14)EV_Task_3(100) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(11)evStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tevStartData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//Calculates the remaining production time in hours
IF (sv_iProdCounterAct <= sv_iProdCounterSet) THEN
      
   sv_iProdCounterRemaining := sv_iProdCounterSet - sv_iProdCounterAct; 
   
   //calculate remaining shots (consider number of cavities!)
   iRemainingShots := (sv_iProdCounterRemaining / sv_iCavities);
   IF MOD(sv_iProdCounterRemaining, sv_iCavities) <> 0 THEN
      iRemainingShots := iRemainingShots + 1;
   END_IF;
   
   sv_rProdTimeRemaining := DINT_TO_REAL(iRemainingShots) * (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))/1000000.0/3600.0);
   sv_rProdTimeTotal := sv_rProdTimeAct + sv_rProdTimeRemaining;
   
ELSE
   sv_rProdTimeRemaining := 0.0; 
   sv_iProdCounterRemaining := 0; 
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Calculates the productiontimes depending on the productcounter and cavities
@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
//use last cycle time because the production counter can be changed
//during a running autocycle (sv_dCycleTime is not correct in this situation)
//sv_dLastCycleTime already includes cycle delay time
aCalcProdTimes(dCycleTime := sv_dLastCycleTime);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
IF sv_bResetShotCounter THEN
    //reset shot counter
    sv_iShotCounterAct := 0;
    sv_iProdCounterAct := 0; 
    abProduction.aResetData();
    sv_bResetShotCounter := FALSE;
    sv_rProdTimeAct := 0.0;
    sv_rProdTimeRemaining := 0.0;
    sv_rProdTimeTotal := 0.0;
    sv_iProdCounterRemaining := 0;
    sv_iProdStartCounter := sv_iProdStartCounter + 1;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_DataState = nReadMoldData) THEN
    bLoadMoldDataInProgress := TRUE;
ELSIF (sv_DataState = nWriteMoldData) THEN
    bSaveMoldDataInProgress := TRUE;
    sMoldData := sv_sMoldData;    
END_IF;

IF sv_DataState = nReady THEN
    //mold data loading/saving finished -> reset shot counter
    //mold data saving also indicates the start of a new production
    IF (bLoadMoldDataInProgress OR (bSaveMoldDataInProgress AND sMoldData <> sv_sMoldData)) THEN
        sv_bResetShotCounter := TRUE;                                                              
    END_IF;
    bSaveMoldDataInProgress := FALSE;
    bLoadMoldDataInProgress := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(sv_bTIGAvailable) THEN
    mbTIGAvailable := sv_bTIGAvailable; 
END_IF;

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
   //register movement for shotcounter increasing    
   abMoveShotCounterRegister.aRegister(@sv_MoveShotCounter);
END_IF;

sv_bEvenCycle := (MOD(sv_iShotCounterAct, 2) = 0);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT mbTIGAvailable THEN // calculate production counter here, if TIG available then production counter is set in FU TIG 
   IF sv_iShotCounterAct <> 0 THEN
       sv_iProdCounterAct := sv_iProdCounterAct + sv_iCavities;    
   END_IF;    
END_IF;

// check production limit 
IF (sv_iProdCounterAct >= sv_iProdCounterSet) AND sv_bUseProdCounter THEN 
   SET_ALARM(Name := erProdLimitReached);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(25)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId <> sv_DeviceId THEN
   RETURN;
END_IF;

IF evStartData.MoveDir = sv_MoveShotCounter.MoveDir AND evStartData.MoveId = sv_MoveShotCounter.MoveId THEN
   
   //increase shot counter
   abProduction.aNewCycle();
   sv_iShotCounterRetain := sv_iShotCounterRetain + 1;
   
   sv_iShotCounterAct := sv_iShotCounterAct + 1;
   sv_rProdTimeAct := sv_rProdTimeAct + (LINT_TO_REAL(TIME_TO_LINT(sv_dCycleTime))/1000000.0/3600.0);
   
   sv_bEvenCycle := (MOD(sv_iShotCounterAct, 2) = 0);
   
   aCalcProdCnt();
   
   aCalcProdTimes(dCycleTime := (sv_dCycleTime + sv_dCycleDelaySet));
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
taskslot is assigned to execute before evaFinishCycleAndStop in ABODC.pu
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
