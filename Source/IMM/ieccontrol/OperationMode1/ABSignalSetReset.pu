IMPORT_OVER_LISTFILE
 ABAlarmSignalList
, ALARM_EVENT
, ALARM_EVENT_DATA
, tsElementAlarmSignal

END_IMPORT

ALGORITHM_BLOCK ABSignalSetReset #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSetAlarmSignal : BOOL;
 sv_iSetAlarmSignalCount : DINT (* counter how many alarms requested the alarm signal (incremented with evAlarmLampBlink event; decremented with evAlarmLampReset) *);
END_VAR

SYSTEM_OBJECT
 evAlarmLampBlink : ALARM_EVENT;
 evAlarmLampReset : ALARM_EVENT;
 EV_Task_3 : TASK;
END_OBJECT

VAR
 abAlarmSignalList : ABAlarmSignalList;
 mbInitDone : BOOL;
END_VAR

EVENT_ALGORITHM evaAlarmLampBlink ON EV_Task_3 WITH evAlarmLampBlink


VAR_INPUT
 evAlarmAlarmSignalData : ALARM_EVENT_DATA;
END_VAR

VAR
 ElementAlarmSignal : tsElementAlarmSignal;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInitDone THEN
    abAlarmSignalList.aInit();
    mbInitDone := TRUE;
END_IF;

//search if entry already exists
ElementAlarmSignal.SearchData.Alarm := evAlarmAlarmSignalData.NAME;
ElementAlarmSignal.SearchData.SubID1 := evAlarmAlarmSignalData.SUBID1;
ElementAlarmSignal.SearchData.SubID2 := evAlarmAlarmSignalData.SUBID2;
ElementAlarmSignal.SearchData.SubID3 := evAlarmAlarmSignalData.SUBID3;
ElementAlarmSignal.SearchData.SubID4 := evAlarmAlarmSignalData.SUBID4;

abAlarmSignalList.aSearch(SearchData := ElementAlarmSignal.SearchData); 

IF NOT abAlarmSignalList.aSearch.bFound THEN
    //add entry
    ElementAlarmSignal.ElementData.Alarm := evAlarmAlarmSignalData.NAME;
    ElementAlarmSignal.ElementData.SubID1 := evAlarmAlarmSignalData.SUBID1;
    ElementAlarmSignal.ElementData.SubID2 := evAlarmAlarmSignalData.SUBID2;
    ElementAlarmSignal.ElementData.SubID3 := evAlarmAlarmSignalData.SUBID3;
    ElementAlarmSignal.ElementData.SubID4 := evAlarmAlarmSignalData.SUBID4;
    abAlarmSignalList.aAdd(Element := ElementAlarmSignal);
END_IF;

//get number of elements
sv_iSetAlarmSignalCount := abAlarmSignalList.aGetElementCount();
IF sv_iSetAlarmSignalCount > 0 THEN
    //one or more entries in the list -> set alarm signal
    sv_bSetAlarmSignal := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaAlarmLampReset ON EV_Task_3 WITH evAlarmLampReset


VAR_INPUT
 evAlarmMotorReleaseData : ALARM_EVENT_DATA;
END_VAR

VAR
 ElementMotorRelease : tsElementAlarmSignal;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInitDone THEN
    abAlarmSignalList.aInit();
    mbInitDone := TRUE;
END_IF;

//search if entry already exists
ElementMotorRelease.SearchData.Alarm := evAlarmMotorReleaseData.NAME;
ElementMotorRelease.SearchData.SubID1 := evAlarmMotorReleaseData.SUBID1;
ElementMotorRelease.SearchData.SubID2 := evAlarmMotorReleaseData.SUBID2;
ElementMotorRelease.SearchData.SubID3 := evAlarmMotorReleaseData.SUBID3;
ElementMotorRelease.SearchData.SubID4 := evAlarmMotorReleaseData.SUBID4;

abAlarmSignalList.aSearch(SearchData := ElementMotorRelease.SearchData); 

IF abAlarmSignalList.aSearch.bFound THEN
    //remove entry
    abAlarmSignalList.aRemove(SearchData := ElementMotorRelease.SearchData);
END_IF;

//get number of elements
sv_iSetAlarmSignalCount := abAlarmSignalList.aGetElementCount();
IF sv_iSetAlarmSignalCount = 0 THEN
    //no entries left -> reset alarm signal
    sv_bSetAlarmSignal := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABSignalSetReset @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(17)abAlarmSignalList @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)ABAlarmSignalList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)evAlarmLampBlink @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)evAlarmLampReset @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)mbInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)sv_bSetAlarmSignal @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_iSetAlarmSignalCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(127)counter how many alarms requested the alarm signal (incremented with evAlarmLampBlink event; decremented with evAlarmLampReset) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(17)evaAlarmLampBlink @STRUCTURED_TEXT 
@RT(0) @RT(16)evAlarmLampBlink @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(22)evAlarmAlarmSignalData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_EVENT_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)ElementAlarmSignal @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tsElementAlarmSignal @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(17)evaAlarmLampReset @STRUCTURED_TEXT 
@RT(0) @RT(16)evAlarmLampReset @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(23)evAlarmMotorReleaseData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_EVENT_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)ElementMotorRelease @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tsElementAlarmSignal @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(31)
IF NOT mbInitDone THEN
    abAlarmSignalList.aInit();
    mbInitDone := TRUE;
END_IF;

//search if entry already exists
ElementAlarmSignal.SearchData.Alarm := evAlarmAlarmSignalData.NAME;
ElementAlarmSignal.SearchData.SubID1 := evAlarmAlarmSignalData.SUBID1;
ElementAlarmSignal.SearchData.SubID2 := evAlarmAlarmSignalData.SUBID2;
ElementAlarmSignal.SearchData.SubID3 := evAlarmAlarmSignalData.SUBID3;
ElementAlarmSignal.SearchData.SubID4 := evAlarmAlarmSignalData.SUBID4;

abAlarmSignalList.aSearch(SearchData := ElementAlarmSignal.SearchData); 

IF NOT abAlarmSignalList.aSearch.bFound THEN
    //add entry
    ElementAlarmSignal.ElementData.Alarm := evAlarmAlarmSignalData.NAME;
    ElementAlarmSignal.ElementData.SubID1 := evAlarmAlarmSignalData.SUBID1;
    ElementAlarmSignal.ElementData.SubID2 := evAlarmAlarmSignalData.SUBID2;
    ElementAlarmSignal.ElementData.SubID3 := evAlarmAlarmSignalData.SUBID3;
    ElementAlarmSignal.ElementData.SubID4 := evAlarmAlarmSignalData.SUBID4;
    abAlarmSignalList.aAdd(Element := ElementAlarmSignal);
END_IF;

//get number of elements
sv_iSetAlarmSignalCount := abAlarmSignalList.aGetElementCount();
IF sv_iSetAlarmSignalCount > 0 THEN
    //one or more entries in the list -> set alarm signal
    sv_bSetAlarmSignal := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
IF NOT mbInitDone THEN
    abAlarmSignalList.aInit();
    mbInitDone := TRUE;
END_IF;

//search if entry already exists
ElementMotorRelease.SearchData.Alarm := evAlarmMotorReleaseData.NAME;
ElementMotorRelease.SearchData.SubID1 := evAlarmMotorReleaseData.SUBID1;
ElementMotorRelease.SearchData.SubID2 := evAlarmMotorReleaseData.SUBID2;
ElementMotorRelease.SearchData.SubID3 := evAlarmMotorReleaseData.SUBID3;
ElementMotorRelease.SearchData.SubID4 := evAlarmMotorReleaseData.SUBID4;

abAlarmSignalList.aSearch(SearchData := ElementMotorRelease.SearchData); 

IF abAlarmSignalList.aSearch.bFound THEN
    //remove entry
    abAlarmSignalList.aRemove(SearchData := ElementMotorRelease.SearchData);
END_IF;

//get number of elements
sv_iSetAlarmSignalCount := abAlarmSignalList.aGetElementCount();
IF sv_iSetAlarmSignalCount = 0 THEN
    //no entries left -> reset alarm signal
    sv_bSetAlarmSignal := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
