IMPORT_OVER_LISTFILE
 GET_ALARM_NAME
, SET_ALARM
, SET_EVENT
, tnOperationMode
, tsLockOperationModeAuto
, tsTraceLevel
, tnDataState
, ALARM_EVENT
, ABOpModeControl
, tevPanelButtonRegisterData
, tevPanelButtonRegister
, FBDebugTrace
, tsDeviceId
, ALARM_EVENT_DATA

END_IMPORT

ALGORITHM_BLOCK ABOperationMode #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 di_ButtonSetup : BOOL;
 di_ButtonManual : BOOL;
 di_ButtonHalfAuto : BOOL;
 di_ButtonFullAuto : BOOL;
 sv_bButtonSetup : BOOL;
 sv_bButtonManual : BOOL;
 sv_bButtonHalfAuto : BOOL;
 sv_bButtonFullAuto : BOOL;
 sv_bLedManual_ledAttr : BYTE (* Panel LED *);
 sv_bLedSetup_ledAttr : BYTE (* Panel LED *);
 sv_bLedHalfAutomatic_ledAttr : BYTE (* Panel LED *);
 sv_bLedFullAutomatic_ledAttr : BYTE (* Panel LED *);
 sv_DemandedOperationMode : tnOperationMode;
 sv_OperationMode : tnOperationMode;
 sv_bLedSetup : BOOL;
 sv_bLedManual : BOOL;
 sv_bLedHalfAutomatic : BOOL;
 sv_bLedFullAutomatic : BOOL;
 sv_bInitStart : BOOL;
 sv_bAllowFullAutoMode : BOOL;
 sv_bOverrideCoreSafety : BOOL (* overrides safety settings for core movements in setup mode *);
 sv_bOverrideEjectorSafety : BOOL (* overrides safety settings for ejector movements in setup mode *);
 sv_LockOperationModeAuto : tsLockOperationModeAuto;
 sv_TraceLevel : tsTraceLevel;
 sv_DataState : tnDataState (* State of machine / mold data read *);
 sv_DeviceId : tsDeviceId;
 sv_bHMILedManual_ledAttr : BYTE (* Panel LED *);
 sv_bHMILedSetup_ledAttr : BYTE (* Panel LED *);
 sv_bHMILedHalfAutomatic_ledAttr : BYTE (* Panel LED *);
 sv_bHMILedFullAutomatic_ledAttr : BYTE (* Panel LED *);
 sv_bHMILedSetup : BOOL;
 sv_bHMILedManual : BOOL;
 sv_bHMILedHalfAutomatic : BOOL;
 sv_bHMILedFullAutomatic : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 EV_Task_3 : TASK;
 erFullAutoNotAllowed : ALARM;
 erAutoNotAllowed : ALARM;
 erSetupModeRequired : ALARM;
 evAlarmAutoHalf : ALARM_EVENT;
 evAlarmAutoManual : ALARM_EVENT;
 evPanelButtonRegister : tevPanelButtonRegister;
END_OBJECT

VAR
 mbDIButtonManualLinked : BOOL;
 mbDIButtonSetupLinked : BOOL;
 mbDIButtonHalfAutoLinked : BOOL;
 mbDIButtonFullAutoLinked : BOOL;
 mbLedSetupLinked : BOOL;
 mbLedManualLinked : BOOL;
 mbLedHalfAutomaticLinked : BOOL;
 mbLedFullAutomaticLinked : BOOL;
 mbLedSetupAttrLinked : BOOL;
 mbLedManualAttrLinked : BOOL;
 mbLedHalfAutomaticAttrLinked : BOOL;
 mbLedFullAutomaticAttrLinked : BOOL;
 abOpModeControl : ABOpModeControl;
 evPanelButtonRegisterData : tevPanelButtonRegisterData;
 fbDebugTrace : FBDebugTrace;
END_VAR

VAR CONSTANT
 cButtonManual : DINT := 1;
 cButtonSetup : DINT := 2;
 cButtonHalfAuto : DINT := 3;
 cButtonFullAuto : DINT := 4;
END_VAR

POSTUPDATE_ALGORITHM pRegisterButtons ON PU_Task_7 WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbDIButtonManualLinked := IS_LINKED(di_ButtonManual);
mbDIButtonSetupLinked := IS_LINKED(di_ButtonSetup);
mbDIButtonHalfAutoLinked  := IS_LINKED(di_ButtonHalfAuto);
mbDIButtonFullAutoLinked := IS_LINKED(di_ButtonFullAuto);

// register manual button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonManual;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonManual;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedManual;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedManual_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register setup button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonSetup;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonSetup;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedSetup;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedSetup_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register half-auto button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonHalfAuto;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonHalfAuto;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedHalfAutomatic;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedHalfAutomatic_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register full-auto button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonFullAuto;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonFullAuto;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedFullAutomatic;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedFullAutomatic_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);






;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pOpModeButton ON PU_Task_7 WITH di_ButtonSetup,di_ButtonManual,di_ButtonHalfAuto,di_ButtonFullAuto,sv_bButtonSetup,sv_bButtonManual,sv_bButtonHalfAuto,sv_bButtonFullAuto


VAR
 bButtonSetup : BOOL;
 bButtonManual : BOOL;
 bButtonHalfAuto : BOOL;
 bButtonFullAuto : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//set demanded operation mode according the pressed button 

bButtonManual := sv_bButtonManual;
bButtonSetup := sv_bButtonSetup;
bButtonHalfAuto := sv_bButtonHalfAuto;
bButtonFullAuto := sv_bButtonFullAuto;

IF mbDIButtonManualLinked THEN
    bButtonManual := bButtonManual OR di_ButtonManual;
END_IF;

IF mbDIButtonSetupLinked THEN
    bButtonSetup := bButtonSetup OR di_ButtonSetup;
END_IF;

IF mbDIButtonHalfAutoLinked THEN
    bButtonHalfAuto := bButtonHalfAuto OR di_ButtonHalfAuto;
END_IF;

IF mbDIButtonFullAutoLinked THEN
    bButtonFullAuto := bButtonFullAuto OR di_ButtonFullAuto;
END_IF;


IF bButtonSetup THEN
    sv_DemandedOperationMode := nSetup;
ELSIF bButtonManual THEN
    sv_DemandedOperationMode := nManual;
ELSIF bButtonHalfAuto THEN
    sv_DemandedOperationMode := nHalfAutomatic;
ELSIF bButtonFullAuto THEN
    sv_DemandedOperationMode := nFullAutomatic;        
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pNewDemandedMode ON PU_Task_7 WITH sv_DemandedOperationMode


VAR_TEMP
 sDemandedOperationMode : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
IF sv_DemandedOperationMode = sv_OperationMode THEN
    //don´t execute if operation mode is equal demanded operation mode
    RETURN;
END_IF;

IF sv_TraceLevel.bODCInterpreter THEN
   //trace demanded opmode switch
   IF sv_DemandedOperationMode = nSetup THEN
      sDemandedOperationMode := 'Setup';
   ELSIF sv_DemandedOperationMode = nManual THEN
      sDemandedOperationMode := 'Manual';
   ELSIF sv_DemandedOperationMode = nHalfAutomatic THEN
      sDemandedOperationMode := 'HalfAutomatic';
   ELSIF sv_DemandedOperationMode = nFullAutomatic THEN
      sDemandedOperationMode := 'FullAutomatic';
   ELSE
      sDemandedOperationMode := '???';
   END_IF;
   fbDebugTrace(CONCAT('sv_DemandedOperationMode changed to ', sDemandedOperationMode));
END_IF;

IF sv_DemandedOperationMode = nFullAutomatic AND NOT sv_bAllowFullAutoMode THEN
    //change to full auto mode not allowed
    SET_ALARM (Name := erFullAutoNotAllowed);
    sv_DemandedOperationMode := sv_OperationMode;
    IF sv_TraceLevel.bODCInterpreter THEN
        fbDebugTrace('operation mode switch denied by sv_bAllowFullAutoMode');
    END_IF;
    RETURN;
END_IF;

// if demanded mode (half)automatic check if data loading is active
IF (sv_DemandedOperationMode > nManual) THEN
    IF ((sv_DataState = nReadMoldData) 
        OR (sv_DataState = nReadMachineData) 
        OR (sv_DataState = nReadSequenceData) 
        OR (sv_DataState = nReadMaterialData)) THEN
        SET_ALARM(erAutoNotAllowed);
        sv_DemandedOperationMode := sv_OperationMode;
        IF sv_TraceLevel.bODCInterpreter THEN
            fbDebugTrace('operation mode switch denied by data loading');
        END_IF;
        RETURN; 
    END_IF;  
    IF (sv_LockOperationModeAuto.iLockCounter > 0) THEN
        SET_ALARM(erAutoNotAllowed);
        sv_DemandedOperationMode := sv_OperationMode;
        IF sv_TraceLevel.bODCInterpreter THEN
            fbDebugTrace('operation mode switch denied by data sv_LockOperationModeAuto');
        END_IF;
        RETURN; 
    END_IF;
END_IF;

//check if demanded operation mode is allowed
abOpModeControl.aCheck(nDemandedMode := sv_DemandedOperationMode,
                       nActualMode := sv_OperationMode);

IF abOpModeControl.aCheck.bChangeAllowed THEN
    //change allowed
    sv_OperationMode := sv_DemandedOperationMode;
ELSE
    //change not allowed
    sv_DemandedOperationMode := sv_OperationMode;
    IF sv_TraceLevel.bODCInterpreter THEN
        fbDebugTrace('operation mode switch denied by abOpModeControl.aCheck()');
    END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLedControl ON PU_Task_7 WITH sv_OperationMode, sv_bInitStart


VAR
 bInitDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
   //set HMI button led system variables
   sv_bHMILedSetup_ledAttr := 16#1;
   sv_bHMILedManual_ledAttr := 16#1;
   sv_bHMILedHalfAutomatic_ledAttr := 16#1;
   sv_bHMILedFullAutomatic_ledAttr := 16#1;    

   mbLedSetupLinked := IS_LINKED(sv_bLedSetup);
   mbLedManualLinked := IS_LINKED(sv_bLedManual);
   mbLedHalfAutomaticLinked := IS_LINKED(sv_bLedHalfAutomatic);
   mbLedFullAutomaticLinked := IS_LINKED(sv_bLedFullAutomatic);  
   
   //set led attributes
   IF IS_LINKED(sv_bLedSetup_ledAttr) THEN
      sv_bLedSetup_ledAttr := sv_bHMILedSetup_ledAttr;  
      mbLedSetupAttrLinked := TRUE;
   END_IF;

   IF IS_LINKED(sv_bLedManual_ledAttr) THEN
      sv_bLedManual_ledAttr := sv_bHMILedManual_ledAttr;
      mbLedManualAttrLinked := TRUE;
   END_IF;
   
   IF IS_LINKED(sv_bLedHalfAutomatic_ledAttr) THEN
      sv_bLedHalfAutomatic_ledAttr := sv_bHMILedHalfAutomatic_ledAttr;
      mbLedHalfAutomaticAttrLinked := TRUE;
   END_IF;

   IF IS_LINKED(sv_bLedFullAutomatic_ledAttr) THEN
      sv_bLedFullAutomatic_ledAttr := sv_bHMILedFullAutomatic_ledAttr;
      mbLedFullAutomaticAttrLinked := TRUE;
   END_IF;   
  

   bInitDone := TRUE;
END_IF;
                 

IF (sv_OperationMode = nManual) THEN
   sv_bHMILedManual := TRUE;
   sv_bHMILedSetup := FALSE;
   sv_bHMILedHalfAutomatic := FALSE;
   sv_bHMILedFullAutomatic := FALSE;
   
ELSIF (sv_OperationMode = nSetup) THEN
   sv_bHMILedManual := FALSE;
   sv_bHMILedSetup := TRUE;
   sv_bHMILedHalfAutomatic := FALSE;
   sv_bHMILedFullAutomatic := FALSE;

ELSIF (sv_OperationMode = nHalfAutomatic) THEN
   sv_bHMILedManual := FALSE;
   sv_bHMILedSetup := FALSE;
   sv_bHMILedHalfAutomatic := TRUE;
   sv_bHMILedFullAutomatic := FALSE;
   
ELSIF (sv_OperationMode = nFullAutomatic) THEN
   sv_bHMILedManual := FALSE;
   sv_bHMILedSetup := FALSE;
   sv_bHMILedHalfAutomatic := FALSE;
   sv_bHMILedFullAutomatic := TRUE;
   
END_IF;

// copy the led states to the hw-leds
IF mbLedSetupLinked THEN
   sv_bLedSetup := sv_bHMILedSetup;  
END_IF;

IF mbLedManualLinked THEN
   sv_bLedManual := sv_bHMILedManual;  
END_IF;

IF mbLedHalfAutomaticLinked THEN
   sv_bLedHalfAutomatic := sv_bHMILedHalfAutomatic;  
END_IF;

IF mbLedFullAutomaticLinked THEN
   sv_bLedFullAutomatic := sv_bHMILedFullAutomatic;  
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaAlarmAutoManual ON EV_Task_3 WITH evAlarmAutoManual


VAR_INPUT
 evAlarmAutoManualData : ALARM_EVENT_DATA;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//do not change mode if operation mode is already manual or setup
IF sv_OperationMode >= nHalfAutomatic THEN
   IF sv_TraceLevel.bODCInterpreter THEN
      fbDebugTrace(CONCAT('switching opmode to manual because of evAlarmAutoManual (',
                          GET_ALARM_NAME(evAlarmAutoManualData.NAME), ')'));
   END_IF;
   sv_DemandedOperationMode := nManual;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaAlarmAutoHalf ON EV_Task_3 WITH evAlarmAutoHalf


VAR_INPUT
 evAlarmAutoManualData : ALARM_EVENT_DATA;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//do not change mode if operation mode is already not full auto
IF sv_OperationMode = nFullAutomatic THEN
   IF sv_TraceLevel.bODCInterpreter THEN
      fbDebugTrace(CONCAT('switching opmode to half auto because of evAlarmAutoHalf (',
                          GET_ALARM_NAME(evAlarmAutoManualData.NAME), ')'));
   END_IF;
   sv_DemandedOperationMode := nHalfAutomatic;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pOverrideSafety ON PU_Task_7 WITH sv_bOverrideCoreSafety,sv_bOverrideEjectorSafety

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_OperationMode <> nSetup) THEN
   IF sv_bOverrideCoreSafety THEN
      //reset override core safety flag if mode is not setup mode
      //and set alarm
      sv_bOverrideCoreSafety := FALSE;
      SET_ALARM(erSetupModeRequired);
   END_IF;
   
   IF sv_bOverrideEjectorSafety THEN
      //reset override ejector safety flag if mode is not setup mode
      //and set alarm
      sv_bOverrideEjectorSafety := FALSE;
      SET_ALARM(erSetupModeRequired);
   END_IF;
END_IF;
 



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pOperationMode ON PU_Task_7 WITH sv_OperationMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode <> nSetup THEN
   //reset "override safety" flags if setup mode is left
   sv_bOverrideCoreSafety := FALSE;
   sv_bOverrideEjectorSafety := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(14)GET_ALARM_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABOperationMode @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
61 
@Var @RT(14)di_ButtonSetup @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)di_ButtonManual @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_ButtonHalfAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_ButtonFullAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)mbDIButtonManualLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbDIButtonSetupLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbDIButtonHalfAutoLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbDIButtonFullAutoLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mbLedSetupLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mbLedManualLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbLedHalfAutomaticLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbLedFullAutomaticLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mbLedSetupAttrLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbLedManualAttrLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(28)mbLedHalfAutomaticAttrLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(28)mbLedFullAutomaticAttrLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)sv_bButtonSetup @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bButtonManual @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bButtonHalfAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bButtonFullAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_bLedManual_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bLedSetup_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)sv_bLedHalfAutomatic_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)sv_bLedFullAutomatic_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_DemandedOperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bLedSetup @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bLedManual @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bLedHalfAutomatic @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bLedFullAutomatic @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_bAllowFullAutoMode @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bOverrideCoreSafety @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(58)overrides safety settings for core movements in setup mode @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_bOverrideEjectorSafety @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(61)overrides safety settings for ejector movements in setup mode @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_LockOperationModeAuto @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)tsLockOperationModeAuto @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)erFullAutoNotAllowed @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_DataState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnDataState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)State of machine / mold data read @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)erAutoNotAllowed @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)erSetupModeRequired @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)evAlarmAutoHalf @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)evAlarmAutoManual @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)abOpModeControl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABOpModeControl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)evPanelButtonRegisterData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevPanelButtonRegisterData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)evPanelButtonRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevPanelButtonRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)cButtonManual @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)1 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(12)cButtonSetup @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)2 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(15)cButtonHalfAuto @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)3 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(15)cButtonFullAuto @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)4 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(24)sv_bHMILedManual_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bHMILedSetup_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(31)sv_bHMILedHalfAutomatic_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(31)sv_bHMILedFullAutomatic_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Panel LED @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bHMILedSetup @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bHMILedManual @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bHMILedHalfAutomatic @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bHMILedFullAutomatic @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

8 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pRegisterButtons @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pOpModeButton @STRUCTURED_TEXT 
@RT(0) @RT(137)di_ButtonSetup,di_ButtonManual,di_ButtonHalfAuto,di_ButtonFullAuto,sv_bButtonSetup,sv_bButtonManual,sv_bButtonHalfAuto,sv_bButtonFullAuto @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(12)bButtonSetup @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)bButtonManual @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bButtonHalfAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bButtonFullAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pNewDemandedMode @STRUCTURED_TEXT 
@RT(0) @RT(24)sv_DemandedOperationMode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(22)sDemandedOperationMode @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(11)pLedControl @STRUCTURED_TEXT 
@RT(0) @RT(31)sv_OperationMode, sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(18)evaAlarmAutoManual @STRUCTURED_TEXT 
@RT(0) @RT(17)evAlarmAutoManual @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(21)evAlarmAutoManualData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_EVENT_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(16)evaAlarmAutoHalf @STRUCTURED_TEXT 
@RT(0) @RT(15)evAlarmAutoHalf @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(21)evAlarmAutoManualData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_EVENT_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pOverrideSafety @STRUCTURED_TEXT 
@RT(0) @RT(48)sv_bOverrideCoreSafety,sv_bOverrideEjectorSafety @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pOperationMode @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_OperationMode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(54)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbDIButtonManualLinked := IS_LINKED(di_ButtonManual);
mbDIButtonSetupLinked := IS_LINKED(di_ButtonSetup);
mbDIButtonHalfAutoLinked  := IS_LINKED(di_ButtonHalfAuto);
mbDIButtonFullAutoLinked := IS_LINKED(di_ButtonFullAuto);

// register manual button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonManual;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonManual;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedManual;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedManual_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register setup button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonSetup;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonSetup;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedSetup;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedSetup_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register half-auto button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonHalfAuto;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonHalfAuto;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedHalfAutomatic;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedHalfAutomatic_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register full-auto button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonFullAuto;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonFullAuto;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedFullAutomatic;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedFullAutomatic_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);





@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(39)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//set demanded operation mode according the pressed button 

bButtonManual := sv_bButtonManual;
bButtonSetup := sv_bButtonSetup;
bButtonHalfAuto := sv_bButtonHalfAuto;
bButtonFullAuto := sv_bButtonFullAuto;

IF mbDIButtonManualLinked THEN
    bButtonManual := bButtonManual OR di_ButtonManual;
END_IF;

IF mbDIButtonSetupLinked THEN
    bButtonSetup := bButtonSetup OR di_ButtonSetup;
END_IF;

IF mbDIButtonHalfAutoLinked THEN
    bButtonHalfAuto := bButtonHalfAuto OR di_ButtonHalfAuto;
END_IF;

IF mbDIButtonFullAutoLinked THEN
    bButtonFullAuto := bButtonFullAuto OR di_ButtonFullAuto;
END_IF;


IF bButtonSetup THEN
    sv_DemandedOperationMode := nSetup;
ELSIF bButtonManual THEN
    sv_DemandedOperationMode := nManual;
ELSIF bButtonHalfAuto THEN
    sv_DemandedOperationMode := nHalfAutomatic;
ELSIF bButtonFullAuto THEN
    sv_DemandedOperationMode := nFullAutomatic;        
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(74)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
IF sv_DemandedOperationMode = sv_OperationMode THEN
    //don´t execute if operation mode is equal demanded operation mode
    RETURN;
END_IF;

IF sv_TraceLevel.bODCInterpreter THEN
   //trace demanded opmode switch
   IF sv_DemandedOperationMode = nSetup THEN
      sDemandedOperationMode := 'Setup';
   ELSIF sv_DemandedOperationMode = nManual THEN
      sDemandedOperationMode := 'Manual';
   ELSIF sv_DemandedOperationMode = nHalfAutomatic THEN
      sDemandedOperationMode := 'HalfAutomatic';
   ELSIF sv_DemandedOperationMode = nFullAutomatic THEN
      sDemandedOperationMode := 'FullAutomatic';
   ELSE
      sDemandedOperationMode := '???';
   END_IF;
   fbDebugTrace(CONCAT('sv_DemandedOperationMode changed to ', sDemandedOperationMode));
END_IF;

IF sv_DemandedOperationMode = nFullAutomatic AND NOT sv_bAllowFullAutoMode THEN
    //change to full auto mode not allowed
    SET_ALARM (Name := erFullAutoNotAllowed);
    sv_DemandedOperationMode := sv_OperationMode;
    IF sv_TraceLevel.bODCInterpreter THEN
        fbDebugTrace('operation mode switch denied by sv_bAllowFullAutoMode');
    END_IF;
    RETURN;
END_IF;

// if demanded mode (half)automatic check if data loading is active
IF (sv_DemandedOperationMode > nManual) THEN
    IF ((sv_DataState = nReadMoldData) 
        OR (sv_DataState = nReadMachineData) 
        OR (sv_DataState = nReadSequenceData) 
        OR (sv_DataState = nReadMaterialData)) THEN
        SET_ALARM(erAutoNotAllowed);
        sv_DemandedOperationMode := sv_OperationMode;
        IF sv_TraceLevel.bODCInterpreter THEN
            fbDebugTrace('operation mode switch denied by data loading');
        END_IF;
        RETURN; 
    END_IF;  
    IF (sv_LockOperationModeAuto.iLockCounter > 0) THEN
        SET_ALARM(erAutoNotAllowed);
        sv_DemandedOperationMode := sv_OperationMode;
        IF sv_TraceLevel.bODCInterpreter THEN
            fbDebugTrace('operation mode switch denied by data sv_LockOperationModeAuto');
        END_IF;
        RETURN; 
    END_IF;
END_IF;

//check if demanded operation mode is allowed
abOpModeControl.aCheck(nDemandedMode := sv_DemandedOperationMode,
                       nActualMode := sv_OperationMode);

IF abOpModeControl.aCheck.bChangeAllowed THEN
    //change allowed
    sv_OperationMode := sv_DemandedOperationMode;
ELSE
    //change not allowed
    sv_DemandedOperationMode := sv_OperationMode;
    IF sv_TraceLevel.bODCInterpreter THEN
        fbDebugTrace('operation mode switch denied by abOpModeControl.aCheck()');
    END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(86)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
   //set HMI button led system variables
   sv_bHMILedSetup_ledAttr := 16#1;
   sv_bHMILedManual_ledAttr := 16#1;
   sv_bHMILedHalfAutomatic_ledAttr := 16#1;
   sv_bHMILedFullAutomatic_ledAttr := 16#1;    

   mbLedSetupLinked := IS_LINKED(sv_bLedSetup);
   mbLedManualLinked := IS_LINKED(sv_bLedManual);
   mbLedHalfAutomaticLinked := IS_LINKED(sv_bLedHalfAutomatic);
   mbLedFullAutomaticLinked := IS_LINKED(sv_bLedFullAutomatic);  
   
   //set led attributes
   IF IS_LINKED(sv_bLedSetup_ledAttr) THEN
      sv_bLedSetup_ledAttr := sv_bHMILedSetup_ledAttr;  
      mbLedSetupAttrLinked := TRUE;
   END_IF;

   IF IS_LINKED(sv_bLedManual_ledAttr) THEN
      sv_bLedManual_ledAttr := sv_bHMILedManual_ledAttr;
      mbLedManualAttrLinked := TRUE;
   END_IF;
   
   IF IS_LINKED(sv_bLedHalfAutomatic_ledAttr) THEN
      sv_bLedHalfAutomatic_ledAttr := sv_bHMILedHalfAutomatic_ledAttr;
      mbLedHalfAutomaticAttrLinked := TRUE;
   END_IF;

   IF IS_LINKED(sv_bLedFullAutomatic_ledAttr) THEN
      sv_bLedFullAutomatic_ledAttr := sv_bHMILedFullAutomatic_ledAttr;
      mbLedFullAutomaticAttrLinked := TRUE;
   END_IF;   
  

   bInitDone := TRUE;
END_IF;
                 

IF (sv_OperationMode = nManual) THEN
   sv_bHMILedManual := TRUE;
   sv_bHMILedSetup := FALSE;
   sv_bHMILedHalfAutomatic := FALSE;
   sv_bHMILedFullAutomatic := FALSE;
   
ELSIF (sv_OperationMode = nSetup) THEN
   sv_bHMILedManual := FALSE;
   sv_bHMILedSetup := TRUE;
   sv_bHMILedHalfAutomatic := FALSE;
   sv_bHMILedFullAutomatic := FALSE;

ELSIF (sv_OperationMode = nHalfAutomatic) THEN
   sv_bHMILedManual := FALSE;
   sv_bHMILedSetup := FALSE;
   sv_bHMILedHalfAutomatic := TRUE;
   sv_bHMILedFullAutomatic := FALSE;
   
ELSIF (sv_OperationMode = nFullAutomatic) THEN
   sv_bHMILedManual := FALSE;
   sv_bHMILedSetup := FALSE;
   sv_bHMILedHalfAutomatic := FALSE;
   sv_bHMILedFullAutomatic := TRUE;
   
END_IF;

// copy the led states to the hw-leds
IF mbLedSetupLinked THEN
   sv_bLedSetup := sv_bHMILedSetup;  
END_IF;

IF mbLedManualLinked THEN
   sv_bLedManual := sv_bHMILedManual;  
END_IF;

IF mbLedHalfAutomaticLinked THEN
   sv_bLedHalfAutomatic := sv_bHMILedHalfAutomatic;  
END_IF;

IF mbLedFullAutomaticLinked THEN
   sv_bLedFullAutomatic := sv_bHMILedFullAutomatic;  
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//do not change mode if operation mode is already manual or setup
IF sv_OperationMode >= nHalfAutomatic THEN
   IF sv_TraceLevel.bODCInterpreter THEN
      fbDebugTrace(CONCAT('switching opmode to manual because of evAlarmAutoManual (',
                          GET_ALARM_NAME(evAlarmAutoManualData.NAME), ')'));
   END_IF;
   sv_DemandedOperationMode := nManual;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//do not change mode if operation mode is already not full auto
IF sv_OperationMode = nFullAutomatic THEN
   IF sv_TraceLevel.bODCInterpreter THEN
      fbDebugTrace(CONCAT('switching opmode to half auto because of evAlarmAutoHalf (',
                          GET_ALARM_NAME(evAlarmAutoManualData.NAME), ')'));
   END_IF;
   sv_DemandedOperationMode := nHalfAutomatic;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_OperationMode <> nSetup) THEN
   IF sv_bOverrideCoreSafety THEN
      //reset override core safety flag if mode is not setup mode
      //and set alarm
      sv_bOverrideCoreSafety := FALSE;
      SET_ALARM(erSetupModeRequired);
   END_IF;
   
   IF sv_bOverrideEjectorSafety THEN
      //reset override ejector safety flag if mode is not setup mode
      //and set alarm
      sv_bOverrideEjectorSafety := FALSE;
      SET_ALARM(erSetupModeRequired);
   END_IF;
END_IF;
 


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode <> nSetup THEN
   //reset "override safety" flags if setup mode is left
   sv_bOverrideCoreSafety := FALSE;
   sv_bOverrideEjectorSafety := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
