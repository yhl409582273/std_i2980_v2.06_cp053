IMPORT_OVER_LISTFILE
 SET_EVENT
, STATE_ALARM
, tevRequestEventNotification
, RTC
, tevUpdateEventNotification
, tevEventNotificationData
, tevAlarmConfirm
, tnOperationMode
, ALARM_STATE_DATA
, tevAlarmConfirmData

END_IMPORT

ALGORITHM_BLOCK ABEventNotification #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_rProdTimeRemaining : REAL;
 sv_bUseProdCounter : BOOL (* use shot counter *);
 sv_iProdCounterRemaining : DINT;
 sv_iProdCounterAct : DINT;
 sv_OperationMode : tnOperationMode;
END_VAR

SYSTEM_OBJECT
 PU_Task_13 : TASK;
 evRequestEventNotification : tevRequestEventNotification;
 evUpdateEventNotification : tevUpdateEventNotification;
 erProdLimitReached : ALARM;
 evAlarmConfirm : tevAlarmConfirm;
END_OBJECT

VAR
 fbRTC : RTC;
 eventNotificationData : tevEventNotificationData := (iType:=cEvNotificationType_Production,iInstance:=1);
 mbProdEvNotificationActive : BOOL;
END_VAR

ALGORITHM aCheckAndSendUpdate


VAR
 dEstimatedExpirationDate : DATE_AND_TIME := cUTCZeroDate;
 dLastEstimatedExpirationDate : DATE_AND_TIME := cUTCZeroDate;
 dTimeDifference : TIME;
END_VAR

VAR CONSTANT
 dEstimationTolerance : TIME := T#30s;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Estimate expiration date and send event notification update if necessary
fbRTC();

// Calculate estimated expiration date depending on remaining production time
dEstimatedExpirationDate := fbRTC.CDT + T#1h * sv_rProdTimeRemaining;

// Calculate a positive time difference
dTimeDifference := dEstimatedExpirationDate - dLastEstimatedExpirationDate;
IF dTimeDifference < T#0s THEN    
    dTimeDifference := dTimeDifference * -1;
END_IF;

IF sv_bUseProdCounter
    AND (sv_OperationMode >= nHalfAutomatic)
    AND NOT (sv_iProdCounterAct = 0 AND sv_iProdCounterRemaining = 0)
    AND ((dTimeDifference >= dEstimationTolerance) OR NOT mbProdEvNotificationActive) THEN
    
    // Valid production settings and new estimated expiration date differs from last calculated expiration date
    // -> Send event notification update
    eventNotificationData.dExpirationDate := dEstimatedExpirationDate;  
    
    mbProdEvNotificationActive := TRUE;
    
    // Send event notification update
    SET_EVENT(evUpdateEventNotification, eventNotificationData);   
END_IF;

dLastEstimatedExpirationDate := dEstimatedExpirationDate;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaRequestEventNotification ON PU_Task_13 WITH evRequestEventNotification

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Reset active flag
mbProdEvNotificationActive := FALSE;

// Send update for all production event notifications
aCheckAndSendUpdate();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pProdSettingsChanged ON PU_Task_13 WITH sv_OperationMode, sv_iProdCounterRemaining, sv_bUseProdCounter


VAR
 State : ALARM_STATE_DATA;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbProdEvNotificationActive 
    AND (NOT sv_bUseProdCounter 
         OR (sv_iProdCounterAct = 0 AND sv_iProdCounterRemaining = 0)
         OR (sv_OperationMode < nHalfAutomatic)) THEN
    
    // Check state of "production limit reached"-alarm
    STATE_ALARM(Name := erProdLimitReached,
            State := State);

    IF State.ALARM_STATE = ALARM_STATE_INACTIVE_ACK THEN
        // Production counter is not used any more
        // or shot counter was reset
        // or production has stopped and alarm is not active any more
        // -> Invalidate event notification
        mbProdEvNotificationActive := FALSE;   
   
        eventNotificationData.dExpirationDate := cUTCZeroDate;  
        SET_EVENT(evUpdateEventNotification, eventNotificationData);
        RETURN; 
    END_IF;
END_IF;

aCheckAndSendUpdate();


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaAlarmConfirm ON PU_Task_13 WITH evAlarmConfirm


VAR_INPUT
 evAlarmConfirmData : tevAlarmConfirmData;
END_VAR

VAR
 State : ALARM_STATE_DATA;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbProdEvNotificationActive AND sv_iProdCounterRemaining = 0 THEN   
    // Check state of "production limit reached"-alarm
    STATE_ALARM(Name := erProdLimitReached,
            State := State);

    IF State.ALARM_STATE = ALARM_STATE_INACTIVE_ACK THEN   
        // Alarm inactive and quitted
        // -> Invalidate event notification
        mbProdEvNotificationActive := FALSE;   
        eventNotificationData.dExpirationDate := cUTCZeroDate;  
        SET_EVENT(evUpdateEventNotification, eventNotificationData);
    END_IF;  
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 131 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)STATE_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABEventNotification @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(10)PU_Task_13 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(26)evRequestEventNotification @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(27)tevRequestEventNotification @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(5)fbRTC @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)RTC @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)evUpdateEventNotification @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevUpdateEventNotification @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)sv_rProdTimeRemaining @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bUseProdCounter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)use shot counter @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)eventNotificationData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(24)tevEventNotificationData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(52)(iType:=cEvNotificationType_Production,iInstance:=1) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)erProdLimitReached @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)evAlarmConfirm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tevAlarmConfirm @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)sv_iProdCounterRemaining @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iProdCounterAct @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)mbProdEvNotificationActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(19)aCheckAndSendUpdate @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(24)dEstimatedExpirationDate @RT(0) @T @F @DT @RT(13)DATE_AND_TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(12)cUTCZeroDate @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(28)dLastEstimatedExpirationDate @RT(0) @T @F @DT @RT(13)DATE_AND_TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(12)cUTCZeroDate @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)dEstimationTolerance @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)T#30s @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(15)dTimeDifference @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(27)evaRequestEventNotification @STRUCTURED_TEXT 
@RT(0) @RT(26)evRequestEventNotification @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pProdSettingsChanged @STRUCTURED_TEXT 
@RT(0) @RT(62)sv_OperationMode, sv_iProdCounterRemaining, sv_bUseProdCounter @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(5)State @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_STATE_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(15)evaAlarmConfirm @STRUCTURED_TEXT 
@RT(0) @RT(14)evAlarmConfirm @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(5)State @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_STATE_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)evAlarmConfirmData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tevAlarmConfirmData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(34)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Estimate expiration date and send event notification update if necessary
fbRTC();

// Calculate estimated expiration date depending on remaining production time
dEstimatedExpirationDate := fbRTC.CDT + T#1h * sv_rProdTimeRemaining;

// Calculate a positive time difference
dTimeDifference := dEstimatedExpirationDate - dLastEstimatedExpirationDate;
IF dTimeDifference < T#0s THEN    
    dTimeDifference := dTimeDifference * -1;
END_IF;

IF sv_bUseProdCounter
    AND (sv_OperationMode >= nHalfAutomatic)
    AND NOT (sv_iProdCounterAct = 0 AND sv_iProdCounterRemaining = 0)
    AND ((dTimeDifference >= dEstimationTolerance) OR NOT mbProdEvNotificationActive) THEN
    
    // Valid production settings and new estimated expiration date differs from last calculated expiration date
    // -> Send event notification update
    eventNotificationData.dExpirationDate := dEstimatedExpirationDate;  
    
    mbProdEvNotificationActive := TRUE;
    
    // Send event notification update
    SET_EVENT(evUpdateEventNotification, eventNotificationData);   
END_IF;

dLastEstimatedExpirationDate := dEstimatedExpirationDate;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// Reset active flag
mbProdEvNotificationActive := FALSE;

// Send update for all production event notifications
aCheckAndSendUpdate();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(29)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbProdEvNotificationActive 
    AND (NOT sv_bUseProdCounter 
         OR (sv_iProdCounterAct = 0 AND sv_iProdCounterRemaining = 0)
         OR (sv_OperationMode < nHalfAutomatic)) THEN
    
    // Check state of "production limit reached"-alarm
    STATE_ALARM(Name := erProdLimitReached,
            State := State);

    IF State.ALARM_STATE = ALARM_STATE_INACTIVE_ACK THEN
        // Production counter is not used any more
        // or shot counter was reset
        // or production has stopped and alarm is not active any more
        // -> Invalidate event notification
        mbProdEvNotificationActive := FALSE;   
   
        eventNotificationData.dExpirationDate := cUTCZeroDate;  
        SET_EVENT(evUpdateEventNotification, eventNotificationData);
        RETURN; 
    END_IF;
END_IF;

aCheckAndSendUpdate();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbProdEvNotificationActive AND sv_iProdCounterRemaining = 0 THEN   
    // Check state of "production limit reached"-alarm
    STATE_ALARM(Name := erProdLimitReached,
            State := State);

    IF State.ALARM_STATE = ALARM_STATE_INACTIVE_ACK THEN   
        // Alarm inactive and quitted
        // -> Invalidate event notification
        mbProdEvNotificationActive := FALSE;   
        eventNotificationData.dExpirationDate := cUTCZeroDate;  
        SET_EVENT(evUpdateEventNotification, eventNotificationData);
    END_IF;  
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
