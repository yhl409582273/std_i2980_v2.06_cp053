(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This block handles the emergency stop inputs.
If any emergency stop button is pressed the common emergency-stop signal sv_bEmergencyStop is set.
An according alarm is displayed if one the four supported emergency stop DI´s changes to FALSE.
This alarm leads to a stop and a lock of the motor.
Additionally all movements of all devices are locked.

*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, SET_EVENT
, RESET_ALARM
, ASSERT
, cCompAll
, cAllDevIndex
, cMoveAll
, nLockAbort
, nUnlock
, tsTraceLevel
, tevEmergencyStop
, tevEmergencyStopData
, tnLockUnlock
, FBLockUnlock
, FBDebugTrace

END_IMPORT

ALGORITHM_BLOCK ABEmergencyStop #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
 sv_bInitDone : BOOL;
 di_EmergencyStop1 : BOOL;
 di_EmergencyStop2 : BOOL;
 di_EmergencyStop3 : BOOL;
 di_EmergencyStop4 : BOOL;
 sv_bEmergencyStop : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_3 : TASK;
 EV_Task_3 : TASK;
 evEmergencyStop : tevEmergencyStop;
 erEmergencyStop : ALARM;
 erAssert : ALARM;
END_OBJECT

VAR
 mbLock : BOOL;
END_VAR

(*
Helper for pInputChanged.
*)

ALGORITHM aCheckInput


VAR_INPUT
 bInput : BOOL (* HW input *);
 iId : DINT (* number of emergency stop *);
END_VAR

VAR_IN_OUT
 bEventSent : BOOL;
END_VAR

VAR_TEMP
 evEmergencyStopData : tevEmergencyStopData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInput AND NOT bEventSent THEN
   //lock all movements        
   SET_ALARM(Name := erEmergencyStop, SubID1 := iId);
   
   //fire emergencystop-event
   evEmergencyStopData.bActive := TRUE;
   SET_EVENT(evEmergencyStop, evEmergencyStopData);
   bEventSent := TRUE;
   mbLock := TRUE;
ELSIF bInput AND bEventSent THEN
   //unlock all movements        
   RESET_ALARM(Name := erEmergencyStop, SubID1 := iId);
   
   //fire emergencystop-event
   evEmergencyStopData.bActive := FALSE;
   SET_EVENT(evEmergencyStop, evEmergencyStopData);
   bEventSent := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInputChanged ON PU_Task_3 WITH sv_bInitDone,di_EmergencyStop1,di_EmergencyStop2,di_EmergencyStop3,di_EmergencyStop4


VAR
 bFirstRunDone : BOOL (* flag to avoid unnecessary unlock events after startup *);
 bIsLinked1 : BOOL;
 bIsLinked2 : BOOL;
 bIsLinked3 : BOOL;
 bIsLinked4 : BOOL;
 bEventSent1 : BOOL;
 bEventSent2 : BOOL;
 bEventSent3 : BOOL;
 bEventSent4 : BOOL;
 nMode : tnLockUnlock;
 fbLockUnlock : FBLockUnlock;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bFirstRunDone) THEN
   bIsLinked1 := IS_LINKED(di_EmergencyStop1);
   bIsLinked2 := IS_LINKED(di_EmergencyStop2);
   bIsLinked3 := IS_LINKED(di_EmergencyStop3);
   bIsLinked4 := IS_LINKED(di_EmergencyStop4);

   fbLockUnlock.DeviceId.CompId  := cCompAll;
   fbLockUnlock.DeviceId.IndexId := cAllDevIndex;
   fbLockUnlock.MoveDir := cMoveAll;
   fbLockUnlock.MoveId  := cMoveAll;
END_IF;


IF sv_bInitDone THEN
   mbLock := FALSE;
   
   IF bIsLinked1 THEN
      aCheckInput(bInput := di_EmergencyStop1, iId := 1, bEventSent := bEventSent1); 
   END_IF;
   IF bIsLinked2 THEN
      aCheckInput(bInput := di_EmergencyStop2, iId := 2, bEventSent := bEventSent2); 
   END_IF;
   IF bIsLinked3 THEN
      aCheckInput(bInput := di_EmergencyStop3, iId := 3, bEventSent := bEventSent3); 
   END_IF;
   IF bIsLinked4 THEN
      aCheckInput(bInput := di_EmergencyStop4, iId := 4, bEventSent := bEventSent4); 
   END_IF;

   IF mbLock THEN
      nMode := nLockAbort;
   ELSE
      nMode := nUnlock;
   END_IF;
   
   //lock/unlock all movements   
   IF (nMode = nLockAbort OR bFirstRunDone) THEN       
      fbLockUnlock(Mode := nMode);
   END_IF;
   
   bFirstRunDone := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
This eventalgo receives the emergency-stop event.
If any emergencystop button is pressed the common emergency-stop signal sv_bEmergencyStop is set.
The event must be sent from each emergency-stop handler. eg. OperationMode, Robot interface
*)

EVENT_ALGORITHM evaEmergencyStop ON EV_Task_3 WITH evEmergencyStop


VAR_INPUT
 evEmergencyStopData : tevEmergencyStopData;
END_VAR

VAR
 iEmgStopActive : DINT;
 fbDebugTrace : FBDebugTrace;
 bTmp : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evEmergencyStopData.bActive THEN
   iEmgStopActive := iEmgStopActive + 1;
ELSIF iEmgStopActive > 0 THEN    
   iEmgStopActive := iEmgStopActive - 1;
ELSIF sv_TraceLevel.bApplication THEN
   // an event with status bActive=FALSE was received eventhough no emergency stop was active
   fbDebugTrace(sText := 'ABEmergencyStop.evaEmergencyStop: error: invalid event received');
   bTmp := ASSERT(FALSE, erAssert);
END_IF;
// if any emergency stop is pressed the common signal is set
sv_bEmergencyStop := iEmgStopActive > 0;                                        


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 114 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This block handles the emergency stop inputs.
If any emergency stop button is pressed the common emergency-stop signal sv_bEmergencyStop is set.
An according alarm is displayed if one the four supported emergency stop DI´s changes to FALSE.
This alarm leads to a stop and a lock of the motor.
Additionally all movements of all devices are locked.

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(8)cCompAll @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(10)cMaxCompId @RT(22)to lock all components 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)cAllDevIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(59)to lock all devices of a component ( = cMaxDeviceIndex + 1) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveAll @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(13)cMaxMoveIdent @RT(32)all movements (for evLockUnlock) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)nLockAbort @RT(0) @T @T @DERIVED 0 @F @RT(12)tnLockUnlock @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)nUnlock @RT(0) @T @T @DERIVED 0 @F @RT(12)tnLockUnlock @F 
@T 
@BEG_Attrib 
0 @RT(1)2 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABEmergencyStop @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_EmergencyStop1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_EmergencyStop2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_EmergencyStop3 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_EmergencyStop4 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_bEmergencyStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)evEmergencyStop @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tevEmergencyStop @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)erEmergencyStop @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(6)mbLock @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aCheckInput @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(6)bInput @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(8)HW input @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(3)iId @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)number of emergency stop @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)bEventSent @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(19)evEmergencyStopData @RT(0) @T @T @DERIVED 0 @F @RT(20)tevEmergencyStopData @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pInputChanged @STRUCTURED_TEXT 
@RT(0) @RT(84)sv_bInitDone,di_EmergencyStop1,di_EmergencyStop2,di_EmergencyStop3,di_EmergencyStop4 @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(13)bFirstRunDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(53)flag to avoid unnecessary unlock events after startup @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bIsLinked1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bIsLinked2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bIsLinked3 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bIsLinked4 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bEventSent1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bEventSent2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bEventSent3 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bEventSent4 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)nMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tnLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(16)evaEmergencyStop @STRUCTURED_TEXT 
@RT(0) @RT(15)evEmergencyStop @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(19)evEmergencyStopData @RT(0) @T @T @DERIVED 0 @F @RT(20)tevEmergencyStopData @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)iEmgStopActive @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)bTmp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInput AND NOT bEventSent THEN
   //lock all movements        
   SET_ALARM(Name := erEmergencyStop, SubID1 := iId);
   
   //fire emergencystop-event
   evEmergencyStopData.bActive := TRUE;
   SET_EVENT(evEmergencyStop, evEmergencyStopData);
   bEventSent := TRUE;
   mbLock := TRUE;
ELSIF bInput AND bEventSent THEN
   //unlock all movements        
   RESET_ALARM(Name := erEmergencyStop, SubID1 := iId);
   
   //fire emergencystop-event
   evEmergencyStopData.bActive := FALSE;
   SET_EVENT(evEmergencyStop, evEmergencyStopData);
   bEventSent := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Helper for pInputChanged.
@@@END_Comment@@@ 

@BEG_Body 
@TL(48)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT bFirstRunDone) THEN
   bIsLinked1 := IS_LINKED(di_EmergencyStop1);
   bIsLinked2 := IS_LINKED(di_EmergencyStop2);
   bIsLinked3 := IS_LINKED(di_EmergencyStop3);
   bIsLinked4 := IS_LINKED(di_EmergencyStop4);

   fbLockUnlock.DeviceId.CompId  := cCompAll;
   fbLockUnlock.DeviceId.IndexId := cAllDevIndex;
   fbLockUnlock.MoveDir := cMoveAll;
   fbLockUnlock.MoveId  := cMoveAll;
END_IF;


IF sv_bInitDone THEN
   mbLock := FALSE;
   
   IF bIsLinked1 THEN
      aCheckInput(bInput := di_EmergencyStop1, iId := 1, bEventSent := bEventSent1); 
   END_IF;
   IF bIsLinked2 THEN
      aCheckInput(bInput := di_EmergencyStop2, iId := 2, bEventSent := bEventSent2); 
   END_IF;
   IF bIsLinked3 THEN
      aCheckInput(bInput := di_EmergencyStop3, iId := 3, bEventSent := bEventSent3); 
   END_IF;
   IF bIsLinked4 THEN
      aCheckInput(bInput := di_EmergencyStop4, iId := 4, bEventSent := bEventSent4); 
   END_IF;

   IF mbLock THEN
      nMode := nLockAbort;
   ELSE
      nMode := nUnlock;
   END_IF;
   
   //lock/unlock all movements   
   IF (nMode = nLockAbort OR bFirstRunDone) THEN       
      fbLockUnlock(Mode := nMode);
   END_IF;
   
   bFirstRunDone := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evEmergencyStopData.bActive THEN
   iEmgStopActive := iEmgStopActive + 1;
ELSIF iEmgStopActive > 0 THEN    
   iEmgStopActive := iEmgStopActive - 1;
ELSIF sv_TraceLevel.bApplication THEN
   // an event with status bActive=FALSE was received eventhough no emergency stop was active
   fbDebugTrace(sText := 'ABEmergencyStop.evaEmergencyStop: error: invalid event received');
   bTmp := ASSERT(FALSE, erAssert);
END_IF;
// if any emergency stop is pressed the common signal is set
sv_bEmergencyStop := iEmgStopActive > 0;                                        

@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
This eventalgo receives the emergency-stop event.
If any emergencystop button is pressed the common emergency-stop signal sv_bEmergencyStop is set.
The event must be sent from each emergency-stop handler. eg. OperationMode, Robot interface
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
