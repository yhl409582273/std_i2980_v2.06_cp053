IMPORT_OVER_LISTFILE
 IS_LINKED
, ABSignalSetReset
, tevAlarmConfirm
, TON
, tevAlarmConfirmData

END_IMPORT

ALGORITHM_BLOCK ABAlarmSignal #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bAutoCycleRunning : BOOL;
 do_StoppedLamp : BOOL;
 do_RunningLamp : BOOL;
 sv_bInitDone : BOOL;
 do_AlarmLamp : BOOL (* digital output for alarm lamp *);
 do_Buzzer : BOOL (* digital output for buzzer *);
 sv_iSetAlarmSignalCount : DINT (* counter how many alarms requested the alarm signal (incremented with evAlarmLampBlink event; decremented with evAlarmLampReset) *);
 sv_dBuzzerTime : TIME;
 sv_dBuzzerPulseTime : TIME;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 EV_Task_7 : TASK;
 TaskMid : TASK;
 evAlarmConfirm : tevAlarmConfirm;
END_OBJECT

VAR
 abSignalSetReset : ABSignalSetReset (* this AB counts the alarmevents for set and reset the alarm signals *);
 mbStopBuzzer : BOOL (* stop buzzer *);
END_VAR

POSTUPDATE_ALGORITHM pSetAlarmSignalCount ON PU_Task_7 WITH sv_bInitDone, sv_iSetAlarmSignalCount, sv_bAutoCycleRunning


VAR
 bInitDone : BOOL;
 bAlarmLampLinked : BOOL;
 bRunningLampLinked : BOOL;
 bStoppedLampLinked : BOOL;
 bBuzzerLinked : BOOL;
 iOldCount : DINT;
 iLamp : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
    //check if lamp or buzzer is available
    bAlarmLampLinked := IS_LINKED(do_AlarmLamp);
    bRunningLampLinked := IS_LINKED(do_RunningLamp);
    bStoppedLampLinked := IS_LINKED(do_StoppedLamp);
    bBuzzerLinked := IS_LINKED(do_Buzzer);
    bInitDone := TRUE;
END_IF;

//set or reset alarm lamp if available
IF (sv_iSetAlarmSignalCount > 0) THEN
    iLamp := 0; // alarm 
ELSIF (sv_bAutoCycleRunning) THEN
    iLamp := 1; // running
ELSE
    iLamp := 2; // stopped
END_IF;

IF bAlarmLampLinked THEN
    do_AlarmLamp := iLamp = 0; 
END_IF;

IF bRunningLampLinked THEN
    do_RunningLamp :=  iLamp = 1;
END_IF;

IF bStoppedLampLinked THEN
    do_StoppedLamp := iLamp = 2; 
END_IF;

IF (sv_iSetAlarmSignalCount > iOldCount) AND bBuzzerLinked AND sv_dBuzzerTime > T#0ms THEN
   //start buzzer if a new alarm occured
   mbStopBuzzer := FALSE; 
   START_PROCESS_ALGORITHM(paBuzzer);        
ELSIF sv_iSetAlarmSignalCount = 0 THEN
   mbStopBuzzer := TRUE;
END_IF;
   
iOldCount := sv_iSetAlarmSignalCount;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paBuzzer ON TaskMid


VAR
 // dActTime : TIME;
 // bUseMaxTime : BOOL (* Use max buzzer ring time, if time > 0 otherwise no use *);
 fbTimer : TON;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
END_STEP


(* steps *)
STEP S_OnTime:
AInitTimer (P);
AGenPulses (N);
END_STEP

ACTION AInitTimer: #BEGIN_EDIT_BLOCK
fbTimer(IN := FALSE, PT := sv_dBuzzerPulseTime);
do_Buzzer := TRUE;

;#END_EDIT_BLOCK END_ACTION (*AInitTimer*)
ACTION AGenPulses: #BEGIN_EDIT_BLOCK
fbTimer(IN := TRUE);
IF fbTimer.Q THEN
   do_Buzzer := NOT do_Buzzer;
   fbTimer(IN := FALSE);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AGenPulses*)
STEP S_Stop:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
do_Buzzer := FALSE;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStop*)

(* transitions *)
TRANSITION TStartBuzzer (* Trans1 *) FROM S_Init TO S_OnTime :=  #BEGIN_EDIT_BLOCK
NOT mbStopBuzzer
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TOnTimeReached (* Trans2 *) FROM S_OnTime TO S_Stop :=  #BEGIN_EDIT_BLOCK
S_OnTime.T > sv_dBuzzerTime OR mbStopBuzzer
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TStart (* Trans9 *) FROM S_Stop TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

EVENT_ALGORITHM evaAlarmConfirm ON EV_Task_7 WITH evAlarmConfirm


VAR_INPUT
 evAlarmConfirmData : tevAlarmConfirmData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//alarms have been confirmed by user -> stop buzzer
mbStopBuzzer := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)IS_LINKED @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABAlarmSignal @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
15 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)sv_bAutoCycleRunning @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)do_StoppedLamp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)do_RunningLamp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)EV_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)abSignalSetReset @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ABSignalSetReset @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(66)this AB counts the alarmevents for set and reset the alarm signals @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)do_AlarmLamp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)digital output for alarm lamp @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)do_Buzzer @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)digital output for buzzer @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)mbStopBuzzer @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(11)stop buzzer @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)evAlarmConfirm @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(15)tevAlarmConfirm @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(23)sv_iSetAlarmSignalCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(127)counter how many alarms requested the alarm signal (incremented with evAlarmLampBlink event; decremented with evAlarmLampReset) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_dBuzzerTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_dBuzzerPulseTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pSetAlarmSignalCount @STRUCTURED_TEXT 
@RT(0) @RT(59)sv_bInitDone, sv_iSetAlarmSignalCount, sv_bAutoCycleRunning @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)bAlarmLampLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)bRunningLampLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)bStoppedLampLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)bBuzzerLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)iOldCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iLamp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(8)paBuzzer @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(8)dActTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bUseMaxTime @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(54)Use max buzzer ring time, if time > 0 otherwise no use @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)fbTimer @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(15)evaAlarmConfirm @STRUCTURED_TEXT 
@RT(0) @RT(14)evAlarmConfirm @RT(9)EV_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)evAlarmConfirmData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tevAlarmConfirmData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(45)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
    //check if lamp or buzzer is available
    bAlarmLampLinked := IS_LINKED(do_AlarmLamp);
    bRunningLampLinked := IS_LINKED(do_RunningLamp);
    bStoppedLampLinked := IS_LINKED(do_StoppedLamp);
    bBuzzerLinked := IS_LINKED(do_Buzzer);
    bInitDone := TRUE;
END_IF;

//set or reset alarm lamp if available
IF (sv_iSetAlarmSignalCount > 0) THEN
    iLamp := 0; // alarm 
ELSIF (sv_bAutoCycleRunning) THEN
    iLamp := 1; // running
ELSE
    iLamp := 2; // stopped
END_IF;

IF bAlarmLampLinked THEN
    do_AlarmLamp := iLamp = 0; 
END_IF;

IF bRunningLampLinked THEN
    do_RunningLamp :=  iLamp = 1;
END_IF;

IF bStoppedLampLinked THEN
    do_StoppedLamp := iLamp = 2; 
END_IF;

IF (sv_iSetAlarmSignalCount > iOldCount) AND bBuzzerLinked AND sv_dBuzzerTime > T#0ms THEN
   //start buzzer if a new alarm occured
   mbStopBuzzer := FALSE; 
   START_PROCESS_ALGORITHM(paBuzzer);        
ELSIF sv_iSetAlarmSignalCount = 0 THEN
   mbStopBuzzer := TRUE;
END_IF;
   
iOldCount := sv_iSetAlarmSignalCount;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
10 7 12 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(6)S_Init @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(12)TStartBuzzer @F @T @F @F @T @T @TL(2)
NOT mbStopBuzzer

@RT(6)Trans1 @F 
@Step @RT(8)S_OnTime @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(10)AInitTimer @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
fbTimer(IN := FALSE, PT := sv_dBuzzerPulseTime);
do_Buzzer := TRUE;

@F 
@Acb @RT(10)AGenPulses @F @T @RT(1)N @RT(0) @F @F @T @TL(6)
fbTimer(IN := TRUE);
IF fbTimer.Q THEN
   do_Buzzer := NOT do_Buzzer;
   fbTimer(IN := FALSE);
END_IF;

@F 

@Trans @RT(14)TOnTimeReached @F @T @F @F @T @T @TL(2)
S_OnTime.T > sv_dBuzzerTime OR mbStopBuzzer

@RT(6)Trans2 @F 
@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
do_Buzzer := FALSE;
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(6)TStart @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans9 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//alarms have been confirmed by user -> stop buzzer
mbStopBuzzer := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
