(*
Responsible for sending a evCycleStart event, which starts the next cycle
in half/full auto mode.

The block will send this after
it gets a evStart for OperationMode<x>
and the start conditions are satisfied


1 Block waits for a evStart for OperationMode<x>
2 Block waits for safety gate open open or auto cycle start button
3 When the condition is satisfied send a evCyclestart event.
4 goto 1
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, cCompOperationMode
, tevStart
, tsDeviceId
, tnSafetyGateState
, tevCycleStart
, tnOperationMode
, tnTwoButtonOperationMode
, tevPanelButtonRegisterData
, tevPanelButtonRegister
, KSYS_Status
, tevStartData
, R_TRIG
, FBStart
, FBLockUnlock

END_IMPORT

ALGORITHM_BLOCK ABStartAutoCycle #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
 di_ButtonCycleStart : BOOL;
 sv_MoldSafetyGateState : tnSafetyGateState;
 sv_OperationMode : tnOperationMode;
 sv_bUseBothStartConditions : BOOL;
 di_Button1CycleStart : BOOL;
 di_Button2CycleStart : BOOL;
 sv_TwoButtonMode : tnTwoButtonOperationMode (* press startbuttons only to start the cycle or keep them pressen until high pressure stage is active *);
 sv_bTwoButtonOperation : BOOL (* TRUE: two startbuttons are linked; SV is set in OperationMode - FU *);
 sv_bInitStart : BOOL;
 sv_bStartButtonsPressed : BOOL (* TRUE: both start buttons are pressed; SV is set in OperationMode - FU *);
 sv_bAutoCycleRunning : BOOL;
 sv_bButtonCycleStart : BOOL;
 sv_bButtonCycleStopFinish : BOOL;
 sv_bButtonCycleStopImmediately : BOOL;
END_VAR

SYSTEM_OBJECT
 EV_Task_3 : TASK;
 evStart : tevStart;
 TaskMid : TASK;
 erPressButtonOrOpenDoor : ALARM;
 erStopCycleImmediately : ALARM;
 erStopCycleFinish : ALARM;
 erStartButton : ALARM;
 erOpenDoor : ALARM;
 erCloseDoor : ALARM;
 evCycleStart : tevCycleStart;
 PU_Task_7 : TASK;
 erPressStartButtons : ALARM;
 PU_Task_3 : TASK;
 erButtonsReleased : ALARM;
 TaskAnalog : TASK;
 evPanelButtonRegister : tevPanelButtonRegister;
END_OBJECT

VAR
 mbStopAlgos : BOOL;
 mbDIButtonCycleStartLinked : BOOL;
 mbSVButtonCycleStartLinked : BOOL;
 mpbHighPressureStage : REFTO BOOL (* mold close high pressure stage active *);
 mbStopButtonCheck : BOOL;
 evPanelButtonRegisterData : tevPanelButtonRegisterData;
 mbPanelStartButtonWait : BOOL;
 mbPanelStartButtonPressed : BOOL;
END_VAR

VAR CONSTANT
 cButtonCycleStart : DINT := 6;
 cButtonCycleStopFinish : DINT := 7;
 cButtonCycleStopImmediately : DINT := 8;
END_VAR

POSTUPDATE_ALGORITHM pInit ON PU_Task_7 WITH sv_bInitStart


VAR
 s : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbDIButtonCycleStartLinked := IS_LINKED(di_ButtonCycleStart);
mbSVButtonCycleStartLinked := IS_LINKED(sv_bButtonCycleStart);
sv_bTwoButtonOperation := (IS_LINKED(di_Button1CycleStart)) AND (IS_LINKED(di_Button2CycleStart));
mpbHighPressureStage := GET_SYNC_REFTO("Mold1.sv_bMoldLockStageActive", T#0s, s);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pRegisterButtons ON PU_Task_7 WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// register start button
IF IS_LINKED(sv_bButtonCycleStart) THEN
   evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction;
   evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
   evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
   evPanelButtonRegisterData.Button.iButtonId := cButtonCycleStart;
   evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonCycleStart;
   evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonCycleStart;
   SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);
END_IF;

// register finish and stop button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction;
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonCycleStopFinish;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonCycleStopFinish;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonCycleStopFinish;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register stop immediately button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction;
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonCycleStopImmediately;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonCycleStopImmediately;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonCycleStopImmediately;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);





;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaStart ON EV_Task_3 WITH evStart


VAR_INPUT
 evStartData : tevStartData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId = sv_DeviceId AND evStartData.MoveDir = cMoveNone AND evStartData.MoveId = cMoveStart THEN
   IF sv_bTwoButtonOperation THEN
      START_PROCESS_ALGORITHM(paWaitForButtons);   
   ELSIF mbDIButtonCycleStartLinked OR mbSVButtonCycleStartLinked THEN
      IF sv_bUseBothStartConditions THEN
         // Start next cycle either with start button or safety gate open/close
         START_PROCESS_ALGORITHM(paWaitForStartButtonOrSG);               
      ELSE
         START_PROCESS_ALGORITHM(paWaitForStartButton);
      END_IF;                 
   ELSE        
      START_PROCESS_ALGORITHM(paSafetyGateOpenClose);
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paWaitForStartButton ON TaskMid


VAR
 fbRTrigButton : R_TRIG;
 DeviceId : tsDeviceId;
 fbStart : FBStart;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
END_STEP


(* steps *)
STEP S_SetMessage:
ASetMessage (P);
AIgnoreButton (N);
END_STEP

ACTION ASetMessage: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erStartButton);
mbPanelStartButtonWait := TRUE;
mbPanelStartButtonPressed := FALSE;

;#END_EDIT_BLOCK END_ACTION (*ASetMessage*)
ACTION AIgnoreButton: #BEGIN_EDIT_BLOCK
IF mbDIButtonCycleStartLinked THEN
   (*Ignore first CLK*)
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AIgnoreButton*)
STEP S_WaitForButton:
ACheckButton (N);
END_STEP

ACTION ACheckButton: #BEGIN_EDIT_BLOCK
IF mbDIButtonCycleStartLinked THEN
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACheckButton*)
STEP S_ButtonPressed:
AResetMessage (P);
ASetStartEvent (P);
END_STEP

ACTION AResetMessage: #BEGIN_EDIT_BLOCK
RESET_ALARM(Name := erStartButton);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetMessage*)
ACTION ASetStartEvent: #BEGIN_EDIT_BLOCK
SET_EVENT(evCycleStart);
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*ASetStartEvent*)

(* transitions *)
TRANSITION TInit (* Trans1 *) FROM S_Init TO S_SetMessage :=  #BEGIN_EDIT_BLOCK
NOT mbStopAlgos
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TMessageSet (* Trans2 *) FROM S_SetMessage TO S_WaitForButton :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TButtonPressed (* Trans3 *) FROM S_WaitForButton TO S_ButtonPressed :=  #BEGIN_EDIT_BLOCK
fbRTrigButton.Q OR mbPanelStartButtonPressed
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans5 (* Trans5 *) FROM S_ButtonPressed TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* exits *)

EXIT_TRANSITION Stop := #BEGIN_EDIT_BLOCK
mbStopAlgos OR (sv_bUseBothStartConditions AND sv_OperationMode = nHalfAutomatic)
;#END_EDIT_BLOCK
PRIORITY 1 WITH 
(* init step *)
INITIAL_STEP S_StopAlgo:
AStopAlgorithm (P);
END_STEP

ACTION AStopAlgorithm: #BEGIN_EDIT_BLOCK
RESET_ALARM(Name := erStartButton);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AStopAlgorithm*)
STEP S_Init:
END_STEP

STEP S_Init:
END_STEP


(* steps *)
STEP S_GetNewCycleStart:
AGetCycleStart (P);
AStopProcessAlgo2 (P);
END_STEP

ACTION AGetCycleStart: #BEGIN_EDIT_BLOCK
DeviceId.CompId := cCompOperationMode;
DeviceId.IndexId := 1;

fbStart(DeviceId := DeviceId,
        MoveDir  := 1,
        MoveId   := 1);

;#END_EDIT_BLOCK END_ACTION (*AGetCycleStart*)
ACTION AStopProcessAlgo2: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStopProcessAlgo2*)
STEP S_StopProcessAlgo1:
AStopProcessAlgo1 (P);
END_STEP

ACTION AStopProcessAlgo1: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStopProcessAlgo1*)

(* transitions *)
TRANSITION TSwitchedToHandOrSetup (* Trans16 *) FROM S_StopAlgo TO S_StopProcessAlgo1 :=  #BEGIN_EDIT_BLOCK
sv_OperationMode = nManual OR sv_OperationMode = nSetup
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TSwitchedToHalfOrFullAuto (* Trans17 *) FROM S_StopAlgo TO S_GetNewCycleStart :=  #BEGIN_EDIT_BLOCK
sv_OperationMode = nFullAutomatic OR sv_OperationMode = nHalfAutomatic
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TTrue2 (* Trans10 *) FROM S_GetNewCycleStart TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TTrue (* Trans10 *) FROM S_StopProcessAlgo1 TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paWaitForButtons ON TaskMid


VAR
 fbRTrigButtonsPressed : R_TRIG;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
END_STEP


(* steps *)
STEP S_SetMessage:
ASetMessage (P);
END_STEP

ACTION ASetMessage: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erPressStartButtons);

;#END_EDIT_BLOCK END_ACTION (*ASetMessage*)
STEP S_WaitForButton:
ACheckButton (N);
END_STEP

ACTION ACheckButton: #BEGIN_EDIT_BLOCK
//a rising edge of both buttons must be detected
fbRTrigButtonsPressed(CLK := sv_bStartButtonsPressed);

;#END_EDIT_BLOCK END_ACTION (*ACheckButton*)
STEP S_ButtonPressed:
AResetMessage (P);
ASetStartEvent (P);
END_STEP

ACTION AResetMessage: #BEGIN_EDIT_BLOCK
RESET_ALARM(Name := erPressStartButtons);

;#END_EDIT_BLOCK END_ACTION (*AResetMessage*)
ACTION ASetStartEvent: #BEGIN_EDIT_BLOCK
SET_EVENT(evCycleStart);

;#END_EDIT_BLOCK END_ACTION (*ASetStartEvent*)
STEP S_End:
AEnd (P);
END_STEP

ACTION AEnd: #BEGIN_EDIT_BLOCK
IF mbStopAlgos THEN
   RESET_ALARM(Name := erPressStartButtons);
END_IF;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AEnd*)

(* transitions *)
TRANSITION TInit (* Trans1 *) FROM S_Init TO S_SetMessage :=  #BEGIN_EDIT_BLOCK
NOT mbStopAlgos
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TMessageSet (* Trans2 *) FROM S_SetMessage TO S_WaitForButton :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TButtonsPressed (* Trans3 *) FROM S_WaitForButton TO S_ButtonPressed :=  #BEGIN_EDIT_BLOCK
fbRTrigButtonsPressed.Q
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans11 (* Trans11 *) FROM S_ButtonPressed TO S_End :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans5 (* Trans5 *) FROM S_End TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* exits *)

EXIT_TRANSITION Stop := #BEGIN_EDIT_BLOCK
mbStopAlgos AND NOT S_End.X
;#END_EDIT_BLOCK
PRIORITY 1 WITH  INITIAL_STEP S_End: END_STEP
END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paSafetyGateOpenClose ON TaskMid


(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
END_STEP


(* steps *)
STEP S_CheckState:
END_STEP

STEP S_SetOpenMessage:
ASetOpenMessage (P);
END_STEP

ACTION ASetOpenMessage: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erOpenDoor);

;#END_EDIT_BLOCK END_ACTION (*ASetOpenMessage*)
STEP S_ResetOpenMessage:
AResetOpenMessage (P);
END_STEP

ACTION AResetOpenMessage: #BEGIN_EDIT_BLOCK
RESET_ALARM(erOpenDoor);

;#END_EDIT_BLOCK END_ACTION (*AResetOpenMessage*)
STEP S_SetCloseMessage:
ASetCloseMessage (P);
END_STEP

ACTION ASetCloseMessage: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erCloseDoor);

;#END_EDIT_BLOCK END_ACTION (*ASetCloseMessage*)
STEP S_SetStartEvent:
AResetCloseMessage (P);
AsetCycleStartEvent (P);
END_STEP

ACTION AResetCloseMessage: #BEGIN_EDIT_BLOCK
RESET_ALARM(erCloseDoor);

;#END_EDIT_BLOCK END_ACTION (*AResetCloseMessage*)
ACTION AsetCycleStartEvent: #BEGIN_EDIT_BLOCK
SET_EVENT(evCycleStart);
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AsetCycleStartEvent*)

(* transitions *)
TRANSITION TAutoAcitve (* Trans9 *) FROM S_Init TO S_CheckState :=  #BEGIN_EDIT_BLOCK
NOT mbStopAlgos
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TGateOpen (* Trans1 *) FROM S_CheckState TO S_SetCloseMessage :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nOpen
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TGateClosed (* Trans4 *) FROM S_CheckState TO S_SetOpenMessage :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nClosed
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TWaitGateOpen (* Trans5 *) FROM S_SetOpenMessage TO S_ResetOpenMessage :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nOpen
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TGateWasOpened (* Trans6 *) FROM S_ResetOpenMessage TO S_SetCloseMessage :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TWaitSGClosed (* Trans1 *) FROM S_SetCloseMessage TO S_SetStartEvent :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nClosed
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM S_SetStartEvent TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* exits *)

EXIT_TRANSITION Stop := #BEGIN_EDIT_BLOCK
mbStopAlgos
;#END_EDIT_BLOCK
PRIORITY 1 WITH 
(* init step *)
INITIAL_STEP S_StopAlgo:
AStopAlgorithm (P);
END_STEP

ACTION AStopAlgorithm: #BEGIN_EDIT_BLOCK
RESET_ALARM(Name := erCloseDoor);
RESET_ALARM(Name := erOpenDoor);
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStopAlgorithm*)
STEP S_Init:
END_STEP


(* steps *)

(* transitions *)
TRANSITION TTrue (* Trans10 *) FROM S_StopAlgo TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paWaitForStartButtonOrSG ON TaskMid


VAR
 fbRTrigButton : R_TRIG;
 DeviceId : tsDeviceId;
 fbStart : FBStart;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
END_STEP


(* steps *)
STEP S_CheckState:
AIgnoreButton (N);
END_STEP

ACTION AIgnoreButton: #BEGIN_EDIT_BLOCK
IF mbDIButtonCycleStartLinked THEN
   (*Ignore first CLK*)
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AIgnoreButton*)
STEP S_SetPressOrOpenMessage:
ASetOpenMessage (P);
ACheckButton (N);
END_STEP

ACTION ASetOpenMessage: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erPressButtonOrOpenDoor);
mbPanelStartButtonWait := TRUE;
mbPanelStartButtonPressed := FALSE;

;#END_EDIT_BLOCK END_ACTION (*ASetOpenMessage*)
ACTION ACheckButton: #BEGIN_EDIT_BLOCK
IF mbDIButtonCycleStartLinked THEN
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACheckButton*)
STEP S_ResetOpenMessage2:
AResetOpenMessage2 (P);
END_STEP

ACTION AResetOpenMessage2: #BEGIN_EDIT_BLOCK
RESET_ALARM(erPressButtonOrOpenDoor);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetOpenMessage2*)
STEP S_ResetOpenMessage1:
AResetOpenMessage1 (P);
END_STEP

ACTION AResetOpenMessage1: #BEGIN_EDIT_BLOCK
RESET_ALARM(erPressButtonOrOpenDoor);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;


;#END_EDIT_BLOCK END_ACTION (*AResetOpenMessage1*)
STEP S_SetCloseMessage:
ASetCloseMessage (P);
END_STEP

ACTION ASetCloseMessage: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erCloseDoor);

;#END_EDIT_BLOCK END_ACTION (*ASetCloseMessage*)
STEP S_ResetCloseMessage:
AResetCloseMessage (P);
END_STEP

ACTION AResetCloseMessage: #BEGIN_EDIT_BLOCK
RESET_ALARM(erCloseDoor);

;#END_EDIT_BLOCK END_ACTION (*AResetCloseMessage*)
STEP S_SetStartEvent:
AsetCycleStartEvent (P);
END_STEP

ACTION AsetCycleStartEvent: #BEGIN_EDIT_BLOCK
SET_EVENT(evCycleStart);
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AsetCycleStartEvent*)

(* transitions *)
TRANSITION TAutoAcitve (* Trans9 *) FROM S_Init TO S_CheckState :=  #BEGIN_EDIT_BLOCK
NOT mbStopAlgos
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TGateOpen (* Trans1 *) FROM S_CheckState TO S_SetCloseMessage :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nOpen
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TGateClosed (* Trans4 *) FROM S_CheckState TO S_SetPressOrOpenMessage :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nClosed
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TWaitGateOpen (* Trans5 *) FROM S_SetPressOrOpenMessage TO S_ResetOpenMessage1 :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nOpen
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TButtonPressed (* Trans11 *) FROM S_SetPressOrOpenMessage TO S_ResetOpenMessage2 :=  #BEGIN_EDIT_BLOCK
fbRTrigButton.Q OR mbPanelStartButtonPressed
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TTrue1 (* T_True *) FROM S_ResetOpenMessage2 TO S_SetStartEvent :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TGateWasOpened (* Trans6 *) FROM S_ResetOpenMessage1 TO S_SetCloseMessage :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TWaitSGClosed (* Trans1 *) FROM S_SetCloseMessage TO S_ResetCloseMessage :=  #BEGIN_EDIT_BLOCK
sv_MoldSafetyGateState = nClosed
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TTrue2 (* Trans14 *) FROM S_ResetCloseMessage TO S_SetStartEvent :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM S_SetStartEvent TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* exits *)

EXIT_TRANSITION Stop := #BEGIN_EDIT_BLOCK
//mbStopAlgos OR (sv_OperationMode = nFullAutomatic) OR NOT sv_bUseBothStartConditions
mbStopAlgos OR NOT sv_bUseBothStartConditions
;#END_EDIT_BLOCK
PRIORITY 1 WITH 
(* init step *)
INITIAL_STEP S_StopAlgo:
AStopAlgorithm (P);
END_STEP

ACTION AStopAlgorithm: #BEGIN_EDIT_BLOCK
RESET_ALARM(Name := erCloseDoor);
RESET_ALARM(Name := erPressButtonOrOpenDoor);

;#END_EDIT_BLOCK END_ACTION (*AStopAlgorithm*)
STEP S_Init:
END_STEP

STEP S_Init:
END_STEP


(* steps *)
STEP S_GetNewCycleStart:
AGetCycleStart (P);
AStopProcessAlgo2 (P);
END_STEP

ACTION AGetCycleStart: #BEGIN_EDIT_BLOCK
DeviceId.CompId := cCompOperationMode;
DeviceId.IndexId := 1;

fbStart(DeviceId := DeviceId,
        MoveDir  := cMoveNone,
        MoveId   := cMoveStart);

;#END_EDIT_BLOCK END_ACTION (*AGetCycleStart*)
ACTION AStopProcessAlgo2: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStopProcessAlgo2*)
STEP S_StopProcessAlgo1:
AStopProcessAlgo1 (P);
END_STEP

ACTION AStopProcessAlgo1: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStopProcessAlgo1*)

(* transitions *)
TRANSITION TSwitchedToHandOrSetup (* Trans16 *) FROM S_StopAlgo TO S_StopProcessAlgo1 :=  #BEGIN_EDIT_BLOCK
sv_OperationMode = nManual OR sv_OperationMode = nSetup
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TSwitchedToHalfOrFullAuto (* Trans17 *) FROM S_StopAlgo TO S_GetNewCycleStart :=  #BEGIN_EDIT_BLOCK
sv_OperationMode = nFullAutomatic OR sv_OperationMode = nHalfAutomatic
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TTrue4 (* Trans10 *) FROM S_GetNewCycleStart TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TTrue3 (* Trans20 *) FROM S_StopProcessAlgo1 TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pOpModeChanged ON PU_Task_7 WITH sv_OperationMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode < nHalfAutomatic THEN
    mbStopAlgos := TRUE;
ELSE
    mbStopAlgos := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pButtonSupervision ON PU_Task_7 WITH sv_TwoButtonMode,sv_OperationMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//stop cycle if buttons are released before mold is in high pressure stage
IF (sv_bTwoButtonOperation) AND (sv_OperationMode >= nHalfAutomatic) AND (sv_TwoButtonMode = nPressButtonsTillHighPressure) THEN
   mbStopButtonCheck := FALSE;
   START_PROCESS_ALGORITHM(paCheckButtonsDuringClose);
ELSE
   mbStopButtonCheck := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pStartButtons ON PU_Task_3 WITH di_Button1CycleStart,di_Button2CycleStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_bStartButtonsPressed := (di_Button1CycleStart AND di_Button2CycleStart);


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paCheckButtonsDuringClose ON TaskAnalog


VAR
 fbLockUnlockMoldClose : FBLockUnlock;
 bLocked : BOOL;
 bInit : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   fbLockUnlockMoldClose.DeviceId.CompId := cCompMold;
   fbLockUnlockMoldClose.DeviceId.IndexId := 1;
   fbLockUnlockMoldClose.MoveDir := cMoveFwd;
   fbLockUnlockMoldClose.MoveId := cMoveAll;
   fbLockUnlockMoldClose.Alarm.AlarmId := erButtonsReleased;
   bInit := TRUE;
END_IF;


//check if buttons are pressed untill high pressure stage is active
IF sv_bStartButtonsPressed THEN
   IF bLocked THEN
      fbLockUnlockMoldClose(Mode := nUnlock);
      bLocked := FALSE;
   END_IF; 
ELSE
   //buttons not pressed
   IF (NOT mpbHighPressureStage^) AND NOT bLocked THEN
      //lock mold close
      fbLockUnlockMoldClose(Mode := nLockAbort);
      bLocked := TRUE;
   END_IF;
END_IF;
   
   
IF mbStopButtonCheck THEN
   //unlock and stop
   fbLockUnlockMoldClose(Mode := nUnlock);
   bLocked := FALSE;
   STOP_PROCESS_ALGORITHM();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pButtonCycleStart ON PU_Task_7 WITH sv_bButtonCycleStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bButtonCycleStart THEN
   RETURN;
END_IF;

// we were waiting for a button press so store the flag
// the panel button is only set for a single edge
IF mbPanelStartButtonWait THEN
   mbPanelStartButtonWait := FALSE;
   mbPanelStartButtonPressed := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pButtonCycleStopFinish ON PU_Task_7 WITH sv_bButtonCycleStopFinish

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bButtonCycleStopFinish THEN
   RETURN;
END_IF;

IF sv_bAutoCycleRunning THEN
   SET_ALARM(erStopCycleFinish);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pButtonCycleStopImmediately ON PU_Task_7 WITH sv_bButtonCycleStopImmediately

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bButtonCycleStopImmediately THEN
   RETURN;
END_IF;

IF sv_bAutoCycleRunning THEN
   SET_ALARM(erStopCycleImmediately);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 86 @Pou 25 
@@@BEG_Comment@@@
Responsible for sending a evCycleStart event, which starts the next cycle
in half/full auto mode.

The block will send this after
it gets a evStart for OperationMode<x>
and the start conditions are satisfied


1 Block waits for a evStart for OperationMode<x>
2 Block waits for safety gate open open or auto cycle start button
3 When the condition is satisfied send a evCyclestart event.
4 goto 1
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(18)cCompOperationMode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)111 @RT(24)Component Operation Mode 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABStartAutoCycle @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
42 
@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)evStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)di_ButtonCycleStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_MoldSafetyGateState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tnSafetyGateState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)erPressButtonOrOpenDoor @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)erStopCycleImmediately @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)erStopCycleFinish @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)erStartButton @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)erOpenDoor @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)erCloseDoor @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)evCycleStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tevCycleStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)mbStopAlgos @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(26)sv_bUseBothStartConditions @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)di_Button1CycleStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)di_Button2CycleStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)erPressStartButtons @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_TwoButtonMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(24)tnTwoButtonOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(99)press startbuttons only to start the cycle or keep them pressen until high pressure stage is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bTwoButtonOperation @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(66)TRUE: two startbuttons are linked; SV is set in OperationMode - FU @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)mbDIButtonCycleStartLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(26)mbSVButtonCycleStartLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bStartButtonsPressed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(69)TRUE: both start buttons are pressed; SV is set in OperationMode - FU @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)erButtonsReleased @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)mpbHighPressureStage @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)mold close high pressure stage active @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mbStopButtonCheck @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(25)evPanelButtonRegisterData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevPanelButtonRegisterData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)evPanelButtonRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevPanelButtonRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)sv_bAutoCycleRunning @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bButtonCycleStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_bButtonCycleStopFinish @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_bButtonCycleStopImmediately @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)cButtonCycleStart @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)6 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(22)cButtonCycleStopFinish @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)7 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(27)cButtonCycleStopImmediately @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)8 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@Var @RT(22)mbPanelStartButtonWait @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)mbPanelStartButtonPressed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

14 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pRegisterButtons @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(8)evaStart @STRUCTURED_TEXT 
@RT(0) @RT(7)evStart @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(11)evStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tevStartData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(20)paWaitForStartButton @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(13)fbRTrigButton @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)fbStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)FBStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paWaitForButtons @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(21)fbRTrigButtonsPressed @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(21)paSafetyGateOpenClose @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(24)paWaitForStartButtonOrSG @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(13)fbRTrigButton @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)fbStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)FBStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pOpModeChanged @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_OperationMode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(18)pButtonSupervision @STRUCTURED_TEXT 
@RT(0) @RT(33)sv_TwoButtonMode,sv_OperationMode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pStartButtons @STRUCTURED_TEXT 
@RT(0) @RT(41)di_Button1CycleStart,di_Button2CycleStart @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(25)paCheckButtonsDuringClose @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(21)fbLockUnlockMoldClose @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pButtonCycleStart @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_bButtonCycleStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(22)pButtonCycleStopFinish @STRUCTURED_TEXT 
@RT(0) @RT(25)sv_bButtonCycleStopFinish @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(27)pButtonCycleStopImmediately @STRUCTURED_TEXT 
@RT(0) @RT(30)sv_bButtonCycleStopImmediately @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbDIButtonCycleStartLinked := IS_LINKED(di_ButtonCycleStart);
mbSVButtonCycleStartLinked := IS_LINKED(sv_bButtonCycleStart);
sv_bTwoButtonOperation := (IS_LINKED(di_Button1CycleStart)) AND (IS_LINKED(di_Button2CycleStart));
mpbHighPressureStage := GET_SYNC_REFTO("Mold1.sv_bMoldLockStageActive", T#0s, s);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(37)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// register start button
IF IS_LINKED(sv_bButtonCycleStart) THEN
   evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction;
   evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
   evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
   evPanelButtonRegisterData.Button.iButtonId := cButtonCycleStart;
   evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonCycleStart;
   evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonCycleStart;
   SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);
END_IF;

// register finish and stop button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction;
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonCycleStopFinish;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonCycleStopFinish;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonCycleStopFinish;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

// register stop immediately button
evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonAction;
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonCycleStopImmediately;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonCycleStopImmediately;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonCycleStopImmediately;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId = sv_DeviceId AND evStartData.MoveDir = cMoveNone AND evStartData.MoveId = cMoveStart THEN
   IF sv_bTwoButtonOperation THEN
      START_PROCESS_ALGORITHM(paWaitForButtons);   
   ELSIF mbDIButtonCycleStartLinked OR mbSVButtonCycleStartLinked THEN
      IF sv_bUseBothStartConditions THEN
         // Start next cycle either with start button or safety gate open/close
         START_PROCESS_ALGORITHM(paWaitForStartButtonOrSG);               
      ELSE
         START_PROCESS_ALGORITHM(paWaitForStartButton);
      END_IF;                 
   ELSE        
      START_PROCESS_ALGORITHM(paSafetyGateOpenClose);
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
9 9 10 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 7 
@Step @RT(6)S_Init @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(5)TInit @F @T @F @F @T @T @TL(2)
NOT mbStopAlgos

@RT(6)Trans1 @F 
@Step @RT(12)S_SetMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(11)ASetMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
SET_ALARM(Name := erStartButton);
mbPanelStartButtonWait := TRUE;
mbPanelStartButtonPressed := FALSE;

@F 
@Acb @RT(13)AIgnoreButton @F @T @RT(1)N @RT(0) @F @F @T @TL(5)
IF mbDIButtonCycleStartLinked THEN
   (*Ignore first CLK*)
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

@F 

@Trans @RT(11)TMessageSet @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans2 @F 
@Step @RT(15)S_WaitForButton @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(12)ACheckButton @F @T @RT(1)N @RT(0) @F @F @T @TL(4)
IF mbDIButtonCycleStartLinked THEN
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

@F 

@Trans @RT(14)TButtonPressed @F @T @F @F @T @F @TL(2)
fbRTrigButton.Q OR mbPanelStartButtonPressed

@RT(6)Trans3 @F 
@Step @RT(15)S_ButtonPressed @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(13)AResetMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
RESET_ALARM(Name := erStartButton);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;

@F 
@Acb @RT(14)ASetStartEvent @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
SET_EVENT(evCycleStart);
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(6)Trans5 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans5 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 1 
@SaExit @SaText @RT(4)Stop 1 @TL(2)
mbStopAlgos OR (sv_bUseBothStartConditions AND sv_OperationMode = nHalfAutomatic)

@RT(6)S_Init @RT(1)1 @T @F @SaSfc @RT(4)Stop 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 5 
@Step @RT(10)S_StopAlgo @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(14)AStopAlgorithm @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
RESET_ALARM(Name := erStartButton);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(22)TSwitchedToHandOrSetup @F @T @F @F @T @T @TL(2)
sv_OperationMode = nManual OR sv_OperationMode = nSetup

@RT(7)Trans16 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(25)TSwitchedToHalfOrFullAuto @F @T @F @F @T @T @TL(2)
sv_OperationMode = nFullAutomatic OR sv_OperationMode = nHalfAutomatic

@RT(7)Trans17 @F 
@Step @RT(18)S_GetNewCycleStart @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(14)AGetCycleStart @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
DeviceId.CompId := cCompOperationMode;
DeviceId.IndexId := 1;

fbStart(DeviceId := DeviceId,
        MoveDir  := 1,
        MoveId   := 1);

@F 
@Acb @RT(17)AStopProcessAlgo2 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(6)TTrue2 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans10 @F 
@Goto @RT(6)S_Init @F @F 


@Step @RT(18)S_StopProcessAlgo1 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)AStopProcessAlgo1 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(5)TTrue @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans10 @F 
@Goto @RT(6)S_Init @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
12 11 12 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 9 
@Step @RT(6)S_Init @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(5)TInit @F @T @F @F @T @T @TL(2)
NOT mbStopAlgos

@RT(6)Trans1 @F 
@Step @RT(12)S_SetMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)ASetMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
SET_ALARM(Name := erPressStartButtons);

@F 

@Trans @RT(11)TMessageSet @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans2 @F 
@Step @RT(15)S_WaitForButton @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(12)ACheckButton @F @T @RT(1)N @RT(0) @F @F @T @TL(3)
//a rising edge of both buttons must be detected
fbRTrigButtonsPressed(CLK := sv_bStartButtonsPressed);

@F 

@Trans @RT(15)TButtonsPressed @F @T @F @F @T @F @TL(2)
fbRTrigButtonsPressed.Q

@RT(6)Trans3 @F 
@Step @RT(15)S_ButtonPressed @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(13)AResetMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
RESET_ALARM(Name := erPressStartButtons);

@F 
@Acb @RT(14)ASetStartEvent @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
SET_EVENT(evCycleStart);

@F 

@Trans @RT(7)Trans11 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans11 @F 
@Step @RT(5)S_End @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(4)AEnd @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
IF mbStopAlgos THEN
   RESET_ALARM(Name := erPressStartButtons);
END_IF;
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(6)Trans5 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans5 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 1 
@SaExit @SaText @RT(4)Stop 1 @TL(2)
mbStopAlgos AND NOT S_End.X

@RT(5)S_End @RT(1)1 @F @F @SaSfc @RT(4)Stop 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 5 
@Step @RT(10)S_StopAlgo @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(14)AStopAlgorithm @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
RESET_ALARM(Name := erStartButton);

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(22)TSwitchedToHandOrSetup @F @T @F @F @T @T @TL(2)
sv_OperationMode = nManual OR sv_OperationMode = nSetup

@RT(7)Trans16 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(25)TSwitchedToHalfOrFullAuto @F @T @F @F @T @T @TL(2)
sv_OperationMode = nFullAutomatic OR sv_OperationMode = nHalfAutomatic

@RT(7)Trans17 @F 
@Step @RT(18)S_GetNewCycleStart @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(14)AGetCycleStart @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
DeviceId.CompId := cCompOperationMode;
DeviceId.IndexId := 1;

fbStart(DeviceId := DeviceId,
        MoveDir  := 1,
        MoveId   := 1);

@F 
@Acb @RT(17)AStopProcessAlgo2 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(6)TTrue2 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans10 @F 
@Goto @RT(6)S_Init @F @F 


@Step @RT(18)S_StopProcessAlgo1 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)AStopProcessAlgo1 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(5)TTrue @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans10 @F 
@Goto @RT(6)S_Init @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
14 11 11 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 7 
@Step @RT(6)S_Init @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(11)TAutoAcitve @F @T @F @F @T @T @TL(2)
NOT mbStopAlgos

@RT(6)Trans9 @F 
@Step @RT(12)S_CheckState @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(9)TGateOpen @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nOpen

@RT(6)Trans1 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(11)TGateClosed @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nClosed

@RT(6)Trans4 @F 
@Step @RT(16)S_SetOpenMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(15)ASetOpenMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
SET_ALARM(Name := erOpenDoor);

@F 

@Trans @RT(13)TWaitGateOpen @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nOpen

@RT(6)Trans5 @F 
@Step @RT(18)S_ResetOpenMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)AResetOpenMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
RESET_ALARM(erOpenDoor);

@F 

@Trans @RT(14)TGateWasOpened @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans6 @F 


@Step @RT(17)S_SetCloseMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(16)ASetCloseMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
SET_ALARM(Name := erCloseDoor);

@F 

@Trans @RT(13)TWaitSGClosed @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nClosed

@RT(6)Trans1 @F 
@Step @RT(15)S_SetStartEvent @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(18)AResetCloseMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
RESET_ALARM(erCloseDoor);

@F 
@Acb @RT(19)AsetCycleStartEvent @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
SET_EVENT(evCycleStart);
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(6)Trans2 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans2 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 1 
@SaExit @SaText @RT(4)Stop 1 @TL(2)
mbStopAlgos

@RT(6)S_Init @RT(1)1 @T @F @SaSfc @RT(4)Stop 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(10)S_StopAlgo @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(14)AStopAlgorithm @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
RESET_ALARM(Name := erCloseDoor);
RESET_ALARM(Name := erOpenDoor);
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(5)TTrue @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans10 @F 
@Goto @RT(6)S_Init @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
22 19 23 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 9 
@Step @RT(6)S_Init @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(11)TAutoAcitve @F @T @F @F @T @T @TL(2)
NOT mbStopAlgos

@RT(6)Trans9 @F 
@Step @RT(12)S_CheckState @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(13)AIgnoreButton @F @T @RT(1)N @RT(0) @F @F @T @TL(5)
IF mbDIButtonCycleStartLinked THEN
   (*Ignore first CLK*)
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(9)TGateOpen @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nOpen

@RT(6)Trans1 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(11)TGateClosed @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nClosed

@RT(6)Trans4 @F 
@Step @RT(23)S_SetPressOrOpenMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(15)ASetOpenMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
SET_ALARM(Name := erPressButtonOrOpenDoor);
mbPanelStartButtonWait := TRUE;
mbPanelStartButtonPressed := FALSE;

@F 
@Acb @RT(12)ACheckButton @F @T @RT(1)N @RT(0) @F @F @T @TL(4)
IF mbDIButtonCycleStartLinked THEN
   fbRTrigButton(CLK := di_ButtonCycleStart);
END_IF;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(13)TWaitGateOpen @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nOpen

@RT(6)Trans5 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(14)TButtonPressed @F @T @F @F @T @F @TL(2)
fbRTrigButton.Q OR mbPanelStartButtonPressed

@RT(7)Trans11 @F 
@Step @RT(19)S_ResetOpenMessage2 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(18)AResetOpenMessage2 @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
RESET_ALARM(erPressButtonOrOpenDoor);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;

@F 

@Trans @RT(6)TTrue1 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)T_True @F 
@Goto @RT(15)S_SetStartEvent @F @F 


@Step @RT(19)S_ResetOpenMessage1 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(18)AResetOpenMessage1 @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
RESET_ALARM(erPressButtonOrOpenDoor);
mbPanelStartButtonWait := FALSE;
mbPanelStartButtonPressed := FALSE;


@F 

@Trans @RT(14)TGateWasOpened @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans6 @F 


@Step @RT(17)S_SetCloseMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(16)ASetCloseMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
SET_ALARM(Name := erCloseDoor);

@F 

@Trans @RT(13)TWaitSGClosed @F @T @F @F @T @F @TL(2)
sv_MoldSafetyGateState = nClosed

@RT(6)Trans1 @F 
@Step @RT(19)S_ResetCloseMessage @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(18)AResetCloseMessage @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
RESET_ALARM(erCloseDoor);

@F 

@Trans @RT(6)TTrue2 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans14 @F 
@Step @RT(15)S_SetStartEvent @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(19)AsetCycleStartEvent @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
SET_EVENT(evCycleStart);
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(6)Trans2 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans2 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 1 
@SaExit @SaText @RT(4)Stop 1 @TL(3)
//mbStopAlgos OR (sv_OperationMode = nFullAutomatic) OR NOT sv_bUseBothStartConditions
mbStopAlgos OR NOT sv_bUseBothStartConditions

@RT(6)S_Init @RT(1)1 @T @F @SaSfc @RT(4)Stop 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 5 
@Step @RT(10)S_StopAlgo @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(14)AStopAlgorithm @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
RESET_ALARM(Name := erCloseDoor);
RESET_ALARM(Name := erPressButtonOrOpenDoor);

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(22)TSwitchedToHandOrSetup @F @T @F @F @T @T @TL(2)
sv_OperationMode = nManual OR sv_OperationMode = nSetup

@RT(7)Trans16 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(25)TSwitchedToHalfOrFullAuto @F @T @F @F @T @T @TL(2)
sv_OperationMode = nFullAutomatic OR sv_OperationMode = nHalfAutomatic

@RT(7)Trans17 @F 
@Step @RT(18)S_GetNewCycleStart @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(14)AGetCycleStart @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
DeviceId.CompId := cCompOperationMode;
DeviceId.IndexId := 1;

fbStart(DeviceId := DeviceId,
        MoveDir  := cMoveNone,
        MoveId   := cMoveStart);

@F 
@Acb @RT(17)AStopProcessAlgo2 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(6)TTrue4 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans10 @F 
@Goto @RT(6)S_Init @F @F 


@Step @RT(18)S_StopProcessAlgo1 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)AStopProcessAlgo1 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(6)TTrue3 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans20 @F 
@Goto @RT(6)S_Init @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode < nHalfAutomatic THEN
    mbStopAlgos := TRUE;
ELSE
    mbStopAlgos := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//stop cycle if buttons are released before mold is in high pressure stage
IF (sv_bTwoButtonOperation) AND (sv_OperationMode >= nHalfAutomatic) AND (sv_TwoButtonMode = nPressButtonsTillHighPressure) THEN
   mbStopButtonCheck := FALSE;
   START_PROCESS_ALGORITHM(paCheckButtonsDuringClose);
ELSE
   mbStopButtonCheck := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sv_bStartButtonsPressed := (di_Button1CycleStart AND di_Button2CycleStart);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(38)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   fbLockUnlockMoldClose.DeviceId.CompId := cCompMold;
   fbLockUnlockMoldClose.DeviceId.IndexId := 1;
   fbLockUnlockMoldClose.MoveDir := cMoveFwd;
   fbLockUnlockMoldClose.MoveId := cMoveAll;
   fbLockUnlockMoldClose.Alarm.AlarmId := erButtonsReleased;
   bInit := TRUE;
END_IF;


//check if buttons are pressed untill high pressure stage is active
IF sv_bStartButtonsPressed THEN
   IF bLocked THEN
      fbLockUnlockMoldClose(Mode := nUnlock);
      bLocked := FALSE;
   END_IF; 
ELSE
   //buttons not pressed
   IF (NOT mpbHighPressureStage^) AND NOT bLocked THEN
      //lock mold close
      fbLockUnlockMoldClose(Mode := nLockAbort);
      bLocked := TRUE;
   END_IF;
END_IF;
   
   
IF mbStopButtonCheck THEN
   //unlock and stop
   fbLockUnlockMoldClose(Mode := nUnlock);
   bLocked := FALSE;
   STOP_PROCESS_ALGORITHM();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bButtonCycleStart THEN
   RETURN;
END_IF;

// we were waiting for a button press so store the flag
// the panel button is only set for a single edge
IF mbPanelStartButtonWait THEN
   mbPanelStartButtonWait := FALSE;
   mbPanelStartButtonPressed := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bButtonCycleStopFinish THEN
   RETURN;
END_IF;

IF sv_bAutoCycleRunning THEN
   SET_ALARM(erStopCycleFinish);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bButtonCycleStopImmediately THEN
   RETURN;
END_IF;

IF sv_bAutoCycleRunning THEN
   SET_ALARM(erStopCycleImmediately);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
