IMPORT_OVER_LISTFILE
 cCompAll
, cModeAutomatic
, cModeFullAutomatic
, tevLockUnlock
, tsTraceLevel
, tsActiveMovements
, tsDeviceId
, tnSafetyGateState
, tsMoveCtrl
, ABLockList
, FBDebugTrace
, tevLockUnlockData
, tnOperationMode

END_IMPORT

ALGORITHM_BLOCK ABOpModeControl #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
 sv_ActiveMovements : tsActiveMovements;
 sv_DeviceId : tsDeviceId;
 sv_iPendingAlarms : DINT;
 sv_MoldSafetyGateState : tnSafetyGateState;
END_VAR

SYSTEM_OBJECT
 EV_Task_3 : TASK;
 evLockUnlock : tevLockUnlock;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
END_VAR

VAR
 abLockList : ABLockList;
 fbDebugTrace : FBDebugTrace;
END_VAR

EVENT_ALGORITHM evaLockUnlock ON EV_Task_3 WITH evLockUnlock


VAR_INPUT
 evLockUnlockData : tevLockUnlockData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (evLockUnlockData.DeviceId.CompId = sv_DeviceId.CompId   OR evLockUnlockData.DeviceId.CompId =  cCompAll    ) AND
   (evLockUnlockData.DeviceId.IndexId = sv_DeviceId.IndexId OR evLockUnlockData.DeviceId.IndexId = cAllDevIndex) THEN
   
       
      IF evLockUnlockData.Mode = nUnlock THEN
         // UNLOCK Movement
         g_MoveCtrl.bStop := FALSE;
         abLockList.aRemove.Entry.DeviceIdSender := evLockUnlockData.DeviceIdSender;
         abLockList.aRemove.Entry.MoveDir        := evLockUnlockData.MoveDir;
         abLockList.aRemove.Entry.MoveId         := evLockUnlockData.MoveId;
         abLockList.aRemove.Entry.Alarm          := evLockUnlockData.Alarm;
         // remove movement from locklist
         abLockList.aRemove();
         
         IF sv_TraceLevel.bLockUnlock THEN
            fbDebugTrace(CONCAT("movement ",
                                DINT_TO_STRING(evLockUnlockData.MoveDir), '/', DINT_TO_STRING(evLockUnlockData.MoveId),
                                ' unlocked by Device: ',
                                DINT_TO_STRING(evLockUnlockData.DeviceIdSender.CompId), '.', DINT_TO_STRING(evLockUnlockData.DeviceIdSender.IndexId),
                                ' alarm ', GET_ALARM_NAME(evLockUnlockData.Alarm.AlarmId)));
         END_IF;
      ELSE
         // LOCK Movement
         abLockList.aAdd.Entry.DeviceIdSender   := evLockUnlockData.DeviceIdSender;
         abLockList.aAdd.Entry.MoveDir          := evLockUnlockData.MoveDir;
         abLockList.aAdd.Entry.MoveId           := evLockUnlockData.MoveId;
         abLockList.aAdd.Entry.Alarm            := evLockUnlockData.Alarm;
         abLockList.aAdd.bDisable               := FALSE;
         
         IF evLockUnlockData.Mode = nLockResume THEN
         
            abLockList.aAdd.Entry.bStopDevice := FALSE;
            
         ELSIF evLockUnlockData.Mode = nLockAbort THEN
            
            abLockList.aAdd.Entry.bStopDevice := TRUE;
         END_IF;
         
         abLockList.aAdd.bSetAlarmImmediately := evLockUnlockData.bSetAlarmImmediately;
         
         // add movement to locklist
         abLockList.aAdd();
         
         IF sv_TraceLevel.bLockUnlock THEN
            fbDebugTrace(CONCAT("movement ",
                                DINT_TO_STRING(evLockUnlockData.MoveDir), '/', DINT_TO_STRING(evLockUnlockData.MoveId),
                                ' locked   by Device: ',
                                DINT_TO_STRING(evLockUnlockData.DeviceIdSender.CompId), '.', DINT_TO_STRING(evLockUnlockData.DeviceIdSender.IndexId),
                                ' alarm ', GET_ALARM_NAME(evLockUnlockData.Alarm.AlarmId)));
         END_IF;
      END_IF;      

END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCheck


VAR_INPUT
 nActualMode : tnOperationMode (* actual operation mode *);
 nDemandedMode : tnOperationMode (* demanded operation mode *);
END_VAR

VAR_OUTPUT
 bChangeAllowed : BOOL (* change to demanded mode is allowed *);
END_VAR

VAR
 bAllow : BOOL;
 iActiveMoves : DINT;
 bHalfAutoLocked : BOOL;
 bFullAutoLocked : BOOL;
 bPendingAlarmsOk : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
AInit (P);
END_STEP

ACTION AInit: #BEGIN_EDIT_BLOCK
bAllow := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AInit*)

(* steps *)
STEP S_CheckActualMode:
END_STEP

STEP S_FullAuto:
AFullAuto (P);
END_STEP

ACTION AFullAuto: #BEGIN_EDIT_BLOCK
bAllow := TRUE;

;#END_EDIT_BLOCK END_ACTION (*AFullAuto*)
STEP S_CheckDemandedMode:
END_STEP

STEP S_FullAutoDemanded:
ACheck (P);
END_STEP

STEP S_ModeAllowed:
AChangeAllowed (P);
END_STEP

ACTION AChangeAllowed: #BEGIN_EDIT_BLOCK
bAllow := TRUE;

;#END_EDIT_BLOCK END_ACTION (*AChangeAllowed*)
STEP S_CheckActiveMoves:
AGetActiveMovements (P);
END_STEP

ACTION AGetActiveMovements: #BEGIN_EDIT_BLOCK
iActiveMoves := sv_ActiveMovements.iNumberOfActiveMovements;

;#END_EDIT_BLOCK END_ACTION (*AGetActiveMovements*)
STEP S_CheckDemand:
END_STEP

STEP S_AllowMode:
AAllowedMode (P);
END_STEP

ACTION AAllowedMode: #BEGIN_EDIT_BLOCK
bAllow := TRUE;

;#END_EDIT_BLOCK END_ACTION (*AAllowedMode*)
STEP S_CheckAlarms:
ACheckPendingAlarms (P);
END_STEP

STEP S_CheckAutoAllowed:
Action15 (P);
END_STEP

STEP S_End:
ACopyResult (P);
END_STEP

ACTION ACopyResult: #BEGIN_EDIT_BLOCK
bChangeAllowed := bAllow;

;#END_EDIT_BLOCK END_ACTION (*ACopyResult*)

(* transitions *)
GO_ON_TRANSITION TInitDone (* Trans6 *) FROM S_Init TO S_CheckActualMode :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TFullAuto (* Trans1 *) FROM S_CheckActualMode TO S_FullAuto :=  #BEGIN_EDIT_BLOCK
nActualMode = nFullAutomatic
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans5 (* Trans5 *) FROM S_FullAuto TO S_End :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION THalfAuto (* Trans2 *) FROM S_CheckActualMode TO S_CheckDemandedMode :=  #BEGIN_EDIT_BLOCK
nActualMode = nHalfAutomatic
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDemandFullAuto (* Trans8 *) FROM S_CheckDemandedMode TO S_FullAutoDemanded :=  #BEGIN_EDIT_BLOCK
nDemandedMode = nFullAutomatic
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans11 (* Trans11 *) FROM S_FullAutoDemanded TO S_End :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TDemandManualOrSetup (* Trans9 *) FROM S_CheckDemandedMode TO S_ModeAllowed :=  #BEGIN_EDIT_BLOCK
nDemandedMode <> nFullAutomatic
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans10 (* Trans10 *) FROM S_ModeAllowed TO S_End :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TSetupOrManual (* Trans3 *) FROM S_CheckActualMode TO S_CheckActiveMoves :=  #BEGIN_EDIT_BLOCK
nActualMode = nSetup OR nActualMode = nManual
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TNoMovesActive (* Trans12 *) FROM S_CheckActiveMoves TO S_CheckDemand :=  #BEGIN_EDIT_BLOCK
iActiveMoves = 0
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TMovesActive (* Trans25 *) FROM S_CheckActiveMoves TO S_End :=  #BEGIN_EDIT_BLOCK
iActiveMoves > 0
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TLowerHalfAuto (* Trans15 *) FROM S_CheckDemand TO S_AllowMode :=  #BEGIN_EDIT_BLOCK
nDemandedMode < nHalfAutomatic
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans16 (* Trans16 *) FROM S_AllowMode TO S_End :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TAutoModeDemanded (* Trans17 *) FROM S_CheckDemand TO S_CheckAlarms :=  #BEGIN_EDIT_BLOCK
nDemandedMode > nManual
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TNoActiveAlarms (* Trans20 *) FROM S_CheckAlarms TO S_CheckAutoAllowed :=  #BEGIN_EDIT_BLOCK
bPendingAlarmsOk
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TAcitveAlarms (* Trans24 *) FROM S_CheckAlarms TO S_End :=  #BEGIN_EDIT_BLOCK
NOT bPendingAlarmsOk
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans18 (* Trans18 *) FROM S_CheckAutoAllowed TO S_End :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TWaitForNextCall (* Trans19 *) FROM S_End TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION ACheck: #BEGIN_EDIT_BLOCK
// check if full auto mode is locked
abLockList.aCheck(MoveDir := cModeFullAutomatic,
                  MoveId := cModeFullAutomatic);
bAllow := NOT abLockList.aCheck.bLocked;

;#END_EDIT_BLOCK END_ACTION (*ACheck*)
ACTION Action15: #BEGIN_EDIT_BLOCK
IF nDemandedMode = nFullAutomatic THEN
    //full auto mode demanded -> check if full auto is locked
    abLockList.aCheck(MoveDir := cModeFullAutomatic,
                        MoveId := cModeFullAutomatic);
    bFullAutoLocked := abLockList.aCheck.bLocked;
    
    //check if half and full auto is locked
    abLockList.aCheck(MoveDir := cModeAutomatic,
                        MoveId := cModeAutomatic);
    bHalfAutoLocked := abLockList.aCheck.bLocked;
    
    bAllow := NOT bHalfAutoLocked AND NOT bFullAutoLocked;
ELSIF nDemandedMode = nHalfAutomatic THEN
    //half auto mode demanded
    abLockList.aCheck(MoveDir := cModeAutomatic,
                        MoveId := cModeAutomatic);
    bAllow := NOT abLockList.aCheck.bLocked;
ELSE
    bAllow := TRUE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action15*)
ACTION ACheckPendingAlarms: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//basically operation mode can not be changed to HA or FA if any alarm of class 1, 2 or 3 is pending
//there is only one exception:
//If the mold safety gate is open it should also be possible to switch to HA and FA
bPendingAlarmsOk := (sv_iPendingAlarms = 0) OR ((sv_iPendingAlarms = 1) AND (sv_MoldSafetyGateState = nOpen));

;#END_EDIT_BLOCK END_ACTION (*ACheckPendingAlarms*)
(* end sfc-code *)


END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
3 
@Var @RT(8)cCompAll @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(10)cMaxCompId @RT(22)to lock all components 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cModeAutomatic @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)23 @RT(50)for locking/unlocking half and full automatic mode 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)cModeFullAutomatic @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)24 @RT(46)for locking/unlocking only full automatic mode 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABOpModeControl @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(9)EV_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)evLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tevLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_ActiveMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tsActiveMovements @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_iPendingAlarms @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_MoldSafetyGateState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tnSafetyGateState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(10)abLockList @RT(0) @T @T @DERIVED 0 @F @RT(10)ABLockList @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(13)evaLockUnlock @STRUCTURED_TEXT 
@RT(0) @RT(12)evLockUnlock @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(16)evLockUnlockData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevLockUnlockData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aCheck @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(11)nActualMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)actual operation mode @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)nDemandedMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)demanded operation mode @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)bChangeAllowed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)change to demanded mode is allowed @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bAllow @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)iActiveMoves @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bHalfAutoLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bFullAutoLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)bPendingAlarmsOk @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(59)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (evLockUnlockData.DeviceId.CompId = sv_DeviceId.CompId   OR evLockUnlockData.DeviceId.CompId =  cCompAll    ) AND
   (evLockUnlockData.DeviceId.IndexId = sv_DeviceId.IndexId OR evLockUnlockData.DeviceId.IndexId = cAllDevIndex) THEN
   
       
      IF evLockUnlockData.Mode = nUnlock THEN
         // UNLOCK Movement
         g_MoveCtrl.bStop := FALSE;
         abLockList.aRemove.Entry.DeviceIdSender := evLockUnlockData.DeviceIdSender;
         abLockList.aRemove.Entry.MoveDir        := evLockUnlockData.MoveDir;
         abLockList.aRemove.Entry.MoveId         := evLockUnlockData.MoveId;
         abLockList.aRemove.Entry.Alarm          := evLockUnlockData.Alarm;
         // remove movement from locklist
         abLockList.aRemove();
         
         IF sv_TraceLevel.bLockUnlock THEN
            fbDebugTrace(CONCAT("movement ",
                                DINT_TO_STRING(evLockUnlockData.MoveDir), '/', DINT_TO_STRING(evLockUnlockData.MoveId),
                                ' unlocked by Device: ',
                                DINT_TO_STRING(evLockUnlockData.DeviceIdSender.CompId), '.', DINT_TO_STRING(evLockUnlockData.DeviceIdSender.IndexId),
                                ' alarm ', GET_ALARM_NAME(evLockUnlockData.Alarm.AlarmId)));
         END_IF;
      ELSE
         // LOCK Movement
         abLockList.aAdd.Entry.DeviceIdSender   := evLockUnlockData.DeviceIdSender;
         abLockList.aAdd.Entry.MoveDir          := evLockUnlockData.MoveDir;
         abLockList.aAdd.Entry.MoveId           := evLockUnlockData.MoveId;
         abLockList.aAdd.Entry.Alarm            := evLockUnlockData.Alarm;
         abLockList.aAdd.bDisable               := FALSE;
         
         IF evLockUnlockData.Mode = nLockResume THEN
         
            abLockList.aAdd.Entry.bStopDevice := FALSE;
            
         ELSIF evLockUnlockData.Mode = nLockAbort THEN
            
            abLockList.aAdd.Entry.bStopDevice := TRUE;
         END_IF;
         
         abLockList.aAdd.bSetAlarmImmediately := evLockUnlockData.bSetAlarmImmediately;
         
         // add movement to locklist
         abLockList.aAdd();
         
         IF sv_TraceLevel.bLockUnlock THEN
            fbDebugTrace(CONCAT("movement ",
                                DINT_TO_STRING(evLockUnlockData.MoveDir), '/', DINT_TO_STRING(evLockUnlockData.MoveId),
                                ' locked   by Device: ',
                                DINT_TO_STRING(evLockUnlockData.DeviceIdSender.CompId), '.', DINT_TO_STRING(evLockUnlockData.DeviceIdSender.IndexId),
                                ' alarm ', GET_ALARM_NAME(evLockUnlockData.Alarm.AlarmId)));
         END_IF;
      END_IF;      

END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
22 18 26 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(6)S_Init @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AInit @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bAllow := FALSE;

@F 

@Trans @RT(9)TInitDone @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans6 @F 
@Step @RT(17)S_CheckActualMode @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 3 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(9)TFullAuto @F @T @F @F @T @F @TL(2)
nActualMode = nFullAutomatic

@RT(6)Trans1 @F 
@Step @RT(10)S_FullAuto @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AFullAuto @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bAllow := TRUE;

@F 

@Trans @RT(6)Trans5 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans5 @F 

@TransSeq @RT(4)tseq @F 3 
@Trans @RT(9)THalfAuto @F @T @F @F @T @F @TL(2)
nActualMode = nHalfAutomatic

@RT(6)Trans2 @F 
@Step @RT(19)S_CheckDemandedMode @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(15)TDemandFullAuto @F @T @F @F @T @F @TL(2)
nDemandedMode = nFullAutomatic

@RT(6)Trans8 @F 
@Step @RT(18)S_FullAutoDemanded @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(6)ACheck @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(7)Trans11 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans11 @F 

@TransSeq @RT(4)tseq @F 3 
@Trans @RT(20)TDemandManualOrSetup @F @T @F @F @T @F @TL(2)
nDemandedMode <> nFullAutomatic

@RT(6)Trans9 @F 
@Step @RT(13)S_ModeAllowed @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(14)AChangeAllowed @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bAllow := TRUE;

@F 

@Trans @RT(7)Trans10 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans10 @F 



@TransSeq @RT(4)tseq @F 5 
@Trans @RT(14)TSetupOrManual @F @T @F @F @T @F @TL(2)
nActualMode = nSetup OR nActualMode = nManual

@RT(6)Trans3 @F 
@Step @RT(18)S_CheckActiveMoves @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(19)AGetActiveMovements @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
iActiveMoves := sv_ActiveMovements.iNumberOfActiveMovements;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(14)TNoMovesActive @F @T @F @F @T @F @TL(2)
iActiveMoves = 0

@RT(7)Trans12 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(12)TMovesActive @F @T @F @F @T @F @TL(2)
iActiveMoves > 0

@RT(7)Trans25 @F 
@Goto @RT(5)S_End @F @F 


@Step @RT(13)S_CheckDemand @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(14)TLowerHalfAuto @F @T @F @F @T @F @TL(2)
nDemandedMode < nHalfAutomatic

@RT(7)Trans15 @F 
@Step @RT(11)S_AllowMode @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(12)AAllowedMode @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bAllow := TRUE;

@F 

@Trans @RT(7)Trans16 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans16 @F 

@TransSeq @RT(4)tseq @F 5 
@Trans @RT(17)TAutoModeDemanded @F @T @F @F @T @F @TL(2)
nDemandedMode > nManual

@RT(7)Trans17 @F 
@Step @RT(13)S_CheckAlarms @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(19)ACheckPendingAlarms @F @F @RT(1)P @RT(0) @F @F @F @F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(15)TNoActiveAlarms @F @T @F @F @T @F @TL(2)
bPendingAlarmsOk

@RT(7)Trans20 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(13)TAcitveAlarms @F @T @F @F @T @F @TL(2)
NOT bPendingAlarmsOk

@RT(7)Trans24 @F 
@Goto @RT(5)S_End @F @F 


@Step @RT(18)S_CheckAutoAllowed @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action15 @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(7)Trans18 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans18 @F 




@Step @RT(5)S_End @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)ACopyResult @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bChangeAllowed := bAllow;

@F 


@Trans @RT(16)TWaitForNextCall @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans19 @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(6)ACheck 1 @TL(5)
// check if full auto mode is locked
abLockList.aCheck(MoveDir := cModeFullAutomatic,
                  MoveId := cModeFullAutomatic);
bAllow := NOT abLockList.aCheck.bLocked;


@SaText @RT(8)Action15 1 @TL(21)
IF nDemandedMode = nFullAutomatic THEN
    //full auto mode demanded -> check if full auto is locked
    abLockList.aCheck(MoveDir := cModeFullAutomatic,
                        MoveId := cModeFullAutomatic);
    bFullAutoLocked := abLockList.aCheck.bLocked;
    
    //check if half and full auto is locked
    abLockList.aCheck(MoveDir := cModeAutomatic,
                        MoveId := cModeAutomatic);
    bHalfAutoLocked := abLockList.aCheck.bLocked;
    
    bAllow := NOT bHalfAutoLocked AND NOT bFullAutoLocked;
ELSIF nDemandedMode = nHalfAutomatic THEN
    //half auto mode demanded
    abLockList.aCheck(MoveDir := cModeAutomatic,
                        MoveId := cModeAutomatic);
    bAllow := NOT abLockList.aCheck.bLocked;
ELSE
    bAllow := TRUE;
END_IF;


@SaText @RT(19)ACheckPendingAlarms 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//basically operation mode can not be changed to HA or FA if any alarm of class 1, 2 or 3 is pending
//there is only one exception:
//If the mold safety gate is open it should also be possible to switch to HA and FA
bPendingAlarmsOk := (sv_iPendingAlarms = 0) OR ((sv_iPendingAlarms = 1) AND (sv_MoldSafetyGateState = nOpen));


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
