(*
This Algorithm Block is responsible for
  - Oil Temp. supervision
  - Oil cooling
  - checking oil filter and return line oil filter
  - checking oil level

@FunctionID: S_KPIEC_ALAOIL_01
@FunctionID: S_KPIEC_ALAOIL_02
@FunctionID: S_KPIEC_ALAOIL_03
@FunctionID: S_KPIEC_PRTEMP_02
@FunctionID: S_KPIEC_CALOSET_04

*)

IMPORT_OVER_LISTFILE
 KSWO_AddVariable
, SET_ALARM
, RESET_ALARM
, FGetHWPath
, GET_MY_FU_NAME
, nRisingEdge
, tnOperationMode
, KHW_TempSensor
, tnRisingFalling
, KSWO_Status
, R_TRIG
, TON
, F_TRIG

END_IMPORT

ALGORITHM_BLOCK ABOilMaintenance #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_OperationMode : tnOperationMode;
 di_OilFilterOk : BOOL;
 di_OilLevelOk : BOOL;
 di_ReturnLineOilFilter : BOOL;
 ti_OilTemp : REAL;
 ti_OilTemp_stat : BOOL;
 ti_OilTemp_sensor : KHW_TempSensor;
 do_OilCooler : BOOL;
 sv_rTempStartCooling : REAL;
 sv_rTempStopCooling : REAL;
 sv_rAlarmTemp : REAL;
 sv_rWarnTempTooHigh : REAL;
 sv_rWarnTempTooLow : REAL;
 sv_FilterMode : tnRisingFalling;
 sv_dFilterAlarmTime : TIME;
 sv_OilLevelMode : tnRisingFalling;
 sv_dOilLevelTime : TIME;
 sv_OilTempSensorType : KHW_TempSensor;
 sv_dReturnLineFilterAlarmTime : TIME;
 sv_bUseReturnLineFilter : BOOL;
 sv_bAnyTempSensorTypeChanged : BOOL;
 sv_rAlarmTempTooLow : REAL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskSlow : TASK;
 erOilFilterNotOk : ALARM (* alarm oilfilter clogged up *);
 erOilLevelLow : ALARM;
 erReturnLineOilFilterNotOk : ALARM;
 erOilTempHigh : ALARM;
 erOilTempHighWarning : ALARM;
 erOilTempLowWarning : ALARM;
 erOilSensorProblem : ALARM;
 erOilTempLow : ALARM;
END_OBJECT

VAR
 mbSensorError : BOOL;
 msHWPathTempSensor : STRING(255) (* hardware path of oil temp sensor *);
 mpbSensorState : REFTO BOOL;
END_VAR

ALGORITHM aSensorState

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbSensorError := ti_OilTemp_stat;

IF mbSensorError THEN
    SET_ALARM(Name := erOilSensorProblem,
              Param1 := msHWPathTempSensor);
ELSE
    RESET_ALARM(Name := erOilSensorProblem);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Check which Inputs and Outputs are available and start according process algorithms
*)

PROCESS_ALGORITHM paInit ON TaskSlow AUTOSTART


VAR
 swoState : KSWO_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(ti_OilTemp) AND IS_LINKED(ti_OilTemp_stat) THEN
    
    ti_OilTemp_sensor := sv_OilTempSensorType;
   
    mpbSensorState := @ti_OilTemp_stat;
   
    //get hw path of oil temp sensor and check sensor state
    msHWPathTempSensor := FGetHWPath(CONCAT(GET_MY_FU_NAME(),'.ti_OilTemp'), TRUE);   
    aSensorState();
    
    swoState := KSWO_AddVariable( Task := TaskSlow,
                                  Name := 'OilTemperature',
                                  Variable := ti_OilTemp);
    //start supervision of oil temperature
    START_PROCESS_ALGORITHM(paOilTempSupervision);
    
    IF IS_LINKED(do_OilCooler) THEN
        //start algorithm for oil cooling
        START_PROCESS_ALGORITHM(paOilCooler);
    END_IF;
END_IF;

IF IS_LINKED(di_OilLevelOk) THEN
    //start supervision of oil level
    START_PROCESS_ALGORITHM(paOilLevel);
END_IF;

IF IS_LINKED(di_OilFilterOk) THEN
    //start supervision of oil filter
    START_PROCESS_ALGORITHM(paOilFilter);
END_IF;

IF IS_LINKED(di_ReturnLineOilFilter) THEN
    //start supervision return line oil filter
    START_PROCESS_ALGORITHM(paReturnLineOilFilter);
END_IF;

STOP_PROCESS_ALGORITHM();
   


;#END_EDIT_BLOCK END_ALGORITHM

(*
In this algorithm the supervision of the oil temperature is done.
If actual oil temp is higher than the alarm temperature an alarm is set.
If actual oil temperature is lower than alarm temp -5° the alarm is resetted.
Setting the oil temp high - alarm causes a stop of the motor!
Switching on the motor is only possible if the oil temperature is ok again. 
*)

PROCESS_ALGORITHM paOilTempSupervision ON TaskSlow


VAR
 fbAlarmRTrigTempHighOk : R_TRIG;
 fbAlarmRTrigTempNotOk : R_TRIG;
 fbWarnRTrigTempTooLow : R_TRIG;
 fbWarnRTrigTempLowOk : R_TRIG;
 fbWarnRTrigTempTooHigh : R_TRIG;
 fbWarnRTrigTempHighOk : R_TRIG;
 bAuto : BOOL;
 fbAlarmRTrigTempTooLow : R_TRIG;
 fbAlarmRTrigTempTooLowOk : R_TRIG;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//Warnings only shoud be visible in half and fullautomatic mode
bAuto := (sv_OperationMode >= nHalfAutomatic);

//Alarms
fbAlarmRTrigTempNotOk(CLK := (ti_OilTemp > sv_rAlarmTemp));
fbAlarmRTrigTempHighOk(CLK := (ti_OilTemp < sv_rAlarmTemp - 5.0));
fbAlarmRTrigTempTooLow(CLK := (ti_OilTemp < sv_rAlarmTempTooLow));
fbAlarmRTrigTempTooLowOk(CLK:= (ti_OilTemp > sv_rAlarmTempTooLow));

//Warnings
fbWarnRTrigTempTooHigh (CLK:= (ti_OilTemp > sv_rWarnTempTooHigh AND bAuto));
fbWarnRTrigTempHighOk  (CLK:= (NOT(ti_OilTemp > sv_rWarnTempTooHigh AND bAuto)));
fbWarnRTrigTempTooLow (CLK:= (ti_OilTemp < sv_rWarnTempTooLow AND bAuto));
fbWarnRTrigTempLowOk  (CLK := (NOT(ti_OilTemp < sv_rWarnTempTooLow AND bAuto)));

//alarm temperatures 
IF fbAlarmRTrigTempNotOk.Q THEN
   // set alarm if alarm temp is exceeded (sv_rAlarmTemp)
   SET_ALARM (Name := erOilTempHigh);
END_IF;
IF fbAlarmRTrigTempHighOk.Q THEN
   // reset alarm if temp is ok again
   RESET_ALARM (Name := erOilTempHigh);      
END_IF;

IF fbAlarmRTrigTempTooLow.Q THEN
   SET_ALARM(erOilTempLow);
END_IF;
IF fbAlarmRTrigTempTooLowOk.Q THEN
   RESET_ALARM(erOilTempLow);
END_IF;


//warning temperatures
IF fbWarnRTrigTempTooLow.Q THEN
   //set warning if the temp is lower than sv_rWarnTempTooLow
   SET_ALARM(Name := erOilTempLowWarning);
END_IF;
//low oil temp is ok
IF fbWarnRTrigTempLowOk.Q THEN
   // reset warning if temp is ok again
   RESET_ALARM (Name := erOilTempLowWarning);
END_IF;

//warning oiltemp high   
IF fbWarnRTrigTempTooHigh.Q THEN
   //set warning if the temp is higher than sv_rWarnTempTooHigh 
   SET_ALARM(Name := erOilTempHighWarning);
END_IF;
//high oil temp is ok
IF fbWarnRTrigTempHighOk.Q THEN
   // reset warning if temp is ok again
   RESET_ALARM (Name := erOilTempHighWarning);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
If a digital output for oil cooling is available it will be set if the 
actual oil temperature is higher than start cooling temperature.
the DO will be resetted after the actual temperatur is lower than stop cooling temperature.
In case of a sensor error the DO will also be resetted.
*)

PROCESS_ALGORITHM paOilCooler ON TaskSlow


VAR
 fbRTrigStartCooling : R_TRIG;
 fbRTrigStopCooling : R_TRIG;
 fbRTrigSensorError : R_TRIG;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


fbRTrigStartCooling(CLK := (ti_OilTemp > sv_rTempStartCooling));
fbRTrigStopCooling(CLK := (ti_OilTemp < sv_rTempStopCooling));
fbRTrigSensorError(CLK := mbSensorError);

IF fbRTrigSensorError.Q THEN
    //reset digital output for cooling in case of sensor error
    do_OilCooler := FALSE;
END_IF;

IF fbRTrigStartCooling.Q AND NOT mbSensorError THEN
    //set digital output for cooling
    do_OilCooler := TRUE;
END_IF;

IF fbRTrigStopCooling.Q THEN
    //reset digital output for cooling
    do_OilCooler := FALSE;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

(*
Checks the digital input for oil filter depending on the mode (rising edge or falling edge).
After the supervision time exceeded the alarm is set.

*)

PROCESS_ALGORITHM paOilFilter ON TaskSlow


VAR_TEMP
 bProblem : BOOL;
END_VAR

VAR
 fbDelay : TON;
 bAlarmSet : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_FilterMode = nRisingEdge THEN
   bProblem := di_OilFilterOk;
ELSE
   bProblem := NOT di_OilFilterOk;
END_IF;

// set oil filter alarm delayed
// reset immediately
fbDelay(IN := bProblem, PT := sv_dFilterAlarmTime);

IF fbDelay.Q AND NOT bAlarmSet THEN
   SET_ALARM(Name := erOilFilterNotOk);
   bAlarmSet := TRUE;
ELSIF NOT fbDelay.Q AND bAlarmSet THEN
   RESET_ALARM(Name := erOilFilterNotOk);
   bAlarmSet := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Checks the digital input for oil level depending on the mode (rising edge or falling edge).
After the supervision time exceeded the alarm is set.

*)

PROCESS_ALGORITHM paOilLevel ON TaskSlow


VAR_TEMP
 bProblem : BOOL;
END_VAR

VAR
 fbDelay : TON;
 bAlarmSet : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OilLevelMode = nRisingEdge THEN
   bProblem := di_OilLevelOk;
ELSE
   bProblem := NOT di_OilLevelOk;
END_IF;

// set oil level alarm delayed
// reset immediately
fbDelay(IN := bProblem, PT := sv_dOilLevelTime);

IF fbDelay.Q AND NOT bAlarmSet THEN
   SET_ALARM(Name := erOilLevelLow);
   bAlarmSet := TRUE;
ELSIF NOT fbDelay.Q AND bAlarmSet THEN
   RESET_ALARM(Name := erOilLevelLow);
   bAlarmSet := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pSensorTypeChanged ON PU_Task_7 WITH sv_OilTempSensorType

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//copy selected sensor type
ti_OilTemp_sensor := sv_OilTempSensorType;

sv_bAnyTempSensorTypeChanged := TRUE;   // notifies ABThermoWireControl, that any temperature sensor type changed. 


;#END_EDIT_BLOCK END_ALGORITHM

(*
react on changes of oil temp sensor state
*)

POSTUPDATE_ALGORITHM pSensorStateChanged ON PU_Task_7 WITH mpbSensorState^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aSensorState();




;#END_EDIT_BLOCK END_ALGORITHM

(*
This algorihm checks the digital input for return line oil filter.
After the supervision time exceeded the alarm is set.

*)

PROCESS_ALGORITHM paReturnLineOilFilter ON TaskSlow


VAR
 fbDelay : TON;
 fbRTrigAlarm : R_TRIG;
 fbFTrigDI : F_TRIG;
 fbFTrigActivated : R_TRIG;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbFTrigActivated(CLK := sv_bUseReturnLineFilter);

IF fbFTrigActivated.Q THEN
    //reset alarm if sv_bUseReturnLineFilter changes to false
    RESET_ALARM(Name := erReturnLineOilFilterNotOk); 
END_IF;

IF sv_bUseReturnLineFilter THEN
    fbDelay (IN := di_ReturnLineOilFilter,
             PT := sv_dReturnLineFilterAlarmTime);
   
    fbRTrigAlarm(CLK := fbDelay.Q);

    IF fbRTrigAlarm.Q THEN
        //set return line oil filter alarm
        SET_ALARM(Name := erReturnLineOilFilterNotOk);
    END_IF;
    
    //reset alarm if DI is FALSE again
    fbFTrigDI (CLK := di_ReturnLineOilFilter);
    IF fbFTrigDI.Q THEN
        RESET_ALARM(Name := erReturnLineOilFilterNotOk);
    END_IF;

END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@
This Algorithm Block is responsible for
  - Oil Temp. supervision
  - Oil cooling
  - checking oil filter and return line oil filter
  - checking oil level

@FunctionID: S_KPIEC_ALAOIL_01
@FunctionID: S_KPIEC_ALAOIL_02
@FunctionID: S_KPIEC_ALAOIL_03
@FunctionID: S_KPIEC_PRTEMP_02
@FunctionID: S_KPIEC_CALOSET_04

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
5 
@Var @RT(16)KSWO_AddVariable @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)FGetHWPath @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_MY_FU_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(11)nRisingEdge @RT(0) @T @T @DERIVED 0 @F @RT(15)tnRisingFalling @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABOilMaintenance @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
35 
@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)erOilFilterNotOk @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)alarm oilfilter clogged up @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)erOilLevelLow @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(26)erReturnLineOilFilterNotOk @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)erOilTempHigh @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)erOilTempHighWarning @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)erOilTempLowWarning @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)erOilSensorProblem @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)di_OilFilterOk @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)di_OilLevelOk @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)di_ReturnLineOilFilter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)ti_OilTemp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)ti_OilTemp_stat @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)ti_OilTemp_sensor @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)KHW_TempSensor @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)do_OilCooler @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_rTempStartCooling @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rTempStopCooling @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_rAlarmTemp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rWarnTempTooHigh @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_rWarnTempTooLow @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_FilterMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnRisingFalling @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_dFilterAlarmTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_OilLevelMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnRisingFalling @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_dOilLevelTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_OilTempSensorType @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)KHW_TempSensor @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(29)sv_dReturnLineFilterAlarmTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bUseReturnLineFilter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)mbSensorError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)msHWPathTempSensor @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)hardware path of oil temp sensor @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mpbSensorState @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(28)sv_bAnyTempSensorTypeChanged @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)erOilTempLow @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)sv_rAlarmTempTooLow @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

9 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aSensorState @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(8)swoState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(20)paOilTempSupervision @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(22)fbAlarmRTrigTempHighOk @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbAlarmRTrigTempNotOk @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbWarnRTrigTempTooLow @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)fbWarnRTrigTempLowOk @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)fbWarnRTrigTempTooHigh @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbWarnRTrigTempHighOk @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)fbAlarmRTrigTempTooLow @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)fbAlarmRTrigTempTooLowOk @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(11)paOilCooler @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(19)fbRTrigStartCooling @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)fbRTrigStopCooling @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)fbRTrigSensorError @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(11)paOilFilter @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(7)fbDelay @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bProblem @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(9)bAlarmSet @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paOilLevel @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(7)fbDelay @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bProblem @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(9)bAlarmSet @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(18)pSensorTypeChanged @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_OilTempSensorType @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(19)pSensorStateChanged @STRUCTURED_TEXT 
@RT(0) @RT(15)mpbSensorState^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(21)paReturnLineOilFilter @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(7)fbDelay @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbRTrigAlarm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)fbFTrigDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)F_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)fbFTrigActivated @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbSensorError := ti_OilTemp_stat;

IF mbSensorError THEN
    SET_ALARM(Name := erOilSensorProblem,
              Param1 := msHWPathTempSensor);
ELSE
    RESET_ALARM(Name := erOilSensorProblem);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(45)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(ti_OilTemp) AND IS_LINKED(ti_OilTemp_stat) THEN
    
    ti_OilTemp_sensor := sv_OilTempSensorType;
   
    mpbSensorState := @ti_OilTemp_stat;
   
    //get hw path of oil temp sensor and check sensor state
    msHWPathTempSensor := FGetHWPath(CONCAT(GET_MY_FU_NAME(),'.ti_OilTemp'), TRUE);   
    aSensorState();
    
    swoState := KSWO_AddVariable( Task := TaskSlow,
                                  Name := 'OilTemperature',
                                  Variable := ti_OilTemp);
    //start supervision of oil temperature
    START_PROCESS_ALGORITHM(paOilTempSupervision);
    
    IF IS_LINKED(do_OilCooler) THEN
        //start algorithm for oil cooling
        START_PROCESS_ALGORITHM(paOilCooler);
    END_IF;
END_IF;

IF IS_LINKED(di_OilLevelOk) THEN
    //start supervision of oil level
    START_PROCESS_ALGORITHM(paOilLevel);
END_IF;

IF IS_LINKED(di_OilFilterOk) THEN
    //start supervision of oil filter
    START_PROCESS_ALGORITHM(paOilFilter);
END_IF;

IF IS_LINKED(di_ReturnLineOilFilter) THEN
    //start supervision return line oil filter
    START_PROCESS_ALGORITHM(paReturnLineOilFilter);
END_IF;

STOP_PROCESS_ALGORITHM();
   

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Check which Inputs and Outputs are available and start according process algorithms
@@@END_Comment@@@ 

@BEG_Body 
@TL(60)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//Warnings only shoud be visible in half and fullautomatic mode
bAuto := (sv_OperationMode >= nHalfAutomatic);

//Alarms
fbAlarmRTrigTempNotOk(CLK := (ti_OilTemp > sv_rAlarmTemp));
fbAlarmRTrigTempHighOk(CLK := (ti_OilTemp < sv_rAlarmTemp - 5.0));
fbAlarmRTrigTempTooLow(CLK := (ti_OilTemp < sv_rAlarmTempTooLow));
fbAlarmRTrigTempTooLowOk(CLK:= (ti_OilTemp > sv_rAlarmTempTooLow));

//Warnings
fbWarnRTrigTempTooHigh (CLK:= (ti_OilTemp > sv_rWarnTempTooHigh AND bAuto));
fbWarnRTrigTempHighOk  (CLK:= (NOT(ti_OilTemp > sv_rWarnTempTooHigh AND bAuto)));
fbWarnRTrigTempTooLow (CLK:= (ti_OilTemp < sv_rWarnTempTooLow AND bAuto));
fbWarnRTrigTempLowOk  (CLK := (NOT(ti_OilTemp < sv_rWarnTempTooLow AND bAuto)));

//alarm temperatures 
IF fbAlarmRTrigTempNotOk.Q THEN
   // set alarm if alarm temp is exceeded (sv_rAlarmTemp)
   SET_ALARM (Name := erOilTempHigh);
END_IF;
IF fbAlarmRTrigTempHighOk.Q THEN
   // reset alarm if temp is ok again
   RESET_ALARM (Name := erOilTempHigh);      
END_IF;

IF fbAlarmRTrigTempTooLow.Q THEN
   SET_ALARM(erOilTempLow);
END_IF;
IF fbAlarmRTrigTempTooLowOk.Q THEN
   RESET_ALARM(erOilTempLow);
END_IF;


//warning temperatures
IF fbWarnRTrigTempTooLow.Q THEN
   //set warning if the temp is lower than sv_rWarnTempTooLow
   SET_ALARM(Name := erOilTempLowWarning);
END_IF;
//low oil temp is ok
IF fbWarnRTrigTempLowOk.Q THEN
   // reset warning if temp is ok again
   RESET_ALARM (Name := erOilTempLowWarning);
END_IF;

//warning oiltemp high   
IF fbWarnRTrigTempTooHigh.Q THEN
   //set warning if the temp is higher than sv_rWarnTempTooHigh 
   SET_ALARM(Name := erOilTempHighWarning);
END_IF;
//high oil temp is ok
IF fbWarnRTrigTempHighOk.Q THEN
   // reset warning if temp is ok again
   RESET_ALARM (Name := erOilTempHighWarning);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(5)
In this algorithm the supervision of the oil temperature is done.
If actual oil temp is higher than the alarm temperature an alarm is set.
If actual oil temperature is lower than alarm temp -5° the alarm is resetted.
Setting the oil temp high - alarm causes a stop of the motor!
Switching on the motor is only possible if the oil temperature is ok again. 
@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)


fbRTrigStartCooling(CLK := (ti_OilTemp > sv_rTempStartCooling));
fbRTrigStopCooling(CLK := (ti_OilTemp < sv_rTempStopCooling));
fbRTrigSensorError(CLK := mbSensorError);

IF fbRTrigSensorError.Q THEN
    //reset digital output for cooling in case of sensor error
    do_OilCooler := FALSE;
END_IF;

IF fbRTrigStartCooling.Q AND NOT mbSensorError THEN
    //set digital output for cooling
    do_OilCooler := TRUE;
END_IF;

IF fbRTrigStopCooling.Q THEN
    //reset digital output for cooling
    do_OilCooler := FALSE;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(4)
If a digital output for oil cooling is available it will be set if the 
actual oil temperature is higher than start cooling temperature.
the DO will be resetted after the actual temperatur is lower than stop cooling temperature.
In case of a sensor error the DO will also be resetted.
@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_FilterMode = nRisingEdge THEN
   bProblem := di_OilFilterOk;
ELSE
   bProblem := NOT di_OilFilterOk;
END_IF;

// set oil filter alarm delayed
// reset immediately
fbDelay(IN := bProblem, PT := sv_dFilterAlarmTime);

IF fbDelay.Q AND NOT bAlarmSet THEN
   SET_ALARM(Name := erOilFilterNotOk);
   bAlarmSet := TRUE;
ELSIF NOT fbDelay.Q AND bAlarmSet THEN
   RESET_ALARM(Name := erOilFilterNotOk);
   bAlarmSet := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
Checks the digital input for oil filter depending on the mode (rising edge or falling edge).
After the supervision time exceeded the alarm is set.

@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OilLevelMode = nRisingEdge THEN
   bProblem := di_OilLevelOk;
ELSE
   bProblem := NOT di_OilLevelOk;
END_IF;

// set oil level alarm delayed
// reset immediately
fbDelay(IN := bProblem, PT := sv_dOilLevelTime);

IF fbDelay.Q AND NOT bAlarmSet THEN
   SET_ALARM(Name := erOilLevelLow);
   bAlarmSet := TRUE;
ELSIF NOT fbDelay.Q AND bAlarmSet THEN
   RESET_ALARM(Name := erOilLevelLow);
   bAlarmSet := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
Checks the digital input for oil level depending on the mode (rising edge or falling edge).
After the supervision time exceeded the alarm is set.

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//copy selected sensor type
ti_OilTemp_sensor := sv_OilTempSensorType;

sv_bAnyTempSensorTypeChanged := TRUE;   // notifies ABThermoWireControl, that any temperature sensor type changed. 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aSensorState();



@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
react on changes of oil temp sensor state
@@@END_Comment@@@ 

@BEG_Body 
@TL(31)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbFTrigActivated(CLK := sv_bUseReturnLineFilter);

IF fbFTrigActivated.Q THEN
    //reset alarm if sv_bUseReturnLineFilter changes to false
    RESET_ALARM(Name := erReturnLineOilFilterNotOk); 
END_IF;

IF sv_bUseReturnLineFilter THEN
    fbDelay (IN := di_ReturnLineOilFilter,
             PT := sv_dReturnLineFilterAlarmTime);
   
    fbRTrigAlarm(CLK := fbDelay.Q);

    IF fbRTrigAlarm.Q THEN
        //set return line oil filter alarm
        SET_ALARM(Name := erReturnLineOilFilterNotOk);
    END_IF;
    
    //reset alarm if DI is FALSE again
    fbFTrigDI (CLK := di_ReturnLineOilFilter);
    IF fbFTrigDI.Q THEN
        RESET_ALARM(Name := erReturnLineOilFilterNotOk);
    END_IF;

END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
This algorihm checks the digital input for return line oil filter.
After the supervision time exceeded the alarm is set.

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
