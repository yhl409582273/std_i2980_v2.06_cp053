(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB controls the logic for connecting ServiceNet via the ServiceNet embedded functionality
via the Remote Maintenance software unit.
*)

IMPORT_OVER_LISTFILE
 KSYS_BPAPI_VAR_READ
, KSYS_BPAPI_VAR_WRITE
, GET_RUNTIME
, KCAT_GetValue
, KCAT_GetHandle
, STOP_PROCESS_ALGORITHM
, START_PROCESS_ALGORITHM
, TOLOWER
, cKSYS_BPApiStateOk
, tsNetworkCfg
, tsTraceLevel
, tsSiteManagerStatus
, TON
, KSYS_BPApiState
, KCAT_HandleData
, KCAT_Status

END_IMPORT

ALGORITHM_BLOCK ABRemoteMaintenance #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_SNNetworkConfig : tsNetworkCfg (* network config to use when connecting to servicenet *);
 sv_iCpuId : LINT;
 sv_TraceLevel : tsTraceLevel;
 sv_bRemoteMaintAvailable : BOOL (* True, if the remote maintenance service is available (Linux only) *);
 sv_bRemoteMaintActivate : BOOL (* Set to true, to activate the remote maintenance *);
 sv_bRemoteMaintActivated : BOOL (* True, if the remote maintenance is activated *);
 sv_sSiteManagerSetServer : STRING(255) (* The SiteManager server name to connect *);
 sv_sSiteManagerSetName : STRING(255) (* The SiteManager domain to connect *);
 sv_iRemoteMaintState : UDINT (* State of the remote maintenance service (1=active) *);
 sv_SiteManager : tsSiteManagerStatus (* Secomea SiteManager structure *);
 sv_bInitStart : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskVis : TASK;
 TaskVisLow : TASK;
END_OBJECT

VAR
 fbTimer : TON;
 mbInit : BOOL;
END_VAR

ALGORITHM aReadSiteManagerStatus


VAR
 SysState : KSYS_BPApiState;
 sTmp : STRING(255);
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.Sitemanager.status', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sState := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager status cant be read");
END_IF;   

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.SERVICES.RemoteMaintenance.Secomea.Sitemanager.color', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sTmp := TOLOWER(sTmp);
   sv_SiteManager.sColor := sTmp;  

   // currently the modem status can only be determined with the status string returned   
   IF(sTmp = 'red') THEN
      sv_SiteManager.iState := 1;
   ELSIF(sTmp = 'yellow') THEN
      sv_SiteManager.iState := 2;      
   ELSIF(sTmp = 'green') THEN
      sv_SiteManager.iState := 3;      
   ELSIF(sTmp = 'blue') THEN
      sv_SiteManager.iState := 4;      
   ELSE
      sv_SiteManager.iState := 0;
   END_IF;      

   sv_SiteManager.bConnected := (sv_SiteManager.iState = 4);
   
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager color cant be read");
   sv_SiteManager.bConnected := FALSE;
END_IF;   
   


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aReadSiteManagerServer


VAR
 SysState : KSYS_BPApiState;
 sTmp : STRING(255);
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.CFG.Secomea.Sitemanager.Server', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sServer := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager server cant be read");
END_IF;   

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.CFG.Secomea.Sitemanager.Name', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sName := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager name cant be read");
END_IF;   

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.CFG.Secomea.Sitemanager.Domain', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sDomain := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager domain cant be read");
END_IF;   





;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskVisLow


VAR
 iRemoteMaintState : UDINT;
 SysState : KSYS_BPApiState;
 dummy : DINT;
 t : TIME;
 iTime : DINT;
 iStep : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();

IF iStep = 0 THEN
   fbTimer(IN := FALSE, PT := t#500ms);
   iStep := 1;
END_IF;

IF iStep = 1 THEN
   fbTimer(IN := TRUE);
   IF(fbTimer.Q) THEN
      iStep := 5;
   END_IF;
END_IF;


IF iStep = 5 THEN
   SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.state', iRemoteMaintState);
   IF(SysState <> cKSYS_BPApiStateOk) THEN
      IF(sv_TraceLevel.bApplication) THEN   
         dummy := Print("Remote maintenance service not found, KSYS_BPApiState %x", SysState);
      END_IF;
      sv_bRemoteMaintAvailable := FALSE;
      STOP_PROCESS_ALGORITHM(paRun);   
      RETURN;    
   END_IF;
      
   IF iRemoteMaintState <> 0 THEN
      // continuously poll for the connection status if the state is active
      // IEC does not have a method for post-updating a BPAPI variable
      aReadSiteManagerStatus(); 
   ELSIF sv_iRemoteMaintState <> 0 THEN
      // reset the connection status
      IF(sv_SiteManager.sState <> 'disabled') THEN
         sv_SiteManager.sState := 'disabled';
      END_IF;      
      IF(sv_SiteManager.sColor <> '') THEN
         sv_SiteManager.sColor := '';  
         sv_SiteManager.iState := 0;
      END_IF; 
      sv_SiteManager.bConnected := FALSE;
   END_IF;
   
   sv_iRemoteMaintState := iRemoteMaintState;
   
   fbTimer(IN := FALSE);
   iStep := 0;
END_IF;

t := GET_RUNTIME() - t; 
iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
IF(iTime >= 10 AND sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Runtime of ABRemoteMaintenance.paRun %d ms", iTime);
END_IF;   



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pUpdateServer ON TaskVis WITH sv_sSiteManagerSetServer


VAR
 dummy : DINT;
 SysState : KSYS_BPApiState;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

IF(sv_bRemoteMaintAvailable) THEN
   SysState := KSYS_BPAPI_VAR_WRITE('SYS.CFG.Secomea.Sitemanager.Server', sv_sSiteManagerSetServer);
   IF(SysState <> cKSYS_BPApiStateOk) THEN
      dummy := Print("Remote maintenance: Could not set site manager server, KSYS_BPApiState %x", SysState);
      sv_bRemoteMaintActivate := FALSE;      
   END_IF;
  
   aReadSiteManagerServer();
   
END_IF;






;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pUpdateName ON TaskVis WITH sv_sSiteManagerSetName


VAR
 dummy : DINT;
 SysState : KSYS_BPApiState;
 sTmp : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

IF(sv_bRemoteMaintAvailable) THEN

   sTmp := CONCAT(LINT_TO_STRING(sv_iCpuId), '_', sv_sSiteManagerSetName);
   SysState := KSYS_BPAPI_VAR_WRITE('SYS.CFG.Secomea.Sitemanager.Name', sTmp);
   IF(SysState <> cKSYS_BPApiStateOk) THEN
      dummy := Print("Remote maintenance: Could not set site manager name, KSYS_BPApiState %x", SysState);
      sv_bRemoteMaintActivate := FALSE;      
   END_IF;
   
   aReadSiteManagerServer();
   
END_IF;






;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInit ON TaskVis WITH sv_bInitStart


VAR
 dummy : DINT;
 SysState : KSYS_BPApiState;
 iRemoteMaintState : UDINT;
 bRemoteMaintActive : BOOL;
 sSecomeaDomain : STRING(255);
 iTemp : DINT;
 b : BOOL;
 bLinux : BOOL;
 HandleData : KCAT_HandleData;
 Status : KCAT_Status;
 sTemp : STRING(255);
 sFind : STRING(32);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

HandleData := KCAT_GetHandle('UOS.System');
IF HandleData.Status = KCAT_Status_OK THEN
   Status := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sTemp);
   IF (sTemp = 'Linux') THEN
      bLinux := TRUE;
   END_IF;
END_IF;


IF(NOT bLinux) THEN
   // do not create the nodes on VxWorks - this info does not exist
   // stop and return
   sv_bRemoteMaintAvailable := FALSE;
   STOP_PROCESS_ALGORITHM(paRun);   
   RETURN;   
END_IF;

// check if RemoteMaintenance software unit is present
SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.state', iRemoteMaintState);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   IF(sv_TraceLevel.bApplication) THEN
      dummy := Print("Remote maintenance: service/state not found - stopping, KSYS_BPApiState %x", SysState);
   END_IF;
   // stop and return
   sv_bRemoteMaintAvailable := FALSE;
   STOP_PROCESS_ALGORITHM(paRun);   
   RETURN;    
END_IF;
                            
// Domain must also be configured
SysState := KSYS_BPAPI_VAR_READ('SYS.CFG.Secomea.Sitemanager.Domain', sSecomeaDomain);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   IF(sv_TraceLevel.bApplication) THEN
      dummy := Print("Remote maintenance: service/domain not found - stopping, KSYS_BPApiState %x", SysState);
   END_IF;
   // stop and return
   sv_bRemoteMaintAvailable := FALSE;
   STOP_PROCESS_ALGORITHM(paRun);   
   RETURN;    
END_IF;          


SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.activated', bRemoteMaintActive);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   dummy := Print("Remote maintenance: activated flag not found - setting ignored, KSYS_BPApiState %x", SysState);
   RETURN;    
END_IF;
sv_bRemoteMaintActivated := bRemoteMaintActive;
b := WRITE_SV_DIRECT(sv_bRemoteMaintActivate, bRemoteMaintActive);


aReadSiteManagerStatus();
aReadSiteManagerServer();

// initialize the setter variables          
sv_sSiteManagerSetServer := sv_SiteManager.sServer;

// prepend <CPUID>_ to the display string
sFind := CONCAT(LINT_TO_STRING(sv_iCpuId), '_');
iTemp := FIND(sv_SiteManager.sName, sFind);

IF (iTemp = 1) THEN
   sv_sSiteManagerSetName := RIGHT(sv_SiteManager.sName, LEN(sv_SiteManager.sName)- LEN(sFind));
ELSE
   sv_sSiteManagerSetName := sv_SiteManager.sName;
END_IF;

sv_iRemoteMaintState := iRemoteMaintState;

// disable ServiceNet IP-switching per default
sv_SNNetworkConfig.sIP := '';

// RemoteMaintenance is available start polling for status changes
sv_bRemoteMaintAvailable := TRUE;
START_PROCESS_ALGORITHM(paRun);

mbInit := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pActivate ON TaskVis WITH sv_bRemoteMaintActivate


VAR
 bRemoteMaintActive : BOOL;
 SysState : KSYS_BPApiState;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// read the current activation status
SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.activated', bRemoteMaintActive);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   dummy := Print("Remote maintenance: activated flag not found - setting ignored, KSYS_BPApiState %x", SysState);
   RETURN;    
END_IF;

IF(sv_bRemoteMaintActivate = bRemoteMaintActive) THEN
   sv_bRemoteMaintActivated := bRemoteMaintActive;
   RETURN;
END_IF;

// activate service
SysState := KSYS_BPAPI_VAR_WRITE('SYS.SERVICES.RemoteMaintenance.Secomea.activated', sv_bRemoteMaintActivate);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   dummy := Print("Remote maintenance: activated flag not found - could not set, KSYS_BPApiState %x", SysState);
   sv_bRemoteMaintActivate := FALSE;
   RETURN;    
END_IF;

sv_bRemoteMaintActivated := sv_bRemoteMaintActivate;   


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 180 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB controls the logic for connecting ServiceNet via the ServiceNet embedded functionality
via the Remote Maintenance software unit.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
8 
@Var @RT(19)KSYS_BPAPI_VAR_READ @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)KSYS_BPAPI_VAR_WRITE @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_GetValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_GetHandle @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)TOLOWER @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(18)cKSYS_BPApiStateOk @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(4)16#0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABRemoteMaintenance @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
15 
@Var @RT(7)TaskVis @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskVisLow @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)sv_SNNetworkConfig @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsNetworkCfg @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(51)network config to use when connecting to servicenet @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)sv_iCpuId @RT(0) @T @F @DT @RT(4)LINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_bRemoteMaintAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(65)True, if the remote maintenance service is available (Linux only) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bRemoteMaintActivate @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(47)Set to true, to activate the remote maintenance @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_bRemoteMaintActivated @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)True, if the remote maintenance is activated @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_sSiteManagerSetServer @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)The SiteManager server name to connect @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_sSiteManagerSetName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)The SiteManager domain to connect @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_iRemoteMaintState @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(50)State of the remote maintenance service (1=active) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_SiteManager @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tsSiteManagerStatus @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)Secomea SiteManager structure @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)fbTimer @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mbInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

7 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(22)aReadSiteManagerStatus @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)sTmp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(22)aReadSiteManagerServer @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)sTmp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskVisLow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(17)iRemoteMaintState @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTime @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iStep @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pUpdateServer @STRUCTURED_TEXT 
@RT(0) @RT(24)sv_sSiteManagerSetServer @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(11)pUpdateName @STRUCTURED_TEXT 
@RT(0) @RT(22)sv_sSiteManagerSetName @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)sTmp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)iRemoteMaintState @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)bRemoteMaintActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)sSecomeaDomain @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iTemp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bLinux @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)HandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sTemp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sFind @RT(0) @T @F @DT @RT(10)STRING(32) @RT(0) @T @T @STRING 0 @F @RT(2)32 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pActivate @STRUCTURED_TEXT 
@RT(0) @RT(23)sv_bRemoteMaintActivate @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(18)bRemoteMaintActive @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(38)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.Sitemanager.status', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sState := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager status cant be read");
END_IF;   

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.SERVICES.RemoteMaintenance.Secomea.Sitemanager.color', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sTmp := TOLOWER(sTmp);
   sv_SiteManager.sColor := sTmp;  

   // currently the modem status can only be determined with the status string returned   
   IF(sTmp = 'red') THEN
      sv_SiteManager.iState := 1;
   ELSIF(sTmp = 'yellow') THEN
      sv_SiteManager.iState := 2;      
   ELSIF(sTmp = 'green') THEN
      sv_SiteManager.iState := 3;      
   ELSIF(sTmp = 'blue') THEN
      sv_SiteManager.iState := 4;      
   ELSE
      sv_SiteManager.iState := 0;
   END_IF;      

   sv_SiteManager.bConnected := (sv_SiteManager.iState = 4);
   
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager color cant be read");
   sv_SiteManager.bConnected := FALSE;
END_IF;   
   

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(29)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.CFG.Secomea.Sitemanager.Server', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sServer := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager server cant be read");
END_IF;   

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.CFG.Secomea.Sitemanager.Name', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sName := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager name cant be read");
END_IF;   

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.CFG.Secomea.Sitemanager.Domain', sTmp);
IF(SysState = cKSYS_BPApiStateOk) THEN
   sv_SiteManager.sDomain := sTmp;      
ELSIF(sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Site manager domain cant be read");
END_IF;   




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(60)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

t := GET_RUNTIME();

IF iStep = 0 THEN
   fbTimer(IN := FALSE, PT := t#500ms);
   iStep := 1;
END_IF;

IF iStep = 1 THEN
   fbTimer(IN := TRUE);
   IF(fbTimer.Q) THEN
      iStep := 5;
   END_IF;
END_IF;


IF iStep = 5 THEN
   SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.state', iRemoteMaintState);
   IF(SysState <> cKSYS_BPApiStateOk) THEN
      IF(sv_TraceLevel.bApplication) THEN   
         dummy := Print("Remote maintenance service not found, KSYS_BPApiState %x", SysState);
      END_IF;
      sv_bRemoteMaintAvailable := FALSE;
      STOP_PROCESS_ALGORITHM(paRun);   
      RETURN;    
   END_IF;
      
   IF iRemoteMaintState <> 0 THEN
      // continuously poll for the connection status if the state is active
      // IEC does not have a method for post-updating a BPAPI variable
      aReadSiteManagerStatus(); 
   ELSIF sv_iRemoteMaintState <> 0 THEN
      // reset the connection status
      IF(sv_SiteManager.sState <> 'disabled') THEN
         sv_SiteManager.sState := 'disabled';
      END_IF;      
      IF(sv_SiteManager.sColor <> '') THEN
         sv_SiteManager.sColor := '';  
         sv_SiteManager.iState := 0;
      END_IF; 
      sv_SiteManager.bConnected := FALSE;
   END_IF;
   
   sv_iRemoteMaintState := iRemoteMaintState;
   
   fbTimer(IN := FALSE);
   iStep := 0;
END_IF;

t := GET_RUNTIME() - t; 
iTime := LINT_TO_DINT(TIME_TO_LINT(t) / 1000);
IF(iTime >= 10 AND sv_TraceLevel.bApplication) THEN
   dummy := Print("Remote maintenance: Runtime of ABRemoteMaintenance.paRun %d ms", iTime);
END_IF;   


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

IF(sv_bRemoteMaintAvailable) THEN
   SysState := KSYS_BPAPI_VAR_WRITE('SYS.CFG.Secomea.Sitemanager.Server', sv_sSiteManagerSetServer);
   IF(SysState <> cKSYS_BPApiStateOk) THEN
      dummy := Print("Remote maintenance: Could not set site manager server, KSYS_BPApiState %x", SysState);
      sv_bRemoteMaintActivate := FALSE;      
   END_IF;
  
   aReadSiteManagerServer();
   
END_IF;





@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (NOT mbInit) THEN
   RETURN;
END_IF;

IF(sv_bRemoteMaintAvailable) THEN

   sTmp := CONCAT(LINT_TO_STRING(sv_iCpuId), '_', sv_sSiteManagerSetName);
   SysState := KSYS_BPAPI_VAR_WRITE('SYS.CFG.Secomea.Sitemanager.Name', sTmp);
   IF(SysState <> cKSYS_BPApiStateOk) THEN
      dummy := Print("Remote maintenance: Could not set site manager name, KSYS_BPApiState %x", SysState);
      sv_bRemoteMaintActivate := FALSE;      
   END_IF;
   
   aReadSiteManagerServer();
   
END_IF;





@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(83)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

HandleData := KCAT_GetHandle('UOS.System');
IF HandleData.Status = KCAT_Status_OK THEN
   Status := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sTemp);
   IF (sTemp = 'Linux') THEN
      bLinux := TRUE;
   END_IF;
END_IF;


IF(NOT bLinux) THEN
   // do not create the nodes on VxWorks - this info does not exist
   // stop and return
   sv_bRemoteMaintAvailable := FALSE;
   STOP_PROCESS_ALGORITHM(paRun);   
   RETURN;   
END_IF;

// check if RemoteMaintenance software unit is present
SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.state', iRemoteMaintState);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   IF(sv_TraceLevel.bApplication) THEN
      dummy := Print("Remote maintenance: service/state not found - stopping, KSYS_BPApiState %x", SysState);
   END_IF;
   // stop and return
   sv_bRemoteMaintAvailable := FALSE;
   STOP_PROCESS_ALGORITHM(paRun);   
   RETURN;    
END_IF;
                            
// Domain must also be configured
SysState := KSYS_BPAPI_VAR_READ('SYS.CFG.Secomea.Sitemanager.Domain', sSecomeaDomain);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   IF(sv_TraceLevel.bApplication) THEN
      dummy := Print("Remote maintenance: service/domain not found - stopping, KSYS_BPApiState %x", SysState);
   END_IF;
   // stop and return
   sv_bRemoteMaintAvailable := FALSE;
   STOP_PROCESS_ALGORITHM(paRun);   
   RETURN;    
END_IF;          


SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.activated', bRemoteMaintActive);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   dummy := Print("Remote maintenance: activated flag not found - setting ignored, KSYS_BPApiState %x", SysState);
   RETURN;    
END_IF;
sv_bRemoteMaintActivated := bRemoteMaintActive;
b := WRITE_SV_DIRECT(sv_bRemoteMaintActivate, bRemoteMaintActive);


aReadSiteManagerStatus();
aReadSiteManagerServer();

// initialize the setter variables          
sv_sSiteManagerSetServer := sv_SiteManager.sServer;

// prepend <CPUID>_ to the display string
sFind := CONCAT(LINT_TO_STRING(sv_iCpuId), '_');
iTemp := FIND(sv_SiteManager.sName, sFind);

IF (iTemp = 1) THEN
   sv_sSiteManagerSetName := RIGHT(sv_SiteManager.sName, LEN(sv_SiteManager.sName)- LEN(sFind));
ELSE
   sv_sSiteManagerSetName := sv_SiteManager.sName;
END_IF;

sv_iRemoteMaintState := iRemoteMaintState;

// disable ServiceNet IP-switching per default
sv_SNNetworkConfig.sIP := '';

// RemoteMaintenance is available start polling for status changes
sv_bRemoteMaintAvailable := TRUE;
START_PROCESS_ALGORITHM(paRun);

mbInit := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(27)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// read the current activation status
SysState := KSYS_BPAPI_VAR_READ('SYS.SERVICES.RemoteMaintenance.Secomea.activated', bRemoteMaintActive);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   dummy := Print("Remote maintenance: activated flag not found - setting ignored, KSYS_BPApiState %x", SysState);
   RETURN;    
END_IF;

IF(sv_bRemoteMaintActivate = bRemoteMaintActive) THEN
   sv_bRemoteMaintActivated := bRemoteMaintActive;
   RETURN;
END_IF;

// activate service
SysState := KSYS_BPAPI_VAR_WRITE('SYS.SERVICES.RemoteMaintenance.Secomea.activated', sv_bRemoteMaintActivate);
IF(SysState <> cKSYS_BPApiStateOk) THEN
   dummy := Print("Remote maintenance: activated flag not found - could not set, KSYS_BPApiState %x", SysState);
   sv_bRemoteMaintActivate := FALSE;
   RETURN;    
END_IF;

sv_bRemoteMaintActivated := sv_bRemoteMaintActivate;   

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
