(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

The Algorithm sends the SIM Configuration (pin, apn, user, password) to an MB connect modem.

*)

IMPORT_OVER_LISTFILE
 START_PROCESS_ALGORITHM
, STOP_PROCESS_ALGORITHM
, SET_ALARM
, RESET_ALARM
, cHttp_PortNumber
, tsSimInfo
, tsNetworkCfg
, KNETWORK_TcpInit
, KNETWORK_TcpSend
, KNETWORK_TcpReceive
, KNETWORK_Event
, FBSNNetworkConfig

END_IMPORT

ALGORITHM_BLOCK ABModemCfg #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bDownloadSIMInfo : BOOL;
 sv_iDownloadSIMInfoErrorCode : DINT;
 sv_SIMInfo : tsSimInfo;
 sv_bConnect : BOOL;
 sv_SNNetworkConfig : tsNetworkCfg (* network config to use when connecting to servicenet *);
END_VAR

SYSTEM_OBJECT
 TaskSlow : TASK;
 erDownloadSimInfoFailed : ALARM;
END_OBJECT

VAR
 iModemCfgState : DINT := 0;
END_VAR

POSTUPDATE_ALGORITHM pModemCfg ON TaskSlow WITH sv_bDownloadSIMInfo


VAR
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF (sv_bDownloadSIMInfo) THEN
    IF (sv_bConnect) THEN
        // not allowed, download sim info in progress
        dummy := Print("Modem configuration: servicenet connected -> download could not be startet !");
        sv_iDownloadSIMInfoErrorCode := 100;
        sv_bDownloadSIMInfo := FALSE;
    ELSE
        sv_iDownloadSIMInfoErrorCode := 0;
        iModemCfgState := 0;
        START_PROCESS_ALGORITHM(paDoModemCfg);
    END_IF;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paDoModemCfg ON TaskSlow


VAR
 fbKNETWORK_TcpInit : KNETWORK_TcpInit;
 fbKNETWORK_TcpSend : KNETWORK_TcpSend;
 fbKNETWORK_TcpReceive : KNETWORK_TcpReceive;
 evKNETWORK : KNETWORK_Event;
 bError : BOOL := FALSE;
 bDone : BOOL := FALSE;
 dErrorID : DWORD;
 pTcpHdl : REFERENCE;
 sSendData : STRING(255);
 sReceiveData : STRING(255);
 sActCommand : STRING(63);
 sCommandSetsim1 : STRING(63) := 'setsim1';
 sCommandApply : STRING(63) := 'apply';
 dBytesReceived : UDINT := 0;
 iCommandParamResult : INT;
 iCommandResult : INT;
 bReconnect : BOOL;
 iModemCfgStateOld : DINT;
 iHelp : INT;
 iSendDataLen : UDINT;
 iReplyWaitCnt : INT := 0;
 Dummy : DINT;
 iTimeoutCnt : DINT := 0;
 fbSNNetConfig : FBSNNetworkConfig;
END_VAR
#BEGIN_EDIT_BLOCK
CASE iModemCfgState OF

    0:  // Initialize
        iModemCfgStateOld := 0;
        sActCommand := sCommandSetsim1;
        bReconnect := FALSE;
        iTimeoutCnt := 0;
        iReplyWaitCnt := 0;
        iModemCfgState := 1;
        RESET_ALARM(Name := erDownloadSimInfoFailed);
        fbSNNetConfig(UseServiceNetConfig := TRUE); 
        IF (fbSNNetConfig.Error) THEN
            Dummy := Print("Modem configuration: error when setting temp network config");
            sv_iDownloadSIMInfoErrorCode := 110;
            iModemCfgState := 10;    // error -> disconnect and abort
        END_IF;
    
    1:  // Connect to modem
        Dummy := Print("Modem configuration: Try to connect to %s port %d", sv_SNNetworkConfig.sGateway, cHttp_PortNumber);
        fbKNETWORK_TcpInit (Execute := TRUE, RemoteIP := sv_SNNetworkConfig.sGateway, RemotePort := cHttp_PortNumber, NotificationEvent := evKNETWORK,
                            Done => bDone, Error => bError, ErrorID => dErrorID, TcpHdl => pTcpHdl);
    
        IF (bDone = TRUE) THEN
            Dummy := Print("Modem configuration: Connection successfully established");
            iModemCfgState := 3;    // send request to modem
        END_IF;                

        IF (bError = TRUE) THEN
            Dummy := Print("Modem configuration: ERROR connecting to %s port %d", sv_SNNetworkConfig.sGateway, cHttp_PortNumber);
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
            iModemCfgState := 10;    // error -> abort
        END_IF;       
    
    2:   // Disconnect from modem
        Dummy := Print("Modem configuration: Close connection %s port %d", sv_SNNetworkConfig.sGateway, cHttp_PortNumber);
        fbKNETWORK_TcpInit (Execute := FALSE, Done => bDone, Error => bError, ErrorID => dErrorID);

        IF (bDone = TRUE) THEN
            Dummy := Print("Modem configuration: Connection successfully closed");
        END_IF;
        IF (bError = TRUE) THEN
            Dummy := Print("Modem configuration: ERROR closing connection");
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
        END_IF;

        IF (bDone = TRUE) OR (bError = TRUE) THEN
            IF (bReconnect = TRUE) THEN
                bReconnect := FALSE;
                iModemCfgState := 1;    // Reconnect
            ELSE
                iModemCfgState := 10;   // done -> abort
            END_IF;
        END_IF;

    3:  // Create request string
        sSendData := "";
    
        IF (sActCommand = sCommandSetsim1) THEN
            sSendData := "GET /cgi-bin/cfg.sh?action=setsim1&pin=";
            sSendData := CONCAT(sSendData, sv_SIMInfo.sPIN);

            sSendData := CONCAT(sSendData, "&apn=");
            sSendData := CONCAT(sSendData, sv_SIMInfo.sAPN);
            
            sSendData := CONCAT(sSendData, "&user=");
            IF (LEN(sv_SIMInfo.sUserName) = 0) THEN
                sSendData := CONCAT(sSendData, "noUser");
            ELSE            
                sSendData := CONCAT(sSendData, sv_SIMInfo.sUserName);
            END_IF;

            sSendData := CONCAT(sSendData, "&pass=");
            IF (LEN(sv_SIMInfo.sPassword) = 0) THEN
                sSendData := CONCAT(sSendData, "noPass");
            ELSE
                sSendData := CONCAT(sSendData, sv_SIMInfo.sPassword);
            END_IF;
        END_IF;
        IF (sActCommand = sCommandApply) THEN
            sSendData := "GET /cgi-bin/cfg.sh?action=apply";
        END_IF;    

        sSendData := CONCAT(sSendData, " HTTP/1.1$N");
        sSendData := CONCAT(sSendData, "Host: ");
        sSendData := CONCAT(sSendData, sv_SNNetworkConfig.sGateway); 
        sSendData := CONCAT(sSendData, "$N"); 
        sSendData := CONCAT(sSendData, "Authorization: Basic YWRtaW46");    // password: admin
        sSendData := CONCAT(sSendData, "$N$N"); 

        iModemCfgState := 4;
    
    4:  // Send request to modem
        iSendDataLen := LEN(sSendData);
        Dummy := Print("Modem configuration: Send request (len %u): %s", iSendDataLen, sSendData);
    
        fbKNETWORK_TcpSend(Execute := TRUE, TcpHdl := pTcpHdl, DataLen := iSendDataLen, Data := sSendData,
                           Done => bDone, Error => bError, ErrorID => dErrorID);
    
        IF (bDone = TRUE) THEN
            iModemCfgState := 6;    // wait for request reply
        END_IF;
    
        IF (bError = TRUE) THEN
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
            iModemCfgState := 2;    // error -> disconnect and abort
        END_IF;

    6:  // wait for request reply
        // reduction of trace outputs
        IF (MOD(iReplyWaitCnt, 10) = 0) THEN
            Dummy := Print("Modem configuration: waiting for data ..."); 
        END_IF;
    
        iReplyWaitCnt := iReplyWaitCnt + 1;
        sReceiveData := "";
        fbKNETWORK_TcpReceive (Execute := TRUE, TcpHdl := pTcpHdl, DataBufferLen := 255, DataBuffer := sReceiveData,
                               Done => bDone, Error => bError, ErrorID => dErrorID, BytesReceived => dBytesReceived);

        IF (bDone = TRUE) THEN
            // data received -> analyze status
            IF (dBytesReceived > 0) THEN
                Dummy := Print("Modem configuration: received data: %s", sReceiveData); 

                iCommandParamResult := 0;       // command parameter result
                iCommandResult      := 0;       // command result                            
                iHelp := FIND(sReceiveData, sActCommand);

                IF (iHelp > 0) THEN
                    iHelp := iHelp + LEN(sActCommand) + 1;
                
                    iCommandParamResult := STRING_TO_INT(MID(sReceiveData, 1, iHelp));
                    iCommandResult      := STRING_TO_INT(MID(sReceiveData, 1, iHelp + 2));
                END_IF;
        
                IF (iCommandParamResult = 1) AND (iCommandResult = 1) THEN
                    // successfully done
                    Dummy := Print("Modem configuration: Request successfully finished");
                    IF (sActCommand = sCommandSetsim1) THEN
                        // next command: apply (disconnect and reconnect to modem necessary)
                        sActCommand := sCommandApply;  
                        bReconnect := TRUE;
                    END_IF;
                ELSE
                    // error occured
                    IF (iCommandParamResult = 0) THEN
                        Dummy := Print("Modem configuration: request parameter error");
                        sv_iDownloadSIMInfoErrorCode := 101;
                    END_IF;
                    IF (iCommandResult = 0) THEN
                        Dummy := Print("Modem configuration: request command error");
                        sv_iDownloadSIMInfoErrorCode := 102;
                    END_IF;
                END_IF;
                iModemCfgState := 2;
            END_IF;
        END_IF;
    
        IF (bError = TRUE) THEN
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
            iModemCfgState := 2;    // error -> disconnect and abort
        END_IF;
    
    10: // ready - done
        fbSNNetConfig(UseServiceNetConfig := FALSE); 
        IF (fbSNNetConfig.Error) THEN
            Dummy := Print("Modem configuration: error when reset temp network config");
            sv_iDownloadSIMInfoErrorCode := 111;
            iModemCfgState := 10;    // error -> disconnect and abort
        END_IF;
    
        sv_bDownloadSIMInfo := FALSE;
        IF (sv_iDownloadSIMInfoErrorCode <> 0) THEN
            iHelp := DINT_TO_INT(sv_iDownloadSIMInfoErrorCode);
            SET_ALARM(Name := erDownloadSimInfoFailed, Param1 := iHelp); 
        END_IF;
        STOP_PROCESS_ALGORITHM();
   
ELSE
    Dummy := Print("Modem configuration: ERROR - invalid state %i", iModemCfgState);
    sv_iDownloadSIMInfoErrorCode := 110;
    iModemCfgState := 10;
END_CASE;

IF (iModemCfgState <> iModemCfgStateOld) THEN
    iModemCfgStateOld := iModemCfgState;
    iTimeoutCnt := 0;
END_IF;

// check for timeout (if iModemCfgState does not change for a several time -> timeout)
IF (iTimeoutCnt > 200) THEN
    Dummy := Print("Modem configuration: Timeout occured");

    iTimeoutCnt := 0;
    sv_iDownloadSIMInfoErrorCode := 105;
    iModemCfgState := 2;
ELSE
    iTimeoutCnt := iTimeoutCnt + 1;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 127 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

The Algorithm sends the SIM Configuration (pin, apn, user, password) to an MB connect modem.

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)RESET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(16)cHttp_PortNumber @RT(0) @T @F @DT @RT(4)WORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)80 @RT(40)port number for HTTP connection to modem 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(10)ABModemCfg @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(8)TaskSlow @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)sv_bDownloadSIMInfo @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)sv_iDownloadSIMInfoErrorCode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)sv_SIMInfo @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)tsSimInfo @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)iModemCfgState @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)erDownloadSimInfoFailed @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_bConnect @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_SNNetworkConfig @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsNetworkCfg @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(51)network config to use when connecting to servicenet @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pModemCfg @STRUCTURED_TEXT 
@RT(0) @RT(19)sv_bDownloadSIMInfo @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(12)paDoModemCfg @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
24 
@Var @RT(18)fbKNETWORK_TcpInit @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KNETWORK_TcpInit @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)fbKNETWORK_TcpSend @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KNETWORK_TcpSend @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbKNETWORK_TcpReceive @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)KNETWORK_TcpReceive @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)evKNETWORK @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)KNETWORK_Event @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)dErrorID @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)pTcpHdl @RT(0) @T @F @DT @RT(9)REFERENCE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sSendData @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sReceiveData @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sActCommand @RT(0) @T @F @DT @RT(10)STRING(63) @RT(0) @T @T @STRING 0 @F @RT(2)63 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)sCommandSetsim1 @RT(0) @T @F @DT @RT(10)STRING(63) @RT(0) @T @T @STRING 0 @F @RT(2)63 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(9)'setsim1' @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sCommandApply @RT(0) @T @F @DT @RT(10)STRING(63) @RT(0) @T @T @STRING 0 @F @RT(2)63 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(7)'apply' @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)dBytesReceived @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)iCommandParamResult @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)iCommandResult @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bReconnect @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)iModemCfgStateOld @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iHelp @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)iSendDataLen @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)iReplyWaitCnt @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)Dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)iTimeoutCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbSNNetConfig @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)FBSNNetworkConfig @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(14)
IF (sv_bDownloadSIMInfo) THEN
    IF (sv_bConnect) THEN
        // not allowed, download sim info in progress
        dummy := Print("Modem configuration: servicenet connected -> download could not be startet !");
        sv_iDownloadSIMInfoErrorCode := 100;
        sv_bDownloadSIMInfo := FALSE;
    ELSE
        sv_iDownloadSIMInfoErrorCode := 0;
        iModemCfgState := 0;
        START_PROCESS_ALGORITHM(paDoModemCfg);
    END_IF;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(199)
CASE iModemCfgState OF

    0:  // Initialize
        iModemCfgStateOld := 0;
        sActCommand := sCommandSetsim1;
        bReconnect := FALSE;
        iTimeoutCnt := 0;
        iReplyWaitCnt := 0;
        iModemCfgState := 1;
        RESET_ALARM(Name := erDownloadSimInfoFailed);
        fbSNNetConfig(UseServiceNetConfig := TRUE); 
        IF (fbSNNetConfig.Error) THEN
            Dummy := Print("Modem configuration: error when setting temp network config");
            sv_iDownloadSIMInfoErrorCode := 110;
            iModemCfgState := 10;    // error -> disconnect and abort
        END_IF;
    
    1:  // Connect to modem
        Dummy := Print("Modem configuration: Try to connect to %s port %d", sv_SNNetworkConfig.sGateway, cHttp_PortNumber);
        fbKNETWORK_TcpInit (Execute := TRUE, RemoteIP := sv_SNNetworkConfig.sGateway, RemotePort := cHttp_PortNumber, NotificationEvent := evKNETWORK,
                            Done => bDone, Error => bError, ErrorID => dErrorID, TcpHdl => pTcpHdl);
    
        IF (bDone = TRUE) THEN
            Dummy := Print("Modem configuration: Connection successfully established");
            iModemCfgState := 3;    // send request to modem
        END_IF;                

        IF (bError = TRUE) THEN
            Dummy := Print("Modem configuration: ERROR connecting to %s port %d", sv_SNNetworkConfig.sGateway, cHttp_PortNumber);
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
            iModemCfgState := 10;    // error -> abort
        END_IF;       
    
    2:   // Disconnect from modem
        Dummy := Print("Modem configuration: Close connection %s port %d", sv_SNNetworkConfig.sGateway, cHttp_PortNumber);
        fbKNETWORK_TcpInit (Execute := FALSE, Done => bDone, Error => bError, ErrorID => dErrorID);

        IF (bDone = TRUE) THEN
            Dummy := Print("Modem configuration: Connection successfully closed");
        END_IF;
        IF (bError = TRUE) THEN
            Dummy := Print("Modem configuration: ERROR closing connection");
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
        END_IF;

        IF (bDone = TRUE) OR (bError = TRUE) THEN
            IF (bReconnect = TRUE) THEN
                bReconnect := FALSE;
                iModemCfgState := 1;    // Reconnect
            ELSE
                iModemCfgState := 10;   // done -> abort
            END_IF;
        END_IF;

    3:  // Create request string
        sSendData := "";
    
        IF (sActCommand = sCommandSetsim1) THEN
            sSendData := "GET /cgi-bin/cfg.sh?action=setsim1&pin=";
            sSendData := CONCAT(sSendData, sv_SIMInfo.sPIN);

            sSendData := CONCAT(sSendData, "&apn=");
            sSendData := CONCAT(sSendData, sv_SIMInfo.sAPN);
            
            sSendData := CONCAT(sSendData, "&user=");
            IF (LEN(sv_SIMInfo.sUserName) = 0) THEN
                sSendData := CONCAT(sSendData, "noUser");
            ELSE            
                sSendData := CONCAT(sSendData, sv_SIMInfo.sUserName);
            END_IF;

            sSendData := CONCAT(sSendData, "&pass=");
            IF (LEN(sv_SIMInfo.sPassword) = 0) THEN
                sSendData := CONCAT(sSendData, "noPass");
            ELSE
                sSendData := CONCAT(sSendData, sv_SIMInfo.sPassword);
            END_IF;
        END_IF;
        IF (sActCommand = sCommandApply) THEN
            sSendData := "GET /cgi-bin/cfg.sh?action=apply";
        END_IF;    

        sSendData := CONCAT(sSendData, " HTTP/1.1$N");
        sSendData := CONCAT(sSendData, "Host: ");
        sSendData := CONCAT(sSendData, sv_SNNetworkConfig.sGateway); 
        sSendData := CONCAT(sSendData, "$N"); 
        sSendData := CONCAT(sSendData, "Authorization: Basic YWRtaW46");    // password: admin
        sSendData := CONCAT(sSendData, "$N$N"); 

        iModemCfgState := 4;
    
    4:  // Send request to modem
        iSendDataLen := LEN(sSendData);
        Dummy := Print("Modem configuration: Send request (len %u): %s", iSendDataLen, sSendData);
    
        fbKNETWORK_TcpSend(Execute := TRUE, TcpHdl := pTcpHdl, DataLen := iSendDataLen, Data := sSendData,
                           Done => bDone, Error => bError, ErrorID => dErrorID);
    
        IF (bDone = TRUE) THEN
            iModemCfgState := 6;    // wait for request reply
        END_IF;
    
        IF (bError = TRUE) THEN
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
            iModemCfgState := 2;    // error -> disconnect and abort
        END_IF;

    6:  // wait for request reply
        // reduction of trace outputs
        IF (MOD(iReplyWaitCnt, 10) = 0) THEN
            Dummy := Print("Modem configuration: waiting for data ..."); 
        END_IF;
    
        iReplyWaitCnt := iReplyWaitCnt + 1;
        sReceiveData := "";
        fbKNETWORK_TcpReceive (Execute := TRUE, TcpHdl := pTcpHdl, DataBufferLen := 255, DataBuffer := sReceiveData,
                               Done => bDone, Error => bError, ErrorID => dErrorID, BytesReceived => dBytesReceived);

        IF (bDone = TRUE) THEN
            // data received -> analyze status
            IF (dBytesReceived > 0) THEN
                Dummy := Print("Modem configuration: received data: %s", sReceiveData); 

                iCommandParamResult := 0;       // command parameter result
                iCommandResult      := 0;       // command result                            
                iHelp := FIND(sReceiveData, sActCommand);

                IF (iHelp > 0) THEN
                    iHelp := iHelp + LEN(sActCommand) + 1;
                
                    iCommandParamResult := STRING_TO_INT(MID(sReceiveData, 1, iHelp));
                    iCommandResult      := STRING_TO_INT(MID(sReceiveData, 1, iHelp + 2));
                END_IF;
        
                IF (iCommandParamResult = 1) AND (iCommandResult = 1) THEN
                    // successfully done
                    Dummy := Print("Modem configuration: Request successfully finished");
                    IF (sActCommand = sCommandSetsim1) THEN
                        // next command: apply (disconnect and reconnect to modem necessary)
                        sActCommand := sCommandApply;  
                        bReconnect := TRUE;
                    END_IF;
                ELSE
                    // error occured
                    IF (iCommandParamResult = 0) THEN
                        Dummy := Print("Modem configuration: request parameter error");
                        sv_iDownloadSIMInfoErrorCode := 101;
                    END_IF;
                    IF (iCommandResult = 0) THEN
                        Dummy := Print("Modem configuration: request command error");
                        sv_iDownloadSIMInfoErrorCode := 102;
                    END_IF;
                END_IF;
                iModemCfgState := 2;
            END_IF;
        END_IF;
    
        IF (bError = TRUE) THEN
            sv_iDownloadSIMInfoErrorCode := DWORD_TO_DINT(dErrorID);
            iModemCfgState := 2;    // error -> disconnect and abort
        END_IF;
    
    10: // ready - done
        fbSNNetConfig(UseServiceNetConfig := FALSE); 
        IF (fbSNNetConfig.Error) THEN
            Dummy := Print("Modem configuration: error when reset temp network config");
            sv_iDownloadSIMInfoErrorCode := 111;
            iModemCfgState := 10;    // error -> disconnect and abort
        END_IF;
    
        sv_bDownloadSIMInfo := FALSE;
        IF (sv_iDownloadSIMInfoErrorCode <> 0) THEN
            iHelp := DINT_TO_INT(sv_iDownloadSIMInfoErrorCode);
            SET_ALARM(Name := erDownloadSimInfoFailed, Param1 := iHelp); 
        END_IF;
        STOP_PROCESS_ALGORITHM();
   
ELSE
    Dummy := Print("Modem configuration: ERROR - invalid state %i", iModemCfgState);
    sv_iDownloadSIMInfoErrorCode := 110;
    iModemCfgState := 10;
END_CASE;

IF (iModemCfgState <> iModemCfgStateOld) THEN
    iModemCfgStateOld := iModemCfgState;
    iTimeoutCnt := 0;
END_IF;

// check for timeout (if iModemCfgState does not change for a several time -> timeout)
IF (iTimeoutCnt > 200) THEN
    Dummy := Print("Modem configuration: Timeout occured");

    iTimeoutCnt := 0;
    sv_iDownloadSIMInfoErrorCode := 105;
    iModemCfgState := 2;
ELSE
    iTimeoutCnt := iTimeoutCnt + 1;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
