(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

calculates production data

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8
*)

IMPORT_OVER_LISTFILE
 GET_RUNTIME
, FArraySum
, cNoMaxArticles
, cNoMaxScrapClasses
, tsTIGHmi
, tsTIG
, ABCavities
, TON
, tyTIGHmiScrapCount

END_IMPORT

ALGORITHM_BLOCK ABProductionData #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_dCycleTime : TIME (* act. cylce time *);
 sv_iProdCounterAct : DINT;
 sv_iProdCounterSet : DINT (* shot limit *);
 sv_dMaxCycleTime : TIME;
 sv_iShotCounterSet : DINT (* shot limit *);
 sv_iShotCounterAct : DINT;
 sv_iShotCounterRetain : UDINT (* shot counter retain (used for lubrication) *);
 sv_bResetShotCounter : BOOL;
 sv_Test : BOOL;
 sv_iCavities : DINT;
 sv_TIGHmi : tsTIGHmi;
 sv_TIG : tsTIG;
END_VAR

SYSTEM_OBJECT
 TaskVis : TASK;
 PU_Task_7 : TASK;
END_OBJECT

VAR
 mbTextsChanged : BOOL;
 abCavities : ABCavities;
END_VAR

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

block initialisation

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8
*)

ALGORITHM aInit

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
abCavities.aInit();
START_PROCESS_ALGORITHM(paCyclic);


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

TIG system wants to reset shotcounter

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

*)

POSTUPDATE_ALGORITHM pResetProdData ON TaskVis WITH sv_TIG.productionData.Act.bResetCounter

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TIG.productionData.Act.bResetCounter THEN
   sv_bResetShotCounter := TRUE; 
   sv_TIG.productionData.Act.bResetCounter := FALSE; 
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

listener for scrap class texts changed

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

*)

POSTUPDATE_ALGORITHM pTextsChanged ON PU_Task_7 WITH sv_TIG.productionData.yScrapText

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbTextsChanged := TRUE;
START_PROCESS_ALGORITHM(paTextsChanged);


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

calculate new list length, set list changed flag

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

*)

PROCESS_ALGORITHM paTextsChanged ON TaskVis


VAR_TEMP
 i : DINT;
END_VAR

VAR
 fbTonChanged : TON;
 iStep : DINT;
 time : TIME;
 s : STRING(255);
 dummy : DINT;
 iArrayLen : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF iStep = 0 THEN
   iArrayLen := GET_HIGH_BOUND(sv_TIG.productionData.yScrapText);

   mbTextsChanged := FALSE;
   fbTonChanged(NOT mbTextsChanged, T#3s); // delay reading of texts
   
   
   IF fbTonChanged.Q THEN
      time := GET_RUNTIME();
      fbTonChanged(IN := FALSE);
//      sv_TIGHmi.productionData.iScrapClassTextListLength := iArrayLen;       // maximum
      FOR i:=1 TO iArrayLen DO
        IF (sv_TIG.productionData.yScrapText[i].sText = "") THEN 
          iArrayLen := i-1;
          EXIT;                              // -------------------       BREAK FOR LOOP        ------------------------
        END_IF;
      END_FOR;
      sv_TIGHmi.productionData.iScrapClassTextListLength := iArrayLen;
      sv_TIGHmi.productionData.bScrapClassTextListChanged := TRUE; 
      
      iStep:=10; 
   END_IF;
  
END_IF;

IF iStep = 10 THEN
   IF (sv_TIGHmi.productionData.bScrapClassTextListChanged = FALSE) THEN // hmi read texts done
      time := GET_RUNTIME() - time;
      s := CONCAT('scrapclasslist texts changed: ', TIME_TO_STRING(time));
      dummy := Print(s);
      
      iStep := 0;      
      IF NOT mbTextsChanged THEN // if texts changed again by tig do not stop and continue with step 0 to trigger reading of texts again
         STOP_PROCESS_ALGORITHM();
      END_IF;   
   END_IF;
END_IF;
    


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

calculate values for act. parts, ok parts, scrap parts; 
handles input for new scrap parts

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

*)

PROCESS_ALGORITHM paCyclic ON TaskVis


VAR_TEMP
 i : DINT;
 k : DINT;
END_VAR

VAR
 iShotCntOld : DINT := 0;
 inc : DINT;
 tmpSum : DINT;
 iScrapSum : DINT;
 yScrapClassSum : tyTIGHmiScrapCount;
 iArticleSelector : DINT;
 mTmp : BOOL;
 iShotDif : DINT;
 dCycleOld : TIME;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// TIG -> KePlast (set values)
IF sv_TIG.productionData.Set.iShots > 0 THEN 
   sv_iShotCounterSet := sv_TIG.productionData.Set.iShots;
END_IF;
IF (sv_TIG.productionData.Set.Cycle > T#0s) THEN 
   sv_dMaxCycleTime := sv_TIG.productionData.Set.Cycle;
END_IF;

sv_TIGHmi.productionData.productionDataSet.iPartsOK := FArraySum(cNoMaxArticles, sv_TIG.productionData.Set.yParts);
sv_TIGHmi.productionData.productionDataAct.iCavity := FArraySum(cNoMaxArticles, sv_TIG.productionData.Act.yCavity);
sv_TIGHmi.productionData.productionDataAct.iCavity := FArraySum(cNoMaxArticles, sv_TIG.productionData.Act.yCavity);
sv_TIGHmi.productionData.productionDataSet.iCavity := FArraySum(cNoMaxArticles, sv_TIG.productionData.Set.yCavity);
sv_iCavities := MAX(1, sv_TIGHmi.productionData.productionDataAct.iCavity);
sv_iProdCounterAct := sv_TIGHmi.productionData.productionDataAct.iPartsOK; 
sv_iProdCounterSet := sv_TIGHmi.productionData.productionDataSet.iPartsOK;
// Keplast -> TIG (act values)

 
// shot counter 0 ... new job started -> init 
IF sv_iShotCounterAct = 0 AND iShotCntOld > 0 THEN // reset all actvalues
   iShotCntOld := 0; 
    // is done in ABCavities by postupdate on setcavities ...
    // sv_TIG.productionData.Act.iCavity := sv_TIG.productionData.Set.iCavity;
    //   sv_TIG.productionData.Act.yCavity := sv_TIG.productionData.Set.yCavity;


   sv_TIGHmi.productionData.productionDataAct.iPartsOK := 0; 
   sv_TIGHmi.productionData.productionDataAct.iPartsScrap := 0; 
   sv_TIGHmi.productionData.productionDataAct.iPartsSum := 0;
   sv_TIG.productionData.Act.Cycle := T#0s; 
   
   FOR i:=1 TO cNoMaxArticles DO
      sv_TIG.productionData.Act.yParts[i].iPartsOK := 0; 
      sv_TIG.productionData.Act.yParts[i].iPartsScrap := 0; 
      FOR k:=1 TO cNoMaxScrapClasses DO
        sv_TIG.productionData.Act.yParts[i].yScrap[k].iNumber := 0; 
        sv_TIG.productionData.Act.yParts[i].yScrap[k].iCount := 0; 
      END_FOR;
   END_FOR;

   FOR i:=1 TO cNoMaxScrapClasses DO
     sv_TIGHmi.productionData.productionDataAct.yScrap[i].iNumber := 0;  
     sv_TIGHmi.productionData.productionDataAct.yScrap[i].iCount := 0; 
   END_FOR;

   FOR i:=1 TO cNoMaxArticles  DO
      sv_TIGHmi.productionData.productionDataAct.yScrapPerArticleSum[i] := 0;    
      sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] := 0; 
   END_FOR;   
END_IF;

// act shots, cylcetime
sv_TIG.productionData.Act.iAbsShots := UDINT_TO_DINT(sv_iShotCounterRetain); 
IF dCycleOld > sv_dCycleTime THEN
  sv_TIG.productionData.Act.Cycle := dCycleOld;  
END_IF;
dCycleOld := sv_dCycleTime; 

sv_TIG.productionData.Act.iShots := sv_iShotCounterAct;

// scrap class number
FOR i := 1 TO cNoMaxScrapClasses DO // for every scrap class 
  sv_TIGHmi.productionData.productionDataAct.yScrap[i].iNumber :=  sv_TIG.productionData.yScrapText[i].iNumber;
  FOR k := 1 TO cNoMaxArticles DO // for every article 
    sv_TIG.productionData.Act.yParts[k].yScrap[i].iNumber := sv_TIG.productionData.yScrapText[i].iNumber;
  END_FOR; 
END_FOR;
         
// hmi: new scrap input 
IF sv_TIGHmi.productionData.productionDataAct.NewScrap.bAddScrap THEN
    FOR i:=1 TO cNoMaxScrapClasses DO
      iArticleSelector := sv_TIGHmi.productionData.productionDataAct.NewScrap.yArticleSelector[i];
      IF iArticleSelector = 0 THEN // scrap for all articles  
         // check plausibility
         IF (sv_TIGHmi.productionData.productionDataAct.iCavity <> 0) 
            AND ((sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] MOD sv_TIGHmi.productionData.productionDataAct.iCavity) = 0) THEN 
           // ok 
           // check if possible - are there enough parts ok?
           mTmp := TRUE; 
           FOR k:=1 TO cNoMaxArticles DO
               inc := (sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] / sv_TIGHmi.productionData.productionDataAct.iCavity) // number of shots
                * sv_TIG.productionData.Act.yCavity[k];              
               mTmp := mTmp AND (sv_TIG.productionData.Act.yParts[k].iPartsOK >= inc);
           END_FOR;
            
           IF mTmp THEN 
             FOR k:=1 TO cNoMaxArticles DO
                inc := (sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] / sv_TIGHmi.productionData.productionDataAct.iCavity) // number of shots
                  * sv_TIG.productionData.Act.yCavity[k]; 
                sv_TIG.productionData.Act.yParts[k].yScrap[i].iCount := sv_TIG.productionData.Act.yParts[k].yScrap[i].iCount + inc;
             END_FOR;
             sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] := 0;
           ELSE
             // not ok, todo: alarm
             ;
           END_IF;
         ELSE
           // not ok, todo: setalarm
           ;
         END_IF;
      ELSE // scrap for specific article
         // enough "ok" parts?
         IF (sv_TIG.productionData.Act.yParts[iArticleSelector].iPartsOK >= sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i]) THEN
           sv_TIG.productionData.Act.yParts[iArticleSelector].yScrap[i].iCount := sv_TIG.productionData.Act.yParts[iArticleSelector].yScrap[i].iCount 
                + sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i];
           sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] := 0; 
         ELSE
          // not ok, todo: setalarm
           ;
         END_IF;
      END_IF;

    END_FOR;
END_IF;


// shotcounter increased ...
IF (iShotCntOld < sv_iShotCounterAct) OR (sv_TIGHmi.productionData.productionDataAct.NewScrap.bAddScrap)  THEN
  iShotDif :=  sv_iShotCounterAct - iShotCntOld;
  iShotCntOld := sv_iShotCounterAct;  
  sv_TIGHmi.productionData.productionDataAct.iPartsSum := sv_TIGHmi.productionData.productionDataAct.iPartsSum 
      + sv_TIGHmi.productionData.productionDataAct.iCavity * iShotDif;

 
   
  // reset tmp counters
  iScrapSum := 0; 
  FOR i:=1 TO cNoMaxScrapClasses DO
    yScrapClassSum[i] := 0; 
  END_FOR;

  // for every article - calc number of pieces produced ...    
  FOR i:=1 TO cNoMaxArticles DO
     inc := sv_TIG.productionData.Act.yCavity[i] * iShotDif;
     sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] := sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] + inc;
     // calc act scrap per article (sum of all scrap classes)
     tmpSum := 0; 
     FOR k:=1 TO cNoMaxScrapClasses DO
        tmpSum := tmpSum + sv_TIG.productionData.Act.yParts[i].yScrap[k].iCount;
        yScrapClassSum[k] := yScrapClassSum[k] + sv_TIG.productionData.Act.yParts[i].yScrap[k].iCount;
     END_FOR;     
     sv_TIG.productionData.Act.yParts[i].iPartsScrap := tmpSum;

     iScrapSum := iScrapSum + tmpSum;

     sv_TIG.productionData.Act.yParts[i].iPartsOK := sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] - sv_TIG.productionData.Act.yParts[i].iPartsScrap;
  END_FOR;  
   
  // scrap per scrapclass, all articles
  FOR i:=1 TO cNoMaxScrapClasses DO
    sv_TIGHmi.productionData.productionDataAct.yScrap[i].iCount := yScrapClassSum[i];   
  END_FOR;

  sv_TIGHmi.productionData.productionDataAct.iPartsScrap := iScrapSum;
   
  sv_TIGHmi.productionData.productionDataAct.iPartsOK := sv_TIGHmi.productionData.productionDataAct.iPartsSum - sv_TIGHmi.productionData.productionDataAct.iPartsScrap;
END_IF;


// if new scrap added
sv_TIGHmi.productionData.productionDataAct.NewScrap.bAddScrap := FALSE; 
 


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

starts simulation routine

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

*)

POSTUPDATE_ALGORITHM pTest ON TaskVis WITH sv_Test

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_Test THEN 
  START_PROCESS_ALGORITHM(paTest);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

simulation routine

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

*)

PROCESS_ALGORITHM paTest ON TaskVis AUTOSTART


VAR
 bMoreScrapClasses : BOOL;
 lang : INT;
 cnt : INT;
 bIncShotCnt : BOOL;
 bCav : BOOL := TRUE;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_Test THEN
   STOP_PROCESS_ALGORITHM(paTest);
   RETURN;
END_IF;

IF bCav THEN
sv_TIG.productionData.Set.Cycle := T#131.3s;
sv_TIG.productionData.Set.yCavity[1] := 2;
sv_TIG.productionData.Set.yCavity[2] := 1;
sv_TIG.productionData.Set.yCavity[3] := 1;
sv_TIG.productionData.Set.yCavity[4] := 1;
sv_TIG.productionData.Set.yCavity[5] := 1;
sv_TIG.productionData.Set.iShots := 100;
sv_TIG.productionData.Set.yParts[1]:=200;
sv_TIG.productionData.Set.yParts[2]:=100;
sv_TIG.productionData.Set.yParts[3]:=100;
sv_TIG.productionData.Set.yParts[4]:=100;
sv_TIG.productionData.Set.yParts[5]:=100;
END_IF;

IF sv_TIG.productionData.yScrapText[1].iNumber > 10000 THEN 
   RETURN;  // memory test in ABJob.paTest running!
END_IF;
sv_TIG.productionData.yScrapText[1].iNumber := 11;
IF lang=0 THEN 
sv_TIG.productionData.yScrapText[1].sText := "Risse";
   ELSE
sv_TIG.productionData.yScrapText[1].sText := "EN_Risse";
   END_IF;

sv_TIG.productionData.yScrapText[2].iNumber := 21;
sv_TIG.productionData.yScrapText[2].sText := "Blasen";

sv_TIG.productionData.yScrapText[3].iNumber := 31;
sv_TIG.productionData.yScrapText[3].sText := "Fliessfehler";

sv_TIG.productionData.yScrapText[4].iNumber := 41;
sv_TIG.productionData.yScrapText[4].sText := "Schmorstellen";

IF bMoreScrapClasses THEN 
   sv_TIG.productionData.yScrapText[5].iNumber := 51;
   sv_TIG.productionData.yScrapText[5].sText := "Altes Gummi";

   sv_TIG.productionData.yScrapText[6].iNumber := 61;
   sv_TIG.productionData.yScrapText[6].sText := "Geplatzte Naht";

   sv_TIG.productionData.yScrapText[7].iNumber := 71;
   sv_TIG.productionData.yScrapText[7].sText := "was woas i";
   

ELSE
      sv_TIG.productionData.yScrapText[5].iNumber := 0;
   sv_TIG.productionData.yScrapText[5].sText := "";
END_IF;


IF cnt=0 THEN 
   IF bIncShotCnt THEN 
     sv_iShotCounterAct:=sv_iShotCounterAct+1;
   END_IF;
   cnt := 30;
END_IF;
cnt:=cnt-1;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

calculates production data

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)FArraySum @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(14)cNoMaxArticles @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)8 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)cNoMaxScrapClasses @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)20 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABProductionData @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(13)sv_dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)act. cylce time @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iProdCounterAct @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iProdCounterSet @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)shot limit @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_dMaxCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iShotCounterSet @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(10)shot limit @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iShotCounterAct @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_iShotCounterRetain @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)shot counter retain (used for lubrication) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bResetShotCounter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)sv_Test @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_iCavities @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)mbTextsChanged @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sv_TIGHmi @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsTIGHmi @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(6)sv_TIG @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(5)tsTIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)abCavities @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)ABCavities @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

7 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pResetProdData @STRUCTURED_TEXT 
@RT(0) @RT(39)sv_TIG.productionData.Act.bResetCounter @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pTextsChanged @STRUCTURED_TEXT 
@RT(0) @RT(32)sv_TIG.productionData.yScrapText @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(14)paTextsChanged @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(12)fbTonChanged @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iStep @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)time @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)iArrayLen @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(8)paCyclic @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(11)iShotCntOld @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)k @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(3)inc @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)tmpSum @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)iScrapSum @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)yScrapClassSum @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tyTIGHmiScrapCount @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)iArticleSelector @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)mTmp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)iShotDif @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)dCycleOld @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pTest @STRUCTURED_TEXT 
@RT(0) @RT(7)sv_Test @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paTest @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(17)bMoreScrapClasses @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)lang @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)cnt @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bIncShotCnt @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)bCav @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
abCavities.aInit();
START_PROCESS_ALGORITHM(paCyclic);

@END_Body 

@@@BEG_Comment@@@ 
@TL(16)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

block initialisation

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8
@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TIG.productionData.Act.bResetCounter THEN
   sv_bResetShotCounter := TRUE; 
   sv_TIG.productionData.Act.bResetCounter := FALSE; 
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(17)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

TIG system wants to reset shotcounter

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbTextsChanged := TRUE;
START_PROCESS_ALGORITHM(paTextsChanged);

@END_Body 

@@@BEG_Comment@@@ 
@TL(17)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

listener for scrap class texts changed

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

@@@END_Comment@@@ 

@BEG_Body 
@TL(43)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF iStep = 0 THEN
   iArrayLen := GET_HIGH_BOUND(sv_TIG.productionData.yScrapText);

   mbTextsChanged := FALSE;
   fbTonChanged(NOT mbTextsChanged, T#3s); // delay reading of texts
   
   
   IF fbTonChanged.Q THEN
      time := GET_RUNTIME();
      fbTonChanged(IN := FALSE);
//      sv_TIGHmi.productionData.iScrapClassTextListLength := iArrayLen;       // maximum
      FOR i:=1 TO iArrayLen DO
        IF (sv_TIG.productionData.yScrapText[i].sText = "") THEN 
          iArrayLen := i-1;
          EXIT;                              // -------------------       BREAK FOR LOOP        ------------------------
        END_IF;
      END_FOR;
      sv_TIGHmi.productionData.iScrapClassTextListLength := iArrayLen;
      sv_TIGHmi.productionData.bScrapClassTextListChanged := TRUE; 
      
      iStep:=10; 
   END_IF;
  
END_IF;

IF iStep = 10 THEN
   IF (sv_TIGHmi.productionData.bScrapClassTextListChanged = FALSE) THEN // hmi read texts done
      time := GET_RUNTIME() - time;
      s := CONCAT('scrapclasslist texts changed: ', TIME_TO_STRING(time));
      dummy := Print(s);
      
      iStep := 0;      
      IF NOT mbTextsChanged THEN // if texts changed again by tig do not stop and continue with step 0 to trigger reading of texts again
         STOP_PROCESS_ALGORITHM();
      END_IF;   
   END_IF;
END_IF;
    

@END_Body 

@@@BEG_Comment@@@ 
@TL(17)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

calculate new list length, set list changed flag

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

@@@END_Comment@@@ 

@BEG_Body 
@TL(168)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// TIG -> KePlast (set values)
IF sv_TIG.productionData.Set.iShots > 0 THEN 
   sv_iShotCounterSet := sv_TIG.productionData.Set.iShots;
END_IF;
IF (sv_TIG.productionData.Set.Cycle > T#0s) THEN 
   sv_dMaxCycleTime := sv_TIG.productionData.Set.Cycle;
END_IF;

sv_TIGHmi.productionData.productionDataSet.iPartsOK := FArraySum(cNoMaxArticles, sv_TIG.productionData.Set.yParts);
sv_TIGHmi.productionData.productionDataAct.iCavity := FArraySum(cNoMaxArticles, sv_TIG.productionData.Act.yCavity);
sv_TIGHmi.productionData.productionDataAct.iCavity := FArraySum(cNoMaxArticles, sv_TIG.productionData.Act.yCavity);
sv_TIGHmi.productionData.productionDataSet.iCavity := FArraySum(cNoMaxArticles, sv_TIG.productionData.Set.yCavity);
sv_iCavities := MAX(1, sv_TIGHmi.productionData.productionDataAct.iCavity);
sv_iProdCounterAct := sv_TIGHmi.productionData.productionDataAct.iPartsOK; 
sv_iProdCounterSet := sv_TIGHmi.productionData.productionDataSet.iPartsOK;
// Keplast -> TIG (act values)

 
// shot counter 0 ... new job started -> init 
IF sv_iShotCounterAct = 0 AND iShotCntOld > 0 THEN // reset all actvalues
   iShotCntOld := 0; 
    // is done in ABCavities by postupdate on setcavities ...
    // sv_TIG.productionData.Act.iCavity := sv_TIG.productionData.Set.iCavity;
    //   sv_TIG.productionData.Act.yCavity := sv_TIG.productionData.Set.yCavity;


   sv_TIGHmi.productionData.productionDataAct.iPartsOK := 0; 
   sv_TIGHmi.productionData.productionDataAct.iPartsScrap := 0; 
   sv_TIGHmi.productionData.productionDataAct.iPartsSum := 0;
   sv_TIG.productionData.Act.Cycle := T#0s; 
   
   FOR i:=1 TO cNoMaxArticles DO
      sv_TIG.productionData.Act.yParts[i].iPartsOK := 0; 
      sv_TIG.productionData.Act.yParts[i].iPartsScrap := 0; 
      FOR k:=1 TO cNoMaxScrapClasses DO
        sv_TIG.productionData.Act.yParts[i].yScrap[k].iNumber := 0; 
        sv_TIG.productionData.Act.yParts[i].yScrap[k].iCount := 0; 
      END_FOR;
   END_FOR;

   FOR i:=1 TO cNoMaxScrapClasses DO
     sv_TIGHmi.productionData.productionDataAct.yScrap[i].iNumber := 0;  
     sv_TIGHmi.productionData.productionDataAct.yScrap[i].iCount := 0; 
   END_FOR;

   FOR i:=1 TO cNoMaxArticles  DO
      sv_TIGHmi.productionData.productionDataAct.yScrapPerArticleSum[i] := 0;    
      sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] := 0; 
   END_FOR;   
END_IF;

// act shots, cylcetime
sv_TIG.productionData.Act.iAbsShots := UDINT_TO_DINT(sv_iShotCounterRetain); 
IF dCycleOld > sv_dCycleTime THEN
  sv_TIG.productionData.Act.Cycle := dCycleOld;  
END_IF;
dCycleOld := sv_dCycleTime; 

sv_TIG.productionData.Act.iShots := sv_iShotCounterAct;

// scrap class number
FOR i := 1 TO cNoMaxScrapClasses DO // for every scrap class 
  sv_TIGHmi.productionData.productionDataAct.yScrap[i].iNumber :=  sv_TIG.productionData.yScrapText[i].iNumber;
  FOR k := 1 TO cNoMaxArticles DO // for every article 
    sv_TIG.productionData.Act.yParts[k].yScrap[i].iNumber := sv_TIG.productionData.yScrapText[i].iNumber;
  END_FOR; 
END_FOR;
         
// hmi: new scrap input 
IF sv_TIGHmi.productionData.productionDataAct.NewScrap.bAddScrap THEN
    FOR i:=1 TO cNoMaxScrapClasses DO
      iArticleSelector := sv_TIGHmi.productionData.productionDataAct.NewScrap.yArticleSelector[i];
      IF iArticleSelector = 0 THEN // scrap for all articles  
         // check plausibility
         IF (sv_TIGHmi.productionData.productionDataAct.iCavity <> 0) 
            AND ((sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] MOD sv_TIGHmi.productionData.productionDataAct.iCavity) = 0) THEN 
           // ok 
           // check if possible - are there enough parts ok?
           mTmp := TRUE; 
           FOR k:=1 TO cNoMaxArticles DO
               inc := (sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] / sv_TIGHmi.productionData.productionDataAct.iCavity) // number of shots
                * sv_TIG.productionData.Act.yCavity[k];              
               mTmp := mTmp AND (sv_TIG.productionData.Act.yParts[k].iPartsOK >= inc);
           END_FOR;
            
           IF mTmp THEN 
             FOR k:=1 TO cNoMaxArticles DO
                inc := (sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] / sv_TIGHmi.productionData.productionDataAct.iCavity) // number of shots
                  * sv_TIG.productionData.Act.yCavity[k]; 
                sv_TIG.productionData.Act.yParts[k].yScrap[i].iCount := sv_TIG.productionData.Act.yParts[k].yScrap[i].iCount + inc;
             END_FOR;
             sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] := 0;
           ELSE
             // not ok, todo: alarm
             ;
           END_IF;
         ELSE
           // not ok, todo: setalarm
           ;
         END_IF;
      ELSE // scrap for specific article
         // enough "ok" parts?
         IF (sv_TIG.productionData.Act.yParts[iArticleSelector].iPartsOK >= sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i]) THEN
           sv_TIG.productionData.Act.yParts[iArticleSelector].yScrap[i].iCount := sv_TIG.productionData.Act.yParts[iArticleSelector].yScrap[i].iCount 
                + sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i];
           sv_TIGHmi.productionData.productionDataAct.NewScrap.yScrapCount[i] := 0; 
         ELSE
          // not ok, todo: setalarm
           ;
         END_IF;
      END_IF;

    END_FOR;
END_IF;


// shotcounter increased ...
IF (iShotCntOld < sv_iShotCounterAct) OR (sv_TIGHmi.productionData.productionDataAct.NewScrap.bAddScrap)  THEN
  iShotDif :=  sv_iShotCounterAct - iShotCntOld;
  iShotCntOld := sv_iShotCounterAct;  
  sv_TIGHmi.productionData.productionDataAct.iPartsSum := sv_TIGHmi.productionData.productionDataAct.iPartsSum 
      + sv_TIGHmi.productionData.productionDataAct.iCavity * iShotDif;

 
   
  // reset tmp counters
  iScrapSum := 0; 
  FOR i:=1 TO cNoMaxScrapClasses DO
    yScrapClassSum[i] := 0; 
  END_FOR;

  // for every article - calc number of pieces produced ...    
  FOR i:=1 TO cNoMaxArticles DO
     inc := sv_TIG.productionData.Act.yCavity[i] * iShotDif;
     sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] := sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] + inc;
     // calc act scrap per article (sum of all scrap classes)
     tmpSum := 0; 
     FOR k:=1 TO cNoMaxScrapClasses DO
        tmpSum := tmpSum + sv_TIG.productionData.Act.yParts[i].yScrap[k].iCount;
        yScrapClassSum[k] := yScrapClassSum[k] + sv_TIG.productionData.Act.yParts[i].yScrap[k].iCount;
     END_FOR;     
     sv_TIG.productionData.Act.yParts[i].iPartsScrap := tmpSum;

     iScrapSum := iScrapSum + tmpSum;

     sv_TIG.productionData.Act.yParts[i].iPartsOK := sv_TIGHmi.productionData.productionDataAct.yPartsSumPerArticle[i] - sv_TIG.productionData.Act.yParts[i].iPartsScrap;
  END_FOR;  
   
  // scrap per scrapclass, all articles
  FOR i:=1 TO cNoMaxScrapClasses DO
    sv_TIGHmi.productionData.productionDataAct.yScrap[i].iCount := yScrapClassSum[i];   
  END_FOR;

  sv_TIGHmi.productionData.productionDataAct.iPartsScrap := iScrapSum;
   
  sv_TIGHmi.productionData.productionDataAct.iPartsOK := sv_TIGHmi.productionData.productionDataAct.iPartsSum - sv_TIGHmi.productionData.productionDataAct.iPartsScrap;
END_IF;


// if new scrap added
sv_TIGHmi.productionData.productionDataAct.NewScrap.bAddScrap := FALSE; 
 

@END_Body 

@@@BEG_Comment@@@ 
@TL(18)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

calculate values for act. parts, ok parts, scrap parts; 
handles input for new scrap parts

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_Test THEN 
  START_PROCESS_ALGORITHM(paTest);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(17)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

starts simulation routine

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

@@@END_Comment@@@ 

@BEG_Body 
@TL(70)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_Test THEN
   STOP_PROCESS_ALGORITHM(paTest);
   RETURN;
END_IF;

IF bCav THEN
sv_TIG.productionData.Set.Cycle := T#131.3s;
sv_TIG.productionData.Set.yCavity[1] := 2;
sv_TIG.productionData.Set.yCavity[2] := 1;
sv_TIG.productionData.Set.yCavity[3] := 1;
sv_TIG.productionData.Set.yCavity[4] := 1;
sv_TIG.productionData.Set.yCavity[5] := 1;
sv_TIG.productionData.Set.iShots := 100;
sv_TIG.productionData.Set.yParts[1]:=200;
sv_TIG.productionData.Set.yParts[2]:=100;
sv_TIG.productionData.Set.yParts[3]:=100;
sv_TIG.productionData.Set.yParts[4]:=100;
sv_TIG.productionData.Set.yParts[5]:=100;
END_IF;

IF sv_TIG.productionData.yScrapText[1].iNumber > 10000 THEN 
   RETURN;  // memory test in ABJob.paTest running!
END_IF;
sv_TIG.productionData.yScrapText[1].iNumber := 11;
IF lang=0 THEN 
sv_TIG.productionData.yScrapText[1].sText := "Risse";
   ELSE
sv_TIG.productionData.yScrapText[1].sText := "EN_Risse";
   END_IF;

sv_TIG.productionData.yScrapText[2].iNumber := 21;
sv_TIG.productionData.yScrapText[2].sText := "Blasen";

sv_TIG.productionData.yScrapText[3].iNumber := 31;
sv_TIG.productionData.yScrapText[3].sText := "Fliessfehler";

sv_TIG.productionData.yScrapText[4].iNumber := 41;
sv_TIG.productionData.yScrapText[4].sText := "Schmorstellen";

IF bMoreScrapClasses THEN 
   sv_TIG.productionData.yScrapText[5].iNumber := 51;
   sv_TIG.productionData.yScrapText[5].sText := "Altes Gummi";

   sv_TIG.productionData.yScrapText[6].iNumber := 61;
   sv_TIG.productionData.yScrapText[6].sText := "Geplatzte Naht";

   sv_TIG.productionData.yScrapText[7].iNumber := 71;
   sv_TIG.productionData.yScrapText[7].sText := "was woas i";
   

ELSE
      sv_TIG.productionData.yScrapText[5].iNumber := 0;
   sv_TIG.productionData.yScrapText[5].sText := "";
END_IF;


IF cnt=0 THEN 
   IF bIncShotCnt THEN 
     sv_iShotCounterAct:=sv_iShotCounterAct+1;
   END_IF;
   cnt := 30;
END_IF;
cnt:=cnt-1;


@END_Body 

@@@BEG_Comment@@@ 
@TL(17)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

simulation routine

@FunctionID: A-VAR-10
@FunctionID: A-VAR-11
@FunctionID: A-VAR-12
TIG 3.8

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
