IMPORT_OVER_LISTFILE
 STOP_PROCESS_ALGORITHM
, WRITE_SV_DIRECT
, cMoveFwd
, cMoveBwd
, cCompShutOffNozzle
, cSubOpNozzleTransducer
, cMoveFwdContactF
, ABMoveBwd
, ABMoveFwd
, tsMoveCtrl
, ABOutputRequest
, tOptionId
, tnOperationMode
, tsCalibMovement
, tsRequiredPumps
, tsHydrMaxValues
, KAPPL_LintabData
, tsCylinderData
, ABCalcHydrMaxValues
, ABUpdateRelLintabPre
, ABUpdateRelLintabVel

END_IMPORT

ALGORITHM_BLOCK ABMovementAdmin #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitStart : BOOL;
 sv_bDeviceStart : BOOL (* Start Device *);
 ai_Position : REAL;
 sv_Options : tOptionId;
 sv_bTransducerAvailable : BOOL;
 sv_iActiveStage : DINT;
 sv_iActiveStageFwd : DINT (* active profile stage mold close (fwd) *);
 sv_iActiveStageBwd : DINT (* active profile stage mold open (bwd) *);
 sv_bDeviceReady : BOOL;
 sv_OperationMode : tnOperationMode;
 sv_CalibState : tsCalibMovement;
 sv_dActFwdTime : TIME (* actual nozzle fwd time (includes contact force build up) *);
 sv_RequiredPumpsFwd : tsRequiredPumps;
 sv_RequiredPumpsBwd : tsRequiredPumps;
 sv_HydrMaxValuesFwd : tsHydrMaxValues (* hydraulic max values for nozzle fwd *);
 sv_HydrMaxValuesBwd : tsHydrMaxValues (* hydraulic max values for nozzle bwd *);
 sv_bInitDone : BOOL;
 sv_LintabOutFwdP : KAPPL_LintabData;
 sv_LintabOutFwdV : KAPPL_LintabData;
 sv_LintabOutBwdP : KAPPL_LintabData;
 sv_LintabOutBwdV : KAPPL_LintabData;
 sv_rMaxSpeedFwd : REAL;
 sv_rMaxSpeedBwd : REAL;
 sv_CylinderData : tsCylinderData;
 sv_rMaxPressureFwd : REAL;
 sv_rMaxPressureBwd : REAL;
 sv_rMaxSpeedFwdCalc : REAL;
 sv_rMaxSpeedBwdCalc : REAL;
 sv_rMaxSpeedFwdCalib : REAL;
 sv_rMaxSpeedBwdCalib : REAL;
 sv_rMaxSpeedReducePercent : REAL;
 sv_bFALSE : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskAnalog : TASK;
 EV_Task_1 : TASK;
 PU_Task_3 : TASK;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
END_VAR

VAR
 abMoveBwd : ABMoveBwd;
 abMoveFwd : ABMoveFwd;
 abOutputRequest : ABOutputRequest;
 miDigitsToFloor : SINT := 2;
END_VAR

(*
Calls the registration-algo of every movementblock after the deviceregistration succeeded(sv_bInitStart->true)

*)

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart


VAR
 abCalcMaxValuesFwd : ABCalcHydrMaxValues;
 abCalcMaxValuesBwd : ABCalcHydrMaxValues;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
    
   //check if transducer is available
   sv_bTransducerAvailable := IS_LINKED(ai_Position);
   IF (sv_bTransducerAvailable) THEN
      sv_Options := sv_Options OR cSubOpNozzleTransducer;
      //set auto-calib transducer
      sv_CalibState.prInputSensor := @ai_Position;       
   END_IF;

   //register and init nozzle bwd movement    
   abMoveBwd.aRegister();
   abMoveBwd.aInit();
      
   //register and init nozzle fwd movement
   abMoveFwd.aRegister();
   abMoveFwd.aInit();
   
   //init calculation of hydraulic max values for nozzle fwd
   abCalcMaxValuesFwd.aInit(pRequiredPumps := @sv_RequiredPumpsFwd,
                            pHydrMaxValues := @sv_HydrMaxValuesFwd);

   //init calculation of hydraulic max values for nozzle bwd
   abCalcMaxValuesBwd.aInit(pRequiredPumps := @sv_RequiredPumpsBwd,
                            pHydrMaxValues := @sv_HydrMaxValuesBwd);
   
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Starts the algo paRun when sv_bDeviceStart is set by ABControl.
*)

POSTUPDATE_ALGORITHM pDeviceStart ON EV_Task_1 WITH sv_bDeviceStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceStart THEN
   //start device
   START_PROCESS_ALGORITHM(paRun);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitRelLintabUpdater ON PU_Task_7 WITH sv_bInitDone


VAR
 abUpdateRelLintabPreFwd : ABUpdateRelLintabPre;
 abUpdateRelLintabVelFwd : ABUpdateRelLintabVel;
 abUpdateRelLintabPreBwd : ABUpdateRelLintabPre;
 abUpdateRelLintabVelBwd : ABUpdateRelLintabVel;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abUpdateRelLintabPreFwd.aInit(pLintabOut := @sv_LintabOutFwdP,
                              prMaxPressure := @sv_rMaxPressureFwd,
                              prMaxHydrPressure := @sv_HydrMaxValuesFwd.rMaxPressure,
                              bUseForce := TRUE,
                              bFwd := TRUE,
                              pCylinderData := @sv_CylinderData);

abUpdateRelLintabVelFwd.aInit(pLintabOut := @sv_LintabOutFwdV,
                              prMaxSpeed := @sv_rMaxSpeedFwd,
                              prMaxSpeedCalc := @sv_rMaxSpeedFwdCalc, 
                              prMaxSpeedCalib := @sv_rMaxSpeedFwdCalib,
                              prMaxSpeedReducePercent := @sv_rMaxSpeedReducePercent,
                              iMaxSpeedDigitsToFloor := miDigitsToFloor,                              
                              prAbsFlow := @sv_HydrMaxValuesFwd.rAbsFlow,
                              bFwd := TRUE,
                              pCylinderData := @sv_CylinderData);

abUpdateRelLintabPreBwd.aInit(pLintabOut := @sv_LintabOutBwdP,
                              prMaxPressure := @sv_rMaxPressureBwd,
                              prMaxHydrPressure := @sv_HydrMaxValuesBwd.rMaxPressure,
                              bUseForce := TRUE,
                              bFwd := FALSE,
                              pCylinderData := @sv_CylinderData);

abUpdateRelLintabVelBwd.aInit(pLintabOut := @sv_LintabOutBwdV,
                              prMaxSpeed := @sv_rMaxSpeedBwd,
                              prMaxSpeedCalc := @sv_rMaxSpeedBwdCalc, 
                              prMaxSpeedCalib := @sv_rMaxSpeedBwdCalib,
                              prMaxSpeedReducePercent := @sv_rMaxSpeedReducePercent,
                              iMaxSpeedDigitsToFloor := miDigitsToFloor,                              
                              prAbsFlow := @sv_HydrMaxValuesBwd.rAbsFlow,
                              bFwd := FALSE,
                              pCylinderData := @sv_CylinderData);


;#END_EDIT_BLOCK END_ALGORITHM

(*
Calls depending on the MoveId and MoveDir the movementblock. g_MoveCtrl.MoveId/MoveDir are set by the Block ABControl after
evStart was received. The movement-block has to be called until the it returns abMoveXxx.aRun.bReady.
In case of hydraulic movements the output-request has to be done before starting the movement.
*)

PROCESS_ALGORITHM paRun ON TaskAnalog(5000)


VAR_TEMP
 dActFwdTime : TIME;
 b : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP START:
Action18 (P);
END_STEP

ACTION Action18: #BEGIN_EDIT_BLOCK
b := WRITE_SV_DIRECT(sv_bDeviceStart, sv_bFALSE);

;#END_EDIT_BLOCK END_ACTION (*Action18*)

(* steps *)
STEP OUTPUT_REQUEST:
AOutputRequest (P);
ACheckOutput (N);
END_STEP

ACTION AOutputRequest: #BEGIN_EDIT_BLOCK
abOutputRequest.aRequest(pMoveData := g_MoveCtrl.pData,
                         AnaOutputMode := nAnaOutputModeMid);

;#END_EDIT_BLOCK END_ACTION (*AOutputRequest*)
ACTION ACheckOutput: #BEGIN_EDIT_BLOCK
abOutputRequest.aCheck();

;#END_EDIT_BLOCK END_ACTION (*ACheckOutput*)
STEP OUTPUT:
END_STEP

STEP BWD:
aBwd (N);
END_STEP

STEP FWD:
aFwd (N);
END_STEP

STEP READY:
Action2 (P);
END_STEP

ACTION Action2: #BEGIN_EDIT_BLOCK
abOutputRequest.aRelease(pMoveData := g_MoveCtrl.pData);
g_MoveCtrl.bReady := TRUE;
IF NOT sv_bDeviceStart THEN
    STOP_PROCESS_ALGORITHM();
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action2*)

(* transitions *)
GO_ON_TRANSITION TStart (* Trans12 *) FROM START TO OUTPUT_REQUEST :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans13 (* Trans13 *) FROM OUTPUT_REQUEST TO READY :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.bStop
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans15 (* Trans15 *) FROM OUTPUT_REQUEST TO OUTPUT :=  #BEGIN_EDIT_BLOCK
abOutputRequest.aCheck.bReady
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans9 (* Trans9 *) FROM OUTPUT TO BWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir = cMoveBwd 
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TBwdReady (* Trans1 *) FROM BWD TO READY :=  #BEGIN_EDIT_BLOCK
abMoveBwd.aRun.bReady;
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans2 (* Trans2 *) FROM OUTPUT TO FWD :=  #BEGIN_EDIT_BLOCK
g_MoveCtrl.pData^.MoveDir = cMoveFwd
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TFwdReady (* Trans11 *) FROM FWD TO READY :=  #BEGIN_EDIT_BLOCK
abMoveFwd.aRun.bReady
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans8 (* Trans8 *) FROM READY TO START :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aBwd: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abMoveBwd.aRun(bStop := g_MoveCtrl.bStop);

;#END_EDIT_BLOCK END_ACTION (*aBwd*)
ACTION aFwd: #BEGIN_EDIT_BLOCK
abMoveFwd.aRun(bStop := g_MoveCtrl.bStop);

IF g_MoveCtrl.pData^.MoveId = cMoveFwdContactF THEN
   dActFwdTime := FWD.T;
   b := WRITE_SV_DIRECT(sv_dActFwdTime, dActFwdTime);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aFwd*)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pActiveProfileStage ON PU_Task_3 WITH sv_iActiveStage,sv_bDeviceReady

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bDeviceReady THEN
   
   IF sv_OperationMode = nSetup THEN
      //movement in setup mode active
      //-> reset active stage information
      sv_iActiveStageFwd := 0;
      sv_iActiveStageBwd := 0;
   ELSE
      
      //nozzle movement in manual - half - or fullauto mode 
      IF g_MoveCtrl.pData^.MoveDir = cMoveFwd THEN
   
         //reset bwd stage info if fwd movement is started
         sv_iActiveStageBwd := 0; 
         
         IF sv_iActiveStage > 0 THEN
            sv_iActiveStageFwd := sv_iActiveStage;
         END_IF;
          
      ELSIF g_MoveCtrl.pData^.MoveDir = cMoveBwd THEN
         
         //reset Fwd stage info if bwd movement is started
         sv_iActiveStageFwd := 0;
         
         IF sv_iActiveStage > 0 THEN
            sv_iActiveStageBwd := sv_iActiveStage;
         END_IF;
      END_IF;
   END_IF;
   
END_IF;





;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)WRITE_SV_DIRECT @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)cCompShutOffNozzle @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)138 @RT(28)Component Shutter for Nozzle 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)cSubOpNozzleTransducer @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(6)16#100 @RT(21)Nozzle has transducer 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cMoveFwdContactF @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)66 @RT(45)nozzle forward with building up contact force 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABMovementAdmin @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
41 
@Var @RT(9)abMoveBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)ABMoveBwd @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)abMoveFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)ABMoveFwd @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(12)Start Device @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)abOutputRequest @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABOutputRequest @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)ai_Position @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)sv_Options @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)tOptionId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_bTransducerAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)EV_Task_1 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)sv_iActiveStage @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iActiveStageFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)active profile stage mold close (fwd) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iActiveStageBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)active profile stage mold open (bwd) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_CalibState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsCalibMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_dActFwdTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(56)actual nozzle fwd time (includes contact force build up) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_RequiredPumpsFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_RequiredPumpsBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_HydrMaxValuesFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsHydrMaxValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)hydraulic max values for nozzle fwd @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_HydrMaxValuesBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsHydrMaxValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)hydraulic max values for nozzle bwd @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_LintabOutFwdP @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_LintabOutFwdV @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_LintabOutBwdP @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_LintabOutBwdV @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_rMaxSpeedFwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_rMaxSpeedBwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_CylinderData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsCylinderData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_rMaxPressureFwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_rMaxPressureBwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rMaxSpeedFwdCalc @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rMaxSpeedBwdCalc @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_rMaxSpeedFwdCalib @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_rMaxSpeedBwdCalib @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_rMaxSpeedReducePercent @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)miDigitsToFloor @RT(0) @T @F @DT @RT(4)SINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)2 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sv_bFALSE @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(18)abCalcMaxValuesFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)ABCalcHydrMaxValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)abCalcMaxValuesBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)ABCalcHydrMaxValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(12)pDeviceStart @STRUCTURED_TEXT 
@RT(0) @RT(15)sv_bDeviceStart @RT(9)EV_Task_1 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(21)pInitRelLintabUpdater @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(23)abUpdateRelLintabPreFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)ABUpdateRelLintabPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)abUpdateRelLintabVelFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)ABUpdateRelLintabVel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)abUpdateRelLintabPreBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)ABUpdateRelLintabPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)abUpdateRelLintabVelBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)ABUpdateRelLintabVel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(16)TaskAnalog(5000) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(11)dActFwdTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(19)pActiveProfileStage @STRUCTURED_TEXT 
@RT(0) @RT(31)sv_iActiveStage,sv_bDeviceReady @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(33)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
    
   //check if transducer is available
   sv_bTransducerAvailable := IS_LINKED(ai_Position);
   IF (sv_bTransducerAvailable) THEN
      sv_Options := sv_Options OR cSubOpNozzleTransducer;
      //set auto-calib transducer
      sv_CalibState.prInputSensor := @ai_Position;       
   END_IF;

   //register and init nozzle bwd movement    
   abMoveBwd.aRegister();
   abMoveBwd.aInit();
      
   //register and init nozzle fwd movement
   abMoveFwd.aRegister();
   abMoveFwd.aInit();
   
   //init calculation of hydraulic max values for nozzle fwd
   abCalcMaxValuesFwd.aInit(pRequiredPumps := @sv_RequiredPumpsFwd,
                            pHydrMaxValues := @sv_HydrMaxValuesFwd);

   //init calculation of hydraulic max values for nozzle bwd
   abCalcMaxValuesBwd.aInit(pRequiredPumps := @sv_RequiredPumpsBwd,
                            pHydrMaxValues := @sv_HydrMaxValuesBwd);
   
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Calls the registration-algo of every movementblock after the deviceregistration succeeded(sv_bInitStart->true)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceStart THEN
   //start device
   START_PROCESS_ALGORITHM(paRun);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Starts the algo paRun when sv_bDeviceStart is set by ABControl.
@@@END_Comment@@@ 

@BEG_Body 
@TL(39)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abUpdateRelLintabPreFwd.aInit(pLintabOut := @sv_LintabOutFwdP,
                              prMaxPressure := @sv_rMaxPressureFwd,
                              prMaxHydrPressure := @sv_HydrMaxValuesFwd.rMaxPressure,
                              bUseForce := TRUE,
                              bFwd := TRUE,
                              pCylinderData := @sv_CylinderData);

abUpdateRelLintabVelFwd.aInit(pLintabOut := @sv_LintabOutFwdV,
                              prMaxSpeed := @sv_rMaxSpeedFwd,
                              prMaxSpeedCalc := @sv_rMaxSpeedFwdCalc, 
                              prMaxSpeedCalib := @sv_rMaxSpeedFwdCalib,
                              prMaxSpeedReducePercent := @sv_rMaxSpeedReducePercent,
                              iMaxSpeedDigitsToFloor := miDigitsToFloor,                              
                              prAbsFlow := @sv_HydrMaxValuesFwd.rAbsFlow,
                              bFwd := TRUE,
                              pCylinderData := @sv_CylinderData);

abUpdateRelLintabPreBwd.aInit(pLintabOut := @sv_LintabOutBwdP,
                              prMaxPressure := @sv_rMaxPressureBwd,
                              prMaxHydrPressure := @sv_HydrMaxValuesBwd.rMaxPressure,
                              bUseForce := TRUE,
                              bFwd := FALSE,
                              pCylinderData := @sv_CylinderData);

abUpdateRelLintabVelBwd.aInit(pLintabOut := @sv_LintabOutBwdV,
                              prMaxSpeed := @sv_rMaxSpeedBwd,
                              prMaxSpeedCalc := @sv_rMaxSpeedBwdCalc, 
                              prMaxSpeedCalib := @sv_rMaxSpeedBwdCalib,
                              prMaxSpeedReducePercent := @sv_rMaxSpeedReducePercent,
                              iMaxSpeedDigitsToFloor := miDigitsToFloor,                              
                              prAbsFlow := @sv_HydrMaxValuesBwd.rAbsFlow,
                              bFwd := FALSE,
                              pCylinderData := @sv_CylinderData);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
19 18 21 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(5)START @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Action18 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
b := WRITE_SV_DIRECT(sv_bDeviceStart, sv_bFALSE);

@F 

@Trans @RT(6)TStart @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans12 @F 
@Step @RT(14)OUTPUT_REQUEST @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(14)AOutputRequest @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
abOutputRequest.aRequest(pMoveData := g_MoveCtrl.pData,
                         AnaOutputMode := nAnaOutputModeMid);

@F 
@Acb @RT(12)ACheckOutput @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
abOutputRequest.aCheck();

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans13 @F @T @F @F @T @T @TL(2)
g_MoveCtrl.bStop

@RT(7)Trans13 @F 

@TransSeq @RT(4)tseq @F 3 
@Trans @RT(7)Trans15 @F @T @F @F @T @F @TL(2)
abOutputRequest.aCheck.bReady

@RT(7)Trans15 @F 
@Step @RT(6)OUTPUT @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans9 @F @T @F @F @T @F @TL(2)
g_MoveCtrl.pData^.MoveDir = cMoveBwd 

@RT(6)Trans9 @F 
@Step @RT(3)BWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(4)aBwd @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(9)TBwdReady @F @T @F @F @T @F @TL(2)
abMoveBwd.aRun.bReady;

@RT(6)Trans1 @F 

@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans2 @F @T @F @F @T @F @TL(2)
g_MoveCtrl.pData^.MoveDir = cMoveFwd

@RT(6)Trans2 @F 
@Step @RT(3)FWD @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(4)aFwd @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(9)TFwdReady @F @T @F @F @T @F @TL(2)
abMoveFwd.aRun.bReady

@RT(7)Trans11 @F 




@Step @RT(5)READY @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action2 @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
abOutputRequest.aRelease(pMoveData := g_MoveCtrl.pData);
g_MoveCtrl.bReady := TRUE;
IF NOT sv_bDeviceStart THEN
    STOP_PROCESS_ALGORITHM();
END_IF;

@F 


@Trans @RT(6)Trans8 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans8 @F 

@END_SfcData 
@SaActions 2 
@SaText @RT(4)aBwd 1 @TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abMoveBwd.aRun(bStop := g_MoveCtrl.bStop);


@SaText @RT(4)aFwd 1 @TL(7)
abMoveFwd.aRun(bStop := g_MoveCtrl.bStop);

IF g_MoveCtrl.pData^.MoveId = cMoveFwdContactF THEN
   dActFwdTime := FWD.T;
   b := WRITE_SV_DIRECT(sv_dActFwdTime, dActFwdTime);
END_IF;


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(3)
Calls depending on the MoveId and MoveDir the movementblock. g_MoveCtrl.MoveId/MoveDir are set by the Block ABControl after
evStart was received. The movement-block has to be called until the it returns abMoveXxx.aRun.bReady.
In case of hydraulic movements the output-request has to be done before starting the movement.
@@@END_Comment@@@ 

@BEG_Body 
@TL(40)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bDeviceReady THEN
   
   IF sv_OperationMode = nSetup THEN
      //movement in setup mode active
      //-> reset active stage information
      sv_iActiveStageFwd := 0;
      sv_iActiveStageBwd := 0;
   ELSE
      
      //nozzle movement in manual - half - or fullauto mode 
      IF g_MoveCtrl.pData^.MoveDir = cMoveFwd THEN
   
         //reset bwd stage info if fwd movement is started
         sv_iActiveStageBwd := 0; 
         
         IF sv_iActiveStage > 0 THEN
            sv_iActiveStageFwd := sv_iActiveStage;
         END_IF;
          
      ELSIF g_MoveCtrl.pData^.MoveDir = cMoveBwd THEN
         
         //reset Fwd stage info if bwd movement is started
         sv_iActiveStageFwd := 0;
         
         IF sv_iActiveStage > 0 THEN
            sv_iActiveStageBwd := sv_iActiveStage;
         END_IF;
      END_IF;
   END_IF;
   
END_IF;




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
