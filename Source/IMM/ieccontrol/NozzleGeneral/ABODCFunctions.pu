(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Following functions are implemented in this AB
- react on changes of nozzle backward mode 
  (trigger new creation of machine sequence)
- set references to calculated duration depending on the selected movement mode
- trigger update of editor after a chage of calculated duration
- maintainance of nozzle state (fwd, bwd or middle)
- set init position for graphical editor
- lock half and fullauto cycle if no nozzle movement is programmed and nozzle is not fwd


@FunctionID: S_FU_04
@FunctionID: S_ALLG_09
*)

IMPORT_OVER_LISTFILE
 GET_MY_FU_NAME
, cCompOperationMode
, tnNozzleBackMode
, tsMoveData
, tnMovementMode
, tsSetTimes
, tsAddDeviceInfo
, KAPPL_VisProfile
, tsDeviceId
, tnOperationMode
, tyNumberOfDevices
, KHW_Servo_Data
, FBUpdateEditorProperties
, tnInitPosition
, KSYS_Status
, FBLockUnlock

END_IMPORT

ALGORITHM_BLOCK ABODCFunctions #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bProgramSwitchChanged : BOOL (* TRUE if ODC sequence should be reinitialized because a program switch changed *);
 sv_NozzleBwdMode : tnNozzleBackMode;
 sv_dNozzleFwdStage2Set : TIME (* time for output of nozzle fwd movement after limitswitch is touched *);
 sv_iEditorPropertiesChanged : DINT (* must be increased if properties, that are relevant for ODC editor, changed *);
 sv_bInitStart : BOOL;
 sv_MoveBwdNozzle : tsMoveData;
 sv_rNozzleStroke : REAL;
 sv_MovementMode : tnMovementMode (* Nozzle Movement with Limitswitch or with position measurement *);
 sv_dCalculatedDurationFwd : TIME (* Calculated duration for nozzle fwd *);
 sv_dCalculatedDurationBwd : TIME (* Calculated duration for nozzle bwd *);
 sv_dMoveBwdTimeSet : TIME (* time of nozzle bwd movement in manual mode *);
 sv_NozzleBwdTimesSet : tsSetTimes (* set times for nozzle bwd *);
 sv_NozzleFwdTimesSet : tsSetTimes (* set times for nozzle fwd *);
 sv_AddDeviceInfo : tsAddDeviceInfo;
 sv_rNozzlePosition : REAL;
 sv_NozzleFwdProfVis : KAPPL_VisProfile (* profile of nozzle fwd movement *);
 sv_NozzleBwdProfVis : KAPPL_VisProfile (* profile of nozzle bwd movement *);
 ai_Position : REAL;
 sv_bInitDone : BOOL;
 sv_bNozzleFwd : BOOL;
 sv_bNozzleBwd : BOOL;
 sv_iActState : DINT (* actual state (used for displaying a text in odc editor) *);
 sv_MoveFwdNozzle : tsMoveData;
 sv_DeviceId : tsDeviceId;
 sv_OperationMode : tnOperationMode;
 sv_NumberOfDevices : tyNumberOfDevices;
 sv_dCalcDurationFwdContactF : TIME (* Calculated duration for nozzle fwd *);
 sv_KHW_Servo_actValue : KHW_Servo_Data;
 sv_MoveFwdContactF : tsMoveData;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 PU_Task_13 : TASK;
 erNozzleNotFwd : ALARM;
END_OBJECT

VAR
 mpAddDeviceInfo : REFTO tsAddDeviceInfo (* refto AddDeviceIinfo of function unit in sv_ODCDeviceMovements *);
 mpiActiveEditors : REFTO DINT;
 mpiODCSequenceUpdated : REFTO DINT;
END_VAR

POSTUPDATE_ALGORITHM pNozzleBackMode ON PU_Task_7 WITH sv_NozzleBwdMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//new sequence must be created
sv_bProgramSwitchChanged := TRUE;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(ai_Position) OR IS_LINKED(sv_KHW_Servo_actValue) THEN
   //use act value from transducer if it is available
   sv_AddDeviceInfo.prActValue := @sv_rNozzlePosition;   
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMovementMode ON PU_Task_7 WITH sv_MovementMode,sv_bInitDone

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_MovementMode = nMoveTimeDependent THEN 
   //set listgroups to add set times to sequencer properties
   sv_MoveBwdNozzle.EditorData.sLGInstanceProperties := 'LG_NozzleBwd';
   sv_MoveFwdNozzle.EditorData.sLGInstanceProperties := 'LG_NozzleFwd';

   sv_MoveFwdContactF.EditorData.sLGInstanceProperties := 'LG_NozzleFwd;LG_NozzleForceBuildup';
   
   //set correct target value
   sv_MoveBwdNozzle.prTargetValue := @sv_NozzleBwdProfVis.Profile.Points[sv_NozzleFwdProfVis.Profile.iNoOfPoints+1].rStartPos;
ELSE
   //delete listgroups   
   sv_MoveBwdNozzle.EditorData.sLGInstanceProperties := '';
   sv_MoveFwdNozzle.EditorData.sLGInstanceProperties := '';
   
   sv_MoveFwdContactF.EditorData.sLGInstanceProperties := 'LG_NozzleForceBuildup';

   //set correct target value
   sv_MoveBwdNozzle.prTargetValue := @sv_rNozzleStroke;
END_IF;

sv_iEditorPropertiesChanged := sv_iEditorPropertiesChanged + 1;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pDurationChanged ON PU_Task_13 WITH sv_dCalculatedDurationFwd,sv_dCalculatedDurationBwd,sv_dNozzleFwdStage2Set,sv_dMoveBwdTimeSet,sv_NozzleFwdTimesSet.dSetDelayTime,sv_NozzleBwdTimesSet.dSetDelayTime,sv_dCalcDurationFwdContactF


VAR
 fbUpdateProperties : FBUpdateEditorProperties;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbUpdateProperties();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pNozzleState ON PU_Task_7 WITH sv_bInitDone,sv_bNozzleFwd,sv_bNozzleBwd

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bNozzleFwd THEN
   //nozzle fwd
   sv_iActState := 0;
ELSIF sv_bNozzleBwd THEN
   //nozzle bwd
   sv_iActState := 1;
ELSE
   //nozzle in "middle" position
   sv_iActState := 2;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSetInitPosition


VAR_TEMP
 newInitPosition : tnInitPosition;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpiActiveEditors^ > 0 THEN
   //teachmode active -> set init pos to maximum
   IF mpAddDeviceInfo^.InitPosition <> nInitPosMaximum THEN
      //only send properties changed if InitPosition really changed
      mpAddDeviceInfo^.InitPosition := nInitPosMaximum;
      sv_iEditorPropertiesChanged := sv_iEditorPropertiesChanged + 1; 
   END_IF;
   RETURN;
END_IF;

IF sv_MoveBwdNozzle.bProgrammedInSequence OR sv_MoveFwdNozzle.bProgrammedInSequence THEN
   newInitPosition := nInitPosMaximum;
ELSE
   //no nozzle movement programmed in sequence
   newInitPosition := nInitPosMinimum;
END_IF;

IF mpAddDeviceInfo^.InitPosition <> newInitPosition THEN
   //only send properties changed if InitPosition really changed
   mpAddDeviceInfo^.InitPosition := newInitPosition;
   sv_iEditorPropertiesChanged := sv_iEditorPropertiesChanged + 1;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pSequenceChanged ON PU_Task_7 WITH mpiODCSequenceUpdated^,mpiActiveEditors^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aSetInitPosition();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON PU_Task_7 WITH sv_bInitDone


VAR_TEMP
 i : DINT;
END_VAR

VAR
 pDeviceId : REFTO tsDeviceId;
 sVarName : STRING(255);
 state : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_NumberOfDevices[cCompODC] = 0 THEN
   // odc function unit not registered
   RETURN;
END_IF;


//get reference to sv_iActiveEditors
mpiActiveEditors := GET_SYNC_REFTO('ODC1.sv_iActiveEditors', T#0s, state);
mpiODCSequenceUpdated := GET_SYNC_REFTO('ODC1.sv_iODCSequenceUpdated', T#0s, state);

//get reference to AddDeviceInfo
FOR i := 1 TO cMaxMoveDevicesRegistered DO
   sVarName := CONCAT('ODC1.sv_ODCDeviceMovements.Devices[',DINT_TO_STRING(i),'].DeviceId');
   pDeviceId := GET_SYNC_REFTO(sVarName, T#0s, state);
   IF pDeviceId^ = sv_DeviceId THEN
      sVarName := CONCAT('ODC1.sv_ODCDeviceMovements.Devices[',DINT_TO_STRING(i),'].AddDeviceInfo');
      mpAddDeviceInfo := GET_SYNC_REFTO(sVarName, T#0s, state);
      EXIT;
   END_IF;
END_FOR;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLockUnlockOpMode ON PU_Task_7 WITH sv_bNozzleFwd,mpiODCSequenceUpdated^


VAR
 fbLockUnlock : FBLockUnlock;
 bInitDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   //avoid lock/unlock events before sv_bInitDone
   RETURN;
END_IF;

IF NOT bInitDone THEN
   fbLockUnlock.DeviceId.CompId := cCompOperationMode;
   fbLockUnlock.DeviceId.IndexId := 1;
   fbLockUnlock.Alarm.AlarmId := erNozzleNotFwd;
   fbLockUnlock.Alarm.SubId[1] := sv_DeviceId.CompId;
   fbLockUnlock.Alarm.SubId[2] := sv_DeviceId.IndexId;
   bInitDone := TRUE;
END_IF;

IF sv_OperationMode >= nHalfAutomatic THEN
   RETURN;
END_IF;

IF (NOT sv_MoveFwdNozzle.bProgrammedInSequence) AND (NOT sv_MoveFwdContactF.bProgrammedInSequence)
   AND (NOT sv_MoveBwdNozzle.bProgrammedInSequence) THEN
   //no nozzle movement programmed in sequence
   IF sv_bNozzleFwd THEN
      //nozzle is fwd -> allow half and fullauto
      fbLockUnlock.Mode := nUnlock;
   ELSE
      //nozzle not fwd -> lock half and fullauto cycle
      fbLockUnlock.Mode := nLockAbort;
   END_IF;
ELSE
   fbLockUnlock.Mode := nUnlock;
END_IF;

fbLockUnlock(MoveDir := cModeAutomatic,
             MoveId := cModeAutomatic);


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Following functions are implemented in this AB
- react on changes of nozzle backward mode 
  (trigger new creation of machine sequence)
- set references to calculated duration depending on the selected movement mode
- trigger update of editor after a chage of calculated duration
- maintainance of nozzle state (fwd, bwd or middle)
- set init position for graphical editor
- lock half and fullauto cycle if no nozzle movement is programmed and nozzle is not fwd


@FunctionID: S_FU_04
@FunctionID: S_ALLG_09
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(14)GET_MY_FU_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(18)cCompOperationMode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)111 @RT(24)Component Operation Mode 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABODCFunctions @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
35 
@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)sv_bProgramSwitchChanged @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(77)TRUE if ODC sequence should be reinitialized because a program switch changed @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_NozzleBwdMode @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(16)tnNozzleBackMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_dNozzleFwdStage2Set @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(67)time for output of nozzle fwd movement after limitswitch is touched @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(27)sv_iEditorPropertiesChanged @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(74)must be increased if properties, that are relevant for ODC editor, changed @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_MoveBwdNozzle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_rNozzleStroke @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_MovementMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tnMovementMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(61)Nozzle Movement with Limitswitch or with position measurement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_dCalculatedDurationFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)Calculated duration for nozzle fwd @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_dCalculatedDurationBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)Calculated duration for nozzle bwd @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_dMoveBwdTimeSet @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)time of nozzle bwd movement in manual mode @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_NozzleBwdTimesSet @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)set times for nozzle bwd @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_NozzleFwdTimesSet @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)set times for nozzle fwd @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_AddDeviceInfo @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsAddDeviceInfo @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_rNozzlePosition @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_NozzleFwdProfVis @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_VisProfile @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)profile of nozzle fwd movement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_NozzleBwdProfVis @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_VisProfile @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)profile of nozzle bwd movement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)ai_Position @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bNozzleFwd @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bNozzleBwd @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_iActState @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(55)actual state (used for displaying a text in odc editor) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_MoveFwdNozzle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)mpAddDeviceInfo @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsAddDeviceInfo @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(62)refto AddDeviceIinfo of function unit in sv_ODCDeviceMovements @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mpiActiveEditors @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mpiODCSequenceUpdated @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)erNozzleNotFwd @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(27)sv_dCalcDurationFwdContactF @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)Calculated duration for nozzle fwd @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_KHW_Servo_actValue @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)KHW_Servo_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_MoveFwdContactF @RT(0) @T @T @DERIVED 0 @F @RT(10)tsMoveData @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

9 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pNozzleBackMode @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_NozzleBwdMode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pMovementMode @STRUCTURED_TEXT 
@RT(0) @RT(28)sv_MovementMode,sv_bInitDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pDurationChanged @STRUCTURED_TEXT 
@RT(0) @RT(191)sv_dCalculatedDurationFwd,sv_dCalculatedDurationBwd,sv_dNozzleFwdStage2Set,sv_dMoveBwdTimeSet,sv_NozzleFwdTimesSet.dSetDelayTime,sv_NozzleBwdTimesSet.dSetDelayTime,sv_dCalcDurationFwdContactF @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbUpdateProperties @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(24)FBUpdateEditorProperties @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(12)pNozzleState @STRUCTURED_TEXT 
@RT(0) @RT(40)sv_bInitDone,sv_bNozzleFwd,sv_bNozzleBwd @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aSetInitPosition @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(15)newInitPosition @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tnInitPosition @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pSequenceChanged @STRUCTURED_TEXT 
@RT(0) @RT(40)mpiODCSequenceUpdated^,mpiActiveEditors^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(9)pDeviceId @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(8)sVarName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)state @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pLockUnlockOpMode @STRUCTURED_TEXT 
@RT(0) @RT(36)sv_bNozzleFwd,mpiODCSequenceUpdated^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//new sequence must be created
sv_bProgramSwitchChanged := TRUE;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF IS_LINKED(ai_Position) OR IS_LINKED(sv_KHW_Servo_actValue) THEN
   //use act value from transducer if it is available
   sv_AddDeviceInfo.prActValue := @sv_rNozzlePosition;   
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(28)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_MovementMode = nMoveTimeDependent THEN 
   //set listgroups to add set times to sequencer properties
   sv_MoveBwdNozzle.EditorData.sLGInstanceProperties := 'LG_NozzleBwd';
   sv_MoveFwdNozzle.EditorData.sLGInstanceProperties := 'LG_NozzleFwd';

   sv_MoveFwdContactF.EditorData.sLGInstanceProperties := 'LG_NozzleFwd;LG_NozzleForceBuildup';
   
   //set correct target value
   sv_MoveBwdNozzle.prTargetValue := @sv_NozzleBwdProfVis.Profile.Points[sv_NozzleFwdProfVis.Profile.iNoOfPoints+1].rStartPos;
ELSE
   //delete listgroups   
   sv_MoveBwdNozzle.EditorData.sLGInstanceProperties := '';
   sv_MoveFwdNozzle.EditorData.sLGInstanceProperties := '';
   
   sv_MoveFwdContactF.EditorData.sLGInstanceProperties := 'LG_NozzleForceBuildup';

   //set correct target value
   sv_MoveBwdNozzle.prTargetValue := @sv_rNozzleStroke;
END_IF;

sv_iEditorPropertiesChanged := sv_iEditorPropertiesChanged + 1;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbUpdateProperties();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bNozzleFwd THEN
   //nozzle fwd
   sv_iActState := 0;
ELSIF sv_bNozzleBwd THEN
   //nozzle bwd
   sv_iActState := 1;
ELSE
   //nozzle in "middle" position
   sv_iActState := 2;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpiActiveEditors^ > 0 THEN
   //teachmode active -> set init pos to maximum
   IF mpAddDeviceInfo^.InitPosition <> nInitPosMaximum THEN
      //only send properties changed if InitPosition really changed
      mpAddDeviceInfo^.InitPosition := nInitPosMaximum;
      sv_iEditorPropertiesChanged := sv_iEditorPropertiesChanged + 1; 
   END_IF;
   RETURN;
END_IF;

IF sv_MoveBwdNozzle.bProgrammedInSequence OR sv_MoveFwdNozzle.bProgrammedInSequence THEN
   newInitPosition := nInitPosMaximum;
ELSE
   //no nozzle movement programmed in sequence
   newInitPosition := nInitPosMinimum;
END_IF;

IF mpAddDeviceInfo^.InitPosition <> newInitPosition THEN
   //only send properties changed if InitPosition really changed
   mpAddDeviceInfo^.InitPosition := newInitPosition;
   sv_iEditorPropertiesChanged := sv_iEditorPropertiesChanged + 1;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aSetInitPosition();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_NumberOfDevices[cCompODC] = 0 THEN
   // odc function unit not registered
   RETURN;
END_IF;


//get reference to sv_iActiveEditors
mpiActiveEditors := GET_SYNC_REFTO('ODC1.sv_iActiveEditors', T#0s, state);
mpiODCSequenceUpdated := GET_SYNC_REFTO('ODC1.sv_iODCSequenceUpdated', T#0s, state);

//get reference to AddDeviceInfo
FOR i := 1 TO cMaxMoveDevicesRegistered DO
   sVarName := CONCAT('ODC1.sv_ODCDeviceMovements.Devices[',DINT_TO_STRING(i),'].DeviceId');
   pDeviceId := GET_SYNC_REFTO(sVarName, T#0s, state);
   IF pDeviceId^ = sv_DeviceId THEN
      sVarName := CONCAT('ODC1.sv_ODCDeviceMovements.Devices[',DINT_TO_STRING(i),'].AddDeviceInfo');
      mpAddDeviceInfo := GET_SYNC_REFTO(sVarName, T#0s, state);
      EXIT;
   END_IF;
END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(40)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   //avoid lock/unlock events before sv_bInitDone
   RETURN;
END_IF;

IF NOT bInitDone THEN
   fbLockUnlock.DeviceId.CompId := cCompOperationMode;
   fbLockUnlock.DeviceId.IndexId := 1;
   fbLockUnlock.Alarm.AlarmId := erNozzleNotFwd;
   fbLockUnlock.Alarm.SubId[1] := sv_DeviceId.CompId;
   fbLockUnlock.Alarm.SubId[2] := sv_DeviceId.IndexId;
   bInitDone := TRUE;
END_IF;

IF sv_OperationMode >= nHalfAutomatic THEN
   RETURN;
END_IF;

IF (NOT sv_MoveFwdNozzle.bProgrammedInSequence) AND (NOT sv_MoveFwdContactF.bProgrammedInSequence)
   AND (NOT sv_MoveBwdNozzle.bProgrammedInSequence) THEN
   //no nozzle movement programmed in sequence
   IF sv_bNozzleFwd THEN
      //nozzle is fwd -> allow half and fullauto
      fbLockUnlock.Mode := nUnlock;
   ELSE
      //nozzle not fwd -> lock half and fullauto cycle
      fbLockUnlock.Mode := nLockAbort;
   END_IF;
ELSE
   fbLockUnlock.Mode := nUnlock;
END_IF;

fbLockUnlock(MoveDir := cModeAutomatic,
             MoveId := cModeAutomatic);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
