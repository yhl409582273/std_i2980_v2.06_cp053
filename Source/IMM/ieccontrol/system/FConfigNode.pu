(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


*)

IMPORT_OVER_LISTFILE
 KCAT_GetValue
, KCAT_Status
, KSYS_Status
, KCAT_HandleData
, tnMotorType
, tnMovementMode

END_IMPORT

FUNCTION FConfigNode : KCAT_Status #DUMMY_EDIT_BLOCK

VAR_INPUT
 sPath : STRING(255);
 sSVName : STRING(255);
 iType : DINT (* datatype (0:UDINT, 1:REAL, 2:DINT) *);
END_VAR

VAR
 st : KSYS_Status;
 puValue : REFTO UDINT;
 prValue : REFTO REAL;
 piValue : REFTO DINT;
 HandleData : KCAT_HandleData;
 Status : KCAT_Status;
 uValue : UDINT;
 rValue : LREAL;
 iValue : DINT;
 pMoldAdjMotorType : REFTO tnMotorType;
 pNozzleMovementMode : REFTO tnMovementMode;
END_VAR
#BEGIN_EDIT_BLOCK

HandleData:=KCAT_GetHandle(sPath);
IF HandleData.Status<>KCAT_Status_OK THEN
  RETURN;
END_IF;

CASE iType OF 
   
   0: // UDINT    
     Status:=KCAT_GetValue(HandleData.Handle, uValue);
     IF Status = KCAT_Status_OK THEN
         puValue := GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            puValue^:=uValue;     
         END_IF;
     END_IF;     
   
   1: // REAL    
     Status:=KCAT_GetValue(HandleData.Handle, rValue);
     IF Status = KCAT_Status_OK THEN
         prValue:=GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            prValue^:=LREAL_TO_REAL(rValue);     
         END_IF;     
     END_IF;
   
   2: // DINT    
     Status:=KCAT_GetValue(HandleData.Handle, iValue);
     IF Status = KCAT_Status_OK THEN
         piValue := GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            piValue^:=iValue;     
         END_IF;
     END_IF;
   
   3: // tnMotorType (mold adjust motor type)
     Status:=KCAT_GetValue(HandleData.Handle, iValue);
     IF Status = KCAT_Status_OK THEN
         pMoldAdjMotorType := GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            IF iValue = 0 THEN
               pMoldAdjMotorType^ := nHydraulic; //hydraulic mold adjust motor
            ELSIF iValue = 1 THEN
               pMoldAdjMotorType^ := nElectric; //electric mold adjust motor;
            END_IF;    
         END_IF;
      END_IF;
   
   4: // tnMovementMode (nozzle movement mode)
     Status:=KCAT_GetValue(HandleData.Handle, iValue);
     IF Status = KCAT_Status_OK THEN
           pNozzleMovementMode := GET_SYNC_REFTO(sSVName, T#0s, st);
           IF st = KSYS_Status_OK THEN
              IF iValue = 0 THEN
                 pNozzleMovementMode^ := nPositionDependent; //position dependent
              ELSIF iValue = 1 THEN
                 pNozzleMovementMode^ := nLimitSwitchDependent; //limit switch dependent;
              ELSIF iValue = 2 THEN
                 pNozzleMovementMode^ := nMoveTimeDependent; //time dependent;
              END_IF;
           END_IF;
      END_IF;
   
ELSE
   ;
END_CASE;

FConfigNode:=Status;


;#END_EDIT_BLOCK END_FUNCTION



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(13)KCAT_GetValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION @RT(11)FConfigNode @STRUCTURED_TEXT 
@RT(11)KCAT_Status @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
14 
@Var @RT(5)sPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)sSVName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)iType @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)datatype (0:UDINT, 1:REAL, 2:DINT) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(2)st @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)puValue @RT(0) @T @T @REFTO 0 @T @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)prValue @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)piValue @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)HandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)uValue @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)rValue @RT(0) @T @F @DT @RT(5)LREAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)iValue @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)pMoldAdjMotorType @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(11)tnMotorType @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)pNozzleMovementMode @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(14)tnMovementMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(69)

HandleData:=KCAT_GetHandle(sPath);
IF HandleData.Status<>KCAT_Status_OK THEN
  RETURN;
END_IF;

CASE iType OF 
   
   0: // UDINT    
     Status:=KCAT_GetValue(HandleData.Handle, uValue);
     IF Status = KCAT_Status_OK THEN
         puValue := GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            puValue^:=uValue;     
         END_IF;
     END_IF;     
   
   1: // REAL    
     Status:=KCAT_GetValue(HandleData.Handle, rValue);
     IF Status = KCAT_Status_OK THEN
         prValue:=GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            prValue^:=LREAL_TO_REAL(rValue);     
         END_IF;     
     END_IF;
   
   2: // DINT    
     Status:=KCAT_GetValue(HandleData.Handle, iValue);
     IF Status = KCAT_Status_OK THEN
         piValue := GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            piValue^:=iValue;     
         END_IF;
     END_IF;
   
   3: // tnMotorType (mold adjust motor type)
     Status:=KCAT_GetValue(HandleData.Handle, iValue);
     IF Status = KCAT_Status_OK THEN
         pMoldAdjMotorType := GET_SYNC_REFTO(sSVName, T#0s, st);
         IF st = KSYS_Status_OK THEN
            IF iValue = 0 THEN
               pMoldAdjMotorType^ := nHydraulic; //hydraulic mold adjust motor
            ELSIF iValue = 1 THEN
               pMoldAdjMotorType^ := nElectric; //electric mold adjust motor;
            END_IF;    
         END_IF;
      END_IF;
   
   4: // tnMovementMode (nozzle movement mode)
     Status:=KCAT_GetValue(HandleData.Handle, iValue);
     IF Status = KCAT_Status_OK THEN
           pNozzleMovementMode := GET_SYNC_REFTO(sSVName, T#0s, st);
           IF st = KSYS_Status_OK THEN
              IF iValue = 0 THEN
                 pNozzleMovementMode^ := nPositionDependent; //position dependent
              ELSIF iValue = 1 THEN
                 pNozzleMovementMode^ := nLimitSwitchDependent; //limit switch dependent;
              ELSIF iValue = 2 THEN
                 pNozzleMovementMode^ := nMoveTimeDependent; //time dependent;
              END_IF;
           END_IF;
      END_IF;
   
ELSE
   ;
END_CASE;

FConfigNode:=Status;

@END_Body 

@END_Contents 
@@@BEG_Password@@@
M2hzZmhrMw==
@@@END_Password@@@
