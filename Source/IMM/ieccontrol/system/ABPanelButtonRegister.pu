IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, tevPanelButtonRegister
, tyPanelButton
, tsTraceLevel
, tevPanelButtonRegisterData
, tsPanelButton

END_IMPORT

ALGORITHM_BLOCK ABPanelButtonRegister #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_PanelButtons : tyPanelButton;
 sv_iPanelButtonCnt : DINT;
 sv_bUsePanelHeartbeat : BOOL;
 sv_iPanelHeartbeat : DINT;
 sv_iPanelMovementSelector : DINT;
 sv_iPanelHeartbeatInterval : DINT;
 sv_iPanelHeartbeatTolerance : DINT;
 sv_TraceLevel : tsTraceLevel;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 evPanelButtonRegister : tevPanelButtonRegister;
 EV_Task_3 : TASK;
 PU_Task_3 : TASK;
 PU_Task_7 : TASK;
 TaskMid : TASK;
END_OBJECT

VAR
 miAliveTicks : DINT (* Cycles to check alive flag *);
 mpbActionVar1 : REFTO BOOL;
 mpbActionVar2 : REFTO BOOL;
END_VAR

(*
get instance data if start event is received

attention:
taskslot is asigned to make sure that execution is done before evaStart in ABControl.pu
*)

EVENT_ALGORITHM evaRegisterPanelButton ON EV_Task_3(50) WITH evPanelButtonRegister


VAR_INPUT
 EventData : tevPanelButtonRegisterData;
END_VAR

VAR
 dummy : DINT;
 sText : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_iPanelButtonCnt >= cMaxPanelButtons THEN
    IF sv_TraceLevel.bApplication THEN
       sText := CONCAT('ABPanelButtonRegister: number of panel buttons exceeded maximum, omitting button from component %d/%d', 
                   DINT_TO_STRING(EventData.Button.iCompId), DINT_TO_STRING(EventData.Button.iIndexId));
       dummy := Print(sText);
    END_IF;       
    RETURN;
END_IF;
// This array contains all possible movements/actions that can be used within an HMI application.
// The HMI can read this array in order to dynamically create a HMI machine operation panel on
// the visualisation system.
sv_iPanelButtonCnt := sv_iPanelButtonCnt + 1;
sv_PanelButtons[sv_iPanelButtonCnt] := EventData.Button;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMoveSelectorChanged ON PU_Task_7 WITH sv_iPanelMovementSelector


VAR
 Button : tsPanelButton;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_iPanelMovementSelector > 0) THEN                        
   Button := sv_PanelButtons[sv_iPanelMovementSelector];
   mpbActionVar1 := Button.pbActionVar1;
   mpbActionVar2 := Button.pbActionVar2;
ELSE
   mpbActionVar1 := EMPTY;
   mpbActionVar2 := EMPTY;           
END_IF;
                 


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paCheckHeartbeat ON TaskMid


VAR
 bTimeout : BOOL;
 bOutputActive : BOOL;
 iHeartbeat : DINT;
 bAlive : BOOL;
 iCnt : DINT;
 dummy : DINT;
 sText : STRING(255);
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Idle:
Action1 (P);
Output_Active (N);
END_STEP

ACTION Action1: #BEGIN_EDIT_BLOCK
bTimeout := FALSE


;#END_EDIT_BLOCK END_ACTION (*Action1*)
ACTION Output_Active: #BEGIN_EDIT_BLOCK
IF (mpbActionVar1 = EMPTY OR mpbActionVar2 = EMPTY) THEN
   bOutputActive := FALSE;
ELSE   
   bOutputActive := mpbActionVar1^ = TRUE OR mpbActionVar2^ = TRUE;
END_IF;   

;#END_EDIT_BLOCK END_ACTION (*Output_Active*)

(* steps *)
STEP S_OutputActive:
Action2 (P);
Check_Heartbeat (N);
END_STEP

ACTION Action2: #BEGIN_EDIT_BLOCK
iHeartbeat := sv_iPanelHeartbeat;
bAlive := TRUE;
iCnt := 0;

;#END_EDIT_BLOCK END_ACTION (*Action2*)
ACTION Check_Heartbeat: #BEGIN_EDIT_BLOCK
IF (mpbActionVar1 = EMPTY AND mpbActionVar2 = EMPTY) THEN
   bOutputActive := FALSE;
ELSE   
   bOutputActive := FALSE;
   IF (mpbActionVar1 <> EMPTY) THEN
      bOutputActive := mpbActionVar1^;
   END_IF;
   IF (NOT bOutputActive AND mpbActionVar2 <> EMPTY) THEN
      bOutputActive := mpbActionVar2^;
   END_IF;                            

   IF (sv_iPanelHeartbeat <> iHeartbeat) THEN
      (* heartbeat counter changed while output active *)
      bAlive := TRUE;  
      iHeartbeat := sv_iPanelHeartbeat;
      iCnt := 0;
   ELSE
      iCnt := iCnt + 1;
      IF iCnt > miAliveTicks THEN
         bAlive := FALSE;  
      END_IF;
   END_IF;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Check_Heartbeat*)
STEP S_Timeout:
Reset_IO (N);
END_STEP

ACTION Reset_IO: #BEGIN_EDIT_BLOCK
(* Safety reset *)
IF (mpbActionVar1 <> EMPTY) THEN
   mpbActionVar1^ := FALSE;
END_IF;
IF (mpbActionVar2 <> EMPTY) THEN
   mpbActionVar2^ := FALSE;
END_IF;
IF sv_TraceLevel.bApplication THEN
   sText := CONCAT('HMI timeout, output was reset by heartbeat detection, ticks detected ', 
                        DINT_TO_STRING(iCnt), 
                        ', maximum ', 
                        DINT_TO_STRING(miAliveTicks));
   dummy := Print(sText);
END_IF;            

;#END_EDIT_BLOCK END_ACTION (*Reset_IO*)

(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM S_Idle TO S_OutputActive :=  #BEGIN_EDIT_BLOCK
bOutputActive = TRUE

;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans3 (* Trans3 *) FROM S_OutputActive TO S_Idle :=  #BEGIN_EDIT_BLOCK
NOT bOutputActive
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION HMI_Disconnected (* Trans2 *) FROM S_OutputActive TO S_Timeout :=  #BEGIN_EDIT_BLOCK
bAlive = FALSE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans4 (* Trans4 *) FROM S_Timeout TO S_Idle :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
// ACTION Action3: #BEGIN_EDIT_BLOCK


// ;#END_EDIT_BLOCK END_ACTION (*Action3*)
(* end sfc-code *)


END_ALGORITHM

ALGORITHM aSetHeartbeatInterval


VAR
 iInterval : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(* Currently checked in TaskMid *)
iInterval := LINT_TO_DINT(TIME_TO_LINT(GET_TASK_INTERVAL(TaskMid))/1000);

IF sv_iPanelHeartbeatInterval < iInterval THEN
   sv_iPanelHeartbeatInterval := iInterval;
END_IF;

miAliveTicks := (sv_iPanelHeartbeatInterval + sv_iPanelHeartbeatTolerance)/(iInterval);




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pHeartbeatInterval ON PU_Task_7 WITH sv_iPanelHeartbeatInterval, sv_iPanelHeartbeatTolerance

#BEGIN_EDIT_BLOCK

aSetHeartbeatInterval();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInit ON PU_Task_3 WITH sv_bInitDone, sv_bUsePanelHeartbeat

#BEGIN_EDIT_BLOCK

aSetHeartbeatInterval();
IF (sv_bUsePanelHeartbeat) THEN
   START_PROCESS_ALGORITHM(paCheckHeartbeat);
ELSE
   STOP_PROCESS_ALGORITHM(paCheckHeartbeat);  
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 150 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(21)ABPanelButtonRegister @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
17 
@Var @RT(21)evPanelButtonRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevPanelButtonRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)sv_PanelButtons @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tyPanelButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iPanelButtonCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)sv_bUsePanelHeartbeat @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iPanelHeartbeat @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_iPanelMovementSelector @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)sv_iPanelHeartbeatInterval @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(27)sv_iPanelHeartbeatTolerance @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @F @RT(12)tsTraceLevel @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)miAliveTicks @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)Cycles to check alive flag @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mpbActionVar1 @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mpbActionVar2 @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(22)evaRegisterPanelButton @STRUCTURED_TEXT 
@RT(0) @RT(21)evPanelButtonRegister @RT(13)EV_Task_3(50) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(9)EventData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevPanelButtonRegisterData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sText @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pMoveSelectorChanged @STRUCTURED_TEXT 
@RT(0) @RT(25)sv_iPanelMovementSelector @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Button @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsPanelButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paCheckHeartbeat @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(8)bTimeout @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)bOutputActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)iHeartbeat @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bAlive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sText @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(21)aSetHeartbeatInterval @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(9)iInterval @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(18)pHeartbeatInterval @STRUCTURED_TEXT 
@RT(0) @RT(55)sv_iPanelHeartbeatInterval, sv_iPanelHeartbeatTolerance @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(35)sv_bInitDone, sv_bUsePanelHeartbeat @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_iPanelButtonCnt >= cMaxPanelButtons THEN
    IF sv_TraceLevel.bApplication THEN
       sText := CONCAT('ABPanelButtonRegister: number of panel buttons exceeded maximum, omitting button from component %d/%d', 
                   DINT_TO_STRING(EventData.Button.iCompId), DINT_TO_STRING(EventData.Button.iIndexId));
       dummy := Print(sText);
    END_IF;       
    RETURN;
END_IF;
// This array contains all possible movements/actions that can be used within an HMI application.
// The HMI can read this array in order to dynamically create a HMI machine operation panel on
// the visualisation system.
sv_iPanelButtonCnt := sv_iPanelButtonCnt + 1;
sv_PanelButtons[sv_iPanelButtonCnt] := EventData.Button;


@END_Body 

@@@BEG_Comment@@@ 
@TL(4)
get instance data if start event is received

attention:
taskslot is asigned to make sure that execution is done before evaStart in ABControl.pu
@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_iPanelMovementSelector > 0) THEN                        
   Button := sv_PanelButtons[sv_iPanelMovementSelector];
   mpbActionVar1 := Button.pbActionVar1;
   mpbActionVar2 := Button.pbActionVar2;
ELSE
   mpbActionVar1 := EMPTY;
   mpbActionVar2 := EMPTY;           
END_IF;
                 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
6 4 5 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 3 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 3 
@Step @RT(6)S_Idle @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(7)Action1 @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
bTimeout := FALSE


@F 
@Acb @RT(13)Output_Active @F @T @RT(1)N @RT(0) @F @F @T @TL(6)
IF (mpbActionVar1 = EMPTY OR mpbActionVar2 = EMPTY) THEN
   bOutputActive := FALSE;
ELSE   
   bOutputActive := mpbActionVar1^ = TRUE OR mpbActionVar2^ = TRUE;
END_IF;   

@F 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(3)
bOutputActive = TRUE


@RT(6)Trans1 @F 
@Step @RT(14)S_OutputActive @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(7)Action2 @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
iHeartbeat := sv_iPanelHeartbeat;
bAlive := TRUE;
iCnt := 0;

@F 
@Acb @RT(15)Check_Heartbeat @F @T @RT(1)N @RT(0) @F @F @T @TL(24)
IF (mpbActionVar1 = EMPTY AND mpbActionVar2 = EMPTY) THEN
   bOutputActive := FALSE;
ELSE   
   bOutputActive := FALSE;
   IF (mpbActionVar1 <> EMPTY) THEN
      bOutputActive := mpbActionVar1^;
   END_IF;
   IF (NOT bOutputActive AND mpbActionVar2 <> EMPTY) THEN
      bOutputActive := mpbActionVar2^;
   END_IF;                            

   IF (sv_iPanelHeartbeat <> iHeartbeat) THEN
      (* heartbeat counter changed while output active *)
      bAlive := TRUE;  
      iHeartbeat := sv_iPanelHeartbeat;
      iCnt := 0;
   ELSE
      iCnt := iCnt + 1;
      IF iCnt > miAliveTicks THEN
         bAlive := FALSE;  
      END_IF;
   END_IF;
END_IF;

@F 


@Trans @RT(6)Trans3 @F @T @T @T @T @T @TL(2)
NOT bOutputActive

@RT(6)Trans3 @F 

@Trans @RT(16)HMI_Disconnected @F @T @F @F @T @T @TL(2)
bAlive = FALSE

@RT(6)Trans2 @F 
@Step @RT(9)S_Timeout @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)Reset_IO @F @T @RT(1)N @RT(0) @F @F @T @TL(15)
(* Safety reset *)
IF (mpbActionVar1 <> EMPTY) THEN
   mpbActionVar1^ := FALSE;
END_IF;
IF (mpbActionVar2 <> EMPTY) THEN
   mpbActionVar2^ := FALSE;
END_IF;
IF sv_TraceLevel.bApplication THEN
   sText := CONCAT('HMI timeout, output was reset by heartbeat detection, ticks detected ', 
                        DINT_TO_STRING(iCnt), 
                        ', maximum ', 
                        DINT_TO_STRING(miAliveTicks));
   dummy := Print(sText);
END_IF;            

@F 


@Trans @RT(6)Trans4 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans4 @F 

@END_SfcData 
@SaActions 1 
@SaText @RT(7)Action3 1 @TL(2)



@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(* Currently checked in TaskMid *)
iInterval := LINT_TO_DINT(TIME_TO_LINT(GET_TASK_INTERVAL(TaskMid))/1000);

IF sv_iPanelHeartbeatInterval < iInterval THEN
   sv_iPanelHeartbeatInterval := iInterval;
END_IF;

miAliveTicks := (sv_iPanelHeartbeatInterval + sv_iPanelHeartbeatTolerance)/(iInterval);



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(3)

aSetHeartbeatInterval();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)

aSetHeartbeatInterval();
IF (sv_bUsePanelHeartbeat) THEN
   START_PROCESS_ALGORITHM(paCheckHeartbeat);
ELSE
   STOP_PROCESS_ALGORITHM(paCheckHeartbeat);  
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
