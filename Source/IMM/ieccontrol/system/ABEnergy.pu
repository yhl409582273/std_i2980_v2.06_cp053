(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB calculate the energy.

*)

IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, GET_TASK_INTERVAL
, GET_MY_FU_NAME
, KSWO_AddVariable
, START_PROCESS_ALGORITHM
, STOP_PROCESS_ALGORITHM
, KSYS_Status_OK
, nHalfAutomatic
, nFullAutomatic
, cCompEnergyMeter
, tnOperationMode
, tyNumberOfDevices
, KSYS_Status
, KSWO_Status

END_IMPORT

ALGORITHM_BLOCK ABEnergy #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bResetShotCounter : BOOL (* reset shot counter *);
 sv_iProdCounterAct : DINT;
 sv_iShotCounterAct : DINT;
 sv_rEnergyShot : REAL (* energy per shot *);
 sv_rEnergyProduction : REAL (* energy per production *);
 sv_rEnergyPart : REAL (* energy per part *);
 sv_rEnergyShotVolume : REAL (* energy in shot volume *);
 sv_rEnergyPartMass : REAL (* energy in part mass *);
 sv_rPartMass : REAL (* part mass *);
 sv_rHeatingPower : REAL (* heating power *);
 sv_rTotalEnergy : REAL (* total energy *);
 sv_rTotalPower : REAL (* total power *);
 sv_rMotorPower : REAL (* motor power *);
 sv_bResetTotEnergy : BOOL (* reset energy *);
 sv_OperationMode : tnOperationMode;
 sv_bStartSampleMeasure : BOOL;
 sv_rSampleMeasuredEnergy : REAL;
 sv_iAutoStopShotCounter : DINT;
 sv_dMeasuredDuration : TIME (* measured duration in mins  *);
 sv_dSetDuration : TIME (* set duration for sample energy measurement in mins  *);
 sv_rMeasuredPower : REAL (* measured  power *);
 sv_rMeasuredEnergy : REAL (* measured energy *);
 sv_rTotalEnergyCalibrated : REAL (* total energy *);
 sv_rTotalPowerCalibrated : REAL (* total power *);
 sv_rIdlePower : REAL;
 sv_rMeasuredEnergyHMI : REAL;
 sv_NumberOfDevices : tyNumberOfDevices;
 sv_bInitDone : BOOL;
 sv_rEfficiency : REAL;
END_VAR

SYSTEM_OBJECT
 TaskMid : TASK;
 TaskSlow : TASK;
 TaskHeating : TASK;
 TaskInject : TASK;
 PU_Task_7 : TASK;
END_OBJECT

VAR
 mrMotorPower : REAL;
 mprActCushion : REFTO REAL;
 mprCushionZeroPosition : REFTO REAL;
 mrActEnergy : REAL;
 mrTotEnergyLastShot : REAL;
 mrTotEnergyLastPart : REAL;
 mrShotVolume : REAL;
 mrTmpEnergy : REAL;
 mrLastActEnergy : REAL;
 mprHeatingPowerNozzle1 : REFTO REAL;
 mprHeatingPowerMold1 : REFTO REAL;
 mbHeatingPowerNozzle1Linked : BOOL;
 mbHeatingPowerMold1Linked : BOOL;
 mrRecordedEnergy : REAL;
 mbCycleRestarted : BOOL;
 miShotCounter : DINT;
 mrRecordedSampleEnergy : REAL;
 mrActEnergyCalibrated : REAL;
 mrTmpEnergyCalibrated : REAL;
 mbEnergyMeterLinked : BOOL;
 mprMotorPowerSpeedpump : REFTO REAL;
 mprMotorPowerEject : REFTO REAL;
 mprMotorPowerInject : REFTO REAL;
 mprMotorPowerPlast : REFTO REAL;
 mprMotorPowerMold : REFTO REAL;
 mprMotorPowerNozzle : REFTO REAL;
END_VAR

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This algo initializes for the energy calculation


*)

PROCESS_ALGORITHM paInit ON TaskMid AUTOSTART


VAR
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*pointer to motor total power speedpump*)
mprMotorPowerSpeedpump := GET_SYNC_REFTO('Pump1.sv_rMotorTotalPower', T#0s, Status);

IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerSpeedpump := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

(*pointer to motor power elec.axes*)
mprMotorPowerEject := GET_SYNC_REFTO('Ejector1.sv_rMotorPowerEject', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerEject := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprMotorPowerInject:= GET_SYNC_REFTO('Injection1.sv_rMotorPowerInject', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerInject := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF; 

mprMotorPowerPlast:= GET_SYNC_REFTO('Injection1.sv_rMotorPowerPlast', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerPlast := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprMotorPowerMold:= GET_SYNC_REFTO('Mold1.sv_rMotorPowerMold', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerMold := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprMotorPowerNozzle:= GET_SYNC_REFTO('Nozzle1.sv_rMotorPowerNozzle', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerNozzle := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprActCushion := GET_SYNC_REFTO('Injection1.sv_rCushion', T#0s, Status);            
mprCushionZeroPosition := GET_SYNC_REFTO('Injection1.sv_rScrewZeroPosition', T#0s, Status);   

mprHeatingPowerNozzle1 := GET_SYNC_REFTO('HeatingNozzle1.sv_rActHeatingPower', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbHeatingPowerNozzle1Linked := TRUE;
END_IF;
mprHeatingPowerMold1 := GET_SYNC_REFTO('HeatingMold1.sv_rActHeatingPower', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbHeatingPowerMold1Linked := TRUE;
END_IF;                                                       

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postupdate algorithms calculates the energy per shot and per ccm.

*)

POSTUPDATE_ALGORITHM pCalcEnergyShot ON TaskMid WITH sv_iShotCounterAct

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*Calculation of the energy cosumption per shot*)
sv_rEnergyShot := mrActEnergy - mrTotEnergyLastShot;
mrTotEnergyLastShot := mrActEnergy;

(*Calculation of the energy cosumption per ccm*)
mrShotVolume := mprCushionZeroPosition^ - mprActCushion^;  (*calculate the shot volume*)

IF mrShotVolume <> 0.0 THEN
  sv_rEnergyShotVolume := sv_rEnergyShot / mrShotVolume;
ELSE
  sv_rEnergyShotVolume := 0.0;
END_IF;    

//Synchronization to machine cycle
IF mbEnergyMeterLinked THEN
  IF sv_bStartSampleMeasure THEN
        
  //start the sample measurement
    IF NOT mbCycleRestarted THEN
      mbCycleRestarted := TRUE;
    END_IF;           
    
    //shot counter for the sample measurement
    miShotCounter := miShotCounter + 1;        
    END_IF;                  
END_IF;
                                    



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB calculates the energy per production.

*)

POSTUPDATE_ALGORITHM pUpdateEnergyProduction ON TaskMid WITH sv_bResetShotCounter

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************) 
sv_rEnergyProduction := 0.0;             (*reset the energy per production*)
mrLastActEnergy := mrActEnergy;          (*copy the calculated energy of the last cycle*)


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postupdate algorithm calculates the energy per gram.
*)

POSTUPDATE_ALGORITHM pCalcEnergyPart ON TaskMid WITH sv_iProdCounterAct,sv_rPartMass

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*Calculation of the energy cosumption per part*)
sv_rEnergyPart := mrActEnergy - mrTotEnergyLastPart;
mrTotEnergyLastPart := mrActEnergy;
                         
(*Calculation of the energy cosumption in part mass*)
IF sv_rPartMass <> 0.0 THEN
    sv_rEnergyPartMass := sv_rEnergyPart / sv_rPartMass;
ELSE
    sv_rEnergyPartMass := 0.0;
END_IF;    



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This process algorithm calculates the energy.
*)

PROCESS_ALGORITHM paCalcAndMeasure ON TaskHeating


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 rHeatingPower : REAL;
 dCycleTime : TIME;
 bInitDone : BOOL;
 rCycleTime : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* Cycle time *)
IF NOT bInitDone THEN
   dCycleTime := GET_TASK_INTERVAL();
   rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;
   bInitDone := TRUE;
END_IF;

(* Motor power estimated [kW] *)
mrMotorPower :=  mprMotorPowerSpeedpump^ +  mprMotorPowerEject^ +  mprMotorPowerInject^ +  mprMotorPowerPlast^ + mprMotorPowerMold^ + mprMotorPowerNozzle^; 
b := WRITE_SVREAL_DIRECT(sv_rMotorPower, mrMotorPower);

(* Heat power estimated [W] *)
rHeatingPower := 0.0;
IF mbHeatingPowerNozzle1Linked THEN
   rHeatingPower := rHeatingPower + mprHeatingPowerNozzle1^;
END_IF;
IF mbHeatingPowerMold1Linked THEN
   rHeatingPower := rHeatingPower + mprHeatingPowerMold1^;
END_IF;
b := WRITE_SVREAL_DIRECT(sv_rHeatingPower, rHeatingPower);

(* Total power [kW] *)
IF mbEnergyMeterLinked THEN
   //Calculate the total power from measured total power
   b := WRITE_SVREAL_DIRECT(sv_rTotalPower, (sv_rMeasuredPower / 1000.0));
ELSE                                                                                   
   b := WRITE_SVREAL_DIRECT(sv_rTotalPower, (((rHeatingPower + sv_rIdlePower) / 1000.0 + mrMotorPower) / sv_rEfficiency));
END_IF;                   

(* Energy *) 
IF mbEnergyMeterLinked THEN
   (* Total energy from power meter [kwh] *)
   sv_rTotalEnergy := (sv_rMeasuredEnergy - mrRecordedEnergy) / 1000.0; //measured value in Wh
   mrActEnergy := sv_rTotalEnergy;  
   b := WRITE_SVREAL_DIRECT(sv_rMeasuredEnergyHMI, (sv_rMeasuredEnergy / 1000.0));

   (* Calculate the energy per production [kwh] *)
   IF sv_OperationMode >= nHalfAutomatic THEN
      b := WRITE_SVREAL_DIRECT(sv_rEnergyProduction, ((mrActEnergy - mrLastActEnergy) / 1000.0));   
   END_IF;   
ELSE                                                                                   
   (* Integration of power = Energy [kWs] *)
   mrActEnergy := mrTmpEnergy + sv_rTotalPower * rCycleTime;
   mrTmpEnergy := mrActEnergy;

   (* Calculate the energy per production [kwh] *)
   IF sv_OperationMode >= nHalfAutomatic THEN
      b := WRITE_SVREAL_DIRECT(sv_rEnergyProduction, ((mrActEnergy - mrLastActEnergy) / 3600.0));    
   END_IF;    

   (* Consumption of energy [kwh] *)
   sv_rTotalEnergy := (mrActEnergy / 3600.0 + mrRecordedEnergy);
END_IF;  

(* Calibration *)
IF mbEnergyMeterLinked THEN
   (* Power calibration *)                                                             
   b := WRITE_SVREAL_DIRECT(sv_rTotalPowerCalibrated, ((sv_rMotorPower + (sv_rHeatingPower + sv_rIdlePower) / 1000.0) / sv_rEfficiency));

   (* Energy calibration *)
   mrActEnergyCalibrated := mrTmpEnergyCalibrated + sv_rTotalPowerCalibrated * rCycleTime;
   mrTmpEnergyCalibrated := mrActEnergyCalibrated;
   b := WRITE_SVREAL_DIRECT(sv_rTotalEnergyCalibrated, (mrActEnergyCalibrated / 3600.0)); 
END_IF;   



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postupdate algorithm resets the energy calculation.
*)

POSTUPDATE_ALGORITHM pResetTotalEnergy ON TaskMid WITH sv_bResetTotEnergy

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
(*reset the energy calculator*)
IF sv_bResetTotEnergy THEN
   //when power meter is used, record the last measured total energy,
   //and calculate always the difference between the actual measured value and recorded value
   //when estimation is used, integration of power with initial value 0 would be restarted
   IF mbEnergyMeterLinked THEN
     mrRecordedEnergy := sv_rMeasuredEnergy; 
   ELSE   
     mrRecordedEnergy := 0.0;
   END_IF;                

   mrActEnergy := 0.0;
   mrTmpEnergy := 0.0;
   sv_rTotalEnergy := 0.0;   
   mrLastActEnergy := 0.0;   
   mrTotEnergyLastShot := 0.0; 
   mrTotEnergyLastPart := 0.0;
   sv_bResetTotEnergy := FALSE;
    
   //calibration 
   IF mbEnergyMeterLinked THEN
     mrActEnergyCalibrated := 0.0;
     mrTmpEnergyCalibrated := 0.0;
     sv_rTotalEnergyCalibrated := 0.0; 
   END_IF;
END_IF;    


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paInitDebugMeasurement ON TaskSlow AUTOSTART


VAR
 fuName : STRING(255);
 variableName : STRING(255);
 swoState : KSWO_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
fuName := GET_MY_FU_NAME();
variableName := CONCAT(fuName,'.rMotorPowerCalc kW');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rMotorPower);
variableName := CONCAT(fuName,'.rTotalEnergyMeasured kWh');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rTotalEnergy);
variableName := CONCAT(fuName,'.rTotalEnergyCalibrated kWh');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rTotalEnergyCalibrated);
variableName := CONCAT(fuName,'.rTotalPower kW');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rTotalPower);
STOP_PROCESS_ALGORITHM();



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postppdate algorithm resets the temp variables for sum.

*)

POSTUPDATE_ALGORITHM pInitRecord ON TaskInject WITH sv_OperationMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
(*Reset the last sum*)
IF sv_OperationMode = nFullAutomatic THEN
    mrTotEnergyLastShot := 0.0;  
    mrTotEnergyLastPart := 0.0;
END_IF;    


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pSampleMeasure ON PU_Task_7 WITH sv_bStartSampleMeasure

#BEGIN_EDIT_BLOCK
//start the sample measurement 
IF sv_bStartSampleMeasure THEN  
  START_PROCESS_ALGORITHM(paSampleMeasure);    
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSampleMeasure ON TaskHeating


VAR
 bLastMeasurementInitialized : BOOL;
 rMeasuredDuration : REAL;
 dCycleTime : TIME;
 rCycleTime : REAL;
 rSetDuration : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
IF mbCycleRestarted THEN
    
  //Initialization of measurement
  IF NOT bLastMeasurementInitialized THEN
    bLastMeasurementInitialized := TRUE; 
    mrRecordedSampleEnergy := sv_rMeasuredEnergy;  //read the latest measured energy  
    miShotCounter := 0;                         //reset the shotcounter for sampling
    rMeasuredDuration := 0.0;                   //reset the duration for sampling
    dCycleTime := GET_TASK_INTERVAL();
    rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1.0e6;  //in seconds
    rSetDuration := LINT_TO_REAL(TIME_TO_LINT(sv_dSetDuration)) / 1.0e6;   //set duration in seconds 
  END_IF;  
  
  //Energy consumption from starting the sampling 
  sv_rSampleMeasuredEnergy := (sv_rMeasuredEnergy - mrRecordedSampleEnergy) / 1.0e3; 
  
  rMeasuredDuration := rMeasuredDuration + rCycleTime;   
  sv_dMeasuredDuration := LINT_TO_TIME(REAL_TO_LINT(rMeasuredDuration * 1.0e6));    //in mins                                      
      
  //Auto-Stop dependant on shot counter and set measurement duration 
  //Automatically stopped when shot counter or duration first is reached
  IF ((miShotCounter >= sv_iAutoStopShotCounter) AND (sv_iAutoStopShotCounter <> 0)) 
                             OR ((rMeasuredDuration >= rSetDuration) AND (rSetDuration <> 0.0)) OR (NOT sv_bStartSampleMeasure) THEN  
   
      mbCycleRestarted := FALSE; 
    sv_bStartSampleMeasure := FALSE; 
    bLastMeasurementInitialized := FALSE; 

    STOP_PROCESS_ALGORITHM();         
  END_IF;  
ELSE  //waiting for the start of next cycle
  sv_rSampleMeasuredEnergy := 0.0; //reset the measurement
  sv_dMeasuredDuration := t#0s;    //reset the timer
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInit ON PU_Task_7 WITH sv_bInitDone

#BEGIN_EDIT_BLOCK
//Energy meter is linked 
IF sv_NumberOfDevices[cCompEnergyMeter] <> 0 THEN   
  mbEnergyMeterLinked := TRUE;
END_IF;    

// Calculate/Measure power/energy cyclically
START_PROCESS_ALGORITHM(paCalcAndMeasure);

IF NOT mbEnergyMeterLinked THEN
  mrRecordedEnergy := sv_rTotalEnergy;
ELSE                                                                                   
  mrRecordedEnergy := sv_rMeasuredEnergy; //initialization 
END_IF;                               




;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 128 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB calculate the energy.

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
6 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_MY_FU_NAME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)KSWO_AddVariable @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
4 
@Var @RT(14)KSYS_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)nHalfAutomatic @RT(0) @T @T @DERIVED 0 @F @RT(15)tnOperationMode @F 
@T 
@BEG_Attrib 
0 @RT(1)2 @RT(34)confirmation every cycle necessary 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)nFullAutomatic @RT(0) @T @T @DERIVED 0 @F @RT(15)tnOperationMode @F 
@T 
@BEG_Attrib 
0 @RT(1)3 @RT(47)confirmation only for the first cycle necessary 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cCompEnergyMeter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)157 @RT(22)Component Energy meter 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(8)ABEnergy @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
60 
@Var @RT(20)sv_bResetShotCounter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)reset shot counter @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iProdCounterAct @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_iShotCounterAct @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_rEnergyShot @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)energy per shot @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_rEnergyProduction @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)energy per production @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_rEnergyPart @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)energy per part @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_rEnergyShotVolume @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)energy in shot volume @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_rEnergyPartMass @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)energy in part mass @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_rPartMass @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)part mass @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_rHeatingPower @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)heating power @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_rTotalEnergy @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(12)total energy @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_rTotalPower @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(11)total power @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_rMotorPower @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(11)motor power @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bResetTotEnergy @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(12)reset energy @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)TaskHeating @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)mrMotorPower @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mprActCushion @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mprCushionZeroPosition @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mrActEnergy @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mrTotEnergyLastShot @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mrTotEnergyLastPart @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mrShotVolume @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mrTmpEnergy @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mrLastActEnergy @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mprHeatingPowerNozzle1 @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mprHeatingPowerMold1 @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)mbHeatingPowerNozzle1Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)mbHeatingPowerMold1Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mrRecordedEnergy @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)sv_bStartSampleMeasure @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)mbCycleRestarted @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)sv_rSampleMeasuredEnergy @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_iAutoStopShotCounter @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_dMeasuredDuration @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)measured duration in mins  @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_dSetDuration @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(51)set duration for sample energy measurement in mins  @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_rMeasuredPower @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)measured  power @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_rMeasuredEnergy @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)measured energy @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)miShotCounter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mrRecordedSampleEnergy @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mrActEnergyCalibrated @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mrTmpEnergyCalibrated @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)sv_rTotalEnergyCalibrated @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(12)total energy @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_rTotalPowerCalibrated @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(11)total power @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_rIdlePower @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_rMeasuredEnergyHMI @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_rEfficiency @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)mbEnergyMeterLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)mprMotorPowerSpeedpump @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)mprMotorPowerEject @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mprMotorPowerInject @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)mprMotorPowerPlast @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mprMotorPowerMold @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mprMotorPowerNozzle @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

11 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pCalcEnergyShot @STRUCTURED_TEXT 
@RT(0) @RT(18)sv_iShotCounterAct @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(23)pUpdateEnergyProduction @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_bResetShotCounter @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pCalcEnergyPart @STRUCTURED_TEXT 
@RT(0) @RT(31)sv_iProdCounterAct,sv_rPartMass @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paCalcAndMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(11)TaskHeating @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(13)rHeatingPower @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(17)pResetTotalEnergy @STRUCTURED_TEXT 
@RT(0) @RT(18)sv_bResetTotEnergy @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(22)paInitDebugMeasurement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(6)fuName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)variableName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)swoState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSWO_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(11)pInitRecord @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_OperationMode @RT(10)TaskInject @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pSampleMeasure @STRUCTURED_TEXT 
@RT(0) @RT(22)sv_bStartSampleMeasure @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(15)paSampleMeasure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(11)TaskHeating @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(27)bLastMeasurementInitialized @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)rMeasuredDuration @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rSetDuration @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(5)pInit @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(52)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*pointer to motor total power speedpump*)
mprMotorPowerSpeedpump := GET_SYNC_REFTO('Pump1.sv_rMotorTotalPower', T#0s, Status);

IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerSpeedpump := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

(*pointer to motor power elec.axes*)
mprMotorPowerEject := GET_SYNC_REFTO('Ejector1.sv_rMotorPowerEject', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerEject := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprMotorPowerInject:= GET_SYNC_REFTO('Injection1.sv_rMotorPowerInject', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerInject := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF; 

mprMotorPowerPlast:= GET_SYNC_REFTO('Injection1.sv_rMotorPowerPlast', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerPlast := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprMotorPowerMold:= GET_SYNC_REFTO('Mold1.sv_rMotorPowerMold', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerMold := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprMotorPowerNozzle:= GET_SYNC_REFTO('Nozzle1.sv_rMotorPowerNozzle', T#0s, Status);
IF Status <> KSYS_Status_OK  THEN
   mprMotorPowerNozzle := GET_SYNC_REFTO('system.sv_rNull', T#0s, Status); 
END_IF;    

mprActCushion := GET_SYNC_REFTO('Injection1.sv_rCushion', T#0s, Status);            
mprCushionZeroPosition := GET_SYNC_REFTO('Injection1.sv_rScrewZeroPosition', T#0s, Status);   

mprHeatingPowerNozzle1 := GET_SYNC_REFTO('HeatingNozzle1.sv_rActHeatingPower', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbHeatingPowerNozzle1Linked := TRUE;
END_IF;
mprHeatingPowerMold1 := GET_SYNC_REFTO('HeatingMold1.sv_rActHeatingPower', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbHeatingPowerMold1Linked := TRUE;
END_IF;                                                       

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(13)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This algo initializes for the energy calculation


@@@END_Comment@@@ 

@BEG_Body 
@TL(34)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*Calculation of the energy cosumption per shot*)
sv_rEnergyShot := mrActEnergy - mrTotEnergyLastShot;
mrTotEnergyLastShot := mrActEnergy;

(*Calculation of the energy cosumption per ccm*)
mrShotVolume := mprCushionZeroPosition^ - mprActCushion^;  (*calculate the shot volume*)

IF mrShotVolume <> 0.0 THEN
  sv_rEnergyShotVolume := sv_rEnergyShot / mrShotVolume;
ELSE
  sv_rEnergyShotVolume := 0.0;
END_IF;    

//Synchronization to machine cycle
IF mbEnergyMeterLinked THEN
  IF sv_bStartSampleMeasure THEN
        
  //start the sample measurement
    IF NOT mbCycleRestarted THEN
      mbCycleRestarted := TRUE;
    END_IF;           
    
    //shot counter for the sample measurement
    miShotCounter := miShotCounter + 1;        
    END_IF;                  
END_IF;
                                    


@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postupdate algorithms calculates the energy per shot and per ccm.

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************) 
sv_rEnergyProduction := 0.0;             (*reset the energy per production*)
mrLastActEnergy := mrActEnergy;          (*copy the calculated energy of the last cycle*)

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB calculates the energy per production.

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*Calculation of the energy cosumption per part*)
sv_rEnergyPart := mrActEnergy - mrTotEnergyLastPart;
mrTotEnergyLastPart := mrActEnergy;
                         
(*Calculation of the energy cosumption in part mass*)
IF sv_rPartMass <> 0.0 THEN
    sv_rEnergyPartMass := sv_rEnergyPart / sv_rPartMass;
ELSE
    sv_rEnergyPartMass := 0.0;
END_IF;    


@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postupdate algorithm calculates the energy per gram.
@@@END_Comment@@@ 

@BEG_Body 
@TL(71)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* Cycle time *)
IF NOT bInitDone THEN
   dCycleTime := GET_TASK_INTERVAL();
   rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;
   bInitDone := TRUE;
END_IF;

(* Motor power estimated [kW] *)
mrMotorPower :=  mprMotorPowerSpeedpump^ +  mprMotorPowerEject^ +  mprMotorPowerInject^ +  mprMotorPowerPlast^ + mprMotorPowerMold^ + mprMotorPowerNozzle^; 
b := WRITE_SVREAL_DIRECT(sv_rMotorPower, mrMotorPower);

(* Heat power estimated [W] *)
rHeatingPower := 0.0;
IF mbHeatingPowerNozzle1Linked THEN
   rHeatingPower := rHeatingPower + mprHeatingPowerNozzle1^;
END_IF;
IF mbHeatingPowerMold1Linked THEN
   rHeatingPower := rHeatingPower + mprHeatingPowerMold1^;
END_IF;
b := WRITE_SVREAL_DIRECT(sv_rHeatingPower, rHeatingPower);

(* Total power [kW] *)
IF mbEnergyMeterLinked THEN
   //Calculate the total power from measured total power
   b := WRITE_SVREAL_DIRECT(sv_rTotalPower, (sv_rMeasuredPower / 1000.0));
ELSE                                                                                   
   b := WRITE_SVREAL_DIRECT(sv_rTotalPower, (((rHeatingPower + sv_rIdlePower) / 1000.0 + mrMotorPower) / sv_rEfficiency));
END_IF;                   

(* Energy *) 
IF mbEnergyMeterLinked THEN
   (* Total energy from power meter [kwh] *)
   sv_rTotalEnergy := (sv_rMeasuredEnergy - mrRecordedEnergy) / 1000.0; //measured value in Wh
   mrActEnergy := sv_rTotalEnergy;  
   b := WRITE_SVREAL_DIRECT(sv_rMeasuredEnergyHMI, (sv_rMeasuredEnergy / 1000.0));

   (* Calculate the energy per production [kwh] *)
   IF sv_OperationMode >= nHalfAutomatic THEN
      b := WRITE_SVREAL_DIRECT(sv_rEnergyProduction, ((mrActEnergy - mrLastActEnergy) / 1000.0));   
   END_IF;   
ELSE                                                                                   
   (* Integration of power = Energy [kWs] *)
   mrActEnergy := mrTmpEnergy + sv_rTotalPower * rCycleTime;
   mrTmpEnergy := mrActEnergy;

   (* Calculate the energy per production [kwh] *)
   IF sv_OperationMode >= nHalfAutomatic THEN
      b := WRITE_SVREAL_DIRECT(sv_rEnergyProduction, ((mrActEnergy - mrLastActEnergy) / 3600.0));    
   END_IF;    

   (* Consumption of energy [kwh] *)
   sv_rTotalEnergy := (mrActEnergy / 3600.0 + mrRecordedEnergy);
END_IF;  

(* Calibration *)
IF mbEnergyMeterLinked THEN
   (* Power calibration *)                                                             
   b := WRITE_SVREAL_DIRECT(sv_rTotalPowerCalibrated, ((sv_rMotorPower + (sv_rHeatingPower + sv_rIdlePower) / 1000.0) / sv_rEfficiency));

   (* Energy calibration *)
   mrActEnergyCalibrated := mrTmpEnergyCalibrated + sv_rTotalPowerCalibrated * rCycleTime;
   mrTmpEnergyCalibrated := mrActEnergyCalibrated;
   b := WRITE_SVREAL_DIRECT(sv_rTotalEnergyCalibrated, (mrActEnergyCalibrated / 3600.0)); 
END_IF;   


@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This process algorithm calculates the energy.
@@@END_Comment@@@ 

@BEG_Body 
@TL(31)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
(*reset the energy calculator*)
IF sv_bResetTotEnergy THEN
   //when power meter is used, record the last measured total energy,
   //and calculate always the difference between the actual measured value and recorded value
   //when estimation is used, integration of power with initial value 0 would be restarted
   IF mbEnergyMeterLinked THEN
     mrRecordedEnergy := sv_rMeasuredEnergy; 
   ELSE   
     mrRecordedEnergy := 0.0;
   END_IF;                

   mrActEnergy := 0.0;
   mrTmpEnergy := 0.0;
   sv_rTotalEnergy := 0.0;   
   mrLastActEnergy := 0.0;   
   mrTotEnergyLastShot := 0.0; 
   mrTotEnergyLastPart := 0.0;
   sv_bResetTotEnergy := FALSE;
    
   //calibration 
   IF mbEnergyMeterLinked THEN
     mrActEnergyCalibrated := 0.0;
     mrTmpEnergyCalibrated := 0.0;
     sv_rTotalEnergyCalibrated := 0.0; 
   END_IF;
END_IF;    

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postupdate algorithm resets the energy calculation.
@@@END_Comment@@@ 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
fuName := GET_MY_FU_NAME();
variableName := CONCAT(fuName,'.rMotorPowerCalc kW');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rMotorPower);
variableName := CONCAT(fuName,'.rTotalEnergyMeasured kWh');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rTotalEnergy);
variableName := CONCAT(fuName,'.rTotalEnergyCalibrated kWh');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rTotalEnergyCalibrated);
variableName := CONCAT(fuName,'.rTotalPower kW');
swoState := KSWO_AddVariable( Task := TaskInject,
                              Name := variableName,
                              Variable := sv_rTotalPower);
STOP_PROCESS_ALGORITHM();


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
(*Reset the last sum*)
IF sv_OperationMode = nFullAutomatic THEN
    mrTotEnergyLastShot := 0.0;  
    mrTotEnergyLastPart := 0.0;
END_IF;    

@END_Body 

@@@BEG_Comment@@@ 
@TL(12)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This postppdate algorithm resets the temp variables for sum.

@@@END_Comment@@@ 

@BEG_Body 
@TL(5)
//start the sample measurement 
IF sv_bStartSampleMeasure THEN  
  START_PROCESS_ALGORITHM(paSampleMeasure);    
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(35)
IF mbCycleRestarted THEN
    
  //Initialization of measurement
  IF NOT bLastMeasurementInitialized THEN
    bLastMeasurementInitialized := TRUE; 
    mrRecordedSampleEnergy := sv_rMeasuredEnergy;  //read the latest measured energy  
    miShotCounter := 0;                         //reset the shotcounter for sampling
    rMeasuredDuration := 0.0;                   //reset the duration for sampling
    dCycleTime := GET_TASK_INTERVAL();
    rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1.0e6;  //in seconds
    rSetDuration := LINT_TO_REAL(TIME_TO_LINT(sv_dSetDuration)) / 1.0e6;   //set duration in seconds 
  END_IF;  
  
  //Energy consumption from starting the sampling 
  sv_rSampleMeasuredEnergy := (sv_rMeasuredEnergy - mrRecordedSampleEnergy) / 1.0e3; 
  
  rMeasuredDuration := rMeasuredDuration + rCycleTime;   
  sv_dMeasuredDuration := LINT_TO_TIME(REAL_TO_LINT(rMeasuredDuration * 1.0e6));    //in mins                                      
      
  //Auto-Stop dependant on shot counter and set measurement duration 
  //Automatically stopped when shot counter or duration first is reached
  IF ((miShotCounter >= sv_iAutoStopShotCounter) AND (sv_iAutoStopShotCounter <> 0)) 
                             OR ((rMeasuredDuration >= rSetDuration) AND (rSetDuration <> 0.0)) OR (NOT sv_bStartSampleMeasure) THEN  
   
      mbCycleRestarted := FALSE; 
    sv_bStartSampleMeasure := FALSE; 
    bLastMeasurementInitialized := FALSE; 

    STOP_PROCESS_ALGORITHM();         
  END_IF;  
ELSE  //waiting for the start of next cycle
  sv_rSampleMeasuredEnergy := 0.0; //reset the measurement
  sv_dMeasuredDuration := t#0s;    //reset the timer
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
//Energy meter is linked 
IF sv_NumberOfDevices[cCompEnergyMeter] <> 0 THEN   
  mbEnergyMeterLinked := TRUE;
END_IF;    

// Calculate/Measure power/energy cyclically
START_PROCESS_ALGORITHM(paCalcAndMeasure);

IF NOT mbEnergyMeterLinked THEN
  mrRecordedEnergy := sv_rTotalEnergy;
ELSE                                                                                   
  mrRecordedEnergy := sv_rMeasuredEnergy; //initialization 
END_IF;                               



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
