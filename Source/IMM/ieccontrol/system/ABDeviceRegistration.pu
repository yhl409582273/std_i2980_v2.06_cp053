(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


This AB collects the deviceregistration events which are sent by every FU during iec-initialisation.
The registered devices are written into the array sv_NumberOfDevices to have the possibility to check
how many devices of a component are available on the system.
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, STOP_PROCESS_ALGORITHM
, cMaxCompId
, cCompPump
, tyNumberOfDevices
, tevDeviceRegister
, tevDeviceRegisterData
, tyRegisteredDevices
, ABRegisterDelay

END_IMPORT

ALGORITHM_BLOCK ABDeviceRegistration #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_NumberOfDevices : tyNumberOfDevices;
 sv_iDevicesToRegister : DINT (* Number of devices registered *);
 sv_bDeviceRegisterDone : BOOL;
END_VAR

SYSTEM_OBJECT
 EV_Task_3 : TASK;
 erMultipleDeviceReg : ALARM;
 erMaxDeviceIndexExeeded : ALARM;
 erMaxCompIdExeeded : ALARM;
 evDeviceRegister : tevDeviceRegister;
 Task10ms : TASK;
 erDeviceReg : ALARM;
 erTooManyPumpsRegistered : ALARM;
END_OBJECT

VAR
 m_iRegistrationCounter : DINT;
END_VAR

(*
This algo receives the registration event from each device.
To prevent from programming mistakes following checks are done:
  - overrun of maximum Component-ID
  - overrun of maximum Device-index
  - occurence of multiple registration of any device
*)

EVENT_ALGORITHM evaDeviceRegister ON EV_Task_3 WITH evDeviceRegister


VAR_INPUT
 evDeviceRegisterData : tevDeviceRegisterData;
END_VAR

VAR
 registeredDevices : tyRegisteredDevices;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//receiving device registrationevents

IF evDeviceRegisterData.DeviceId.CompId > cMaxCompId THEN
    SET_ALARM(Name := erMaxCompIdExeeded,
                SubID1 := cMaxCompId);
    //registration error: stop device registration
    STOP_PROCESS_ALGORITHM(paDeviceRegister); 
    RETURN;
END_IF;

IF evDeviceRegisterData.DeviceId.IndexId > cMaxDeviceIndex THEN
    SET_ALARM(Name := erMaxDeviceIndexExeeded,
                SubID1 := evDeviceRegisterData.DeviceId.CompId,
                SubID2 := cMaxDeviceIndex);
    //registration error: stop device registration
    STOP_PROCESS_ALGORITHM(paDeviceRegister); 
    RETURN;
END_IF;

//check limit of allowed pump - FU´s
IF evDeviceRegisterData.DeviceId.CompId = cCompPump THEN
    //limit of pumps already reached
    IF sv_NumberOfDevices[cCompPump] = cMaxNrOfPumps THEN
        SET_ALARM(Name := erTooManyPumpsRegistered);
        STOP_PROCESS_ALGORITHM(paDeviceRegister);
        RETURN;
    END_IF; 
END_IF;

//checking for multiple registrations
IF NOT registeredDevices[evDeviceRegisterData.DeviceId.CompId]
                        [evDeviceRegisterData.DeviceId.IndexId] THEN   
    m_iRegistrationCounter := m_iRegistrationCounter + 1;
    
    // incrementing registrationcounter for each compId
    sv_NumberOfDevices[evDeviceRegisterData.DeviceId.CompId] :=
    sv_NumberOfDevices[evDeviceRegisterData.DeviceId.CompId] + 1;
    
    // remembering that the device is already registered
    registeredDevices[evDeviceRegisterData.DeviceId.CompId]
                        [evDeviceRegisterData.DeviceId.IndexId] := TRUE;
ELSE
   // Device has been registered multiple
   SET_ALARM(Name := erMultipleDeviceReg,
            SubID1 := evDeviceRegisterData.DeviceId.CompId,
            SubID2 := evDeviceRegisterData.DeviceId.IndexId);
   
   dummy := Print("Multiple device registration: %d.%d",
                  evDeviceRegisterData.DeviceId.CompId,
                  evDeviceRegisterData.DeviceId.IndexId);
   
   //registration error: stop device registration
   STOP_PROCESS_ALGORITHM(paDeviceRegister);      
END_IF; 


;#END_EDIT_BLOCK END_ALGORITHM

(*
Waits for the registration process and sets the sv_bInitStart flag if registration succeeds.
Registration is ready if the sv_iDevicesRegistered is equal to the running registration counter.
The start-delay is done to give the devices time for incrementing sv_iDevicesRegistered.

*)

PROCESS_ALGORITHM paDeviceRegister ON Task10ms AUTOSTART


VAR
 abRegisterDelay : ABRegisterDelay;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP DELAY:
END_STEP


(* steps *)
STEP REG_ACTIVE:
END_STEP

STEP REG_ERROR:
Action5 (P);
END_STEP

ACTION Action5: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erDeviceReg);

;#END_EDIT_BLOCK END_ACTION (*Action5*)
STEP REG_FINISHED:
aRegistrationFinished (P);
END_STEP

ACTION aRegistrationFinished: #BEGIN_EDIT_BLOCK
// Device registration finished
sv_bDeviceRegisterDone := TRUE;

// reset delaytime generator
abRegisterDelay.aReset();

;#END_EDIT_BLOCK END_ACTION (*aRegistrationFinished*)
STEP END:
Action8 (P);
END_STEP

ACTION Action8: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*Action8*)

(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM DELAY TO REG_ACTIVE :=  #BEGIN_EDIT_BLOCK
DELAY.T >= T#200ms
;#END_EDIT_BLOCK
(*give the devices time to increment sv_iDevicesToRegister*)
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM REG_ACTIVE TO REG_FINISHED :=  #BEGIN_EDIT_BLOCK
m_iRegistrationCounter =
sv_iDevicesToRegister
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans3 (* Trans3 *) FROM REG_ACTIVE TO REG_ERROR :=  #BEGIN_EDIT_BLOCK
m_iRegistrationCounter >
sv_iDevicesToRegister

;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans9 (* Trans9 *) FROM REG_ERROR TO END :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans10 (* Trans10 *) FROM REG_FINISHED TO END :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 80 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


This AB collects the deviceregistration events which are sent by every FU during iec-initialisation.
The registered devices are written into the array sv_NumberOfDevices to have the possibility to check
how many devices of a component are available on the system.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(10)cMaxCompId @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)250 @RT(21)maximum Component ID  
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cCompPump @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)113 @RT(14)Component Pump 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(20)ABDeviceRegistration @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)erMultipleDeviceReg @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(23)erMaxDeviceIndexExeeded @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)erMaxCompIdExeeded @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_iDevicesToRegister @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(28)Number of devices registered @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)evDeviceRegister @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(17)tevDeviceRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)m_iRegistrationCounter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)Task10ms @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)erDeviceReg @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(22)sv_bDeviceRegisterDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)erTooManyPumpsRegistered @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(17)evaDeviceRegister @STRUCTURED_TEXT 
@RT(0) @RT(16)evDeviceRegister @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(20)evDeviceRegisterData @RT(0) @T @T @DERIVED 0 @F @RT(21)tevDeviceRegisterData @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)registeredDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tyRegisteredDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paDeviceRegister @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(8)Task10ms @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(15)abRegisterDelay @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABRegisterDelay @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(60)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//receiving device registrationevents

IF evDeviceRegisterData.DeviceId.CompId > cMaxCompId THEN
    SET_ALARM(Name := erMaxCompIdExeeded,
                SubID1 := cMaxCompId);
    //registration error: stop device registration
    STOP_PROCESS_ALGORITHM(paDeviceRegister); 
    RETURN;
END_IF;

IF evDeviceRegisterData.DeviceId.IndexId > cMaxDeviceIndex THEN
    SET_ALARM(Name := erMaxDeviceIndexExeeded,
                SubID1 := evDeviceRegisterData.DeviceId.CompId,
                SubID2 := cMaxDeviceIndex);
    //registration error: stop device registration
    STOP_PROCESS_ALGORITHM(paDeviceRegister); 
    RETURN;
END_IF;

//check limit of allowed pump - FU´s
IF evDeviceRegisterData.DeviceId.CompId = cCompPump THEN
    //limit of pumps already reached
    IF sv_NumberOfDevices[cCompPump] = cMaxNrOfPumps THEN
        SET_ALARM(Name := erTooManyPumpsRegistered);
        STOP_PROCESS_ALGORITHM(paDeviceRegister);
        RETURN;
    END_IF; 
END_IF;

//checking for multiple registrations
IF NOT registeredDevices[evDeviceRegisterData.DeviceId.CompId]
                        [evDeviceRegisterData.DeviceId.IndexId] THEN   
    m_iRegistrationCounter := m_iRegistrationCounter + 1;
    
    // incrementing registrationcounter for each compId
    sv_NumberOfDevices[evDeviceRegisterData.DeviceId.CompId] :=
    sv_NumberOfDevices[evDeviceRegisterData.DeviceId.CompId] + 1;
    
    // remembering that the device is already registered
    registeredDevices[evDeviceRegisterData.DeviceId.CompId]
                        [evDeviceRegisterData.DeviceId.IndexId] := TRUE;
ELSE
   // Device has been registered multiple
   SET_ALARM(Name := erMultipleDeviceReg,
            SubID1 := evDeviceRegisterData.DeviceId.CompId,
            SubID2 := evDeviceRegisterData.DeviceId.IndexId);
   
   dummy := Print("Multiple device registration: %d.%d",
                  evDeviceRegisterData.DeviceId.CompId,
                  evDeviceRegisterData.DeviceId.IndexId);
   
   //registration error: stop device registration
   STOP_PROCESS_ALGORITHM(paDeviceRegister);      
END_IF; 

@END_Body 

@@@BEG_Comment@@@ 
@TL(5)
This algo receives the registration event from each device.
To prevent from programming mistakes following checks are done:
  - overrun of maximum Component-ID
  - overrun of maximum Device-index
  - occurence of multiple registration of any device
@@@END_Comment@@@ 

@BEG_SfcBody 
9 9 11 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 7 
@Step @RT(5)DELAY @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
DELAY.T >= T#200ms

@RT(6)Trans1 @T @TL(1)
give the devices time to increment sv_iDevicesToRegister

@Step @RT(10)REG_ACTIVE @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(6)Trans2 @F @T @F @F @T @T @TL(3)
m_iRegistrationCounter =
sv_iDevicesToRegister

@RT(6)Trans2 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(6)Trans3 @F @T @F @F @T @T @TL(4)
m_iRegistrationCounter >
sv_iDevicesToRegister


@RT(6)Trans3 @F 
@Step @RT(9)REG_ERROR @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action5 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
SET_ALARM(Name := erDeviceReg);

@F 

@Trans @RT(6)Trans9 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans9 @F 
@Goto @RT(3)END @F @F 


@Step @RT(12)REG_FINISHED @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(21)aRegistrationFinished @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
// Device registration finished
sv_bDeviceRegisterDone := TRUE;

// reset delaytime generator
abRegisterDelay.aReset();

@F 

@Trans @RT(7)Trans10 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans10 @F 
@Step @RT(3)END @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action8 @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(4)
Waits for the registration process and sets the sv_bInitStart flag if registration succeeds.
Registration is ready if the sv_iDevicesRegistered is equal to the running registration counter.
The start-delay is done to give the devices time for incrementing sv_iDevicesRegistered.

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
