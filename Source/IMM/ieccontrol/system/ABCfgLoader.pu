(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This algorithm block reading configuration settings from
the catalogue and copies the values to the according systemvariables.
Reading starts after device registration is completed.
After reading the settings the file appco.cfg is deleted.
*)

IMPORT_OVER_LISTFILE
 KCAT_GetHandle
, FConfigNode
, KCAT_GetValue
, KFILE_Delete
, FCreateIECVersion
, FCreateIECLibVersion
, FCreateIECBaseVersion
, FCreateSystemName
, FCreateHMIKVSVersion
, FCreateHMIStyleVersion
, KSYS_BPAPI_VAR_TXTREAD
, KCAT_Status_OK
, KCAT_Status
, KSYS_BPApiState
, KCAT_HandleData
, KFILE_Status

END_IMPORT

ALGORITHM_BLOCK ABCfgLoader #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bReadConfigDone : BOOL;
 sv_bDeviceRegisterDone : BOOL;
 sv_bInitStart : BOOL;
 sv_sPathMasterdisk : STRING(255);
 sv_sPathWorkspace : STRING(255);
 sv_sPathAppldisk : STRING(255);
END_VAR

SYSTEM_OBJECT
 TaskMid : TASK;
 PU_Task_7 : TASK;
 TaskSlow : TASK;
END_OBJECT

FUNCTION fCreateOSVersion : BOOL
 #DUMMY_EDIT_BLOCK

VAR
 Status : KCAT_Status;
 SysState : KSYS_BPApiState;
 HandleData : KCAT_HandleData;
 sValue : STRING(255);
 sTmp : STRING(255);
 bLinux : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// create extended OS version information in catalog (on Linux systems only)
// necessary for systems like KVS to access OS specific version info without SysRPC/BPAPI

HandleData := KCAT_GetHandle('UOS.System');
IF HandleData.Status = KCAT_Status_OK THEN
   Status := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sValue);
   IF (sValue = 'Linux') THEN
      bLinux := TRUE;
   END_IF;
END_IF;


IF(NOT bLinux) THEN
   // do not create the nodes on VxWorks - this info does not exist
   RETURN;
END_IF;

HandleData := KCAT_GetHandle('System');
IF HandleData.Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

HandleData := KCAT_AddDir(HandleData.Handle, 'OS');
IF HandleData.Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

// add device driver version

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.driversVersion', sValue);
Status := KCAT_AddValue(HandleData.Handle, "driversVersion", KCAT_Type_STRING, sValue); 
IF Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

// add OS specific version (concated)      
SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.osType', sTmp);
sValue := CONCAT(sTmp, ' ');

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.osVersion', sTmp);
sValue := CONCAT(sValue, sTmp, ' ');

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.kernelVersion', sTmp);
sValue := CONCAT(sValue, sTmp);

Status := KCAT_AddValue(HandleData.Handle, "osVersion", KCAT_Type_STRING, sValue); 
IF Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

fCreateOSVersion := TRUE; 


;#END_EDIT_BLOCK END_FUNCTION

PROCESS_ALGORITHM paReadConfig ON TaskMid


VAR
 HandleData : KCAT_HandleData;
 sRootPath : STRING(255);
 // sPath : STRING(255);
 // Status : KCAT_Status;
 // sBasePath : STRING(255);
 fileState : KFILE_Status;
 StatusName_CAT : KCAT_HandleData;
 Status_CAT : KCAT_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check if data is available
sRootPath := "Application.Application1";
HandleData:=KCAT_GetHandle(sRootPath);
IF HandleData.Status<>KCAT_Status_OK THEN
   //no catalog entries for appliaction available
   sv_bReadConfigDone := TRUE;
   STOP_PROCESS_ALGORITHM();
   RETURN;
END_IF;

(*
//-----------------------------------------------------------
//read actuation params
//-------------------------------------------------------------
sBasePath := CONCAT(sRootPath, ".Actuation");

sPath := CONCAT(sBasePath, ".System_pressure");
Status := FConfigNode(sPath, "system.sv_rMaximumPressure", 1);

sPath := CONCAT(sBasePath, ".System_velocity");
Status := FConfigNode(sPath, "Injection1.sv_rMaxSpeedFwd", 1);


//-------------------------------------------------------------------
//read clamp side parameters
//-------------------------------------------------------------------
sBasePath := CONCAT(sRootPath, ".Closure_unit");

//mold stroke
sPath := CONCAT(sBasePath, ".Stroke_mold");
Status := FConfigNode(sPath, "Mold1.sv_rMoldStroke", 1);

//profile stages mold close
sPath := CONCAT(sBasePath, ".No_profile_points_mold_close");
Status := FConfigNode(sPath, "Mold1.sv_MoldFwdProfVisSrc.Profile.iNoOfPoints", 0);

//profile stages mold open
sPath := CONCAT(sBasePath, ".No_profile_points_mold_open");
Status := FConfigNode(sPath, "Mold1.sv_MoldBwdProfVis.Profile.iNoOfPoints", 0);

//ejector stroke
sPath := CONCAT(sBasePath, ".Stroke_ejector");
Status := FConfigNode(sPath, "Ejector1.sv_rEjectorStroke", 1);

//profile stages ejector bwd
sPath := CONCAT(sBasePath, ".No_profile_points_ejector_bwd");
Status := FConfigNode(sPath, "Ejector1.sv_EjectorBwdVis.Profile.iNoOfPoints", 0);

//profile stages ejector fwd
sPath := CONCAT(sBasePath, ".No_profile_points_ejector_fwd");
Status := FConfigNode(sPath, "Ejector1.sv_EjectorFwdVis.Profile.iNoOfPoints", 0);

//mold adjust mode
sPath := CONCAT(sBasePath, ".Mold_adjust");
Status := FConfigNode(sPath, "MoldHeight1.sv_MoldHeightAdjustMotor", 3);

//mold heating
sPath := CONCAT(sBasePath, ".No_heating_zones");
Status := FConfigNode(sPath, "HeatingMold1.sv_iNumberOfZones", 2);


//------------------------------------------------------------------------------
//read inject side parameters
//------------------------------------------------------------------------------
sBasePath := CONCAT(sRootPath, ".Injection_Unit.Injection_Unit:0");

//screw stroke
sPath := CONCAT(sBasePath, ".Stroke_screw");
Status := FConfigNode(sPath, "Injection1.sv_rScrewStroke", 1);

//nozzle stroke
sPath := CONCAT(sBasePath, ".Stroke_nozzle");
Status := FConfigNode(sPath, "Nozzle1.sv_rNozzleStroke", 1);

//profile stages inject
sPath := CONCAT(sBasePath, ".No_profile_points_inject");
Status := FConfigNode(sPath, "Injection1.sv_InjectProfVis.Profile.iNoOfPoints", 0);

//profile stages hold
sPath := CONCAT(sBasePath, ".No_profile_points_hold");
Status := FConfigNode(sPath, "Injection1.sv_HoldProfVis.Profile.iNoOfPoints", 0);

//profile stages charge
sPath := CONCAT(sBasePath, ".No_profile_points_charge");
Status := FConfigNode(sPath, "Injection1.sv_PlastProfVis.Profile.iNoOfPoints", 0);

//screw impulses per rotation
sPath := CONCAT(sBasePath, ".No_impulses_rotation");
Status := FConfigNode(sPath, "Injection1.sv_iScrewGain", 2);

//number of heating zones
sPath := CONCAT(sBasePath, ".No_heating_zones");
Status := FConfigNode(sPath, "HeatingNozzle1.sv_iNumberOfZones", 2);

//profile stages nozzle fwd
sPath := CONCAT(sBasePath, ".No_profile_points_nozzle_fwd");
Status := FConfigNode(sPath, "Nozzle1.sv_NozzleFwdProfVis.Profile.iNoOfPoints", 0);

//profile stages nozzle bwd
sPath := CONCAT(sBasePath, ".No_profile_points_nozzle_bwd");
Status := FConfigNode(sPath, "Nozzle1.sv_NozzleBwdProfVis.Profile.iNoOfPoints", 0);

//nozzle movement mode
sPath := CONCAT(sBasePath, ".Movement_Mode");
Status := FConfigNode(sPath, "Nozzle1.sv_MovementMode", 4);
//----------------------------------------------------------------------------------------
*)

//delete configuration file
StatusName_CAT := KCAT_GetHandle('System.applPath');
IF StatusName_CAT.Status = KCAT_Status_OK THEN
    Status_CAT := KCAT_GetValue(Handle := StatusName_CAT.Handle, Buffer := sRootPath);
END_IF;

fileState := KFILE_Delete(Name:= CONCAT(sRootPath,'/application/control/config/appco.cfg'));

sv_bReadConfigDone := TRUE;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pDeviceRegisterDone ON PU_Task_7 WITH sv_bDeviceRegisterDone

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceRegisterDone THEN
   START_PROCESS_ALGORITHM(paReadConfig);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paVersionInfo ON TaskSlow AUTOSTART


VAR
 b : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

b := fCreateOSVersion();
b := FCreateIECVersion();
b := FCreateIECLibVersion();
b := FCreateIECBaseVersion();
b := FCreateHMIKVSVersion();
b := FCreateHMIStyleVersion();
b := FCreateSystemName();


STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pUpdateSysPaths ON PU_Task_7 WITH sv_bInitStart


VAR
 hDataKey : KCAT_HandleData;
 hReadStatus : KCAT_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//Initialize the applPath, workPath and rootPath. The paths have to be read from
//UOS catalog. The paths are used conform to PLC docs (path hierarchy).

hDataKey := KCAT_GetHandle('System.rootPath');
IF hDataKey.Status = KCAT_Status_OK THEN
    hReadStatus := KCAT_GetValue(Handle := hDataKey.Handle, Buffer := sv_sPathMasterdisk);
END_IF;

hDataKey := KCAT_GetHandle('System.applPath');
IF hDataKey.Status = KCAT_Status_OK THEN
    hReadStatus := KCAT_GetValue(Handle := hDataKey.Handle, Buffer := sv_sPathAppldisk);
    IF (hReadStatus <> KCAT_Status_OK) OR LEN(sv_sPathAppldisk) < 1 THEN
       sv_sPathAppldisk := sv_sPathMasterdisk;
    END_IF;
END_IF;

hDataKey := KCAT_GetHandle('System.workPath');
IF hDataKey.Status = KCAT_Status_OK THEN
    hReadStatus := KCAT_GetValue(Handle := hDataKey.Handle, Buffer := sv_sPathWorkspace);
    IF (hReadStatus <> KCAT_Status_OK) OR LEN(sv_sPathWorkspace) < 1 THEN
       sv_sPathWorkspace := sv_sPathAppldisk;
    END_IF;
END_IF;





;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 103 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This algorithm block reading configuration settings from
the catalogue and copies the values to the according systemvariables.
Reading starts after device registration is completed.
After reading the settings the file appco.cfg is deleted.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
11 
@Var @RT(14)KCAT_GetHandle @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)FConfigNode @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_GetValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KFILE_Delete @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)FCreateIECVersion @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)FCreateIECLibVersion @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)FCreateIECBaseVersion @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)FCreateSystemName @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)FCreateHMIKVSVersion @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)FCreateHMIStyleVersion @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)KSYS_BPAPI_VAR_TXTREAD @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(14)KCAT_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KCAT_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(11)ABCfgLoader @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(18)sv_bReadConfigDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bDeviceRegisterDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_sPathMasterdisk @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_sPathWorkspace @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_sPathAppldisk @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(16)fCreateOSVersion @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)SysState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)HandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sValue @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)sTmp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bLinux @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(12)paReadConfig @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(10)HandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sRootPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sBasePath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)fileState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KFILE_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)StatusName_CAT @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)Status_CAT @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(19)pDeviceRegisterDone @STRUCTURED_TEXT 
@RT(0) @RT(22)sv_bDeviceRegisterDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(13)paVersionInfo @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pUpdateSysPaths @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)hDataKey @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)hReadStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(57)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// create extended OS version information in catalog (on Linux systems only)
// necessary for systems like KVS to access OS specific version info without SysRPC/BPAPI

HandleData := KCAT_GetHandle('UOS.System');
IF HandleData.Status = KCAT_Status_OK THEN
   Status := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sValue);
   IF (sValue = 'Linux') THEN
      bLinux := TRUE;
   END_IF;
END_IF;


IF(NOT bLinux) THEN
   // do not create the nodes on VxWorks - this info does not exist
   RETURN;
END_IF;

HandleData := KCAT_GetHandle('System');
IF HandleData.Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

HandleData := KCAT_AddDir(HandleData.Handle, 'OS');
IF HandleData.Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

// add device driver version

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.driversVersion', sValue);
Status := KCAT_AddValue(HandleData.Handle, "driversVersion", KCAT_Type_STRING, sValue); 
IF Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

// add OS specific version (concated)      
SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.osType', sTmp);
sValue := CONCAT(sTmp, ' ');

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.osVersion', sTmp);
sValue := CONCAT(sValue, sTmp, ' ');

SysState := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.OS.kernelVersion', sTmp);
sValue := CONCAT(sValue, sTmp);

Status := KCAT_AddValue(HandleData.Handle, "osVersion", KCAT_Type_STRING, sValue); 
IF Status <> KCAT_Status_OK THEN
   RETURN; 
END_IF;

fCreateOSVersion := TRUE; 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(124)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check if data is available
sRootPath := "Application.Application1";
HandleData:=KCAT_GetHandle(sRootPath);
IF HandleData.Status<>KCAT_Status_OK THEN
   //no catalog entries for appliaction available
   sv_bReadConfigDone := TRUE;
   STOP_PROCESS_ALGORITHM();
   RETURN;
END_IF;

(*
//-----------------------------------------------------------
//read actuation params
//-------------------------------------------------------------
sBasePath := CONCAT(sRootPath, ".Actuation");

sPath := CONCAT(sBasePath, ".System_pressure");
Status := FConfigNode(sPath, "system.sv_rMaximumPressure", 1);

sPath := CONCAT(sBasePath, ".System_velocity");
Status := FConfigNode(sPath, "Injection1.sv_rMaxSpeedFwd", 1);


//-------------------------------------------------------------------
//read clamp side parameters
//-------------------------------------------------------------------
sBasePath := CONCAT(sRootPath, ".Closure_unit");

//mold stroke
sPath := CONCAT(sBasePath, ".Stroke_mold");
Status := FConfigNode(sPath, "Mold1.sv_rMoldStroke", 1);

//profile stages mold close
sPath := CONCAT(sBasePath, ".No_profile_points_mold_close");
Status := FConfigNode(sPath, "Mold1.sv_MoldFwdProfVisSrc.Profile.iNoOfPoints", 0);

//profile stages mold open
sPath := CONCAT(sBasePath, ".No_profile_points_mold_open");
Status := FConfigNode(sPath, "Mold1.sv_MoldBwdProfVis.Profile.iNoOfPoints", 0);

//ejector stroke
sPath := CONCAT(sBasePath, ".Stroke_ejector");
Status := FConfigNode(sPath, "Ejector1.sv_rEjectorStroke", 1);

//profile stages ejector bwd
sPath := CONCAT(sBasePath, ".No_profile_points_ejector_bwd");
Status := FConfigNode(sPath, "Ejector1.sv_EjectorBwdVis.Profile.iNoOfPoints", 0);

//profile stages ejector fwd
sPath := CONCAT(sBasePath, ".No_profile_points_ejector_fwd");
Status := FConfigNode(sPath, "Ejector1.sv_EjectorFwdVis.Profile.iNoOfPoints", 0);

//mold adjust mode
sPath := CONCAT(sBasePath, ".Mold_adjust");
Status := FConfigNode(sPath, "MoldHeight1.sv_MoldHeightAdjustMotor", 3);

//mold heating
sPath := CONCAT(sBasePath, ".No_heating_zones");
Status := FConfigNode(sPath, "HeatingMold1.sv_iNumberOfZones", 2);


//------------------------------------------------------------------------------
//read inject side parameters
//------------------------------------------------------------------------------
sBasePath := CONCAT(sRootPath, ".Injection_Unit.Injection_Unit:0");

//screw stroke
sPath := CONCAT(sBasePath, ".Stroke_screw");
Status := FConfigNode(sPath, "Injection1.sv_rScrewStroke", 1);

//nozzle stroke
sPath := CONCAT(sBasePath, ".Stroke_nozzle");
Status := FConfigNode(sPath, "Nozzle1.sv_rNozzleStroke", 1);

//profile stages inject
sPath := CONCAT(sBasePath, ".No_profile_points_inject");
Status := FConfigNode(sPath, "Injection1.sv_InjectProfVis.Profile.iNoOfPoints", 0);

//profile stages hold
sPath := CONCAT(sBasePath, ".No_profile_points_hold");
Status := FConfigNode(sPath, "Injection1.sv_HoldProfVis.Profile.iNoOfPoints", 0);

//profile stages charge
sPath := CONCAT(sBasePath, ".No_profile_points_charge");
Status := FConfigNode(sPath, "Injection1.sv_PlastProfVis.Profile.iNoOfPoints", 0);

//screw impulses per rotation
sPath := CONCAT(sBasePath, ".No_impulses_rotation");
Status := FConfigNode(sPath, "Injection1.sv_iScrewGain", 2);

//number of heating zones
sPath := CONCAT(sBasePath, ".No_heating_zones");
Status := FConfigNode(sPath, "HeatingNozzle1.sv_iNumberOfZones", 2);

//profile stages nozzle fwd
sPath := CONCAT(sBasePath, ".No_profile_points_nozzle_fwd");
Status := FConfigNode(sPath, "Nozzle1.sv_NozzleFwdProfVis.Profile.iNoOfPoints", 0);

//profile stages nozzle bwd
sPath := CONCAT(sBasePath, ".No_profile_points_nozzle_bwd");
Status := FConfigNode(sPath, "Nozzle1.sv_NozzleBwdProfVis.Profile.iNoOfPoints", 0);

//nozzle movement mode
sPath := CONCAT(sBasePath, ".Movement_Mode");
Status := FConfigNode(sPath, "Nozzle1.sv_MovementMode", 4);
//----------------------------------------------------------------------------------------
*)

//delete configuration file
StatusName_CAT := KCAT_GetHandle('System.applPath');
IF StatusName_CAT.Status = KCAT_Status_OK THEN
    Status_CAT := KCAT_GetValue(Handle := StatusName_CAT.Handle, Buffer := sRootPath);
END_IF;

fileState := KFILE_Delete(Name:= CONCAT(sRootPath,'/application/control/config/appco.cfg'));

sv_bReadConfigDone := TRUE;
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceRegisterDone THEN
   START_PROCESS_ALGORITHM(paReadConfig);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

b := fCreateOSVersion();
b := FCreateIECVersion();
b := FCreateIECLibVersion();
b := FCreateIECBaseVersion();
b := FCreateHMIKVSVersion();
b := FCreateHMIStyleVersion();
b := FCreateSystemName();


STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(32)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//Initialize the applPath, workPath and rootPath. The paths have to be read from
//UOS catalog. The paths are used conform to PLC docs (path hierarchy).

hDataKey := KCAT_GetHandle('System.rootPath');
IF hDataKey.Status = KCAT_Status_OK THEN
    hReadStatus := KCAT_GetValue(Handle := hDataKey.Handle, Buffer := sv_sPathMasterdisk);
END_IF;

hDataKey := KCAT_GetHandle('System.applPath');
IF hDataKey.Status = KCAT_Status_OK THEN
    hReadStatus := KCAT_GetValue(Handle := hDataKey.Handle, Buffer := sv_sPathAppldisk);
    IF (hReadStatus <> KCAT_Status_OK) OR LEN(sv_sPathAppldisk) < 1 THEN
       sv_sPathAppldisk := sv_sPathMasterdisk;
    END_IF;
END_IF;

hDataKey := KCAT_GetHandle('System.workPath');
IF hDataKey.Status = KCAT_Status_OK THEN
    hReadStatus := KCAT_GetValue(Handle := hDataKey.Handle, Buffer := sv_sPathWorkspace);
    IF (hReadStatus <> KCAT_Status_OK) OR LEN(sv_sPathWorkspace) < 1 THEN
       sv_sPathWorkspace := sv_sPathAppldisk;
    END_IF;
END_IF;




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
