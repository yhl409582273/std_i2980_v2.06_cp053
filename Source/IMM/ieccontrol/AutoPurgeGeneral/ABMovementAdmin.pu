IMPORT_OVER_LISTFILE
 tsMoveCtrl
, ABMoveAutoPurge
, tsPurgeSettings
, tsActPurgeTimes
, TON
, R_TRIG

END_IMPORT

ALGORITHM_BLOCK ABMovementAdmin #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitStart : BOOL;
 sv_bDeviceStart : BOOL (* Start Device *);
 sv_PurgeSettings : tsPurgeSettings;
 sv_ActPurgeTimes : tsActPurgeTimes (* actual times of purge movement *);
 sv_bFALSE : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskMid : TASK;
 erAutoPurgeTimeout : ALARM;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
END_VAR

VAR
 abMoveAutoPurge : ABMoveAutoPurge;
END_VAR

(*
Calls the registration-algo of every movementblock after the deviceregistration succeeded(sv_bInitStart->true)

*)

POSTUPDATE_ALGORITHM pInitStart ON PU_Task_7 WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
    //Register Movement   
    abMoveAutoPurge.aRegister();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Starts the algo paRun when sv_bDeviceStart is set by ABControl.
*)

POSTUPDATE_ALGORITHM pDeviceStart ON PU_Task_7 WITH sv_bDeviceStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceStart THEN
   //start device
   START_PROCESS_ALGORITHM(paRun);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Calls depending on the MoveId and MoveDir the movementblock. g_MoveCtrl.MoveId/MoveDir are set by the Block ABControl after
evStart was received. The movement-block has to be called until the it returns abMoveXxx.aRun.bReady.
In case of hydraulic movements the output-request has to be done before starting the movement.
*)

PROCESS_ALGORITHM paRun ON TaskMid


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 fbPurgeTimer : TON;
 bTimeOut : BOOL;
 fbRTrigTimeOut : R_TRIG;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Start:
AResetTimeout (P);
END_STEP

ACTION AResetTimeout: #BEGIN_EDIT_BLOCK
b := WRITE_SV_DIRECT(sv_bDeviceStart, sv_bFALSE);
bTimeOut := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetTimeout*)

(* steps *)
STEP S_Purge:
AResetTimer (P);
AAutoPurge (N);
ACheckTimeout (N);
END_STEP

ACTION AResetTimer: #BEGIN_EDIT_BLOCK
fbPurgeTimer(IN := FALSE,
             PT := sv_PurgeSettings.dMaxPurgeTime);

;#END_EDIT_BLOCK END_ACTION (*AResetTimer*)
ACTION ACheckTimeout: #BEGIN_EDIT_BLOCK
fbPurgeTimer(IN := TRUE,
             PT := sv_PurgeSettings.dMaxPurgeTime);

sv_ActPurgeTimes.dActPurgeTime := fbPurgeTimer.ET;
bTimeOut := fbPurgeTimer.Q;

fbRTrigTimeOut(CLK := bTimeOut);
IF fbRTrigTimeOut.Q THEN
    SET_ALARM(Name := erAutoPurgeTimeout);
END_IF;
             


;#END_EDIT_BLOCK END_ACTION (*ACheckTimeout*)
STEP READY:
AReady (P);
END_STEP

ACTION AReady: #BEGIN_EDIT_BLOCK
g_MoveCtrl.bReady := TRUE;
IF NOT sv_bDeviceStart THEN
   STOP_PROCESS_ALGORITHM();
END_IF;
;#END_EDIT_BLOCK END_ACTION (*AReady*)

(* transitions *)
GO_ON_TRANSITION TStart (* Trans9 *) FROM S_Start TO S_Purge :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TPurgeReady (* Trans1 *) FROM S_Purge TO READY :=  #BEGIN_EDIT_BLOCK
abMoveAutoPurge.aRun.bReady;
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans8 (* Trans8 *) FROM READY TO S_Start :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AAutoPurge: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
abMoveAutoPurge.aRun(bStop := g_MoveCtrl.bStop OR bTimeOut);

;#END_EDIT_BLOCK END_ACTION (*AAutoPurge*)
(* end sfc-code *)


END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 68 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABMovementAdmin @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(12)Start Device @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)abMoveAutoPurge @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABMoveAutoPurge @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)sv_PurgeSettings @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsPurgeSettings @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)erAutoPurgeTimeout @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_ActPurgeTimes @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsActPurgeTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)actual times of purge movement @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)sv_bFALSE @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pInitStart @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(12)pDeviceStart @STRUCTURED_TEXT 
@RT(0) @RT(15)sv_bDeviceStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(12)fbPurgeTimer @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bTimeOut @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbRTrigTimeOut @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bInitStart THEN
    //Register Movement   
    abMoveAutoPurge.aRegister();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Calls the registration-algo of every movementblock after the deviceregistration succeeded(sv_bInitStart->true)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bDeviceStart THEN
   //start device
   START_PROCESS_ALGORITHM(paRun);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
Starts the algo paRun when sv_bDeviceStart is set by ABControl.
@@@END_Comment@@@ 

@BEG_SfcBody 
23 18 21 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 5 
@Step @RT(7)S_Start @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(13)AResetTimeout @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
b := WRITE_SV_DIRECT(sv_bDeviceStart, sv_bFALSE);
bTimeOut := FALSE;

@F 

@Trans @RT(6)TStart @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans9 @F 
@Step @RT(7)S_Purge @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 3 
@Acb @RT(11)AResetTimer @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
fbPurgeTimer(IN := FALSE,
             PT := sv_PurgeSettings.dMaxPurgeTime);

@F 
@Acb @RT(10)AAutoPurge @F @F @RT(1)N @RT(0) @F @F @F @F 
@Acb @RT(13)ACheckTimeout @F @T @RT(1)N @RT(0) @F @F @T @TL(13)
fbPurgeTimer(IN := TRUE,
             PT := sv_PurgeSettings.dMaxPurgeTime);

sv_ActPurgeTimes.dActPurgeTime := fbPurgeTimer.ET;
bTimeOut := fbPurgeTimer.Q;

fbRTrigTimeOut(CLK := bTimeOut);
IF fbRTrigTimeOut.Q THEN
    SET_ALARM(Name := erAutoPurgeTimeout);
END_IF;
             


@F 

@Trans @RT(11)TPurgeReady @F @T @F @F @T @T @TL(2)
abMoveAutoPurge.aRun.bReady;

@RT(6)Trans1 @F 
@Step @RT(5)READY @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(6)AReady @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
g_MoveCtrl.bReady := TRUE;
IF NOT sv_bDeviceStart THEN
   STOP_PROCESS_ALGORITHM();
END_IF;
@F 


@Trans @RT(6)Trans8 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans8 @F 

@END_SfcData 
@SaActions 1 
@SaText @RT(10)AAutoPurge 1 @TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
abMoveAutoPurge.aRun(bStop := g_MoveCtrl.bStop OR bTimeOut);


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(3)
Calls depending on the MoveId and MoveDir the movementblock. g_MoveCtrl.MoveId/MoveDir are set by the Block ABControl after
evStart was received. The movement-block has to be called until the it returns abMoveXxx.aRun.bReady.
In case of hydraulic movements the output-request has to be done before starting the movement.
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
