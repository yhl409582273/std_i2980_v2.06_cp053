IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, KSYS_BPAPI_VAR_TXTREAD
, cCompOperationMode
, tnOperationMode
, FBEPForceDI
, FBEPUnForceDI
, tevStart
, KSYS_Status
, tevStartData
, KCAT_HandleData
, KCAT_Status
, KSYS_BPApiState

END_IMPORT

ALGORITHM_BLOCK ABStartAutoSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 sv_ForceSGMoldClose : BOOL;
 sv_OperationMode : tnOperationMode;
 sv_bStartSimulation : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_3 : TASK;
 EV_Task_3 : TASK;
 TaskSim : TASK;
 evStart : tevStart;
END_OBJECT

VAR
 fbEPForceDI : FBEPForceDI;
 fbEPUnForceDI : FBEPUnForceDI;
 mevStart : tevStart;
 mpbAutoButton : REFTO BOOL;
 mpbAutoButtonHMI : REFTO BOOL;
 mpbHalfAutoButton : REFTO BOOL;
 mpbHalfAutoButtonHMI : REFTO BOOL;
 mbFullAuto : BOOL;
 mbHalfAuto : BOOL;
 mpbAutoButtonTmp : REFTO BOOL;
 mpbHalfAutoButtonTmp : REFTO BOOL;
 mpbAutoButtonHMITmp : REFTO BOOL;
 mpbHalfAutoButtonHMITmp : REFTO BOOL;
END_VAR

PROCESS_ALGORITHM paStartAutoCycle ON TaskSim


VAR_TEMP
 status : KSYS_Status;
END_VAR

VAR
 fbEPForceDI : FBEPForceDI;
 bStartButtonLinked : BOOL;
 bStartButton1Linked : BOOL;
 bStartButton2Linked : BOOL;
 bTwoButtonOperation : BOOL;
 pbButton : REFTO BOOL;
 bInit : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
AInit (P);
END_STEP


(* steps *)
STEP S_WaitButton:
ActivatePostupdates (P);
END_STEP

ACTION ActivatePostupdates: #BEGIN_EDIT_BLOCK
mbFullAuto := FALSE;
mbHalfAuto := FALSE;
mpbAutoButtonTmp := mpbAutoButton;
mpbAutoButtonHMITmp := mpbAutoButtonHMI;
mpbHalfAutoButtonTmp := mpbHalfAutoButton;
mpbHalfAutoButtonHMITmp := mpbHalfAutoButtonHMI;

;#END_EDIT_BLOCK END_ACTION (*ActivatePostupdates*)
STEP S_OpenDoor:
AOpenDoor (P);
END_STEP

ACTION AOpenDoor: #BEGIN_EDIT_BLOCK
IF bTwoButtonOperation THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button1CycleStart', Value := FALSE);
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button2CycleStart', Value := FALSE);
ELSIF bStartButtonLinked THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_ButtonCycleStart', Value := TRUE);
ELSE
   sv_ForceSGMoldClose := FALSE;
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed', Value := FALSE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed2', Value := TRUE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Open', Value := TRUE);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AOpenDoor*)
STEP S_CloseDoor:
ACloseDoor (P);
END_STEP

ACTION ACloseDoor: #BEGIN_EDIT_BLOCK
IF bTwoButtonOperation THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button1CycleStart', Value := TRUE);
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button2CycleStart', Value := TRUE);
ELSIF bStartButtonLinked THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_ButtonCycleStart', Value := FALSE);
ELSE
   sv_ForceSGMoldClose := TRUE;
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed', Value := TRUE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed2', Value := FALSE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Open', Value := FALSE);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACloseDoor*)
STEP S_Stop:
ADeactivatePostupdates (P);
AStop (P);
END_STEP

ACTION ADeactivatePostupdates: #BEGIN_EDIT_BLOCK
mpbAutoButtonTmp := EMPTY; 
mpbAutoButtonHMITmp := EMPTY;
mpbHalfAutoButtonTmp := EMPTY;
mpbHalfAutoButtonHMITmp := EMPTY;

;#END_EDIT_BLOCK END_ACTION (*ADeactivatePostupdates*)
ACTION AStop: #BEGIN_EDIT_BLOCK
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStop*)

(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM S_Init TO S_WaitButton :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM S_WaitButton TO S_OpenDoor :=  #BEGIN_EDIT_BLOCK
mbFullAuto OR mbHalfAuto
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans11 (* Trans11 *) FROM S_WaitButton TO S_Stop :=  #BEGIN_EDIT_BLOCK
sv_OperationMode < nHalfAutomatic
//do not react to button in setup/manual
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans3 (* Trans3 *) FROM S_OpenDoor TO S_CloseDoor :=  #BEGIN_EDIT_BLOCK
S_OpenDoor.T > t#1s
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans5 (* Trans5 *) FROM S_CloseDoor TO S_Stop :=  #BEGIN_EDIT_BLOCK
S_CloseDoor.T > t#1s
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans6 (* Trans6 *) FROM S_Stop TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   pbButton := GET_SYNC_REFTO('OperationMode1.di_ButtonCycleStart', t#0S, status);
   bStartButtonLinked := (status = KSYS_Status_OK);
   pbButton := GET_SYNC_REFTO('OperationMode1.di_Button1CycleStart', t#0S, status);
   bStartButton1Linked := (status = KSYS_Status_OK);
   pbButton := GET_SYNC_REFTO('OperationMode1.di_Button2CycleStart', t#0S, status);
   bStartButton2Linked := (status = KSYS_Status_OK);
   bTwoButtonOperation := bStartButton1Linked AND bStartButton2Linked;
   bInit := TRUE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AInit*)
(* end sfc-code *)


END_ALGORITHM

EVENT_ALGORITHM evaStart ON EV_Task_3 WITH mevStart


VAR_INPUT
 evStartData : tevStartData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId.CompId = cCompOperationMode AND evStartData.MoveId = cMoveStart THEN
   START_PROCESS_ALGORITHM(paStartAutoCycle);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pSimulate ON TaskSim WITH sv_bSimulate,sv_bInitStart


VAR
 s : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
   mpbAutoButton := GET_SYNC_REFTO("OperationMode1.di_ButtonFullAuto", T#0s, s); 
   mpbAutoButtonHMI := GET_SYNC_REFTO("OperationMode1.sv_bButtonFullAuto", T#0s, s); 
   mpbHalfAutoButton := GET_SYNC_REFTO("OperationMode1.di_ButtonHalfAuto", T#0s, s);
   mpbHalfAutoButtonHMI := GET_SYNC_REFTO("OperationMode1.sv_bButtonHalfAuto", T#0s, s);
   mevStart := evStart;
   fbEPForceDI("Motor1.di_Overload", TRUE);
ELSE
   mevStart := EMPTY;
   fbEPUnForceDI("Motor1.di_Overload");
   fbEPUnForceDI('OperationMode1.di_ButtonCycleStart');
   fbEPUnForceDI('OperationMode1.di_Button1CycleStart');
   fbEPUnForceDI('OperationMode1.di_Button2CycleStart');
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pActivateSimulation ON PU_Task_3(1) WITH sv_bInitStart


VAR
 StatusName : KCAT_HandleData;
 Status : KCAT_Status;
 sValue : STRING(255);
 sDeviceName : STRING(255);
 state : KSYS_BPApiState;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bStartSimulation THEN
   //simulation is activated
   //-> set sv_bSimulate to TRUE
   sv_bSimulate := TRUE;
ELSE
   //switch on simulation automatically if application runs on a pc
   //check must be done before the other postupdates on sv_bInitStart become active
   StatusName := KCAT_GetHandle('UOS.System');
   IF StatusName.Status = KCAT_Status_OK THEN
      Status := KCAT_GetValue(Handle := StatusName.Handle, Buffer := sValue);
      IF (sValue = 'WINNT') THEN
         sv_bSimulate := TRUE;
      ELSIF (sValue = 'Linux') THEN
         //Linux - systems:
         //start simulation if PC simulation is running
         state := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.TypeLabel.deviceName', sDeviceName);
         IF sDeviceName = 'PCSimulation' THEN
            sv_bSimulate := TRUE;   
         END_IF;
      END_IF;
   END_IF;   
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pFullAuto ON PU_Task_3 WITH mpbAutoButtonTmp^,mpbAutoButtonHMITmp^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((mpbAutoButtonTmp <> EMPTY) AND mpbAutoButtonTmp^) OR 
   ((mpbAutoButtonHMITmp <> EMPTY) AND mpbAutoButtonHMITmp^) THEN
   mbFullAuto := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pHalfAuto ON PU_Task_3 WITH mpbHalfAutoButtonTmp^,mpbHalfAutoButtonHMITmp^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((mpbHalfAutoButtonTmp <> EMPTY) AND mpbHalfAutoButtonTmp^) OR
   ((mpbHalfAutoButtonHMITmp <> EMPTY) AND mpbHalfAutoButtonHMITmp^) THEN
   mbHalfAuto := TRUE;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pStartStopSimu ON TaskSim WITH sv_bStartSimulation

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//simulation started or stopped by user
// -> set sv_bSimulate to according value
sv_bSimulate := sv_bStartSimulation



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)KSYS_BPAPI_VAR_TXTREAD @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(18)cCompOperationMode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)111 @RT(24)Component Operation Mode 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABStartAutoSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
22 
@Var @RT(9)PU_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bSimulate @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_ForceSGMoldClose @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)fbEPForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbEPUnForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBEPUnForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)mevStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)evStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)mpbAutoButton @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mpbAutoButtonHMI @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mpbHalfAutoButton @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mpbHalfAutoButtonHMI @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mbFullAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mbHalfAuto @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mpbAutoButtonTmp @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mpbHalfAutoButtonTmp @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mpbAutoButtonHMITmp @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)mpbHalfAutoButtonHMITmp @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)sv_bStartSimulation @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

7 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paStartAutoCycle @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(11)fbEPForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)bStartButtonLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)bStartButton1Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)bStartButton2Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)bTwoButtonOperation @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)pbButton @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(8)evaStart @STRUCTURED_TEXT 
@RT(0) @RT(8)mevStart @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(11)evStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tevStartData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pSimulate @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(19)pActivateSimulation @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(12)PU_Task_3(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(10)StatusName @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)sValue @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sDeviceName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)state @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_BPApiState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pFullAuto @STRUCTURED_TEXT 
@RT(0) @RT(38)mpbAutoButtonTmp^,mpbAutoButtonHMITmp^ @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pHalfAuto @STRUCTURED_TEXT 
@RT(0) @RT(46)mpbHalfAutoButtonTmp^,mpbHalfAutoButtonHMITmp^ @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pStartStopSimu @STRUCTURED_TEXT 
@RT(0) @RT(19)sv_bStartSimulation @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_SfcBody 
16 10 13 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 9 
@Step @RT(6)S_Init @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AInit @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
sv_bSimulate

@RT(6)Trans1 @F 
@Step @RT(12)S_WaitButton @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(19)ActivatePostupdates @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
mbFullAuto := FALSE;
mbHalfAuto := FALSE;
mpbAutoButtonTmp := mpbAutoButton;
mpbAutoButtonHMITmp := mpbAutoButtonHMI;
mpbHalfAutoButtonTmp := mpbHalfAutoButton;
mpbHalfAutoButtonHMITmp := mpbHalfAutoButtonHMI;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(6)Trans2 @F @T @F @F @T @T @TL(2)
mbFullAuto OR mbHalfAuto

@RT(6)Trans2 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans11 @F @T @F @F @T @T @TL(3)
sv_OperationMode < nHalfAutomatic
//do not react to button in setup/manual

@RT(7)Trans11 @F 
@Goto @RT(6)S_Stop @F @F 


@Step @RT(10)S_OpenDoor @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)AOpenDoor @F @T @RT(1)P @RT(0) @F @F @T @TL(12)
IF bTwoButtonOperation THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button1CycleStart', Value := FALSE);
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button2CycleStart', Value := FALSE);
ELSIF bStartButtonLinked THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_ButtonCycleStart', Value := TRUE);
ELSE
   sv_ForceSGMoldClose := FALSE;
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed', Value := FALSE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed2', Value := TRUE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Open', Value := TRUE);
END_IF;

@F 

@Trans @RT(6)Trans3 @F @T @F @F @T @T @TL(2)
S_OpenDoor.T > t#1s

@RT(6)Trans3 @F 
@Step @RT(11)S_CloseDoor @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(10)ACloseDoor @F @T @RT(1)P @RT(0) @F @F @T @TL(12)
IF bTwoButtonOperation THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button1CycleStart', Value := TRUE);
   fbEPForceDI(sSysVar := 'OperationMode1.di_Button2CycleStart', Value := TRUE);
ELSIF bStartButtonLinked THEN
   fbEPForceDI(sSysVar := 'OperationMode1.di_ButtonCycleStart', Value := FALSE);
ELSE
   sv_ForceSGMoldClose := TRUE;
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed', Value := TRUE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Closed2', Value := FALSE);
   fbEPForceDI(sSysVar := 'SafetyGateAuto1.di_Open', Value := FALSE);
END_IF;

@F 

@Trans @RT(6)Trans5 @F @T @F @F @T @T @TL(2)
S_CloseDoor.T > t#1s

@RT(6)Trans5 @F 
@Step @RT(6)S_Stop @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(22)ADeactivatePostupdates @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
mpbAutoButtonTmp := EMPTY; 
mpbAutoButtonHMITmp := EMPTY;
mpbHalfAutoButtonTmp := EMPTY;
mpbHalfAutoButtonHMITmp := EMPTY;

@F 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
STOP_PROCESS_ALGORITHM();

@F 


@Trans @RT(6)Trans6 @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans6 @F 

@END_SfcData 
@SaActions 1 
@SaText @RT(5)AInit 1 @TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInit THEN
   pbButton := GET_SYNC_REFTO('OperationMode1.di_ButtonCycleStart', t#0S, status);
   bStartButtonLinked := (status = KSYS_Status_OK);
   pbButton := GET_SYNC_REFTO('OperationMode1.di_Button1CycleStart', t#0S, status);
   bStartButton1Linked := (status = KSYS_Status_OK);
   pbButton := GET_SYNC_REFTO('OperationMode1.di_Button2CycleStart', t#0S, status);
   bStartButton2Linked := (status = KSYS_Status_OK);
   bTwoButtonOperation := bStartButton1Linked AND bStartButton2Linked;
   bInit := TRUE;
END_IF;


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF evStartData.DeviceId.CompId = cCompOperationMode AND evStartData.MoveId = cMoveStart THEN
   START_PROCESS_ALGORITHM(paStartAutoCycle);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
   mpbAutoButton := GET_SYNC_REFTO("OperationMode1.di_ButtonFullAuto", T#0s, s); 
   mpbAutoButtonHMI := GET_SYNC_REFTO("OperationMode1.sv_bButtonFullAuto", T#0s, s); 
   mpbHalfAutoButton := GET_SYNC_REFTO("OperationMode1.di_ButtonHalfAuto", T#0s, s);
   mpbHalfAutoButtonHMI := GET_SYNC_REFTO("OperationMode1.sv_bButtonHalfAuto", T#0s, s);
   mevStart := evStart;
   fbEPForceDI("Motor1.di_Overload", TRUE);
ELSE
   mevStart := EMPTY;
   fbEPUnForceDI("Motor1.di_Overload");
   fbEPUnForceDI('OperationMode1.di_ButtonCycleStart');
   fbEPUnForceDI('OperationMode1.di_Button1CycleStart');
   fbEPUnForceDI('OperationMode1.di_Button2CycleStart');
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bStartSimulation THEN
   //simulation is activated
   //-> set sv_bSimulate to TRUE
   sv_bSimulate := TRUE;
ELSE
   //switch on simulation automatically if application runs on a pc
   //check must be done before the other postupdates on sv_bInitStart become active
   StatusName := KCAT_GetHandle('UOS.System');
   IF StatusName.Status = KCAT_Status_OK THEN
      Status := KCAT_GetValue(Handle := StatusName.Handle, Buffer := sValue);
      IF (sValue = 'WINNT') THEN
         sv_bSimulate := TRUE;
      ELSIF (sValue = 'Linux') THEN
         //Linux - systems:
         //start simulation if PC simulation is running
         state := KSYS_BPAPI_VAR_TXTREAD('SYS.HW.TypeLabel.deviceName', sDeviceName);
         IF sDeviceName = 'PCSimulation' THEN
            sv_bSimulate := TRUE;   
         END_IF;
      END_IF;
   END_IF;   
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((mpbAutoButtonTmp <> EMPTY) AND mpbAutoButtonTmp^) OR 
   ((mpbAutoButtonHMITmp <> EMPTY) AND mpbAutoButtonHMITmp^) THEN
   mbFullAuto := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((mpbHalfAutoButtonTmp <> EMPTY) AND mpbHalfAutoButtonTmp^) OR
   ((mpbHalfAutoButtonHMITmp <> EMPTY) AND mpbHalfAutoButtonHMITmp^) THEN
   mbHalfAuto := TRUE;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//simulation started or stopped by user
// -> set sv_bSimulate to according value
sv_bSimulate := sv_bStartSimulation


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
