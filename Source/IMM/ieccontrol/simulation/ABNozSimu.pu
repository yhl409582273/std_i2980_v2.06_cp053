IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, GET_SYNC_REFTO
, KSYS_Status_OK
, FBEPForceAI
, FBEPForceDI
, tsRequiredPumps
, FBGetSimulationSource
, FBEPUnForceDI
, FBEPUnForceAI
, TON
, KSYS_Status
, FBGetRequiredPumps

END_IMPORT

ALGORITHM_BLOCK ABNozSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_ForceLimitSwitchNozzleFwd : BOOL;
 sv_bInitStart : BOOL;
 ai_Position_stat : BOOL;
 sv_ForceLimitSwitchNozzleFwd2 : BOOL;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskSim : TASK;
 PU_Task_13 : TASK;
 TaskAnalog : TASK;
END_OBJECT

VAR
 fbEPForceAI : FBEPForceAI;
 fbEPForceDI : FBEPForceDI;
 BoolTrue : BOOL := TRUE;
 BoolFalse : BOOL := FALSE;
 mpbDILimitSwitchNozzleFwd : REFTO BOOL;
 mpbDONozzleFwd : REFTO BOOL;
 mpbDONozzleBwd : REFTO BOOL;
 mbDILimitSwitchNozzleFwdLinked : BOOL;
 mbDONozzleFwdLinked : BOOL;
 mbDONozzleBwdLinked : BOOL;
 mbAINozzleTransLinked : BOOL;
 mprNozzlePosRaw : REFTO REAL;
 mpbDILimitSwitchNozzleFwd2 : REFTO BOOL;
 mbDILimitSwitchNozzleFwdLinked2 : BOOL;
 mpPumpsFwd : REFTO tsRequiredPumps;
 mpPumpsBwd : REFTO tsRequiredPumps;
 mprVelocityFwd : REFTO REAL;
 mprVelocityBwd : REFTO REAL;
 fbGetSimulationSource : FBGetSimulationSource;
END_VAR

POSTUPDATE_ALGORITHM pStart ON PU_Task_13 WITH sv_bSimulate,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    START_PROCESS_ALGORITHM(paSimulate);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSimulate ON TaskAnalog


VAR
 fbEPUnForceDI : FBEPUnForceDI;
 fbEPUnForceAI : FBEPUnForceAI;
 rNozzleDivision : REAL := 0.01;
 rNozzlePosRaw : REAL;
 Timer : TON;
 Timer2 : TON;
 dTimeLimit2 : TIME := T#4s;
 rNozzleTimeFor10V : REAL := 2.0;
 rCycleTime : REAL;
 dCycleTime : TIME;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
aInit (P);
END_STEP


(* steps *)
STEP SIM:
aSimulate (N);
END_STEP

STEP STOP:
aStopSimu (P);
END_STEP


(* transitions *)
TRANSITION SimRequired (* SimRequired *) FROM INIT TO SIM :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION StpSimRequired (* StpSimRequired *) FROM SIM TO STOP :=  #BEGIN_EDIT_BLOCK
NOT sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Return (* Return *) FROM STOP TO SIM :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

dCycleTime :=  GET_TASK_INTERVAL();
rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;

IF mbAINozzleTransLinked THEN
   ai_Position_stat := FALSE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aInit*)
ACTION aSimulate: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

rNozzleDivision := 1.0  / rNozzleTimeFor10V * rCycleTime;

fbEPForceAI.Range := 10.0; 

IF mbAINozzleTransLinked  THEN
   IF mbDONozzleFwdLinked AND mpbDONozzleFwd^ THEN
         rNozzlePosRaw := mprNozzlePosRaw^ - MUL(rNozzleDivision,mprVelocityFwd^); 
   ELSIF mbDONozzleBwdLinked AND mpbDONozzleBwd^ THEN
         rNozzlePosRaw := mprNozzlePosRaw^ + MUL(rNozzleDivision,mprVelocityBwd^); 
   END_IF;
   
   fbEPForceAI(sSysVar := 'Nozzle1.ai_Position',Value := MAX(MIN(rNozzlePosRaw,10.0), 0.0));           
END_IF;
IF NOT mpbDONozzleFwd^ THEN
   Timer(IN := FALSE);
   Timer2(IN := FALSE); 
END_IF;
IF mbDONozzleFwdLinked AND mpbDONozzleFwd^ THEN
   Timer(IN := TRUE,
         PT := t#2s);
   IF Timer.Q AND mbDILimitSwitchNozzleFwdLinked THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd',Value := TRUE);
      sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
      Timer(IN := FALSE);
   END_IF;
   Timer2(IN := TRUE,
         PT := dTimeLimit2);
   IF Timer2.Q AND mbDILimitSwitchNozzleFwdLinked2 THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2',Value := TRUE);
      sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;
      Timer2(IN := FALSE);
   END_IF; 
END_IF;
IF mbDONozzleBwdLinked AND mpbDONozzleBwd^ THEN
   Timer(IN := TRUE,
         PT := t#2s);
   IF mbDILimitSwitchNozzleFwdLinked THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd',Value := FALSE);
      sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
      Timer(IN := FALSE);
   END_IF;
   Timer2(IN := TRUE,
         PT := dTimeLimit2);
   IF mbDILimitSwitchNozzleFwdLinked2 THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2',Value := FALSE);
      sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;
      Timer2(IN := FALSE);
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ACTION (*aSimulate*)
ACTION aStopSimu: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbAINozzleTransLinked THEN
   fbEPUnForceAI(sSysVar := 'Nozzle1.ai_Position');
END_IF;
IF mbDILimitSwitchNozzleFwdLinked THEN
   fbEPUnForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd');
   sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
END_IF;
IF mbDILimitSwitchNozzleFwdLinked2 THEN
   fbEPUnForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2');
   sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;
END_IF;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aStopSimu*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskSim AUTOSTART


VAR
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mprNozzlePosRaw:= GET_SYNC_REFTO('Nozzle1.ai_Position', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbAINozzleTransLinked := TRUE;
END_IF;

mpbDILimitSwitchNozzleFwd:= GET_SYNC_REFTO('Nozzle1.di_LimitSwitchFwd', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDILimitSwitchNozzleFwdLinked := TRUE;
   sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
END_IF;

mpbDILimitSwitchNozzleFwd2:= GET_SYNC_REFTO('Nozzle1.di_LimitSwitchFwd2', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDILimitSwitchNozzleFwdLinked2 := TRUE;      
   sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;      
END_IF;

mpbDONozzleFwd:= GET_SYNC_REFTO('Nozzle1.do_Forward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDONozzleFwdLinked := TRUE;
END_IF;

mpbDONozzleBwd:= GET_SYNC_REFTO('Nozzle1.do_Backward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDONozzleBwdLinked := TRUE;
END_IF;

STOP_PROCESS_ALGORITHM();



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLimitSwitchNozzleFwd ON TaskSim WITH sv_ForceLimitSwitchNozzleFwd,sv_bSimulate

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDILimitSwitchNozzleFwdLinked THEN
   IF sv_bSimulate THEN
      IF sv_ForceLimitSwitchNozzleFwd THEN
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd', Value := BoolTrue);
      ELSE
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd', Value := BoolFalse);
      END_IF;
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLimitSwitchNozzleFwd2 ON TaskSim WITH sv_ForceLimitSwitchNozzleFwd2,sv_bSimulate

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDILimitSwitchNozzleFwdLinked2 THEN
   IF sv_bSimulate THEN
      IF sv_ForceLimitSwitchNozzleFwd2 THEN
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2', Value := BoolTrue);
      ELSE
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2', Value := BoolFalse);
      END_IF;
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetSimulationSource

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumpsFwd,
                      prVelocity => mprVelocityFwd);

fbGetSimulationSource(pRequiredPumps := mpPumpsBwd,
                      prVelocity => mprVelocityBwd);



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON TaskSim WITH sv_bInitDone


VAR
 fbGetRequiredPumps : FBGetRequiredPumps;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps for fwd and bwd movement
fbGetRequiredPumps.DeviceId.CompId := cCompNozzle;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumpsFwd := fbGetRequiredPumps.pPumps;

fbGetRequiredPumps(MoveDir := cMoveBwd,
                   MoveId := cMoveBwd);
mpPumpsBwd := fbGetRequiredPumps.pPumps;

aGetSimulationSource();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pRequiredPumps ON TaskSim WITH mpPumpsFwd^.RequiredPumps,mpPumpsBwd^.RequiredPumps

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(14)KSYS_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABNozSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
28 
@Var @RT(12)sv_bSimulate @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)sv_ForceLimitSwitchNozzleFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)ai_Position_stat @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(29)sv_ForceLimitSwitchNozzleFwd2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)fbEPForceAI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceAI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)fbEPForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)BoolTrue @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)BoolFalse @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)mpbDILimitSwitchNozzleFwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mpbDONozzleFwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mpbDONozzleBwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(30)mbDILimitSwitchNozzleFwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbDONozzleFwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbDONozzleBwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbAINozzleTransLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mprNozzlePosRaw @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(26)mpbDILimitSwitchNozzleFwd2 @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(31)mbDILimitSwitchNozzleFwdLinked2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)mpPumpsFwd @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @F @RT(15)tsRequiredPumps @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mpPumpsBwd @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @F @RT(15)tsRequiredPumps @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)mprVelocityFwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mprVelocityBwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbGetSimulationSource @RT(0) @T @T @DERIVED 0 @F @RT(21)FBGetSimulationSource @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

8 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paSimulate @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(13)fbEPUnForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBEPUnForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbEPUnForceAI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBEPUnForceAI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rNozzleDivision @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.01 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rNozzlePosRaw @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)Timer @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Timer2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)dTimeLimit2 @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)T#4s @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)rNozzleTimeFor10V @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)2.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskSim @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(21)pLimitSwitchNozzleFwd @STRUCTURED_TEXT 
@RT(0) @RT(41)sv_ForceLimitSwitchNozzleFwd,sv_bSimulate @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(22)pLimitSwitchNozzleFwd2 @STRUCTURED_TEXT 
@RT(0) @RT(42)sv_ForceLimitSwitchNozzleFwd2,sv_bSimulate @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aGetSimulationSource @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbGetRequiredPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)FBGetRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pRequiredPumps @STRUCTURED_TEXT 
@RT(0) @RT(51)mpPumpsFwd^.RequiredPumps,mpPumpsBwd^.RequiredPumps @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    START_PROCESS_ALGORITHM(paSimulate);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
4 4 4 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)aInit @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(11)SimRequired @F @T @F @F @T @T @TL(2)
sv_bSimulate

@RT(11)SimRequired @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(3)SIM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aSimulate @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(14)StpSimRequired @F @T @F @F @T @T @TL(2)
NOT sv_bSimulate

@RT(14)StpSimRequired @F 
@Step @RT(4)STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aStopSimu @F @F @RT(1)P @RT(0) @F @F @F @F 


@Trans @RT(6)Return @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Return @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(5)aInit 1 @TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

dCycleTime :=  GET_TASK_INTERVAL();
rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;

IF mbAINozzleTransLinked THEN
   ai_Position_stat := FALSE;
END_IF;


@SaText @RT(9)aSimulate 1 @TL(56)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

rNozzleDivision := 1.0  / rNozzleTimeFor10V * rCycleTime;

fbEPForceAI.Range := 10.0; 

IF mbAINozzleTransLinked  THEN
   IF mbDONozzleFwdLinked AND mpbDONozzleFwd^ THEN
         rNozzlePosRaw := mprNozzlePosRaw^ - MUL(rNozzleDivision,mprVelocityFwd^); 
   ELSIF mbDONozzleBwdLinked AND mpbDONozzleBwd^ THEN
         rNozzlePosRaw := mprNozzlePosRaw^ + MUL(rNozzleDivision,mprVelocityBwd^); 
   END_IF;
   
   fbEPForceAI(sSysVar := 'Nozzle1.ai_Position',Value := MAX(MIN(rNozzlePosRaw,10.0), 0.0));           
END_IF;
IF NOT mpbDONozzleFwd^ THEN
   Timer(IN := FALSE);
   Timer2(IN := FALSE); 
END_IF;
IF mbDONozzleFwdLinked AND mpbDONozzleFwd^ THEN
   Timer(IN := TRUE,
         PT := t#2s);
   IF Timer.Q AND mbDILimitSwitchNozzleFwdLinked THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd',Value := TRUE);
      sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
      Timer(IN := FALSE);
   END_IF;
   Timer2(IN := TRUE,
         PT := dTimeLimit2);
   IF Timer2.Q AND mbDILimitSwitchNozzleFwdLinked2 THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2',Value := TRUE);
      sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;
      Timer2(IN := FALSE);
   END_IF; 
END_IF;
IF mbDONozzleBwdLinked AND mpbDONozzleBwd^ THEN
   Timer(IN := TRUE,
         PT := t#2s);
   IF mbDILimitSwitchNozzleFwdLinked THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd',Value := FALSE);
      sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
      Timer(IN := FALSE);
   END_IF;
   Timer2(IN := TRUE,
         PT := dTimeLimit2);
   IF mbDILimitSwitchNozzleFwdLinked2 THEN
      fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2',Value := FALSE);
      sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;
      Timer2(IN := FALSE);
   END_IF;
END_IF;



@SaText @RT(9)aStopSimu 1 @TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbAINozzleTransLinked THEN
   fbEPUnForceAI(sSysVar := 'Nozzle1.ai_Position');
END_IF;
IF mbDILimitSwitchNozzleFwdLinked THEN
   fbEPUnForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd');
   sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
END_IF;
IF mbDILimitSwitchNozzleFwdLinked2 THEN
   fbEPUnForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2');
   sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;
END_IF;
STOP_PROCESS_ALGORITHM();


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(35)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mprNozzlePosRaw:= GET_SYNC_REFTO('Nozzle1.ai_Position', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbAINozzleTransLinked := TRUE;
END_IF;

mpbDILimitSwitchNozzleFwd:= GET_SYNC_REFTO('Nozzle1.di_LimitSwitchFwd', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDILimitSwitchNozzleFwdLinked := TRUE;
   sv_ForceLimitSwitchNozzleFwd := mpbDILimitSwitchNozzleFwd^;
END_IF;

mpbDILimitSwitchNozzleFwd2:= GET_SYNC_REFTO('Nozzle1.di_LimitSwitchFwd2', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDILimitSwitchNozzleFwdLinked2 := TRUE;      
   sv_ForceLimitSwitchNozzleFwd2 := mpbDILimitSwitchNozzleFwd2^;      
END_IF;

mpbDONozzleFwd:= GET_SYNC_REFTO('Nozzle1.do_Forward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDONozzleFwdLinked := TRUE;
END_IF;

mpbDONozzleBwd:= GET_SYNC_REFTO('Nozzle1.do_Backward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDONozzleBwdLinked := TRUE;
END_IF;

STOP_PROCESS_ALGORITHM();


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDILimitSwitchNozzleFwdLinked THEN
   IF sv_bSimulate THEN
      IF sv_ForceLimitSwitchNozzleFwd THEN
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd', Value := BoolTrue);
      ELSE
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd', Value := BoolFalse);
      END_IF;
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDILimitSwitchNozzleFwdLinked2 THEN
   IF sv_bSimulate THEN
      IF sv_ForceLimitSwitchNozzleFwd2 THEN
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2', Value := BoolTrue);
      ELSE
         fbEPForceDI(sSysVar := 'Nozzle1.di_LimitSwitchFwd2', Value := BoolFalse);
      END_IF;
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumpsFwd,
                      prVelocity => mprVelocityFwd);

fbGetSimulationSource(pRequiredPumps := mpPumpsBwd,
                      prVelocity => mprVelocityBwd);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps for fwd and bwd movement
fbGetRequiredPumps.DeviceId.CompId := cCompNozzle;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumpsFwd := fbGetRequiredPumps.pPumps;

fbGetRequiredPumps(MoveDir := cMoveBwd,
                   MoveId := cMoveBwd);
mpPumpsBwd := fbGetRequiredPumps.pPumps;

aGetSimulationSource();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
