(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Algorithm block for mold nut simulation.
*)

IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, GET_SYNC_REFTO
, START_PROCESS_ALGORITHM
, KSYS_Status_OK
, cCompMoldNuts
, ABForceDigital
, tyNumberOfDevices
, TON
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABMoldNutsSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 sv_NumberOfDevices : tyNumberOfDevices;
END_VAR

SYSTEM_OBJECT
 PU_Task_13 : TASK;
 TaskAnalog : TASK;
END_OBJECT

VAR
 mpbDONutsClose : REFTO BOOL;
 mpbDONutsOpen : REFTO BOOL;
 abForceNutAOpen : ABForceDigital;
 abForceNutBOpen : ABForceDigital;
 abForceNutAClose : ABForceDigital;
 abForceNutBClose : ABForceDigital;
END_VAR

POSTUPDATE_ALGORITHM pStart ON PU_Task_13 WITH sv_bSimulate,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate AND (sv_NumberOfDevices[cCompMoldNuts] <> 0) THEN
   START_PROCESS_ALGORITHM(paSimulate);
END_IF;    


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSimulate ON TaskAnalog


VAR
 TimerClose : TON;
 TimerOpen : TON;
 bResetClose : BOOL := TRUE;
 bResetOpen : BOOL := TRUE;
 dMoveTime : TIME := t#2s;
 s : KSYS_Status;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
aInit (N);
END_STEP


(* steps *)
STEP SIM:
aSimulate (N);
END_STEP

STEP STOP:
aStopSimu (P);
END_STEP


(* transitions *)
TRANSITION SimRequired (* SimRequired *) FROM INIT TO SIM :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION StpSimRequired (* StpSimRequired *) FROM SIM TO STOP :=  #BEGIN_EDIT_BLOCK
NOT sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Return (* Return *) FROM STOP TO SIM :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDONutsClose := GET_SYNC_REFTO('MoldNuts1.do_Close', T#0s, s);
mpbDONutsOpen := GET_SYNC_REFTO('MoldNuts1.do_Open', T#0s, s);

abForceNutAOpen.aInit(Name := 'MoldNuts1.di_NutAOpened');
abForceNutBOpen.aInit(Name := 'MoldNuts1.di_NutBOpened');
abForceNutAClose.aInit(Name := 'MoldNuts1.di_NutAClosed');
abForceNutBClose.aInit(Name := 'MoldNuts1.di_NutBClosed');

//set mold nuts to "open"
abForceNutAOpen.aSetForceValue(TRUE);
abForceNutBOpen.aSetForceValue(TRUE);
abForceNutAClose.aSetForceValue(FALSE);
abForceNutBClose.aSetForceValue(FALSE);

;#END_EDIT_BLOCK END_ACTION (*aInit*)
ACTION aSimulate: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpbDONutsClose^ THEN
   //DO for mold nut close is set
   TimerClose(IN := TRUE, PT := dMoveTime);
   IF bResetClose THEN      
      abForceNutAOpen.aSetForceValue(FALSE);
      abForceNutBOpen.aSetForceValue(FALSE);
      bResetClose := FALSE;  
   END_IF;
   
   IF TimerClose.Q THEN  
      abForceNutAClose.aSetForceValue(TRUE);
      abForceNutBClose.aSetForceValue(TRUE);
   END_IF;
ELSE
   TimerClose(IN := FALSE);
   bResetClose := TRUE; 
END_IF;

IF mpbDONutsOpen^ THEN
   //DO for mold nut open is set   
   TimerOpen(IN := TRUE, PT := dMoveTime);
   IF bResetOpen THEN
      abForceNutAClose.aSetForceValue(FALSE);
      abForceNutBClose.aSetForceValue(FALSE);
      bResetOpen := FALSE;  
   END_IF;
   
   IF TimerOpen.Q THEN
      abForceNutAOpen.aSetForceValue(TRUE);
      abForceNutBOpen.aSetForceValue(TRUE);
   END_IF;
ELSE
   TimerOpen(IN := FALSE);
   bResetOpen := TRUE; 
END_IF;


;#END_EDIT_BLOCK END_ACTION (*aSimulate*)
ACTION aStopSimu: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abForceNutAOpen.aUnforce();
abForceNutBOpen.aUnforce();
abForceNutAClose.aUnforce();
abForceNutBClose.aUnforce();

STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aStopSimu*)
(* end sfc-code *)


END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Algorithm block for mold nut simulation.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(14)KSYS_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cCompMoldNuts @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)159 @RT(40)Component MoldNuts (for 2 platten IMM´s) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABMoldNutsSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(10)PU_Task_13 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bSimulate @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)mpbDONutsClose @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mpbDONutsOpen @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abForceNutAOpen @RT(0) @T @T @DERIVED 0 @F @RT(14)ABForceDigital @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abForceNutBOpen @RT(0) @T @T @DERIVED 0 @F @RT(14)ABForceDigital @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)abForceNutAClose @RT(0) @T @T @DERIVED 0 @F @RT(14)ABForceDigital @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)abForceNutBClose @RT(0) @T @T @DERIVED 0 @F @RT(14)ABForceDigital @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paSimulate @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(10)TimerClose @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)TimerOpen @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bResetClose @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bResetOpen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)dMoveTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)t#2s @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate AND (sv_NumberOfDevices[cCompMoldNuts] <> 0) THEN
   START_PROCESS_ALGORITHM(paSimulate);
END_IF;    

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
5 4 4 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)aInit @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(11)SimRequired @F @T @F @F @T @T @TL(2)
sv_bSimulate

@RT(11)SimRequired @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(3)SIM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aSimulate @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(14)StpSimRequired @F @T @F @F @T @T @TL(2)
NOT sv_bSimulate

@RT(14)StpSimRequired @F 
@Step @RT(4)STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aStopSimu @F @F @RT(1)P @RT(0) @F @F @F @F 


@Trans @RT(6)Return @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Return @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(5)aInit 1 @TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDONutsClose := GET_SYNC_REFTO('MoldNuts1.do_Close', T#0s, s);
mpbDONutsOpen := GET_SYNC_REFTO('MoldNuts1.do_Open', T#0s, s);

abForceNutAOpen.aInit(Name := 'MoldNuts1.di_NutAOpened');
abForceNutBOpen.aInit(Name := 'MoldNuts1.di_NutBOpened');
abForceNutAClose.aInit(Name := 'MoldNuts1.di_NutAClosed');
abForceNutBClose.aInit(Name := 'MoldNuts1.di_NutBClosed');

//set mold nuts to "open"
abForceNutAOpen.aSetForceValue(TRUE);
abForceNutBOpen.aSetForceValue(TRUE);
abForceNutAClose.aSetForceValue(FALSE);
abForceNutBClose.aSetForceValue(FALSE);


@SaText @RT(9)aSimulate 1 @TL(42)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpbDONutsClose^ THEN
   //DO for mold nut close is set
   TimerClose(IN := TRUE, PT := dMoveTime);
   IF bResetClose THEN      
      abForceNutAOpen.aSetForceValue(FALSE);
      abForceNutBOpen.aSetForceValue(FALSE);
      bResetClose := FALSE;  
   END_IF;
   
   IF TimerClose.Q THEN  
      abForceNutAClose.aSetForceValue(TRUE);
      abForceNutBClose.aSetForceValue(TRUE);
   END_IF;
ELSE
   TimerClose(IN := FALSE);
   bResetClose := TRUE; 
END_IF;

IF mpbDONutsOpen^ THEN
   //DO for mold nut open is set   
   TimerOpen(IN := TRUE, PT := dMoveTime);
   IF bResetOpen THEN
      abForceNutAClose.aSetForceValue(FALSE);
      abForceNutBClose.aSetForceValue(FALSE);
      bResetOpen := FALSE;  
   END_IF;
   
   IF TimerOpen.Q THEN
      abForceNutAOpen.aSetForceValue(TRUE);
      abForceNutBOpen.aSetForceValue(TRUE);
   END_IF;
ELSE
   TimerOpen(IN := FALSE);
   bResetOpen := TRUE; 
END_IF;



@SaText @RT(9)aStopSimu 1 @TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abForceNutAOpen.aUnforce();
abForceNutBOpen.aUnforce();
abForceNutAClose.aUnforce();
abForceNutBClose.aUnforce();

STOP_PROCESS_ALGORITHM();


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
