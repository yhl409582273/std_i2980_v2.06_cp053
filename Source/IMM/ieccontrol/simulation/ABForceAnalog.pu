IMPORT_OVER_LISTFILE
 KCAT_HandleData
, KCAT_Status
, KSYS_Status
, FBNoiseAI

END_IMPORT

ALGORITHM_BLOCK ABForceAnalog #DUMMY_EDIT_BLOCK

VAR
 Handle : KCAT_HandleData;
 Status : KCAT_Status;
 StatusStatFlag : KSYS_Status;
 mrLastValue : REAL;
 mbLastValueValid : BOOL (* mbLastValue is valid and we do net need to call the forcing routine *);
 mpbStat : REFTO BOOL;
 mRange : REAL;
END_VAR

(*
Initialize the block
and get the reference to the wanted IO endpoint
*)

ALGORITHM aInit


VAR_INPUT
 Name : STRING(255);
 Range : REAL := 10.0;
END_VAR

VAR_OUTPUT
 bOK : BOOL (* init was OK(could get handle for forcing) *);
END_VAR

// VAR_TEMP
 // dummy : DINT;
// END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bOK := TRUE;
mRange := Range; 
Handle := KCAT_GetHandleFromEPName(Name);                             
IF Handle.Status <> KCAT_Status_OK THEN
   //dummy := Print('simulation: Could not get AI/AO %s for forcing', Name);   
   bOK := FALSE;
END_IF;

mpbStat := GET_SYNC_REFTO(SVName := CONCAT(Name, '_stat'), Timeout := t#0S, Status := StatusStatFlag);
IF StatusStatFlag = KSYS_Status_OK THEN
   (* _stat can not be forced, but we can cyclically set it *)
   mpbStat^ := FALSE;
END_IF;

mbLastValueValid := FALSE;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Unforce the endpoint.

*)

ALGORITHM aUnforce

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Handle.Status = KCAT_Status_OK THEN
   Status := KCAT_UnForce(Handle := Handle.Handle);
END_IF;

mbLastValueValid := FALSE;



;#END_EDIT_BLOCK END_ALGORITHM

(*
Set the force value of the endpoint.
If it was not forced before, forcing is enabled.
If it was forced before the force value is updated.

If a _stat variable exists for the endpoint is is set to FALSE
*)

ALGORITHM aSetForceValue


VAR_INPUT
 rValue : REAL;
END_VAR

VAR_TEMP
 rTmpVal : REAL;
END_VAR

VAR
 fbNoise : FBNoiseAI;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Handle.Status = KCAT_Status_OK THEN
   IF StatusStatFlag = KSYS_Status_OK THEN
      (* _stat can not be forced, but we can cyclically set it *)
      mpbStat^ := FALSE;
   END_IF;

   rTmpVal := rValue;
   fbNoise(rTmpVal, mRange);

   IF mbLastValueValid AND mrLastValue = rTmpVal THEN
      (* nothing changed, save some CPU cycles *)
      RETURN;
   END_IF;
   

   Status := KCAT_SetForceValue(Handle := Handle.Handle,
                                Buffer := rTmpVal);
   mrLastValue := rTmpVal;
   mbLastValueValid := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABForceAnalog @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(6)Handle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)StatusStatFlag @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mrLastValue @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mbLastValueValid @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(67)mbLastValue is valid and we do net need to call the forcing routine @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mpbStat @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mRange @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(4)Name @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Range @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)10.0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(3)bOK @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(41)init was OK(could get handle for forcing) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aUnforce @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(14)aSetForceValue @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(6)rValue @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)rTmpVal @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(7)fbNoise @RT(0) @T @T @DERIVED 0 @F @RT(9)FBNoiseAI @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bOK := TRUE;
mRange := Range; 
Handle := KCAT_GetHandleFromEPName(Name);                             
IF Handle.Status <> KCAT_Status_OK THEN
   //dummy := Print('simulation: Could not get AI/AO %s for forcing', Name);   
   bOK := FALSE;
END_IF;

mpbStat := GET_SYNC_REFTO(SVName := CONCAT(Name, '_stat'), Timeout := t#0S, Status := StatusStatFlag);
IF StatusStatFlag = KSYS_Status_OK THEN
   (* _stat can not be forced, but we can cyclically set it *)
   mpbStat^ := FALSE;
END_IF;

mbLastValueValid := FALSE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Initialize the block
and get the reference to the wanted IO endpoint
@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Handle.Status = KCAT_Status_OK THEN
   Status := KCAT_UnForce(Handle := Handle.Handle);
END_IF;

mbLastValueValid := FALSE;


@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Unforce the endpoint.

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF Handle.Status = KCAT_Status_OK THEN
   IF StatusStatFlag = KSYS_Status_OK THEN
      (* _stat can not be forced, but we can cyclically set it *)
      mpbStat^ := FALSE;
   END_IF;

   rTmpVal := rValue;
   fbNoise(rTmpVal, mRange);

   IF mbLastValueValid AND mrLastValue = rTmpVal THEN
      (* nothing changed, save some CPU cycles *)
      RETURN;
   END_IF;
   

   Status := KCAT_SetForceValue(Handle := Handle.Handle,
                                Buffer := rTmpVal);
   mrLastValue := rTmpVal;
   mbLastValueValid := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(5)
Set the force value of the endpoint.
If it was not forced before, forcing is enabled.
If it was forced before the force value is updated.

If a _stat variable exists for the endpoint is is set to FALSE
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
