IMPORT_OVER_LISTFILE
 STOP_PROCESS_ALGORITHM
, CHECK_REF
, ABForceDigital

END_IMPORT

ALGORITHM_BLOCK ABEuromapSimulation #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 sv_bRobotEmergencyStop : BOOL;
 sv_bRobotTurnedOn : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskSim : TASK;
END_OBJECT

VAR
 mbWantCleanup : BOOL;
 mbWantInit : BOOL;
 mbEnableEjectorBwd : BOOL := TRUE;
 mbEnableEjectorFwd : BOOL := TRUE;
 mbEnableCore1ToPos1 : BOOL := TRUE;
 mbEnableCore1ToPos2 : BOOL := TRUE;
 mbEnableCore2ToPos1 : BOOL := TRUE;
 mbEnableCore2ToPos2 : BOOL := TRUE;
 mbMoldAreaFree : BOOL := TRUE;
 mbEnableMoldClosure : BOOL := TRUE;
 mbEnableFullMoldOpening : BOOL := TRUE;
 abForceEmergencyStop : ABForceDigital;
 abForceRobotOperationMode : ABForceDigital;
 abForceRobotEnableEjectorFwd : ABForceDigital;
 abForceRobotEnableEjectorBwd : ABForceDigital;
 abForceRobotCore1ToPos1 : ABForceDigital;
 abForceRobotCore1ToPos2 : ABForceDigital;
 abForceRobotCore2ToPos1 : ABForceDigital;
 abForceRobotCore2ToPos2 : ABForceDigital;
 abForceRobotMoldAreaFree : ABForceDigital;
 abForceRobotEnableFullMoldOpen : ABForceDigital;
 abForceRobotEnableMoldClosure : ABForceDigital;
END_VAR

ALGORITHM aInit


VAR_OUTPUT
 bOK : BOOL;
END_VAR

VAR
 DeviceString : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
mbWantInit := FALSE;
bOK := FALSE;
DeviceString := 'Euromap';

abForceEmergencyStop.aInit(Name := CONCAT(DeviceString, '.di_RobotEmergencyStop'));
abForceRobotOperationMode.aInit(Name := CONCAT(DeviceString, '.di_RobotOperationMode'));

abForceRobotEnableEjectorFwd.aInit(Name := CONCAT(DeviceString, '.di_EnableEjectorFwd'));
abForceRobotEnableEjectorBwd.aInit(Name := CONCAT(DeviceString, '.di_EnableEjectorBwd'));

abForceRobotCore1ToPos1.aInit(Name := CONCAT(DeviceString, '.di_EnableCore1ToPos1'));
abForceRobotCore1ToPos2.aInit(Name := CONCAT(DeviceString, '.di_EnableCore1ToPos2'));
abForceRobotCore2ToPos1.aInit(Name := CONCAT(DeviceString, '.di_EnableCore2ToPos1'));
abForceRobotCore2ToPos2.aInit(Name := CONCAT(DeviceString, '.di_EnableCore2ToPos2'));

abForceRobotMoldAreaFree.aInit(Name := CONCAT(DeviceString, '.di_MoldAreaFree'));
abForceRobotEnableFullMoldOpen.aInit(Name := CONCAT(DeviceString, '.di_EnableFullMoldOpening'));
abForceRobotEnableMoldClosure.aInit(Name := CONCAT(DeviceString, '.di_EnableMoldClosure'));

bOK := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCleanup

#BEGIN_EDIT_BLOCK
mbWantCleanup := FALSE;

abForceEmergencyStop.aUnforce();
abForceRobotOperationMode.aUnforce();

abForceRobotEnableEjectorFwd.aUnforce();
abForceRobotEnableEjectorBwd.aUnforce();

abForceRobotCore1ToPos1.aUnforce();
abForceRobotCore1ToPos2.aUnforce();
abForceRobotCore2ToPos1.aUnforce();
abForceRobotCore2ToPos2.aUnforce();

abForceRobotMoldAreaFree.aUnforce();
abForceRobotEnableFullMoldOpen.aUnforce();
abForceRobotEnableMoldClosure.aUnforce();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pSimulateStart ON PU_Task_7 WITH sv_bSimulate,sv_bInitStart

#BEGIN_EDIT_BLOCK
IF sv_bSimulate THEN
   mbWantInit := TRUE;
   START_PROCESS_ALGORITHM(paSimulate);
ELSE   
   mbWantCleanup := TRUE;
   START_PROCESS_ALGORITHM(paSimulate); //make sure it runs cleanup
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSimulate ON TaskSim

#BEGIN_EDIT_BLOCK
IF mbWantInit THEN
   aInit();
   IF NOT aInit.bOK THEN
      STOP_PROCESS_ALGORITHM();
      RETURN;
   END_IF;
END_IF;

//TRUE = emergency stop OK
abForceEmergencyStop.aSetForceValue(bValue := NOT sv_bRobotEmergencyStop);

//FALSE = Operation with injection molding machine
//TRUE  = No operation with injection molding machine
abForceRobotOperationMode.aSetForceValue(bValue := NOT sv_bRobotTurnedOn);

//For now we just simulate that all movements are allowed immediately
abForceRobotEnableEjectorFwd.aSetForceValue(bValue := mbEnableEjectorFwd);
abForceRobotEnableEjectorBwd.aSetForceValue(bValue := mbEnableEjectorBwd);

abForceRobotCore1ToPos1.aSetForceValue(bValue := mbEnableCore1ToPos1);
abForceRobotCore1ToPos2.aSetForceValue(bValue := mbEnableCore1ToPos2);
abForceRobotCore2ToPos1.aSetForceValue(bValue := mbEnableCore2ToPos1);
abForceRobotCore2ToPos2.aSetForceValue(bValue := mbEnableCore2ToPos2);

abForceRobotMoldAreaFree.aSetForceValue(bValue := mbMoldAreaFree);
abForceRobotEnableFullMoldOpen.aSetForceValue(bValue := mbEnableMoldClosure);
abForceRobotEnableMoldClosure.aSetForceValue(bValue := mbEnableFullMoldOpening);

IF mbWantCleanup THEN
   aCleanup();
   STOP_PROCESS_ALGORITHM();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)CHECK_REF @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABEuromapSimulation @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
28 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bSimulate @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bRobotEmergencyStop @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_bRobotTurnedOn @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)mbWantCleanup @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mbWantInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)mbEnableEjectorBwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)mbEnableEjectorFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbEnableCore1ToPos1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbEnableCore1ToPos2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbEnableCore2ToPos1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbEnableCore2ToPos2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbMoldAreaFree @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbEnableMoldClosure @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)mbEnableFullMoldOpening @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)abForceEmergencyStop @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)abForceRobotOperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(28)abForceRobotEnableEjectorFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(28)abForceRobotEnableEjectorBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)abForceRobotCore1ToPos1 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)abForceRobotCore1ToPos2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)abForceRobotCore2ToPos1 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)abForceRobotCore2ToPos2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)abForceRobotMoldAreaFree @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(30)abForceRobotEnableFullMoldOpen @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(29)abForceRobotEnableMoldClosure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(3)bOK @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)DeviceString @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aCleanup @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pSimulateStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paSimulate @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(21)
mbWantInit := FALSE;
bOK := FALSE;
DeviceString := 'Euromap';

abForceEmergencyStop.aInit(Name := CONCAT(DeviceString, '.di_RobotEmergencyStop'));
abForceRobotOperationMode.aInit(Name := CONCAT(DeviceString, '.di_RobotOperationMode'));

abForceRobotEnableEjectorFwd.aInit(Name := CONCAT(DeviceString, '.di_EnableEjectorFwd'));
abForceRobotEnableEjectorBwd.aInit(Name := CONCAT(DeviceString, '.di_EnableEjectorBwd'));

abForceRobotCore1ToPos1.aInit(Name := CONCAT(DeviceString, '.di_EnableCore1ToPos1'));
abForceRobotCore1ToPos2.aInit(Name := CONCAT(DeviceString, '.di_EnableCore1ToPos2'));
abForceRobotCore2ToPos1.aInit(Name := CONCAT(DeviceString, '.di_EnableCore2ToPos1'));
abForceRobotCore2ToPos2.aInit(Name := CONCAT(DeviceString, '.di_EnableCore2ToPos2'));

abForceRobotMoldAreaFree.aInit(Name := CONCAT(DeviceString, '.di_MoldAreaFree'));
abForceRobotEnableFullMoldOpen.aInit(Name := CONCAT(DeviceString, '.di_EnableFullMoldOpening'));
abForceRobotEnableMoldClosure.aInit(Name := CONCAT(DeviceString, '.di_EnableMoldClosure'));

bOK := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
mbWantCleanup := FALSE;

abForceEmergencyStop.aUnforce();
abForceRobotOperationMode.aUnforce();

abForceRobotEnableEjectorFwd.aUnforce();
abForceRobotEnableEjectorBwd.aUnforce();

abForceRobotCore1ToPos1.aUnforce();
abForceRobotCore1ToPos2.aUnforce();
abForceRobotCore2ToPos1.aUnforce();
abForceRobotCore2ToPos2.aUnforce();

abForceRobotMoldAreaFree.aUnforce();
abForceRobotEnableFullMoldOpen.aUnforce();
abForceRobotEnableMoldClosure.aUnforce();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
IF sv_bSimulate THEN
   mbWantInit := TRUE;
   START_PROCESS_ALGORITHM(paSimulate);
ELSE   
   mbWantCleanup := TRUE;
   START_PROCESS_ALGORITHM(paSimulate); //make sure it runs cleanup
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(33)
IF mbWantInit THEN
   aInit();
   IF NOT aInit.bOK THEN
      STOP_PROCESS_ALGORITHM();
      RETURN;
   END_IF;
END_IF;

//TRUE = emergency stop OK
abForceEmergencyStop.aSetForceValue(bValue := NOT sv_bRobotEmergencyStop);

//FALSE = Operation with injection molding machine
//TRUE  = No operation with injection molding machine
abForceRobotOperationMode.aSetForceValue(bValue := NOT sv_bRobotTurnedOn);

//For now we just simulate that all movements are allowed immediately
abForceRobotEnableEjectorFwd.aSetForceValue(bValue := mbEnableEjectorFwd);
abForceRobotEnableEjectorBwd.aSetForceValue(bValue := mbEnableEjectorBwd);

abForceRobotCore1ToPos1.aSetForceValue(bValue := mbEnableCore1ToPos1);
abForceRobotCore1ToPos2.aSetForceValue(bValue := mbEnableCore1ToPos2);
abForceRobotCore2ToPos1.aSetForceValue(bValue := mbEnableCore2ToPos1);
abForceRobotCore2ToPos2.aSetForceValue(bValue := mbEnableCore2ToPos2);

abForceRobotMoldAreaFree.aSetForceValue(bValue := mbMoldAreaFree);
abForceRobotEnableFullMoldOpen.aSetForceValue(bValue := mbEnableMoldClosure);
abForceRobotEnableMoldClosure.aSetForceValue(bValue := mbEnableFullMoldOpening);

IF mbWantCleanup THEN
   aCleanup();
   STOP_PROCESS_ALGORITHM();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
