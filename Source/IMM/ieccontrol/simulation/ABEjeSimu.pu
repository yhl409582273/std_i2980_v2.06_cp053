IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, GET_SYNC_REFTO
, KSYS_Status_OK
, FBEPForceAI
, FBEPForceDI
, FBEPUnForceAI
, FBEPUnForceDI
, tsRequiredPumps
, FBGetSimulationSource
, TON
, KSYS_Status
, FBGetRequiredPumps

END_IMPORT

ALGORITHM_BLOCK ABEjeSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 ai_Position_stat : BOOL;
 sv_ForceEjectorBack : BOOL;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskSim : TASK;
 PU_Task_13 : TASK;
 TaskAnalog : TASK;
END_OBJECT

VAR
 fbEPForceAI : FBEPForceAI;
 fbEPForceDI : FBEPForceDI;
 mbDIEjectorBackLinked : BOOL;
 fbEPUnForceAI : FBEPUnForceAI;
 fbEPUnForceDI : FBEPUnForceDI;
 mpPumps : REFTO tsRequiredPumps;
 mprVelocity : REFTO REAL;
 fbGetSimulationSource : FBGetSimulationSource;
END_VAR

POSTUPDATE_ALGORITHM pStart ON PU_Task_13 WITH sv_bSimulate,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
   START_PROCESS_ALGORITHM(paSimulate);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSimulate ON TaskAnalog


VAR
 rEjectDivision : REAL := 0.3;
 mrEjectorPosRaw : REAL;
 rEjectTimeFor10V : REAL := 1.0;
 TimerFwd : TON (* chad(CR_0038565) *);
 TimerBwd : TON (* chad(CR_0038565) *);
 rCycleTime : REAL;
 dCycleTime : TIME;
 prEjectorPosRaw : REFTO REAL;
 bAIEjectorTransLinked : BOOL;
 pbDOEjectorBwd : REFTO BOOL;
 pbDOEjectorFwd : REFTO BOOL;
 bDOEjectorFwdLinked : BOOL;
 bDOEjectorBwdLinked : BOOL;
 bDIEjectorFwdLinked : BOOL (* chad(CR_0038565) *);
 pbDummy : REFTO BOOL;
 Status : KSYS_Status;
 bDIEjectorSafetyPlateLinked : BOOL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
aInit (P);
END_STEP


(* steps *)
STEP SIM:
aSimulate (N);
END_STEP

STEP STOP:
aStopSimu (P);
END_STEP


(* transitions *)
TRANSITION SimRequired (* SimRequired *) FROM INIT TO SIM :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION StpSimRequired (* StpSimRequired *) FROM SIM TO STOP :=  #BEGIN_EDIT_BLOCK
NOT sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Return (* Return *) FROM STOP TO SIM :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

pbDummy := GET_SYNC_REFTO('Ejector1.di_EjectorBwd', T#0s, Status);
mbDIEjectorBackLinked := (Status = KSYS_Status_OK);

pbDummy := GET_SYNC_REFTO('Ejector1.di_EjectorFwd', T#0s, Status);
bDIEjectorFwdLinked := (Status = KSYS_Status_OK);

prEjectorPosRaw := GET_SYNC_REFTO('Ejector1.ai_Position', T#0s, Status);
bAIEjectorTransLinked := (Status = KSYS_Status_OK);

pbDOEjectorFwd := GET_SYNC_REFTO('Ejector1.do_Forward', T#0s, Status); 
bDOEjectorFwdLinked := (Status = KSYS_Status_OK);

pbDOEjectorBwd := GET_SYNC_REFTO('Ejector1.do_Backward', T#0s, Status); 
bDOEjectorBwdLinked := (Status = KSYS_Status_OK);

pbDummy := GET_SYNC_REFTO('Ejector1.di_SafetyPlate', T#0s, Status);
bDIEjectorSafetyPlateLinked := (Status = KSYS_Status_OK);
IF bDIEjectorSafetyPlateLinked THEN
   fbEPForceDI(sSysVar := 'Ejector1.di_SafetyPlate',Value := TRUE);
END_IF;


dCycleTime :=  GET_TASK_INTERVAL();
rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;
rEjectDivision := 1.0  / rEjectTimeFor10V * rCycleTime;

sv_ForceEjectorBack := TRUE;

IF bDIEjectorFwdLinked THEN    //chad(CR_0038565)
   fbEPForceDI(sSysVar := 'Ejector1.di_EjectorFwd',Value := FALSE); 
END_IF;

IF bAIEjectorTransLinked THEN
   ai_Position_stat := FALSE;
   fbEPForceAI(sSysVar := 'Ejector1.ai_Position',Value := 0.0, Range := 10.0);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aInit*)
ACTION aSimulate: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bAIEjectorTransLinked THEN
   IF bDOEjectorFwdLinked AND pbDOEjectorFwd^ THEN
      mrEjectorPosRaw := prEjectorPosRaw^ + MUL(rEjectDivision,mprVelocity^); 
      sv_ForceEjectorBack := FALSE;
   ELSIF bDOEjectorBwdLinked AND pbDOEjectorBwd^ THEN
      mrEjectorPosRaw := prEjectorPosRaw^ - MUL(rEjectDivision,mprVelocity^); 
      IF prEjectorPosRaw^ <= 2.0 THEN
            sv_ForceEjectorBack := TRUE;
      END_IF;   
   END_IF;
   fbEPForceAI(sSysVar := 'Ejector1.ai_Position', Value := MAX(mrEjectorPosRaw,0.0), Range := 10.0);           

ELSE    //chad(CR_0038565) - transducer not linked
    
   //Move forward simulation
   IF bDOEjectorFwdLinked AND (NOT pbDOEjectorFwd^) THEN
      TimerFwd(IN := FALSE);
   END_IF;

   IF bDOEjectorFwdLinked AND pbDOEjectorFwd^ THEN
      TimerFwd(IN := TRUE, PT := t#4s);
      IF mbDIEjectorBackLinked THEN
         sv_ForceEjectorBack := FALSE;
         TimerBwd(IN := FALSE);
      END_IF;
      
      IF TimerFwd.Q AND bDIEjectorFwdLinked THEN
         fbEPForceDI(sSysVar := 'Ejector1.di_EjectorFwd',Value := TRUE);
         TimerFwd(IN := FALSE);
      END_IF;
   END_IF;

   //Move backward simulation
   IF bDOEjectorBwdLinked AND (NOT pbDOEjectorBwd^) THEN
      TimerBwd(IN := FALSE);
   END_IF;
   
   IF bDOEjectorBwdLinked AND pbDOEjectorBwd^ THEN
      TimerBwd(IN := TRUE, PT := t#4s);
      IF bDIEjectorFwdLinked THEN
         fbEPForceDI(sSysVar := 'Ejector1.di_EjectorFwd',Value := FALSE);
         TimerFwd(IN := FALSE);
      END_IF;

      IF TimerBwd.Q AND mbDIEjectorBackLinked THEN
         sv_ForceEjectorBack := TRUE;
         TimerBwd(IN := FALSE);
      END_IF;
   END_IF;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aSimulate*)
ACTION aStopSimu: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bAIEjectorTransLinked THEN
   fbEPUnForceAI(sSysVar := 'Ejector1.ai_Position');
END_IF;
IF mbDIEjectorBackLinked THEN
   fbEPUnForceDI(sSysVar := 'Ejector1.di_EjectorBwd');
END_IF;
IF bDIEjectorSafetyPlateLinked THEN
   fbEPUnForceDI(sSysVar := 'Ejector1.di_SafetyPlate');
END_IF;
IF bDIEjectorFwdLinked THEN   //chad(CR_0038565)
   fbEPUnForceDI(sSysVar := 'Ejector1.di_EjectorFwd');
END_IF;

STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aStopSimu*)
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pEjectorBwd ON TaskSim WITH sv_ForceEjectorBack

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDIEjectorBackLinked THEN
   fbEPForceDI(sSysVar := 'Ejector1.di_EjectorBwd',Value := sv_ForceEjectorBack);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetSimulationSource

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON TaskSim WITH sv_bInitDone


VAR
 fbGetRequiredPumps : FBGetRequiredPumps;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompEjector;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pRequiredPumps ON TaskSim WITH mpPumps^.RequiredPumps

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(14)KSYS_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABEjeSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(12)sv_bSimulate @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)ai_Position_stat @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)fbEPForceAI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceAI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)fbEPForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbDIEjectorBackLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbEPUnForceAI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBEPUnForceAI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbEPUnForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBEPUnForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)sv_ForceEjectorBack @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)mpPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)mprVelocity @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbGetSimulationSource @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)FBGetSimulationSource @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paSimulate @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
17 
@Var @RT(14)rEjectDivision @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.3 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mrEjectorPosRaw @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)rEjectTimeFor10V @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)1.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)TimerFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)chad(CR_0038565) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)TimerBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)chad(CR_0038565) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)prEjectorPosRaw @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)bAIEjectorTransLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)pbDOEjectorBwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)pbDOEjectorFwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)bDOEjectorFwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)bDOEjectorBwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)bDIEjectorFwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)chad(CR_0038565) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)pbDummy @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)bDIEjectorSafetyPlateLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(11)pEjectorBwd @STRUCTURED_TEXT 
@RT(0) @RT(19)sv_ForceEjectorBack @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aGetSimulationSource @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbGetRequiredPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)FBGetRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pRequiredPumps @STRUCTURED_TEXT 
@RT(0) @RT(22)mpPumps^.RequiredPumps @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
   START_PROCESS_ALGORITHM(paSimulate);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
4 4 4 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)aInit @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(11)SimRequired @F @T @F @F @T @T @TL(2)
sv_bSimulate

@RT(11)SimRequired @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(3)SIM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aSimulate @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(14)StpSimRequired @F @T @F @F @T @T @TL(2)
NOT sv_bSimulate

@RT(14)StpSimRequired @F 
@Step @RT(4)STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aStopSimu @F @F @RT(1)P @RT(0) @F @F @F @F 


@Trans @RT(6)Return @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Return @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(5)aInit 1 @TL(42)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

pbDummy := GET_SYNC_REFTO('Ejector1.di_EjectorBwd', T#0s, Status);
mbDIEjectorBackLinked := (Status = KSYS_Status_OK);

pbDummy := GET_SYNC_REFTO('Ejector1.di_EjectorFwd', T#0s, Status);
bDIEjectorFwdLinked := (Status = KSYS_Status_OK);

prEjectorPosRaw := GET_SYNC_REFTO('Ejector1.ai_Position', T#0s, Status);
bAIEjectorTransLinked := (Status = KSYS_Status_OK);

pbDOEjectorFwd := GET_SYNC_REFTO('Ejector1.do_Forward', T#0s, Status); 
bDOEjectorFwdLinked := (Status = KSYS_Status_OK);

pbDOEjectorBwd := GET_SYNC_REFTO('Ejector1.do_Backward', T#0s, Status); 
bDOEjectorBwdLinked := (Status = KSYS_Status_OK);

pbDummy := GET_SYNC_REFTO('Ejector1.di_SafetyPlate', T#0s, Status);
bDIEjectorSafetyPlateLinked := (Status = KSYS_Status_OK);
IF bDIEjectorSafetyPlateLinked THEN
   fbEPForceDI(sSysVar := 'Ejector1.di_SafetyPlate',Value := TRUE);
END_IF;


dCycleTime :=  GET_TASK_INTERVAL();
rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;
rEjectDivision := 1.0  / rEjectTimeFor10V * rCycleTime;

sv_ForceEjectorBack := TRUE;

IF bDIEjectorFwdLinked THEN    //chad(CR_0038565)
   fbEPForceDI(sSysVar := 'Ejector1.di_EjectorFwd',Value := FALSE); 
END_IF;

IF bAIEjectorTransLinked THEN
   ai_Position_stat := FALSE;
   fbEPForceAI(sSysVar := 'Ejector1.ai_Position',Value := 0.0, Range := 10.0);
END_IF;


@SaText @RT(9)aSimulate 1 @TL(56)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bAIEjectorTransLinked THEN
   IF bDOEjectorFwdLinked AND pbDOEjectorFwd^ THEN
      mrEjectorPosRaw := prEjectorPosRaw^ + MUL(rEjectDivision,mprVelocity^); 
      sv_ForceEjectorBack := FALSE;
   ELSIF bDOEjectorBwdLinked AND pbDOEjectorBwd^ THEN
      mrEjectorPosRaw := prEjectorPosRaw^ - MUL(rEjectDivision,mprVelocity^); 
      IF prEjectorPosRaw^ <= 2.0 THEN
            sv_ForceEjectorBack := TRUE;
      END_IF;   
   END_IF;
   fbEPForceAI(sSysVar := 'Ejector1.ai_Position', Value := MAX(mrEjectorPosRaw,0.0), Range := 10.0);           

ELSE    //chad(CR_0038565) - transducer not linked
    
   //Move forward simulation
   IF bDOEjectorFwdLinked AND (NOT pbDOEjectorFwd^) THEN
      TimerFwd(IN := FALSE);
   END_IF;

   IF bDOEjectorFwdLinked AND pbDOEjectorFwd^ THEN
      TimerFwd(IN := TRUE, PT := t#4s);
      IF mbDIEjectorBackLinked THEN
         sv_ForceEjectorBack := FALSE;
         TimerBwd(IN := FALSE);
      END_IF;
      
      IF TimerFwd.Q AND bDIEjectorFwdLinked THEN
         fbEPForceDI(sSysVar := 'Ejector1.di_EjectorFwd',Value := TRUE);
         TimerFwd(IN := FALSE);
      END_IF;
   END_IF;

   //Move backward simulation
   IF bDOEjectorBwdLinked AND (NOT pbDOEjectorBwd^) THEN
      TimerBwd(IN := FALSE);
   END_IF;
   
   IF bDOEjectorBwdLinked AND pbDOEjectorBwd^ THEN
      TimerBwd(IN := TRUE, PT := t#4s);
      IF bDIEjectorFwdLinked THEN
         fbEPForceDI(sSysVar := 'Ejector1.di_EjectorFwd',Value := FALSE);
         TimerFwd(IN := FALSE);
      END_IF;

      IF TimerBwd.Q AND mbDIEjectorBackLinked THEN
         sv_ForceEjectorBack := TRUE;
         TimerBwd(IN := FALSE);
      END_IF;
   END_IF;
END_IF;


@SaText @RT(9)aStopSimu 1 @TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bAIEjectorTransLinked THEN
   fbEPUnForceAI(sSysVar := 'Ejector1.ai_Position');
END_IF;
IF mbDIEjectorBackLinked THEN
   fbEPUnForceDI(sSysVar := 'Ejector1.di_EjectorBwd');
END_IF;
IF bDIEjectorSafetyPlateLinked THEN
   fbEPUnForceDI(sSysVar := 'Ejector1.di_SafetyPlate');
END_IF;
IF bDIEjectorFwdLinked THEN   //chad(CR_0038565)
   fbEPUnForceDI(sSysVar := 'Ejector1.di_EjectorFwd');
END_IF;

STOP_PROCESS_ALGORITHM();


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDIEjectorBackLinked THEN
   fbEPForceDI(sSysVar := 'Ejector1.di_EjectorBwd',Value := sv_ForceEjectorBack);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompEjector;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
