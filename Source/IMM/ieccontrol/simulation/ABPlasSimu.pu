IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, GET_TASK_INTERVAL
, nElectric
, KSYS_Status_OK
, cInjectSimuReduction
, KAPPL_LintabData
, KHW_Vel_Data
, tnMotorType
, KAPPL_Plastics_Output
, tsRequiredPumps
, FBGetSimulationSource
, KSYS_Status
, ABForceAnalog
, FBEPForceDI
, FBEPUnForceDI
, TON
, FBEPForceVI
, FBEPUnForceVI
, FBGetRequiredPumps

END_IMPORT

ALGORITHM_BLOCK ABPlasSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 sv_MaxRpm : REAL;
 sv_RpmGain : DINT;
 sv_PlastMotorDelintab : KAPPL_LintabData;
 sv_PumpVDelintab : KAPPL_LintabData;
 sv_bInitDone : BOOL;
 sv_rNull : REAL;
END_VAR

SYSTEM_OBJECT
 TaskSim : TASK;
 PU_Task_13 : TASK;
 PU_Task_7 : TASK;
 TaskInject : TASK;
END_OBJECT

VAR_EXTERNAL
 gprAIScrewPos : REFTO REAL;
 gbScrewTransLinked : BOOL;
 gbReduceInjectSimu : BOOL;
END_VAR

VAR
 mpbDOPlas : REFTO BOOL;
 mbDOPlasLinked : BOOL;
 mpVIPlasImpulse : REFTO KHW_Vel_Data;
 mpbDIPlasImpulse : REFTO BOOL;
 mVIPlasImpulseLinked : BOOL;
 mpPlastMotor : REFTO tnMotorType;
 mbDIPlasImpulseLinked : BOOL;
 fbDelinearize : KAPPL_Plastics_Output;
 fbDelinearizeVel : KAPPL_Plastics_Output (* additional delinearisation with pump lintab *);
 mpPumps : REFTO tsRequiredPumps;
 mprVelocity : REFTO REAL;
 fbGetSimulationSource : FBGetSimulationSource;
END_VAR

ALGORITHM aGetSimulationSource


VAR
 prAOPlastMotor : REFTO REAL;
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (mpPlastMotor <> EMPTY)AND (mpPlastMotor^ = nElectric) THEN
   //electric plast
   prAOPlastMotor := GET_SYNC_REFTO('Injection1.ao_PlastMotor', T#0s, Status);
   IF prAOPlastMotor <> EMPTY  THEN
      mprVelocity := prAOPlastMotor;
   ELSE
      mprVelocity := @sv_rNull;
   END_IF;
ELSE
   //hydraulic plast
   fbGetSimulationSource(pRequiredPumps := mpPumps,
                         prVelocity => mprVelocity);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pStart ON PU_Task_13 WITH sv_bSimulate,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    IF gbScrewTransLinked THEN
       START_PROCESS_ALGORITHM(paSimulatePos);
    END_IF;
    IF (mbDIPlasImpulseLinked OR mVIPlasImpulseLinked) THEN
       START_PROCESS_ALGORITHM(paSimulateRotate);
    END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSimulatePos ON TaskInject


VAR
 rScrewPosRaw : REAL;
 rPlastDivision : REAL := 0.02;
 rPlastTimeFor10V : REAL := 5.0;
 rCycleTime : REAL;
 dCycleTime : TIME;
 abForcePosition : ABForceAnalog;
 iReductionCount : DINT;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
aInit (P);
END_STEP


(* steps *)
STEP SIM:
aSimulate (N);
END_STEP

STEP STOP:
aStopSimu (P);
END_STEP


(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM INIT TO SIM :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION StpSimRequired (* StpSimRequired *) FROM SIM TO STOP :=  #BEGIN_EDIT_BLOCK
NOT sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Return (* Return *) FROM STOP TO SIM :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get cycle time
IF gbReduceInjectSimu THEN
   dCycleTime := MULTIME(GET_TASK_INTERVAL(), cInjectSimuReduction);
ELSE
   dCycleTime := GET_TASK_INTERVAL();
END_IF;

rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;

rPlastDivision := 1.0  / rPlastTimeFor10V * rCycleTime;

abForcePosition.aInit(Name := 'Injection1.ai_Position');



;#END_EDIT_BLOCK END_ACTION (*aInit*)
ACTION aSimulate: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//reduce forcing of analog inputs due to performance reasons
IF gbReduceInjectSimu THEN
   IF iReductionCount > cInjectSimuReduction THEN
      iReductionCount := 0;
   ELSE
      iReductionCount := iReductionCount + 1;
      RETURN;  // return
   END_IF;
END_IF;

//normal movement simulation
IF gbScrewTransLinked AND gprAIScrewPos^ >= 0.0 AND gprAIScrewPos^ <= 10.0 THEN
   IF mbDOPlasLinked AND mpbDOPlas^ THEN
      rScrewPosRaw := gprAIScrewPos^ + MUL(rPlastDivision,mprVelocity^);
      abForcePosition.aSetForceValue(rValue := MIN(rScrewPosRaw,10.0));
   END_IF;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aSimulate*)
ACTION aStopSimu: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF gbScrewTransLinked THEN
   abForcePosition.aUnforce();
END_IF;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aStopSimu*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paSimulateRotate ON TaskSim


VAR
 fbEPForceDI : FBEPForceDI;
 fbEPUnForceDI : FBEPUnForceDI;
 TimerOff : TON;
 TimerOn : TON;
 rVelocityNonLinear : REAL;
 simValueVI : KHW_Vel_Data;
 fbEPForceVI : FBEPForceVI;
 fbEPUnForceVI : FBEPUnForceVI;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
aInit (P);
END_STEP


(* steps *)
STEP SIM:
aSimulate (N);
END_STEP

STEP STOP:
aStopSimu (P);
END_STEP


(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM INIT TO SIM :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION StpSimRequired (* StpSimRequired *) FROM SIM TO STOP :=  #BEGIN_EDIT_BLOCK
NOT sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Return (* Return *) FROM STOP TO SIM :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbDelinearize(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PlastMotorDelintab,
             Ramps := 999999.9,
             ReParam := TRUE);

fbDelinearizeVel(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PumpVDelintab,
             Ramps := 999999.9,
             ReParam := TRUE);

;#END_EDIT_BLOCK END_ACTION (*aInit*)
ACTION aSimulate: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//normal movement simulation

// delinearizing velocity for rpm autocalib
fbDelinearizeVel(SetValue := mprVelocity^,
                 ReParam := FALSE);

fbDelinearize(SetValue := fbDelinearizeVel.OutputValue,
              ReParam := FALSE);         
rVelocityNonLinear := fbDelinearize.OutputValue;

IF gbScrewTransLinked AND gprAIScrewPos^ >= 0.0 AND gprAIScrewPos^ <= 10.0 THEN
   IF mbDOPlasLinked AND mpbDOPlas^ THEN
      IF (mbDIPlasImpulseLinked OR mVIPlasImpulseLinked) AND (rVelocityNonLinear <> 0.0) THEN
         TimerOff(IN := TRUE,
                  PT := LINT_TO_TIME(REAL_TO_LINT(60.0 * 10000000.0 * 1000.0/(rVelocityNonLinear *sv_MaxRpm))/(DINT_TO_LINT(sv_RpmGain)*1000) - 2000));
         IF TimerOff.Q THEN
            IF (mVIPlasImpulseLinked) THEN
                simValueVI.newPeriodReady := TRUE;
                simValueVI.periodTime := LINT_TO_REAL(TIME_TO_LINT(TimerOff.ET) + 2000)/1000000.0;
                fbEPForceVI(sSysVar := 'Injection1.vi_ImpulseInput', Value := simValueVI); 
            ELSIF (mbDIPlasImpulseLinked) THEN            
                fbEPForceDI(sSysVar := 'Injection1.di_ImpulseInput',Value := TRUE);
            END_IF;
            TimerOn(IN := TRUE,
                     PT :=t#2ms);
         END_IF;            
         IF TimerOn.Q THEN
            IF (mVIPlasImpulseLinked) THEN
                simValueVI.newPeriodReady := FALSE;
                fbEPForceVI(sSysVar := 'Injection1.vi_ImpulseInput', Value := simValueVI); 
            ELSIF (mbDIPlasImpulseLinked) THEN            
                fbEPForceDI(sSysVar := 'Injection1.di_ImpulseInput',Value := FALSE);
            END_IF;                
            TimerOn(IN :=FALSE);         
            TimerOff(IN := FALSE);
         END_IF;
      END_IF;
   ELSIF (mVIPlasImpulseLinked) THEN
      TimerOn(IN :=FALSE);         
      TimerOff(IN := FALSE);
      simValueVI.newPeriodReady := FALSE;
      simValueVI.periodTime := 0.0;
      fbEPForceVI(sSysVar := 'Injection1.vi_ImpulseInput', Value := simValueVI); 
   ELSIF (mbDIPlasImpulseLinked) THEN
      TimerOn(IN :=FALSE);         
      TimerOff(IN := FALSE);
      fbEPForceDI(sSysVar :='Injection1.di_ImpulseInput',Value := FALSE);
   END_IF;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aSimulate*)
ACTION aStopSimu: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (mVIPlasImpulseLinked) THEN
   fbEPUnForceVI(sSysVar := 'Injection1.vi_ImpulseInput');
ELSIF (mbDIPlasImpulseLinked) THEN
   fbEPUnForceDI(sSysVar := 'Injection1.di_ImpulseInput');
END_IF;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aStopSimu*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskSim AUTOSTART


VAR
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDOPlas := GET_SYNC_REFTO('Injection1.do_Plasticize', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDOPlasLinked := TRUE;
END_IF;

mpbDIPlasImpulse := GET_SYNC_REFTO('Injection1.di_ImpulseInput', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDIPlasImpulseLinked := TRUE;
END_IF;

mpVIPlasImpulse := GET_SYNC_REFTO('Injection1.vi_ImpulseInput', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mVIPlasImpulseLinked := TRUE;
END_IF;

mpPlastMotor := GET_SYNC_REFTO('Injection1.sv_PlastMotor', T#0s, Status);

//init reference to avoid nullpointer errors
mprVelocity := @sv_rNull;

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pDelintabChanged ON PU_Task_7 WITH sv_PlastMotorDelintab,sv_PumpVDelintab

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbDelinearize(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PlastMotorDelintab,
             Ramps := 999999.9,
             ReParam := TRUE);

fbDelinearizeVel(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PumpVDelintab,                  
             Ramps := 999999.9,
             ReParam := TRUE);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON TaskSim WITH sv_bInitDone


VAR
 fbGetRequiredPumps : FBGetRequiredPumps;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompInjection;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveBwd,
                   MoveId := cMovePlast);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pRequiredPumps ON TaskSim WITH mpPumps^.RequiredPumps,mpPlastMotor^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
3 
@Var @RT(9)nElectric @RT(0) @T @T @DERIVED 0 @F @RT(11)tnMotorType @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(14)electric motor 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KSYS_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cInjectSimuReduction @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)50 @RT(55)reduction factor for simulation of inject, plast decomp 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(10)ABPlasSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
27 
@Var @RT(12)sv_bSimulate @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)sv_MaxRpm @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)sv_RpmGain @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_PlastMotorDelintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_PumpVDelintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)gprAIScrewPos @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(18)gbScrewTransLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(9)mpbDOPlas @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbDOPlasLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mpVIPlasImpulse @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(12)KHW_Vel_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mpbDIPlasImpulse @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mVIPlasImpulseLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mpPlastMotor @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(11)tnMotorType @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbDIPlasImpulseLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbDelinearize @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KAPPL_Plastics_Output @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)fbDelinearizeVel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KAPPL_Plastics_Output @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)additional delinearisation with pump lintab @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)gbReduceInjectSimu @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(7)mpPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @F @RT(15)tsRequiredPumps @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)mprVelocity @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbGetSimulationSource @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)FBGetSimulationSource @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sv_rNull @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

8 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aGetSimulationSource @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(14)prAOPlastMotor @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(13)paSimulatePos @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskInject @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(12)rScrewPosRaw @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)rPlastDivision @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.02 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)rPlastTimeFor10V @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)5.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abForcePosition @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABForceAnalog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)iReductionCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(16)paSimulateRotate @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(11)fbEPForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbEPUnForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBEPUnForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)TimerOff @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)TimerOn @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)rVelocityNonLinear @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)simValueVI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KHW_Vel_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)fbEPForceVI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceVI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbEPUnForceVI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)FBEPUnForceVI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskSim @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pDelintabChanged @STRUCTURED_TEXT 
@RT(0) @RT(38)sv_PlastMotorDelintab,sv_PumpVDelintab @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbGetRequiredPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)FBGetRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pRequiredPumps @STRUCTURED_TEXT 
@RT(0) @RT(36)mpPumps^.RequiredPumps,mpPlastMotor^ @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (mpPlastMotor <> EMPTY)AND (mpPlastMotor^ = nElectric) THEN
   //electric plast
   prAOPlastMotor := GET_SYNC_REFTO('Injection1.ao_PlastMotor', T#0s, Status);
   IF prAOPlastMotor <> EMPTY  THEN
      mprVelocity := prAOPlastMotor;
   ELSE
      mprVelocity := @sv_rNull;
   END_IF;
ELSE
   //hydraulic plast
   fbGetSimulationSource(pRequiredPumps := mpPumps,
                         prVelocity => mprVelocity);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    IF gbScrewTransLinked THEN
       START_PROCESS_ALGORITHM(paSimulatePos);
    END_IF;
    IF (mbDIPlasImpulseLinked OR mVIPlasImpulseLinked) THEN
       START_PROCESS_ALGORITHM(paSimulateRotate);
    END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
4 4 4 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)aInit @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
sv_bSimulate

@RT(6)Trans1 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(3)SIM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aSimulate @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(14)StpSimRequired @F @T @F @F @T @T @TL(2)
NOT sv_bSimulate

@RT(14)StpSimRequired @F 
@Step @RT(4)STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aStopSimu @F @F @RT(1)P @RT(0) @F @F @F @F 


@Trans @RT(6)Return @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Return @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(5)aInit 1 @TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get cycle time
IF gbReduceInjectSimu THEN
   dCycleTime := MULTIME(GET_TASK_INTERVAL(), cInjectSimuReduction);
ELSE
   dCycleTime := GET_TASK_INTERVAL();
END_IF;

rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;

rPlastDivision := 1.0  / rPlastTimeFor10V * rCycleTime;

abForcePosition.aInit(Name := 'Injection1.ai_Position');




@SaText @RT(9)aSimulate 1 @TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//reduce forcing of analog inputs due to performance reasons
IF gbReduceInjectSimu THEN
   IF iReductionCount > cInjectSimuReduction THEN
      iReductionCount := 0;
   ELSE
      iReductionCount := iReductionCount + 1;
      RETURN;  // return
   END_IF;
END_IF;

//normal movement simulation
IF gbScrewTransLinked AND gprAIScrewPos^ >= 0.0 AND gprAIScrewPos^ <= 10.0 THEN
   IF mbDOPlasLinked AND mpbDOPlas^ THEN
      rScrewPosRaw := gprAIScrewPos^ + MUL(rPlastDivision,mprVelocity^);
      abForcePosition.aSetForceValue(rValue := MIN(rScrewPosRaw,10.0));
   END_IF;
END_IF;


@SaText @RT(9)aStopSimu 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF gbScrewTransLinked THEN
   abForcePosition.aUnforce();
END_IF;
STOP_PROCESS_ALGORITHM();


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
4 4 4 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)aInit @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
sv_bSimulate

@RT(6)Trans1 @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(3)SIM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aSimulate @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(14)StpSimRequired @F @T @F @F @T @T @TL(2)
NOT sv_bSimulate

@RT(14)StpSimRequired @F 
@Step @RT(4)STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aStopSimu @F @F @RT(1)P @RT(0) @F @F @F @F 


@Trans @RT(6)Return @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Return @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(5)aInit 1 @TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbDelinearize(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PlastMotorDelintab,
             Ramps := 999999.9,
             ReParam := TRUE);

fbDelinearizeVel(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PumpVDelintab,
             Ramps := 999999.9,
             ReParam := TRUE);


@SaText @RT(9)aSimulate 1 @TL(55)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//normal movement simulation

// delinearizing velocity for rpm autocalib
fbDelinearizeVel(SetValue := mprVelocity^,
                 ReParam := FALSE);

fbDelinearize(SetValue := fbDelinearizeVel.OutputValue,
              ReParam := FALSE);         
rVelocityNonLinear := fbDelinearize.OutputValue;

IF gbScrewTransLinked AND gprAIScrewPos^ >= 0.0 AND gprAIScrewPos^ <= 10.0 THEN
   IF mbDOPlasLinked AND mpbDOPlas^ THEN
      IF (mbDIPlasImpulseLinked OR mVIPlasImpulseLinked) AND (rVelocityNonLinear <> 0.0) THEN
         TimerOff(IN := TRUE,
                  PT := LINT_TO_TIME(REAL_TO_LINT(60.0 * 10000000.0 * 1000.0/(rVelocityNonLinear *sv_MaxRpm))/(DINT_TO_LINT(sv_RpmGain)*1000) - 2000));
         IF TimerOff.Q THEN
            IF (mVIPlasImpulseLinked) THEN
                simValueVI.newPeriodReady := TRUE;
                simValueVI.periodTime := LINT_TO_REAL(TIME_TO_LINT(TimerOff.ET) + 2000)/1000000.0;
                fbEPForceVI(sSysVar := 'Injection1.vi_ImpulseInput', Value := simValueVI); 
            ELSIF (mbDIPlasImpulseLinked) THEN            
                fbEPForceDI(sSysVar := 'Injection1.di_ImpulseInput',Value := TRUE);
            END_IF;
            TimerOn(IN := TRUE,
                     PT :=t#2ms);
         END_IF;            
         IF TimerOn.Q THEN
            IF (mVIPlasImpulseLinked) THEN
                simValueVI.newPeriodReady := FALSE;
                fbEPForceVI(sSysVar := 'Injection1.vi_ImpulseInput', Value := simValueVI); 
            ELSIF (mbDIPlasImpulseLinked) THEN            
                fbEPForceDI(sSysVar := 'Injection1.di_ImpulseInput',Value := FALSE);
            END_IF;                
            TimerOn(IN :=FALSE);         
            TimerOff(IN := FALSE);
         END_IF;
      END_IF;
   ELSIF (mVIPlasImpulseLinked) THEN
      TimerOn(IN :=FALSE);         
      TimerOff(IN := FALSE);
      simValueVI.newPeriodReady := FALSE;
      simValueVI.periodTime := 0.0;
      fbEPForceVI(sSysVar := 'Injection1.vi_ImpulseInput', Value := simValueVI); 
   ELSIF (mbDIPlasImpulseLinked) THEN
      TimerOn(IN :=FALSE);         
      TimerOff(IN := FALSE);
      fbEPForceDI(sSysVar :='Injection1.di_ImpulseInput',Value := FALSE);
   END_IF;
END_IF;


@SaText @RT(9)aStopSimu 1 @TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (mVIPlasImpulseLinked) THEN
   fbEPUnForceVI(sSysVar := 'Injection1.vi_ImpulseInput');
ELSIF (mbDIPlasImpulseLinked) THEN
   fbEPUnForceDI(sSysVar := 'Injection1.di_ImpulseInput');
END_IF;
STOP_PROCESS_ALGORITHM();


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(27)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDOPlas := GET_SYNC_REFTO('Injection1.do_Plasticize', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDOPlasLinked := TRUE;
END_IF;

mpbDIPlasImpulse := GET_SYNC_REFTO('Injection1.di_ImpulseInput', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDIPlasImpulseLinked := TRUE;
END_IF;

mpVIPlasImpulse := GET_SYNC_REFTO('Injection1.vi_ImpulseInput', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mVIPlasImpulseLinked := TRUE;
END_IF;

mpPlastMotor := GET_SYNC_REFTO('Injection1.sv_PlastMotor', T#0s, Status);

//init reference to avoid nullpointer errors
mprVelocity := @sv_rNull;

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbDelinearize(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PlastMotorDelintab,
             Ramps := 999999.9,
             ReParam := TRUE);

fbDelinearizeVel(CycleTime := GET_TASK_INTERVAL(),
             Lintab := sv_PumpVDelintab,                  
             Ramps := 999999.9,
             ReParam := TRUE);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompInjection;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveBwd,
                   MoveId := cMovePlast);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
