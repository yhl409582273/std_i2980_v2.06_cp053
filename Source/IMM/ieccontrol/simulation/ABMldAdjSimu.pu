IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, FBEPForceDI
, tnMotorType
, tnLimitSwitchMode
, tsRequiredPumps
, FBGetSimulationSource
, TON
, ABForceDigital
, KSYS_Status
, FBGetRequiredPumps

END_IMPORT

ALGORITHM_BLOCK ABMldAdjSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskSim : TASK;
 PU_Task_13 : TASK;
END_OBJECT

VAR
 fbEPForceDI : FBEPForceDI;
 mpbDOMldAdjFwd : REFTO BOOL;
 mbDOMldAdjFwdLinked : BOOL;
 mpbDOMldAdjBwd : REFTO BOOL;
 mbDOMldAdjBwdLinked : BOOL;
 mpbDIMldAdjImpulse : REFTO BOOL;
 mbDIMldAdjImpulseLinked : BOOL;
 mpMoldHeightAdjustMotor : REFTO tnMotorType (* type of mold height adjust motor *);
 mpbOutputActive : REFTO BOOL;
 mpLimitSwitchMode : REFTO tnLimitSwitchMode;
 mpPumps : REFTO tsRequiredPumps;
 mprVelocity : REFTO REAL;
 fbGetSimulationSource : FBGetSimulationSource;
 mbValidLimitSwitchModeRef : BOOL (* TRUE: reference to sv_LimitSwitchMode is valid *);
END_VAR

POSTUPDATE_ALGORITHM pStart ON PU_Task_13 WITH sv_bSimulate,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    START_PROCESS_ALGORITHM(paSimulate);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSimulate ON TaskSim


VAR
 Timer : TON;
 rVel : REAL;
 bLimitSwitchForced : BOOL;
 bNormallyClosed : BOOL;
 abForceImpulseInput : ABForceDigital;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
END_STEP


(* steps *)
STEP SIM:
AInit (P);
aSimulate (N);
END_STEP

STEP STOP:
aStopSimu (P);
END_STEP


(* transitions *)
TRANSITION SimRequired (* Trans11 *) FROM INIT TO SIM :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
AND mbDOMldAdjFwdLinked
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans17 (* Trans17 *) FROM INIT TO STOP :=  #BEGIN_EDIT_BLOCK
NOT mbDOMldAdjFwdLinked
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION StpSimRequired (* Trans13 *) FROM SIM TO STOP :=  #BEGIN_EDIT_BLOCK
NOT sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Return (* Trans16 *) FROM STOP TO SIM :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aSimulate: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bNormallyClosed := mbValidLimitSwitchModeRef AND (mpLimitSwitchMode^ = nLimitSwitchNormallyClosed);
IF bLimitSwitchForced <> bNormallyClosed THEN
   fbEPForceDI(sSysVar := 'MoldHeight1.di_LimitSwitchBackward', Value := bNormallyClosed);
   fbEPForceDI(sSysVar := 'MoldHeight1.di_LimitSwitchForward', Value := bNormallyClosed);
   bLimitSwitchForced := bNormallyClosed; 
END_IF;

IF mbDIMldAdjImpulseLinked AND mbDOMldAdjFwdLinked AND mbDOMldAdjBwdLinked AND (mpbDOMldAdjFwd^ OR mpbDOMldAdjBwd^) 
      AND (     
         (  ((mpMoldHeightAdjustMotor^ = nHydraulic) AND (mprVelocity^ <> 0.0)) 
         OR ((mpMoldHeightAdjustMotor^ = nElectric) AND (mpbOutputActive^ =TRUE)) 
         )
         ) THEN
      
      IF mpMoldHeightAdjustMotor^ = nElectric THEN
         rVel := 2.0; 
      ELSE 
         rVel := mprVelocity^;
      END_IF;
      Timer(IN := TRUE,
            PT := LINT_TO_TIME(REAL_TO_LINT(1000000.0/rVel)/100000));
      IF Timer.Q THEN
         abForceImpulseInput.aSetForceValue(TRUE);
         Timer(IN := FALSE);
      ELSE
         abForceImpulseInput.aSetForceValue(FALSE);
      END_IF;
ELSIF mbDIMldAdjImpulseLinked THEN
   Timer(IN := FALSE);
   abForceImpulseInput.aSetForceValue(FALSE);
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aSimulate*)
ACTION aStopSimu: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDIMldAdjImpulseLinked THEN
   abForceImpulseInput.aUnforce();
END_IF;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aStopSimu*)
ACTION AInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abForceImpulseInput.aInit('MoldHeight1.di_ImpulseInput');

;#END_EDIT_BLOCK END_ACTION (*AInit*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskSim AUTOSTART


VAR
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDOMldAdjFwd := GET_SYNC_REFTO('MoldHeight1.do_Forward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDOMldAdjFwdLinked := TRUE;
END_IF;

mpbDOMldAdjBwd := GET_SYNC_REFTO('MoldHeight1.do_Backward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDOMldAdjBwdLinked := TRUE;
END_IF;

mpbDIMldAdjImpulse := GET_SYNC_REFTO('MoldHeight1.di_ImpulseInput', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDIMldAdjImpulseLinked := TRUE;
END_IF;

mpMoldHeightAdjustMotor := GET_SYNC_REFTO('MoldHeight1.sv_MoldHeightAdjustMotor', T#0s, Status); 
mpLimitSwitchMode := GET_SYNC_REFTO('MoldHeight1.sv_LimitSwitchMode', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbValidLimitSwitchModeRef := TRUE;
END_IF;
mpbOutputActive := GET_SYNC_REFTO('MoldHeight1.sv_bOutputActive', T#0s, Status);
STOP_PROCESS_ALGORITHM();



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetSimulationSource

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON TaskSim WITH sv_bInitDone


VAR
 fbGetRequiredPumps : FBGetRequiredPumps;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompMoldHeight;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pRequiredPumps ON TaskSim WITH mpPumps^.RequiredPumps

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(12)ABMldAdjSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
19 
@Var @RT(12)sv_bSimulate @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)fbEPForceDI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)FBEPForceDI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)mpbDOMldAdjFwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbDOMldAdjFwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mpbDOMldAdjBwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbDOMldAdjBwdLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)mpbDIMldAdjImpulse @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)mbDIMldAdjImpulseLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)mpMoldHeightAdjustMotor @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(11)tnMotorType @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)type of mold height adjust motor @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mpbOutputActive @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mpLimitSwitchMode @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(17)tnLimitSwitchMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mpPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)mprVelocity @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbGetSimulationSource @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)FBGetSimulationSource @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(25)mbValidLimitSwitchModeRef @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)TRUE: reference to sv_LimitSwitchMode is valid @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paSimulate @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(5)Timer @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)rVel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)bLimitSwitchForced @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bNormallyClosed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)abForceImpulseInput @RT(0) @T @T @DERIVED 0 @F @RT(14)ABForceDigital @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskSim @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aGetSimulationSource @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbGetRequiredPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)FBGetRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pRequiredPumps @STRUCTURED_TEXT 
@RT(0) @RT(22)mpPumps^.RequiredPumps @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    START_PROCESS_ALGORITHM(paSimulate);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
15 12 18 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(11)SimRequired @F @T @F @F @T @T @TL(3)
sv_bSimulate
AND mbDOMldAdjFwdLinked

@RT(7)Trans11 @F 

@TransSeq @RT(4)tseq @F 2 
@Trans @RT(7)Trans17 @F @T @F @F @T @T @TL(2)
NOT mbDOMldAdjFwdLinked

@RT(7)Trans17 @F 
@Goto @RT(4)STOP @F @F 


@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 3 
@Step @RT(3)SIM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(5)AInit @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(9)aSimulate @F @F @RT(1)N @RT(0) @F @F @T @F 

@Trans @RT(14)StpSimRequired @F @T @F @F @T @T @TL(2)
NOT sv_bSimulate

@RT(7)Trans13 @F 
@Step @RT(4)STOP @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aStopSimu @F @F @RT(1)P @RT(0) @F @F @T @F 


@Trans @RT(6)Return @F @T @T @T @T @T @TL(2)
TRUE

@RT(7)Trans16 @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(9)aSimulate 1 @TL(37)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bNormallyClosed := mbValidLimitSwitchModeRef AND (mpLimitSwitchMode^ = nLimitSwitchNormallyClosed);
IF bLimitSwitchForced <> bNormallyClosed THEN
   fbEPForceDI(sSysVar := 'MoldHeight1.di_LimitSwitchBackward', Value := bNormallyClosed);
   fbEPForceDI(sSysVar := 'MoldHeight1.di_LimitSwitchForward', Value := bNormallyClosed);
   bLimitSwitchForced := bNormallyClosed; 
END_IF;

IF mbDIMldAdjImpulseLinked AND mbDOMldAdjFwdLinked AND mbDOMldAdjBwdLinked AND (mpbDOMldAdjFwd^ OR mpbDOMldAdjBwd^) 
      AND (     
         (  ((mpMoldHeightAdjustMotor^ = nHydraulic) AND (mprVelocity^ <> 0.0)) 
         OR ((mpMoldHeightAdjustMotor^ = nElectric) AND (mpbOutputActive^ =TRUE)) 
         )
         ) THEN
      
      IF mpMoldHeightAdjustMotor^ = nElectric THEN
         rVel := 2.0; 
      ELSE 
         rVel := mprVelocity^;
      END_IF;
      Timer(IN := TRUE,
            PT := LINT_TO_TIME(REAL_TO_LINT(1000000.0/rVel)/100000));
      IF Timer.Q THEN
         abForceImpulseInput.aSetForceValue(TRUE);
         Timer(IN := FALSE);
      ELSE
         abForceImpulseInput.aSetForceValue(FALSE);
      END_IF;
ELSIF mbDIMldAdjImpulseLinked THEN
   Timer(IN := FALSE);
   abForceImpulseInput.aSetForceValue(FALSE);
END_IF;


@SaText @RT(9)aStopSimu 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbDIMldAdjImpulseLinked THEN
   abForceImpulseInput.aUnforce();
END_IF;
STOP_PROCESS_ALGORITHM();


@SaText @RT(5)AInit 1 @TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abForceImpulseInput.aInit('MoldHeight1.di_ImpulseInput');


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(29)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDOMldAdjFwd := GET_SYNC_REFTO('MoldHeight1.do_Forward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDOMldAdjFwdLinked := TRUE;
END_IF;

mpbDOMldAdjBwd := GET_SYNC_REFTO('MoldHeight1.do_Backward', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDOMldAdjBwdLinked := TRUE;
END_IF;

mpbDIMldAdjImpulse := GET_SYNC_REFTO('MoldHeight1.di_ImpulseInput', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbDIMldAdjImpulseLinked := TRUE;
END_IF;

mpMoldHeightAdjustMotor := GET_SYNC_REFTO('MoldHeight1.sv_MoldHeightAdjustMotor', T#0s, Status); 
mpLimitSwitchMode := GET_SYNC_REFTO('MoldHeight1.sv_LimitSwitchMode', T#0s, Status);
IF Status = KSYS_Status_OK THEN
   mbValidLimitSwitchModeRef := TRUE;
END_IF;
mpbOutputActive := GET_SYNC_REFTO('MoldHeight1.sv_bOutputActive', T#0s, Status);
STOP_PROCESS_ALGORITHM();


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompMoldHeight;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
