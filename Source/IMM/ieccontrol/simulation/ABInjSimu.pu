IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, KCAT_GetHandle
, KCAT_GetRoot
, KCAT_AddDir
, KCAT_AddValue
, GET_SYNC_REFTO
, KCTRL_Ret_NoParam
, KCTRL_Ret_OK
, KCAT_Status_OK
, KCAT_Type_DINT
, KSYS_Status_OK
, cInjectSimuReduction
, KAPPL_LintabData
, EasyMold_Cmd
, ABEasyMoldSimu
, tsRequiredPumps
, FBGetSimulationSource
, KCAT_HandleData
, KCAT_Status
, KSYS_Status
, KCTRL_DeadTime
, KCTRL_DeadTime_Param
, KAPPL_Plastics_Output
, KCTRL_Ret
, ABForceAnalog
, FBGetRequiredPumps

END_IMPORT

ALGORITHM_BLOCK ABInjSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 sv_bCutOffDetected : BOOL;
 sv_PumpPDelintab : KAPPL_LintabData;
 sv_PumpVDelintab : KAPPL_LintabData;
 sv_MoldFullPosition : REAL;
 sv_MaxPressureSimu : REAL;
 sv_bEasyMoldTest : BOOL;
 sv_ipCmd : REFTO EasyMold_Cmd;
 sv_bInitDone : BOOL;
 sv_rNull : REAL;
END_VAR

SYSTEM_OBJECT
 TaskSim : TASK;
 PU_Task_13 : TASK;
 TaskInject : TASK;
END_OBJECT

VAR_EXTERNAL
 gprAIScrewPos : REFTO REAL;
 gbScrewTransLinked : BOOL;
 gbReduceInjectSimu : BOOL;
END_VAR

VAR
 mpbDOInject : REFTO BOOL;
 mbDOInjectLinked : BOOL;
 mbSysPreTransLinked : BOOL;
 mbScrewPreTransLinked : BOOL;
 mprAISysPre : REFTO REAL;
 mprAIScrewPre : REFTO REAL;
 abEasyMoldSimu : ABEasyMoldSimu;
 mpbDODecompression : REFTO BOOL;
 mpbDOPlas : REFTO BOOL;
 mbDOPlasLinked : BOOL;
 mbDODecompLinked : BOOL;
 mpPumps : REFTO tsRequiredPumps;
 mprVelocity : REFTO REAL;
 mprPressure : REFTO REAL;
 fbGetSimulationSource : FBGetSimulationSource;
END_VAR

(*
add simulation information of component to catalog
*)

ALGORITHM aSetSimuCatalogEntry


VAR
 iTmp : DINT;
 sTmp : STRING(255);
 HandleData : KCAT_HandleData;
 Status : KCAT_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sTmp := "Application";

HandleData := KCAT_GetHandle(sTmp);
IF HandleData.Status <> KCAT_Status_OK THEN
    HandleData := KCAT_GetRoot();    
    HandleData := KCAT_AddDir(HandleData.Handle, sTmp);
    IF HandleData.Status <> KCAT_Status_OK THEN
        RETURN; 
    END_IF;
END_IF;

iTmp := 1;
Status := KCAT_AddValue(HandleData.Handle, "ApplMoldMachineSimActive", KCAT_Type_DINT, iTmp); 
IF Status <> KCAT_Status_OK THEN
    RETURN; 
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pStart ON PU_Task_13 WITH sv_bSimulate,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    START_PROCESS_ALGORITHM(paSimulate);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paSimulate ON TaskInject


VAR
 rInjDivision : REAL;
 rScrewPosRaw : REAL;
 rScrewPreRaw : REAL;
 stop1 : REAL := 2.0;
 stop2 : REAL := 0.1;
 start : REAL := 7.0;
 step1 : REAL := 0.05;
 step2 : REAL := 0.35;
 startv : REAL := 5.0;
 target : REAL := 7.5;
 rVelocityNonLinear : REAL;
 rPressureNonLinear : REAL;
 rInjectTimeFor10V : REAL := 2.0;
 rSimPressure : REAL := 0.0;
 rVelocity_Delay : REAL;
 dCycleTime : TIME;
 rCycleTime : REAL;
 rActMinPosition : REAL := 0.0 (* % of stroke *);
 rActInjectPressure : REAL := 1.0 (* % of max inject pressure *);
 bpEasyMoldStart : REFTO BOOL;
 bEasyMoldLinked : BOOL;
 Status : KSYS_Status;
 DeadTime : KCTRL_DeadTime;
 ParamDeadTime : KCTRL_DeadTime_Param;
 fbDelinearizeP : KAPPL_Plastics_Output;
 fbDelinearizeV : KAPPL_Plastics_Output;
 Status_DeadTime : KCTRL_Ret := KCTRL_Ret_NoParam;
 abForcePosition : ABForceAnalog;
 abForceInjectPressure : ABForceAnalog;
 abForceSystemPressure : ABForceAnalog;
 iReductionCount : DINT;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT:
aInit (P);
END_STEP


(* steps *)
STEP SIM:
aSimulate (N);
END_STEP

STEP STOP:
aStopSimu (P);
END_STEP


(* transitions *)
TRANSITION SimRequired (* SimRequired *) FROM INIT TO SIM :=  #BEGIN_EDIT_BLOCK
sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION StpSimRequired (* StpSimRequired *) FROM SIM TO STOP :=  #BEGIN_EDIT_BLOCK
NOT sv_bSimulate
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Return (* Return *) FROM STOP TO SIM :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION aInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF gbScrewTransLinked THEN
   abForcePosition.aInit(Name := 'Injection1.ai_Position');
END_IF;
IF mbScrewPreTransLinked THEN
   abForceInjectPressure.aInit(Name := 'Injection1.ai_Pressure'); 
END_IF;
IF mbSysPreTransLinked THEN
   abForceSystemPressure.aInit(Name := 'Injection1.ai_SysPressure');
END_IF;

IF gbReduceInjectSimu THEN
   dCycleTime := MULTIME(GET_TASK_INTERVAL(), cInjectSimuReduction);
ELSE
   dCycleTime := GET_TASK_INTERVAL();
END_IF;

fbDelinearizeV(CycleTime := dCycleTime,
            Lintab := sv_PumpVDelintab,
            Ramps := 999999.9,
            ReParam := TRUE);
fbDelinearizeP(CycleTime := dCycleTime,
            Lintab := sv_PumpPDelintab,
            Ramps := 999999.9,
            ReParam := TRUE);

rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;
rInjDivision := 1.0  / rInjectTimeFor10V * rCycleTime;

// Deadtime for screwpos. simulation
ParamDeadTime.dDeadTime := t#10ms;
IF dCycleTime < ParamDeadTime.dDeadTime THEN
   DeadTime.Par(dCycleTime := dCycleTime, Param := ParamDeadTime, parStatus => Status_DeadTime);
   DeadTime.Init(rX := 0.0);
END_IF;

aSetSimuCatalogEntry();

// EMW
bpEasyMoldStart := GET_SYNC_REFTO('EasyMold.sv_Start_EasyMoldWizard', T#0s, Status);
IF Status = KSYS_Status_OK THEN
    sv_ipCmd := GET_SYNC_REFTO('EasyMold.sv_iCmd', T#0s, Status);
    IF Status = KSYS_Status_OK THEN
        bEasyMoldLinked := TRUE;       
        sv_bEasyMoldTest := TRUE;       
    END_IF;    
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aInit*)
ACTION aSimulate: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//reduce forcing of analog inputs due to performance reasons
IF gbReduceInjectSimu THEN
   IF iReductionCount > cInjectSimuReduction THEN
      iReductionCount := 0;
   ELSE
      iReductionCount := iReductionCount + 1;
      RETURN;  // return
   END_IF;
END_IF;


// if use easy mold set min position to simulation value
IF bEasyMoldLinked THEN
   IF bpEasyMoldStart^ = TRUE THEN        
      rActMinPosition := sv_MoldFullPosition;
      rActInjectPressure := sv_MaxPressureSimu;
   ELSE
      rActMinPosition := 0.0;
      rActInjectPressure := 1.0;
   END_IF;
ELSE
   rActMinPosition := 0.0;
   rActInjectPressure := 1.0;
END_IF;


// delinearizing velocity for autocalib
fbDelinearizeV(SetValue := mprVelocity^,
               ReParam := FALSE); 
rVelocityNonLinear := fbDelinearizeV.OutputValue;

IF (mbScrewPreTransLinked OR mbSysPreTransLinked) THEN
   // delinearizing pressure for autocalib
   fbDelinearizeP(SetValue := mprPressure^,
                  ReParam := FALSE);
   rPressureNonLinear := fbDelinearizeP.OutputValue;
END_IF;

IF Status_DeadTime = KCTRL_Ret_OK THEN
   DeadTime.Calculate(rX := rVelocityNonLinear, rY => rVelocity_Delay);
ELSE
   rVelocity_Delay := rVelocityNonLinear;  
END_IF;


// when sensor broken
IF gprAIScrewPos^ > 10.0 THEN
   abForcePosition.aSetForceValue(10.0);
END_IF;
IF gprAIScrewPos^ < 0.0 THEN
   abForcePosition.aSetForceValue(0.0);
END_IF;
//normal movement simulation
IF gprAIScrewPos^ >= 0.0 AND gprAIScrewPos^ <= 10.0 THEN
   IF mbDOInjectLinked AND mpbDOInject^ THEN
      rScrewPosRaw := gprAIScrewPos^ - MUL(rInjDivision,rVelocity_Delay); 
      IF rScrewPosRaw < rActMinPosition * 10.0 THEN
         rScrewPosRaw := rActMinPosition * 10.0;
      END_IF;
      abForcePosition.aSetForceValue(MAX(rScrewPosRaw,0.0));
   END_IF;
END_IF;

IF (NOT ((mbDODecompLinked AND (mpbDODecompression^)) OR (mbDOPlasLinked AND mpbDOPlas^) AND (mbDOInjectLinked AND mpbDOInject^))) THEN 
   abForcePosition.aSetForceValue(MAX(gprAIScrewPos^, 0.0)); 
END_IF;

IF mbScrewPreTransLinked THEN 
   rScrewPreRaw := mprAIScrewPre^;
ELSIF mbSysPreTransLinked THEN
   rScrewPreRaw := mprAISysPre^;
END_IF;
/////////////////////////////////////////   Pressure Simulation    /////////////////////////////////////////
// when sensor broken
IF rScrewPreRaw > 10.0 THEN
   rSimPressure := 10.0;
END_IF;
IF rScrewPreRaw < 0.0 THEN
   rSimPressure := 0.0;
END_IF;
IF rScrewPreRaw >= 0.0 AND rScrewPreRaw <= 10.0 THEN
   IF mbDOInjectLinked AND mpbDOInject^ THEN
      IF sv_bCutOffDetected OR gprAIScrewPos^ < 0.4 THEN
         //postpressure or screw is in mechanical limit
         rSimPressure := rPressureNonLinear;
      ELSE
         IF bEasyMoldLinked THEN
            IF bpEasyMoldStart^ = TRUE THEN
               IF (gprAIScrewPos^ > 1.2*rActMinPosition * 10.0) THEN
                  rSimPressure := rActInjectPressure* 10.0;
               ELSE
                  rSimPressure := 0.0;
               END_IF;
            ELSE
               //injection 
               IF gprAIScrewPos^ >= stop1 AND gprAIScrewPos^ <= start THEN
                  rSimPressure := startv/(gprAIScrewPos^ * gprAIScrewPos^);
               END_IF;
               IF gprAIScrewPos^ >= stop2 AND gprAIScrewPos^ < stop1 THEN
                  rSimPressure := rScrewPreRaw + step1;
               END_IF;
               IF gprAIScrewPos^ < stop2 THEN
                  rSimPressure := MIN(rScrewPreRaw + step2,target);
               END_IF;
            END_IF;     
         ELSE
            //injection 
            IF gprAIScrewPos^ >= stop1 AND gprAIScrewPos^ <= start THEN
               rSimPressure := startv/(gprAIScrewPos^ * gprAIScrewPos^);   
            END_IF;
            IF gprAIScrewPos^ >= stop2 AND gprAIScrewPos^ < stop1 THEN
               rSimPressure := rScrewPreRaw + step1;
            END_IF;
            IF gprAIScrewPos^ < stop2 THEN
               rSimPressure := MIN(rScrewPreRaw + step2,target);
            END_IF;
         END_IF;
      END_IF;
   ELSE
      rSimPressure := 0.0;
   END_IF;
END_IF;

IF mbScrewPreTransLinked THEN       //screwpressure sensor
   abForceInjectPressure.aSetForceValue(rValue := rSimPressure);
END_IF;
IF mbSysPreTransLinked THEN      //systempressure sensor
   abForceSystemPressure.aSetForceValue(rValue := (rSimPressure * 0.9));
END_IF;

;#END_EDIT_BLOCK END_ACTION (*aSimulate*)
ACTION aStopSimu: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF gbScrewTransLinked THEN
   abForcePosition.aUnforce();
END_IF;
IF mbScrewPreTransLinked THEN
   abForceInjectPressure.aUnforce();
END_IF;
IF mbSysPreTransLinked THEN
   abForceSystemPressure.aUnforce();
END_IF;

STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aStopSimu*)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskSim AUTOSTART


VAR
 Status : KSYS_Status;
 HandleData : KCAT_HandleData;
 CatStatus : KCAT_Status;
 sDevice : STRING(31);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDOInject := GET_SYNC_REFTO('Injection1.do_Inject', T#0s, Status); 
mbDOInjectLinked := (Status = KSYS_Status_OK);
 
gprAIScrewPos:= GET_SYNC_REFTO('Injection1.ai_Position', T#0s, Status);
gbScrewTransLinked := (Status = KSYS_Status_OK);

mprAIScrewPre:= GET_SYNC_REFTO('Injection1.ai_Pressure', T#0s, Status);
mbScrewPreTransLinked := (Status = KSYS_Status_OK);

mprAISysPre:= GET_SYNC_REFTO('Injection1.ai_SysPressure', T#0s, Status);
mbSysPreTransLinked := (Status = KSYS_Status_OK);

mpbDODecompression := GET_SYNC_REFTO('Injection1.do_Decompression', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDODecompLinked := TRUE;
END_IF;

mpbDOPlas := GET_SYNC_REFTO('Injection1.do_Plasticize', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDOPlasLinked := TRUE;
END_IF;


//check hardware type
HandleData := KCAT_GetHandle('IO.ONBOARD.deviceName');
IF HandleData.Status = KCAT_Status_OK THEN
   CatStatus := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sDevice);  
   sDevice := LEFT(sDevice,6);
    
   IF (sDevice ='CP 031') OR (sDevice ='CP 033') THEN
      gbReduceInjectSimu := TRUE;     
   END_IF;  
END_IF;

//init references to avoid nullpointer errors
mprVelocity := @sv_rNull;
mprPressure := @sv_rNull;

STOP_PROCESS_ALGORITHM();



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetSimulationSource

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity,
                      prPressure => mprPressure);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON TaskSim WITH sv_bInitDone


VAR
 fbGetRequiredPumps : FBGetRequiredPumps;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompInjection;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveInject);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pRequiredPumps ON TaskSim WITH mpPumps^.RequiredPumps

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 114 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
6 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_GetHandle @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KCAT_GetRoot @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)KCAT_AddDir @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_AddValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
6 
@Var @RT(17)KCTRL_Ret_NoParam @RT(0) @T @T @DERIVED 0 @F @RT(9)KCTRL_Ret @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KCTRL_Ret_OK @RT(0) @T @T @DERIVED 0 @F @RT(9)KCTRL_Ret @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KCAT_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_Type_DINT @RT(0) @T @T @DERIVED 0 @F @RT(9)KCAT_Type @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KSYS_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cInjectSimuReduction @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)50 @RT(55)reduction factor for simulation of inject, plast decomp 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(9)ABInjSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
32 
@Var @RT(12)sv_bSimulate @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bCutOffDetected @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_PumpPDelintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_PumpVDelintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_MoldFullPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_MaxPressureSimu @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bEasyMoldTest @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)sv_ipCmd @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(12)EasyMold_Cmd @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(13)gprAIScrewPos @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(18)gbScrewTransLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(11)mpbDOInject @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mbDOInjectLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)mbSysPreTransLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)mbScrewPreTransLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mprAISysPre @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mprAIScrewPre @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)abEasyMoldSimu @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABEasyMoldSimu @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)gbReduceInjectSimu @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(18)mpbDODecompression @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mpbDOPlas @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbDOPlasLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mbDODecompLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mpPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)mprVelocity @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mprPressure @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbGetSimulationSource @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)FBGetSimulationSource @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)sv_rNull @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

7 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aSetSimuCatalogEntry @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(4)iTmp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)sTmp @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)HandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paSimulate @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskInject @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
31 
@Var @RT(12)rInjDivision @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rScrewPosRaw @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rScrewPreRaw @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)stop1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)2.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)stop2 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.1 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)start @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)7.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)step1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.05 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)step2 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.35 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)startv @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)5.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)target @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)7.5 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)rVelocityNonLinear @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)rPressureNonLinear @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)rInjectTimeFor10V @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)2.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rSimPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rVelocity_Delay @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rActMinPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.0 @RT(11)% of stroke @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)rActInjectPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)1.0 @RT(24)% of max inject pressure @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bpEasyMoldStart @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bEasyMoldLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)DeadTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)KCTRL_DeadTime @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)ParamDeadTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)KCTRL_DeadTime_Param @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbDelinearizeP @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KAPPL_Plastics_Output @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbDelinearizeV @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KAPPL_Plastics_Output @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)Status_DeadTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)KCTRL_Ret @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(17)KCTRL_Ret_NoParam @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abForcePosition @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABForceAnalog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)abForceInjectPressure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABForceAnalog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)abForceSystemPressure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABForceAnalog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)iReductionCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskSim @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)HandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)CatStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)sDevice @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aGetSimulationSource @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbGetRequiredPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)FBGetRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pRequiredPumps @STRUCTURED_TEXT 
@RT(0) @RT(22)mpPumps^.RequiredPumps @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

sTmp := "Application";

HandleData := KCAT_GetHandle(sTmp);
IF HandleData.Status <> KCAT_Status_OK THEN
    HandleData := KCAT_GetRoot();    
    HandleData := KCAT_AddDir(HandleData.Handle, sTmp);
    IF HandleData.Status <> KCAT_Status_OK THEN
        RETURN; 
    END_IF;
END_IF;

iTmp := 1;
Status := KCAT_AddValue(HandleData.Handle, "ApplMoldMachineSimActive", KCAT_Type_DINT, iTmp); 
IF Status <> KCAT_Status_OK THEN
    RETURN; 
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
add simulation information of component to catalog
@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_bSimulate THEN
    START_PROCESS_ALGORITHM(paSimulate);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
4 4 4 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(4)INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)aInit @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(11)SimRequired @F @T @F @F @T @T @TL(2)
sv_bSimulate

@RT(11)SimRequired @F 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(4)sseq @F 3 
@Step @RT(3)SIM @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aSimulate @F @F @RT(1)N @RT(0) @F @F @F @F 

@Trans @RT(14)StpSimRequired @F @T @F @F @T @T @TL(2)
NOT sv_bSimulate

@RT(14)StpSimRequired @F 
@Step @RT(4)STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)aStopSimu @F @F @RT(1)P @RT(0) @F @F @F @F 


@Trans @RT(6)Return @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Return @F 

@END_SfcData 
@SaActions 3 
@SaText @RT(5)aInit 1 @TL(52)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF gbScrewTransLinked THEN
   abForcePosition.aInit(Name := 'Injection1.ai_Position');
END_IF;
IF mbScrewPreTransLinked THEN
   abForceInjectPressure.aInit(Name := 'Injection1.ai_Pressure'); 
END_IF;
IF mbSysPreTransLinked THEN
   abForceSystemPressure.aInit(Name := 'Injection1.ai_SysPressure');
END_IF;

IF gbReduceInjectSimu THEN
   dCycleTime := MULTIME(GET_TASK_INTERVAL(), cInjectSimuReduction);
ELSE
   dCycleTime := GET_TASK_INTERVAL();
END_IF;

fbDelinearizeV(CycleTime := dCycleTime,
            Lintab := sv_PumpVDelintab,
            Ramps := 999999.9,
            ReParam := TRUE);
fbDelinearizeP(CycleTime := dCycleTime,
            Lintab := sv_PumpPDelintab,
            Ramps := 999999.9,
            ReParam := TRUE);

rCycleTime := (LINT_TO_REAL(TIME_TO_LINT(dCycleTime))) / 1000000.0;
rInjDivision := 1.0  / rInjectTimeFor10V * rCycleTime;

// Deadtime for screwpos. simulation
ParamDeadTime.dDeadTime := t#10ms;
IF dCycleTime < ParamDeadTime.dDeadTime THEN
   DeadTime.Par(dCycleTime := dCycleTime, Param := ParamDeadTime, parStatus => Status_DeadTime);
   DeadTime.Init(rX := 0.0);
END_IF;

aSetSimuCatalogEntry();

// EMW
bpEasyMoldStart := GET_SYNC_REFTO('EasyMold.sv_Start_EasyMoldWizard', T#0s, Status);
IF Status = KSYS_Status_OK THEN
    sv_ipCmd := GET_SYNC_REFTO('EasyMold.sv_iCmd', T#0s, Status);
    IF Status = KSYS_Status_OK THEN
        bEasyMoldLinked := TRUE;       
        sv_bEasyMoldTest := TRUE;       
    END_IF;    
END_IF;


@SaText @RT(9)aSimulate 1 @TL(135)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//reduce forcing of analog inputs due to performance reasons
IF gbReduceInjectSimu THEN
   IF iReductionCount > cInjectSimuReduction THEN
      iReductionCount := 0;
   ELSE
      iReductionCount := iReductionCount + 1;
      RETURN;  // return
   END_IF;
END_IF;


// if use easy mold set min position to simulation value
IF bEasyMoldLinked THEN
   IF bpEasyMoldStart^ = TRUE THEN        
      rActMinPosition := sv_MoldFullPosition;
      rActInjectPressure := sv_MaxPressureSimu;
   ELSE
      rActMinPosition := 0.0;
      rActInjectPressure := 1.0;
   END_IF;
ELSE
   rActMinPosition := 0.0;
   rActInjectPressure := 1.0;
END_IF;


// delinearizing velocity for autocalib
fbDelinearizeV(SetValue := mprVelocity^,
               ReParam := FALSE); 
rVelocityNonLinear := fbDelinearizeV.OutputValue;

IF (mbScrewPreTransLinked OR mbSysPreTransLinked) THEN
   // delinearizing pressure for autocalib
   fbDelinearizeP(SetValue := mprPressure^,
                  ReParam := FALSE);
   rPressureNonLinear := fbDelinearizeP.OutputValue;
END_IF;

IF Status_DeadTime = KCTRL_Ret_OK THEN
   DeadTime.Calculate(rX := rVelocityNonLinear, rY => rVelocity_Delay);
ELSE
   rVelocity_Delay := rVelocityNonLinear;  
END_IF;


// when sensor broken
IF gprAIScrewPos^ > 10.0 THEN
   abForcePosition.aSetForceValue(10.0);
END_IF;
IF gprAIScrewPos^ < 0.0 THEN
   abForcePosition.aSetForceValue(0.0);
END_IF;
//normal movement simulation
IF gprAIScrewPos^ >= 0.0 AND gprAIScrewPos^ <= 10.0 THEN
   IF mbDOInjectLinked AND mpbDOInject^ THEN
      rScrewPosRaw := gprAIScrewPos^ - MUL(rInjDivision,rVelocity_Delay); 
      IF rScrewPosRaw < rActMinPosition * 10.0 THEN
         rScrewPosRaw := rActMinPosition * 10.0;
      END_IF;
      abForcePosition.aSetForceValue(MAX(rScrewPosRaw,0.0));
   END_IF;
END_IF;

IF (NOT ((mbDODecompLinked AND (mpbDODecompression^)) OR (mbDOPlasLinked AND mpbDOPlas^) AND (mbDOInjectLinked AND mpbDOInject^))) THEN 
   abForcePosition.aSetForceValue(MAX(gprAIScrewPos^, 0.0)); 
END_IF;

IF mbScrewPreTransLinked THEN 
   rScrewPreRaw := mprAIScrewPre^;
ELSIF mbSysPreTransLinked THEN
   rScrewPreRaw := mprAISysPre^;
END_IF;
/////////////////////////////////////////   Pressure Simulation    /////////////////////////////////////////
// when sensor broken
IF rScrewPreRaw > 10.0 THEN
   rSimPressure := 10.0;
END_IF;
IF rScrewPreRaw < 0.0 THEN
   rSimPressure := 0.0;
END_IF;
IF rScrewPreRaw >= 0.0 AND rScrewPreRaw <= 10.0 THEN
   IF mbDOInjectLinked AND mpbDOInject^ THEN
      IF sv_bCutOffDetected OR gprAIScrewPos^ < 0.4 THEN
         //postpressure or screw is in mechanical limit
         rSimPressure := rPressureNonLinear;
      ELSE
         IF bEasyMoldLinked THEN
            IF bpEasyMoldStart^ = TRUE THEN
               IF (gprAIScrewPos^ > 1.2*rActMinPosition * 10.0) THEN
                  rSimPressure := rActInjectPressure* 10.0;
               ELSE
                  rSimPressure := 0.0;
               END_IF;
            ELSE
               //injection 
               IF gprAIScrewPos^ >= stop1 AND gprAIScrewPos^ <= start THEN
                  rSimPressure := startv/(gprAIScrewPos^ * gprAIScrewPos^);
               END_IF;
               IF gprAIScrewPos^ >= stop2 AND gprAIScrewPos^ < stop1 THEN
                  rSimPressure := rScrewPreRaw + step1;
               END_IF;
               IF gprAIScrewPos^ < stop2 THEN
                  rSimPressure := MIN(rScrewPreRaw + step2,target);
               END_IF;
            END_IF;     
         ELSE
            //injection 
            IF gprAIScrewPos^ >= stop1 AND gprAIScrewPos^ <= start THEN
               rSimPressure := startv/(gprAIScrewPos^ * gprAIScrewPos^);   
            END_IF;
            IF gprAIScrewPos^ >= stop2 AND gprAIScrewPos^ < stop1 THEN
               rSimPressure := rScrewPreRaw + step1;
            END_IF;
            IF gprAIScrewPos^ < stop2 THEN
               rSimPressure := MIN(rScrewPreRaw + step2,target);
            END_IF;
         END_IF;
      END_IF;
   ELSE
      rSimPressure := 0.0;
   END_IF;
END_IF;

IF mbScrewPreTransLinked THEN       //screwpressure sensor
   abForceInjectPressure.aSetForceValue(rValue := rSimPressure);
END_IF;
IF mbSysPreTransLinked THEN      //systempressure sensor
   abForceSystemPressure.aSetForceValue(rValue := (rSimPressure * 0.9));
END_IF;


@SaText @RT(9)aStopSimu 1 @TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF gbScrewTransLinked THEN
   abForcePosition.aUnforce();
END_IF;
IF mbScrewPreTransLinked THEN
   abForceInjectPressure.aUnforce();
END_IF;
IF mbSysPreTransLinked THEN
   abForceSystemPressure.aUnforce();
END_IF;

STOP_PROCESS_ALGORITHM();


@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(46)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbDOInject := GET_SYNC_REFTO('Injection1.do_Inject', T#0s, Status); 
mbDOInjectLinked := (Status = KSYS_Status_OK);
 
gprAIScrewPos:= GET_SYNC_REFTO('Injection1.ai_Position', T#0s, Status);
gbScrewTransLinked := (Status = KSYS_Status_OK);

mprAIScrewPre:= GET_SYNC_REFTO('Injection1.ai_Pressure', T#0s, Status);
mbScrewPreTransLinked := (Status = KSYS_Status_OK);

mprAISysPre:= GET_SYNC_REFTO('Injection1.ai_SysPressure', T#0s, Status);
mbSysPreTransLinked := (Status = KSYS_Status_OK);

mpbDODecompression := GET_SYNC_REFTO('Injection1.do_Decompression', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDODecompLinked := TRUE;
END_IF;

mpbDOPlas := GET_SYNC_REFTO('Injection1.do_Plasticize', T#0s, Status); 
IF Status = KSYS_Status_OK THEN
   mbDOPlasLinked := TRUE;
END_IF;


//check hardware type
HandleData := KCAT_GetHandle('IO.ONBOARD.deviceName');
IF HandleData.Status = KCAT_Status_OK THEN
   CatStatus := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sDevice);  
   sDevice := LEFT(sDevice,6);
    
   IF (sDevice ='CP 031') OR (sDevice ='CP 033') THEN
      gbReduceInjectSimu := TRUE;     
   END_IF;  
END_IF;

//init references to avoid nullpointer errors
mprVelocity := @sv_rNull;
mprPressure := @sv_rNull;

STOP_PROCESS_ALGORITHM();


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity,
                      prPressure => mprPressure);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompInjection;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveInject);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
