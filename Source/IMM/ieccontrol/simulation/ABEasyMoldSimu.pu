IMPORT_OVER_LISTFILE
 GET_REFTO
, EasyMold_Cmd
, tsCutOffCriterions

END_IMPORT

ALGORITHM_BLOCK ABEasyMoldSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_MoldFullPosition : REAL;
 sv_MaxPressureSimu : REAL;
 sv_bAutoCycleRunning : BOOL;
 sv_ipCmd : REFTO EasyMold_Cmd;
 sv_CutOffParams : tsCutOffCriterions;
 sv_rScrewVolume : REAL;
 sv_rScrewDiameter : REAL;
 sv_rScrewPosition : REAL;
 sv_bEasyMoldTest : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskSlow : TASK;
END_OBJECT

VAR
 uCounter : UDINT;
 rSAFactor : REAL;
 uTestCounter : UDINT := 0;
END_VAR

ALGORITHM EasyMoldWizardTest1


VAR_INPUT
 bRestart : BOOL := FALSE;
END_VAR

VAR_OUTPUT
 bReady : BOOL := FALSE;
END_VAR

VAR
 uCyclicCounter : UDINT := 0;
 uCyclicCounterPost : UDINT := 0;
 uCyclicLimit : UDINT := 2;
 uCyclicLimitTemp : UDINT := 2;
 rMaxPressSimu : REAL := 0.25;
 rMaxPressSimuPressLimit : REAL := 0.95;
 rDeltaPos : REAL := 0.0;
 rMoldFullPositionStart : REAL := 0.8;
 rMoldFullPositionStart1 : REAL := 0.2;
END_VAR
#BEGIN_EDIT_BLOCK
IF (rSAFactor <= 0.0) THEN
   rSAFactor := 1.0;
END_IF;
IF sv_rScrewVolume <= 0.0 THEN
   sv_MoldFullPosition :=  0.0; 
   sv_MaxPressureSimu  :=  0.0;
   RETURN;
END_IF;
IF bRestart THEN
      bReady := FALSE;
      sv_MoldFullPosition := 0.001;//2.0 * sv_rScrewDiameter * 0.1 / sv_rScrewVolume; 
      sv_MaxPressureSimu  := 0.05;
      uCyclicCounter      := 0;
      rDeltaPos           := 0.0;
ELSE
   IF sv_bAutoCycleRunning THEN
   
      CASE sv_ipCmd^ OF
         
         EMOLD_CMD_START: // Start
            bReady := FALSE;
            sv_MoldFullPosition := rMoldFullPositionStart; 
            sv_MaxPressureSimu  :=  rMaxPressSimu;
         
         EMOLD_CMD_START1: // Start1
            sv_MoldFullPosition :=   rMoldFullPositionStart1;
            IF sv_MoldFullPosition >= ((sv_CutOffParams.rPositionThreshold / sv_rScrewVolume)- 0.1) THEN
                sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.11 * sv_rScrewVolume) / sv_rScrewVolume;
            END_IF;
            sv_MaxPressureSimu  :=  rMaxPressSimu;
         
         EMOLD_CMD_OPTIMIZE: // Optimize
            sv_MoldFullPosition :=  (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume; 
            IF sv_MoldFullPosition > rMoldFullPositionStart1 THEN
                rDeltaPos := sv_MoldFullPosition - rMoldFullPositionStart1;
                sv_MoldFullPosition := rMoldFullPositionStart1;
            END_IF;
            sv_MaxPressureSimu  :=  rMaxPressSimu;
            uCyclicCounter      :=  0;
            uCyclicCounterPost  := 0;
         
         EMOLD_CMD_CYCL_INJ:
//            IF uCyclicCounter = 0 THEN // 4
//               sv_MoldFullPosition := (0.95 * sv_rScrewVolume) / sv_rScrewVolume;
//               sv_MaxPressureSimu  := rMaxPressSimu;
//            ELSIF uCyclicCounter < uCyclicLimit THEN // 4                
//               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold + 0.01 * sv_rScrewVolume)  / sv_rScrewVolume;
//               sv_MaxPressureSimu  := rMaxPressSimu;
            IF uCyclicCounter = 0 THEN 
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume)  / sv_rScrewVolume - rDeltaPos;
               sv_MaxPressureSimu  := rMaxPressSimu;
            ELSIF uCyclicCounter < uCyclicLimit THEN
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold + 0.01 * sv_rScrewVolume)  / sv_rScrewVolume;
               sv_MaxPressureSimu  := rMaxPressSimuPressLimit; 
            ELSIF uCyclicCounter < uCyclicLimit+uCyclicLimitTemp THEN
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold + 0.01 * sv_rScrewVolume)  / sv_rScrewVolume;
               sv_MaxPressureSimu  := rMaxPressSimu;
            ELSE
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume)  / sv_rScrewVolume - rDeltaPos;
               sv_MaxPressureSimu  := rMaxPressSimu;
            END_IF;
            uCyclicCounter := uCyclicCounter +1;            
         
         EMOLD_CMD_INC_MELTTEMP: // 
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos; 
            sv_MaxPressureSimu  := rMaxPressSimu;
                  
         EMOLD_CMD_INC_MOLDTEMP: // CyclicInject 1: 1. Durchlauf
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
      
         EMOLD_CMD_POSTCUTOFF:
//            IF (uCyclicCounterPost=0) THEN
//               sv_MoldFullPosition := (0.95 * sv_rScrewVolume) / sv_rScrewVolume;
//               sv_MaxPressureSimu  := rMaxPressSimu;
//               uCyclicCounter      :=  0;
//                uCyclicCounterPost := 1;
//            ELSE            
                sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
                sv_MaxPressureSimu  := rMaxPressSimu;
                uCyclicCounter      := 0;
//            END_IF;
         
         EMOLD_CMD_INC_PACKPRESS:
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimuPressLimit;
      
         EMOLD_CMD_CORR_MELTCUS:
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
            bReady := TRUE;

         EMOLD_CMD_HOTRUNNER: // 
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
         
      ELSE
            // default state
            bReady := FALSE;
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
         
      END_CASE;
      uCounter := uCounter+1;   
   ELSE
      sv_MoldFullPosition := sv_rScrewDiameter * 0.1 / sv_rScrewVolume;
      sv_MaxPressureSimu  := 50.0;
   END_IF;
   IF (sv_MoldFullPosition < 0.001) THEN
       sv_MoldFullPosition := 0.001;
   END_IF;
END_IF;
IF sv_MoldFullPosition > 1.0 THEN
   sv_MoldFullPosition := 1.0;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM puEasyMoldWizardTestStart ON TaskSlow WITH sv_bEasyMoldTest

#BEGIN_EDIT_BLOCK

IF sv_bEasyMoldTest THEN
   uCounter := 1;
   rSAFactor := sv_rScrewDiameter * sv_rScrewDiameter * cEMW_Pi * 0.25e-3;
   sv_rScrewPosition := sv_rScrewDiameter * rSAFactor;
   uTestCounter := 0;
   START_PROCESS_ALGORITHM(paRunAlgo);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM puEasyMoldWizardTestRun ON TaskSlow WITH sv_bAutoCycleRunning

#BEGIN_EDIT_BLOCK
IF sv_bEasyMoldTest THEN
    //piCmd := @sv_iCmd;
    START_PROCESS_ALGORITHM(paRunAlgo);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRunAlgo ON TaskSlow

#BEGIN_EDIT_BLOCK
CASE uTestCounter OF
   0: 
      EasyMoldWizardTest1(bRestart:=TRUE);
      uTestCounter := uTestCounter + 1;
   
   1: // EasyMoldWizardTest1
      EasyMoldWizardTest1(bRestart:=FALSE);
   
ELSE
   // EasyMoldWizardTest1   
   EasyMoldWizardTest1();
   uTestCounter := 1;
END_CASE;

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)GET_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABEasyMoldSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(8)TaskSlow @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)sv_MoldFullPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_MaxPressureSimu @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_bAutoCycleRunning @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)sv_ipCmd @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(12)EasyMold_Cmd @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_CutOffParams @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tsCutOffCriterions @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_rScrewVolume @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)uCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)sv_rScrewDiameter @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)rSAFactor @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)sv_rScrewPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bEasyMoldTest @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)uTestCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(19)EasyMoldWizardTest1 @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(8)bRestart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(14)uCyclicCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)uCyclicCounterPost @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)uCyclicLimit @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)2 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)uCyclicLimitTemp @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)2 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rMaxPressSimu @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.25 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)rMaxPressSimuPressLimit @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.95 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)rDeltaPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)rMoldFullPositionStart @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.8 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)rMoldFullPositionStart1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.2 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(25)puEasyMoldWizardTestStart @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_bEasyMoldTest @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(23)puEasyMoldWizardTestRun @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_bAutoCycleRunning @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(9)paRunAlgo @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(117)
IF (rSAFactor <= 0.0) THEN
   rSAFactor := 1.0;
END_IF;
IF sv_rScrewVolume <= 0.0 THEN
   sv_MoldFullPosition :=  0.0; 
   sv_MaxPressureSimu  :=  0.0;
   RETURN;
END_IF;
IF bRestart THEN
      bReady := FALSE;
      sv_MoldFullPosition := 0.001;//2.0 * sv_rScrewDiameter * 0.1 / sv_rScrewVolume; 
      sv_MaxPressureSimu  := 0.05;
      uCyclicCounter      := 0;
      rDeltaPos           := 0.0;
ELSE
   IF sv_bAutoCycleRunning THEN
   
      CASE sv_ipCmd^ OF
         
         EMOLD_CMD_START: // Start
            bReady := FALSE;
            sv_MoldFullPosition := rMoldFullPositionStart; 
            sv_MaxPressureSimu  :=  rMaxPressSimu;
         
         EMOLD_CMD_START1: // Start1
            sv_MoldFullPosition :=   rMoldFullPositionStart1;
            IF sv_MoldFullPosition >= ((sv_CutOffParams.rPositionThreshold / sv_rScrewVolume)- 0.1) THEN
                sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.11 * sv_rScrewVolume) / sv_rScrewVolume;
            END_IF;
            sv_MaxPressureSimu  :=  rMaxPressSimu;
         
         EMOLD_CMD_OPTIMIZE: // Optimize
            sv_MoldFullPosition :=  (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume; 
            IF sv_MoldFullPosition > rMoldFullPositionStart1 THEN
                rDeltaPos := sv_MoldFullPosition - rMoldFullPositionStart1;
                sv_MoldFullPosition := rMoldFullPositionStart1;
            END_IF;
            sv_MaxPressureSimu  :=  rMaxPressSimu;
            uCyclicCounter      :=  0;
            uCyclicCounterPost  := 0;
         
         EMOLD_CMD_CYCL_INJ:
//            IF uCyclicCounter = 0 THEN // 4
//               sv_MoldFullPosition := (0.95 * sv_rScrewVolume) / sv_rScrewVolume;
//               sv_MaxPressureSimu  := rMaxPressSimu;
//            ELSIF uCyclicCounter < uCyclicLimit THEN // 4                
//               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold + 0.01 * sv_rScrewVolume)  / sv_rScrewVolume;
//               sv_MaxPressureSimu  := rMaxPressSimu;
            IF uCyclicCounter = 0 THEN 
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume)  / sv_rScrewVolume - rDeltaPos;
               sv_MaxPressureSimu  := rMaxPressSimu;
            ELSIF uCyclicCounter < uCyclicLimit THEN
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold + 0.01 * sv_rScrewVolume)  / sv_rScrewVolume;
               sv_MaxPressureSimu  := rMaxPressSimuPressLimit; 
            ELSIF uCyclicCounter < uCyclicLimit+uCyclicLimitTemp THEN
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold + 0.01 * sv_rScrewVolume)  / sv_rScrewVolume;
               sv_MaxPressureSimu  := rMaxPressSimu;
            ELSE
               sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume)  / sv_rScrewVolume - rDeltaPos;
               sv_MaxPressureSimu  := rMaxPressSimu;
            END_IF;
            uCyclicCounter := uCyclicCounter +1;            
         
         EMOLD_CMD_INC_MELTTEMP: // 
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos; 
            sv_MaxPressureSimu  := rMaxPressSimu;
                  
         EMOLD_CMD_INC_MOLDTEMP: // CyclicInject 1: 1. Durchlauf
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
      
         EMOLD_CMD_POSTCUTOFF:
//            IF (uCyclicCounterPost=0) THEN
//               sv_MoldFullPosition := (0.95 * sv_rScrewVolume) / sv_rScrewVolume;
//               sv_MaxPressureSimu  := rMaxPressSimu;
//               uCyclicCounter      :=  0;
//                uCyclicCounterPost := 1;
//            ELSE            
                sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
                sv_MaxPressureSimu  := rMaxPressSimu;
                uCyclicCounter      := 0;
//            END_IF;
         
         EMOLD_CMD_INC_PACKPRESS:
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimuPressLimit;
      
         EMOLD_CMD_CORR_MELTCUS:
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
            bReady := TRUE;

         EMOLD_CMD_HOTRUNNER: // 
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
         
      ELSE
            // default state
            bReady := FALSE;
            sv_MoldFullPosition := (sv_CutOffParams.rPositionThreshold - 0.01 * sv_rScrewVolume) / sv_rScrewVolume - rDeltaPos;
            sv_MaxPressureSimu  := rMaxPressSimu;
         
      END_CASE;
      uCounter := uCounter+1;   
   ELSE
      sv_MoldFullPosition := sv_rScrewDiameter * 0.1 / sv_rScrewVolume;
      sv_MaxPressureSimu  := 50.0;
   END_IF;
   IF (sv_MoldFullPosition < 0.001) THEN
       sv_MoldFullPosition := 0.001;
   END_IF;
END_IF;
IF sv_MoldFullPosition > 1.0 THEN
   sv_MoldFullPosition := 1.0;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)

IF sv_bEasyMoldTest THEN
   uCounter := 1;
   rSAFactor := sv_rScrewDiameter * sv_rScrewDiameter * cEMW_Pi * 0.25e-3;
   sv_rScrewPosition := sv_rScrewDiameter * rSAFactor;
   uTestCounter := 0;
   START_PROCESS_ALGORITHM(paRunAlgo);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(5)
IF sv_bEasyMoldTest THEN
    //piCmd := @sv_iCmd;
    START_PROCESS_ALGORITHM(paRunAlgo);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
CASE uTestCounter OF
   0: 
      EasyMoldWizardTest1(bRestart:=TRUE);
      uTestCounter := uTestCounter + 1;
   
   1: // EasyMoldWizardTest1
      EasyMoldWizardTest1(bRestart:=FALSE);
   
ELSE
   // EasyMoldWizardTest1   
   EasyMoldWizardTest1();
   uTestCounter := 1;
END_CASE;

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
