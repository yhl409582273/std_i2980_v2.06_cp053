IMPORT_OVER_LISTFILE
 STOP_PROCESS_ALGORITHM
, CHECK_REF
, ABForceAnalog
, ABForceDigital
, tsRequiredPumps
, FBGetSimulationSource
, KSYS_Status
, tsDeviceId
, FBGetRequiredPumps

END_IMPORT

ALGORITHM_BLOCK ABSlideTableSimu #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bSimulate : BOOL;
 sv_bInitStart : BOOL;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 TaskAnalog : TASK;
 TaskSim : TASK;
END_OBJECT

VAR
 miState : DINT (* 0 stopped, 1 init, 2, run, 3 cleanup *);
 abForcePosition : ABForceAnalog;
 abForceStop1 : ABForceDigital;
 abForceStop2 : ABForceDigital;
 abForceSlow1 : ABForceDigital;
 abForceSlow2 : ABForceDigital;
 abForcePinIn : ABForceDigital;
 abForcePinOut : ABForceDigital;
 mrPos : REAL (* simulated virtual pos *);
 mrPosPin : REAL (* simulated virtual pos Pin *);
 mpbFwd : REFTO BOOL;
 mpbBwd : REFTO BOOL;
 mpbPinIn : REFTO BOOL;
 mpbPinOut : REFTO BOOL;
 mrStopPos1 : REAL := 0.0;
 mrStopPos2 : REAL := 10.0;
 mpPumps : REFTO tsRequiredPumps;
 mprVelocity : REFTO REAL;
 fbGetSimulationSource : FBGetSimulationSource;
END_VAR

ALGORITHM aInit


VAR
 sDevice : STRING(255);
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
miState := 0;// in case init fails we stay stopped
sDevice := 'SlideTable1';

mrPos := 10.0;    //bwd
mrPosPin := 10.0; //In

abForcePosition.aInit(Name := CONCAT(sDevice, '.ai_Position'));
abForceStop1.aInit(Name := CONCAT(sDevice, '.di_StopFwd'));
abForceStop2.aInit(Name := CONCAT(sDevice, '.di_StopBwd'));
abForceSlow1.aInit(Name := CONCAT(sDevice, '.di_SlowdownFwd'));
abForceSlow2.aInit(Name := CONCAT(sDevice, '.di_SlowdownBwd'));

abForcePinIn.aInit(Name  := CONCAT(sDevice, '.di_LockPinInReached'));
abForcePinOut.aInit(Name := CONCAT(sDevice, '.di_LockPinOutReached'));

(* absence of this variables is handled gracefully *)
mpbBwd  := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_Backward'), Timeout := t#0s, Status := Status);
mpbFwd := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_Forward'), Timeout := t#0s, Status := Status);
mpbPinIn  := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_LockPinIn'), Timeout := t#0s, Status := Status);
mpbPinOut := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_LockPinOut'), Timeout := t#0s, Status := Status);

miState := 2;//running


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCleanup

#BEGIN_EDIT_BLOCK
abForcePosition.aUnforce();

abForceStop1.aUnforce();
abForceStop2.aUnforce();

abForceSlow1.aUnforce();
abForceSlow2.aUnforce();

abForcePinIn.aUnforce();
abForcePinOut.aUnforce();

miState := 0;//stopped


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pSimulateStart ON PU_Task_7 WITH sv_bSimulate,sv_bInitStart


VAR
 pDeviceId : REFTO tsDeviceId;
 Status : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
IF sv_bSimulate THEN
   pDeviceId := GET_SYNC_REFTO('SlideTable1.sv_DeviceId', T#0s, Status); 
   IF Status = KSYS_Status_OK THEN     
      //only simulate if SlideTable1 - fu is available
      miState := 1;//init
      START_PROCESS_ALGORITHM(paSimulate);
   END_IF;
ELSE   
   IF miState = 2 THEN
      miState := 3;//clean up (only if we were running before)
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

FUNCTION fCheckTol : BOOL
 #DUMMY_EDIT_BLOCK

VAR_INPUT
 rAct : REAL;
 rSet : REAL;
 rTol : REAL;
 rTolWidth : REAL (* turn off slow input again before starting stop input *);
END_VAR
#BEGIN_EDIT_BLOCK
IF rTolWidth <> 0.0 THEN
// tolerance area on positive and negative side:
// =============================================

// rSet position of |
// rTol difference between | and y
// rTolWidth the width of the y and z    
//  ----yxxxz-----|-----zxxxy---   
//   fCheckTol := ((rAct > (rSet - rTol)) AND (rAct < (rSet - rTol + rTolWidth))) (* lower *) OR
//                ((rAct < (rSet + rTol)) AND (rAct > (rSet + rTol - rTolWidth)));(* upper *)

// tolerance area on negative side:
// =============================================
   
// rSet position of |
// rTol difference between | and y
// rTolWidth <> 0.0 it the width of the y and z    
//  ----yxxxz-----|-------------   
   fCheckTol := (rAct > (rSet - rTol)) AND (rAct < (rSet - rTol + rTolWidth));
ELSE
// rSet position of |
// rTol difference between | and y
//  ----yxxxxxxxxx|xxxxxxxxxy---
   fCheckTol := (rAct > (rSet - rTol)) AND (rAct < (rSet + rTol));
END_IF;


;#END_EDIT_BLOCK END_FUNCTION

PROCESS_ALGORITHM paSimulate ON TaskAnalog


VAR
 bMoveFwd : BOOL;
 bMoveBwd : BOOL;
 bMovePinIn : BOOL;
 bMovePinOut : BOOL;
 rMultiplier : REAL := 0.0065;
 rMultiplierPin : REAL := 0.06;
 rStopTol : REAL := 0.1;
 rSlowTol : REAL := 1.5;
 rTolWidth : REAL := 0.7;
END_VAR
#BEGIN_EDIT_BLOCK
IF miState = 1 THEN
   //start init
   aInit();
   IF miState <> 2 THEN
      STOP_PROCESS_ALGORITHM();
      RETURN;
   END_IF;
ELSIF miState = 3 THEN
   //start cleanup
   aCleanup();
   STOP_PROCESS_ALGORITHM();
   RETURN;
END_IF;

//cyclic simulation
bMoveFwd := (CHECK_REF(mpbFwd^) AND mpbFwd^);
bMoveBwd  := (CHECK_REF(mpbBwd^)  AND mpbBwd^);
bMovePinIn  := (CHECK_REF(mpbPinIn^)  AND mpbPinIn^);
bMovePinOut := (CHECK_REF(mpbPinOut^) AND mpbPinOut^);

//Position simulation
IF bMoveBwd THEN
   mrPos := mrPos + mprVelocity^ * rMultiplier;   
ELSIF bMoveFwd THEN
   mrPos := mrPos - mprVelocity^ * rMultiplier;
END_IF;

//stop at end
IF mrPos < 0.0 THEN
   mrPos := 0.0;
ELSIF mrPos > 10.0 THEN
   mrPos := 10.0;
END_IF;

abForcePosition.aSetForceValue(rValue := mrPos);
abForceStop1.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos1, rStopTol, 0.0));
abForceStop2.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos2, rStopTol, 0.0));
abForceSlow1.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos1, rSlowTol, rTolWidth));
abForceSlow2.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos2, rSlowTol, rTolWidth));

//Pin
IF bMovePinIn THEN
   mrPosPin := mrPosPin + mprVelocity^ * rMultiplierPin;   
ELSIF bMovePinOut THEN
   mrPosPin := mrPosPin - mprVelocity^ * rMultiplierPin;
END_IF;

IF mrPosPin < 0.0 THEN
   mrPosPin := 0.0;
ELSIF mrPosPin > 10.0 THEN
   mrPosPin := 10.0;
END_IF;

abForcePinIn.aSetForceValue(bValue := mrPosPin > 9.8);
abForcePinOut.aSetForceValue(bValue := mrPosPin < 0.2);


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetSimulationSource

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON TaskSim WITH sv_bInitDone


VAR
 fbGetRequiredPumps : FBGetRequiredPumps;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompSlideTable;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pRequiredPumps ON TaskSim WITH mpPumps^.RequiredPumps

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(22)STOP_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)CHECK_REF @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABSlideTableSimu @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
25 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_bSimulate @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)miState @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)0 stopped, 1 init, 2, run, 3 cleanup @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)abForcePosition @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABForceAnalog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)abForceStop1 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)abForceStop2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)abForceSlow1 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)abForceSlow2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)abForcePinIn @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)abForcePinOut @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABForceDigital @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)mrPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)simulated virtual pos @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)mrPosPin @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)simulated virtual pos Pin @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mpbFwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mpbBwd @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)mpbPinIn @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mpbPinOut @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mrStopPos1 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mrStopPos2 @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)10.0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mpPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)mprVelocity @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)fbGetSimulationSource @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)FBGetSimulationSource @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)TaskSim @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

8 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)sDevice @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aCleanup @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pSimulateStart @STRUCTURED_TEXT 
@RT(0) @RT(26)sv_bSimulate,sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(9)pDeviceId @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(9)fCheckTol @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(4)rAct @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)rSet @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)rTol @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)rTolWidth @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(52)turn off slow input again before starting stop input @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paSimulate @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(8)bMoveFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bMoveBwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bMovePinIn @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bMovePinOut @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)rMultiplier @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(6)0.0065 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)rMultiplierPin @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.06 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rStopTol @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.1 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rSlowTol @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)1.5 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)rTolWidth @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.7 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aGetSimulationSource @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(18)fbGetRequiredPumps @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)FBGetRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pRequiredPumps @STRUCTURED_TEXT 
@RT(0) @RT(22)mpPumps^.RequiredPumps @RT(7)TaskSim @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(23)
miState := 0;// in case init fails we stay stopped
sDevice := 'SlideTable1';

mrPos := 10.0;    //bwd
mrPosPin := 10.0; //In

abForcePosition.aInit(Name := CONCAT(sDevice, '.ai_Position'));
abForceStop1.aInit(Name := CONCAT(sDevice, '.di_StopFwd'));
abForceStop2.aInit(Name := CONCAT(sDevice, '.di_StopBwd'));
abForceSlow1.aInit(Name := CONCAT(sDevice, '.di_SlowdownFwd'));
abForceSlow2.aInit(Name := CONCAT(sDevice, '.di_SlowdownBwd'));

abForcePinIn.aInit(Name  := CONCAT(sDevice, '.di_LockPinInReached'));
abForcePinOut.aInit(Name := CONCAT(sDevice, '.di_LockPinOutReached'));

(* absence of this variables is handled gracefully *)
mpbBwd  := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_Backward'), Timeout := t#0s, Status := Status);
mpbFwd := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_Forward'), Timeout := t#0s, Status := Status);
mpbPinIn  := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_LockPinIn'), Timeout := t#0s, Status := Status);
mpbPinOut := GET_SYNC_REFTO(SVName := CONCAT(sDevice, '.do_LockPinOut'), Timeout := t#0s, Status := Status);

miState := 2;//running

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
abForcePosition.aUnforce();

abForceStop1.aUnforce();
abForceStop2.aUnforce();

abForceSlow1.aUnforce();
abForceSlow2.aUnforce();

abForcePinIn.aUnforce();
abForcePinOut.aUnforce();

miState := 0;//stopped

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
IF sv_bSimulate THEN
   pDeviceId := GET_SYNC_REFTO('SlideTable1.sv_DeviceId', T#0s, Status); 
   IF Status = KSYS_Status_OK THEN     
      //only simulate if SlideTable1 - fu is available
      miState := 1;//init
      START_PROCESS_ALGORITHM(paSimulate);
   END_IF;
ELSE   
   IF miState = 2 THEN
      miState := 3;//clean up (only if we were running before)
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
IF rTolWidth <> 0.0 THEN
// tolerance area on positive and negative side:
// =============================================

// rSet position of |
// rTol difference between | and y
// rTolWidth the width of the y and z    
//  ----yxxxz-----|-----zxxxy---   
//   fCheckTol := ((rAct > (rSet - rTol)) AND (rAct < (rSet - rTol + rTolWidth))) (* lower *) OR
//                ((rAct < (rSet + rTol)) AND (rAct > (rSet + rTol - rTolWidth)));(* upper *)

// tolerance area on negative side:
// =============================================
   
// rSet position of |
// rTol difference between | and y
// rTolWidth <> 0.0 it the width of the y and z    
//  ----yxxxz-----|-------------   
   fCheckTol := (rAct > (rSet - rTol)) AND (rAct < (rSet - rTol + rTolWidth));
ELSE
// rSet position of |
// rTol difference between | and y
//  ----yxxxxxxxxx|xxxxxxxxxy---
   fCheckTol := (rAct > (rSet - rTol)) AND (rAct < (rSet + rTol));
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(56)
IF miState = 1 THEN
   //start init
   aInit();
   IF miState <> 2 THEN
      STOP_PROCESS_ALGORITHM();
      RETURN;
   END_IF;
ELSIF miState = 3 THEN
   //start cleanup
   aCleanup();
   STOP_PROCESS_ALGORITHM();
   RETURN;
END_IF;

//cyclic simulation
bMoveFwd := (CHECK_REF(mpbFwd^) AND mpbFwd^);
bMoveBwd  := (CHECK_REF(mpbBwd^)  AND mpbBwd^);
bMovePinIn  := (CHECK_REF(mpbPinIn^)  AND mpbPinIn^);
bMovePinOut := (CHECK_REF(mpbPinOut^) AND mpbPinOut^);

//Position simulation
IF bMoveBwd THEN
   mrPos := mrPos + mprVelocity^ * rMultiplier;   
ELSIF bMoveFwd THEN
   mrPos := mrPos - mprVelocity^ * rMultiplier;
END_IF;

//stop at end
IF mrPos < 0.0 THEN
   mrPos := 0.0;
ELSIF mrPos > 10.0 THEN
   mrPos := 10.0;
END_IF;

abForcePosition.aSetForceValue(rValue := mrPos);
abForceStop1.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos1, rStopTol, 0.0));
abForceStop2.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos2, rStopTol, 0.0));
abForceSlow1.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos1, rSlowTol, rTolWidth));
abForceSlow2.aSetForceValue(bValue := fCheckTol(mrPos, mrStopPos2, rSlowTol, rTolWidth));

//Pin
IF bMovePinIn THEN
   mrPosPin := mrPosPin + mprVelocity^ * rMultiplierPin;   
ELSIF bMovePinOut THEN
   mrPosPin := mrPosPin - mprVelocity^ * rMultiplierPin;
END_IF;

IF mrPosPin < 0.0 THEN
   mrPosPin := 0.0;
ELSIF mrPosPin > 10.0 THEN
   mrPosPin := 10.0;
END_IF;

abForcePinIn.aSetForceValue(bValue := mrPosPin > 9.8);
abForcePinOut.aSetForceValue(bValue := mrPosPin < 0.2);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbGetSimulationSource(pRequiredPumps := mpPumps,
                      prVelocity => mprVelocity);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get required pumps
fbGetRequiredPumps.DeviceId.CompId := cCompSlideTable;
fbGetRequiredPumps.DeviceId.IndexId := 1;

fbGetRequiredPumps(MoveDir := cMoveFwd,
                   MoveId := cMoveFwd);
mpPumps := fbGetRequiredPumps.pPumps;

aGetSimulationSource();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetSimulationSource();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
