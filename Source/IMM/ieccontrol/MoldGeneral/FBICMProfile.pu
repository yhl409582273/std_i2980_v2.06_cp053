(*
/*-------------------------------------------------------------------------
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

- FB build the profile which corresponds to the input values. Acceleration should be sinus curve. The velocity and position will be 
  outputed using the intergration (In this FB the lib for integration will be not used).
 
- In case velocity and acceleration is zero, set value should be set to zero

*)

IMPORT_OVER_LISTFILE
 cApplPlasticsPI
, KAPPL_VisProfile

END_IMPORT

FUNCTION_BLOCK FBICMProfile #DUMMY_EDIT_BLOCK

VAR_INPUT
 ProfileICM : KAPPL_VisProfile (* Profile from visualization with the constant parameters for pos,vel,accl *);
 rTimer : REAL (* Timer for the sin, cos, sin^2 builder *);
 rAcceleration : REAL (* Ramp of velocity *);
 bStart : BOOL (* To start the profile generator *);
 bStop : BOOL (* To stop the profile generator *);
 bTimeModeVisu : BOOL (* Timer mode from the visualization, TRUE:cycle time, FALSE: delay time *);
 rStartPosition : REAL (* Start position *);
END_VAR

VAR_OUTPUT
 bReady : BOOL (* End of profile reached *);
 rSetPos : REAL (* Set Position *);
 rSetVel : REAL (* Set velocity *);
 rSetAcc : REAL (* Set accleration *);
 rSetAccConst : REAL (* Set accleration from visu *);
 rAlgebraSign : REAL (* Direction *);
END_VAR

VAR
 iStage : UDINT (* Stage counter *);
 rPosSumTemp : REAL (* Temp var to count the pos *);
 rCurrStagePos : REAL (* Position of Current stage *);
 iOldStage : UDINT := 0 (* Check if the stage changed *);
 rCurrStageVel : REAL (* Velocity of current stage *);
 rLastStagePos : REAL (* Last stage position  *);
 rPosDiff : REAL (* Absolute position *);
 rCurrStageTime : REAL (* time for current stage(move + delay) *);
 rAcclDecTime : REAL (* Accleration or deceleration time *);
 rMidTime : REAL (* Time for motion with const vel *);
 // rAlgebraSign : REAL (* Algebra sign for direction of motion *);
 rPeriod : REAL (* Periode *);
 rFreq : REAL (* Frequency *);
 rAmpl : REAL (* Amplitude *);
 rCurrAcc : REAL (* Current acceleration *);
 bPosSumAccFinished : BOOL (* If pos summed  *);
 bInited : BOOL (* Flag init *);
 rTimeSumTemp : REAL (* Use to get the actual timer of respect timer *);
 rInternalTimer : REAL (* Internal timer for actual time of actual stage *);
 rTimeStopTemp : REAL (* To get the actual time when stop *);
 bStopInited : BOOL (* Flag of initializing for stop functionality *);
 rCurrVel : REAL (* Current velocity *);
 rAcclDecTimeStop : REAL (* Acc/Deceleration time for stop *);
 rPeriodStop : REAL (* Period for stop *);
 rFreqStop : REAL (* Freq for stop *);
 rAmplStop : REAL (* Amplitude for stop *);
 bStopAcc : BOOL (* Stop during acceleration *);
 bStopConst : BOOL (* Stop during constant movement *);
 rCurrPos : REAL (* Current position *);
 rCalcAccDecTime : REAL (* Calculated acc/dec time to check the time to reach  the vel *);
END_VAR
#BEGIN_EDIT_BLOCK
//********************** Initialize***************************//
IF bStart AND NOT bInited THEN   
   //reset generator so it starts at the beginning again   
   rCurrAcc := ABS(rAcceleration);
   bReady:= FALSE;
   rPosSumTemp := rStartPosition;
   rTimeSumTemp := 0.0;
   iStage := 1;
   iOldStage := 0;//start with value <> iStage
   // to sum the reached pos at last time
   bPosSumAccFinished := FALSE;
   bInited := TRUE; 
   //bStop
   bStopInited := FALSE;
   rTimeStopTemp := 0.0;
   //Flag to check if stop finished in different phase
   bStopAcc:= FALSE;
   bStopConst:= FALSE;
   
ELSIF NOT bStart THEN
   bInited := FALSE;
   RETURN;
END_IF;

//********************** Calculate and Output ***************************//
IF NOT bReady AND bStart THEN
   
   //*************************Calculatation*******************************//
   
   rInternalTimer := rTimer - rTimeSumTemp; //time since start of current stage in s 
   rCurrStagePos := ProfileICM.Profile.Points[iStage].rPressure;
   
   //Get the last position
   IF iStage = 1 THEN
      rLastStagePos := rStartPosition;
   ELSE
      rLastStagePos := ProfileICM.Profile.Points[iStage-1].rPressure;
   END_IF;
   
   //Get the absolute position
   rPosDiff := ABS(rCurrStagePos - rLastStagePos);
   rCurrStageVel := ABS(ProfileICM.Profile.Points[iStage].rVelocity);
   
   //avoid singularity
   IF rCurrAcc = 0.0 THEN
      rCurrAcc := 1.0;
   END_IF;                       
   IF rCurrStageVel = 0.0 THEN
      rCurrStageVel := 1.0; 
   END_IF;

   //Check the input values
   //Use the input pos(abs) to calc the acc(dec) time assumming that the profile is triangle without midtime
   //Use this calced time to compare with the input vel.In case that it is smaller that input vel, 
   //then we take a new calced vel as the current vel replacing input value 
   rCalcAccDecTime := SQRT(rPosDiff/rCurrAcc);   
   IF rCurrAcc*rCalcAccDecTime<rCurrStageVel THEN      
      rCurrStageVel := rCurrAcc*rCalcAccDecTime;
   END_IF;
   
   //Get the time between accleration and deccleration
   IF rPosDiff <> 0.0 THEN
      rAcclDecTime := rCurrStageVel/rCurrAcc;
      rMidTime := rPosDiff/rCurrStageVel - rAcclDecTime;
   ELSE                                                   
      //The same target position as the last stage is inputed
      //when rPosDiff = 0.0 -> rMidTime = 0 and rAcclDecTime = 0
      rAcclDecTime := 0.0;
      rMidTime := 0.0;
   END_IF;

   //Check the time mode
   IF NOT bTimeModeVisu AND iStage <> iOldStage THEN 
      //only standstill time in profile 
      rCurrStageTime := ProfileICM.Profile.Points[iStage].rStartPos + rMidTime + 2.0*rAcclDecTime;
      bPosSumAccFinished := FALSE;
      iOldStage := iStage;
   ELSIF bTimeModeVisu AND iStage <> iOldStage THEN
      //time of complete stage in profile
      rCurrStageTime := ProfileICM.Profile.Points[iStage].rStartPos;
      bPosSumAccFinished := FALSE;
      iOldStage := iStage;
      
      //Error handling to check if enough time
      IF rMidTime + 2.0 * rAcclDecTime > rCurrStageTime THEN
         IF rCurrStageTime <> 0.0 THEN
            rCurrStageTime := rMidTime + 2.0 * rAcclDecTime;
         END_IF;
      END_IF;
   END_IF;

   //****************************Output**********************************// 
   
   //During movement
   IF rInternalTimer < (rMidTime+2.0*rAcclDecTime) AND rInternalTimer < rCurrStageTime THEN           
      //(never reached when rPosDiff = 0)
      IF rCurrStagePos - rLastStagePos < 0.0 THEN
         rAlgebraSign := -1.0; //position decreases 
      ELSE
         rAlgebraSign := 1.0; //position increases
      END_IF;

      //Frequency,Amplitude,Periode
      rPeriod := 2.0*rAcclDecTime;
      rFreq := 2.0*cApplPlasticsPI/rPeriod;
      rAmpl := 0.5*rCurrStageVel*rFreq;
      
      //Build the pos,vel,acc     
      //pos ~ t+sin(t) only during acceleration or deceleration
      //vel ~ sin²(t)  only during acceleration or deceleration
      //acc ~ sin(t)   only during acceleration or deceleration
      
      //acceleration or stop during acceleration
      IF rInternalTimer < rCurrStageVel/rCurrAcc OR bStopAcc THEN    
         IF bStop THEN
            //Recalculate parameters for a new deceleration profile if stop during acceleration  
            IF NOT bStopInited THEN
               rCurrVel := rSetVel;
               rAcclDecTimeStop := rCurrVel/rCurrAcc;
               rPeriodStop := 2.0*rAcclDecTimeStop;
               rFreqStop := 2.0*cApplPlasticsPI/rPeriodStop;
               rAmplStop := 0.5*rCurrVel*rFreqStop;
               rTimeStopTemp := rInternalTimer;
               rPosSumTemp := rSetPos-rAlgebraSign*rAmplStop*(0.5*rPeriodStop-SIN(rFreqStop*(0.5*rPeriodStop))/rFreqStop)/rFreqStop; 
               rCurrPos := rSetPos;
               bStopAcc := TRUE;
               bStopInited := TRUE;
            END_IF;
            
            //deceleration finished         
            IF rInternalTimer >= rTimeStopTemp + rAcclDecTimeStop THEN
               rSetPos := rCurrPos + 0.5*rAcclDecTimeStop*rCurrVel;
               rSetVel := 0.0; 
               rSetAccConst := 0.0;
               rSetAcc := 0.0;
               bReady := TRUE;
            ELSE
               //Output a new deceleration profile when stop during acceleration
               rSetPos := rPosSumTemp+rAlgebraSign*rAmplStop*((rInternalTimer-rTimeStopTemp+0.5*rPeriodStop)-SIN(rFreqStop*(rInternalTimer-rTimeStopTemp+0.5*rPeriodStop))/rFreqStop)/rFreqStop;
               rSetVel := 2.0 * rAlgebraSign*rAmplStop*SIN(0.5*rFreqStop*(rInternalTimer-rTimeStopTemp+0.5*rPeriodStop))*SIN(0.5*rFreqStop*(rInternalTimer-rTimeStopTemp+0.5*rPeriodStop))/rFreqStop;
               rSetAccConst := -rAlgebraSign * rCurrAcc;
               rSetAcc := -rAlgebraSign*rAmplStop*SIN(rFreqStop*(rInternalTimer-rTimeStopTemp));
            END_IF;
            
         ELSE
            //acceleration, no stop and normal movement
            rSetPos := rPosSumTemp+rAlgebraSign*rAmpl*(rInternalTimer-SIN(rFreq*rInternalTimer)/rFreq)/rFreq;
            rSetVel := 2.0 * rAlgebraSign*rAmpl*SIN(0.5*rFreq*rInternalTimer)*SIN(0.5*rFreq*rInternalTimer)/rFreq;
            rSetAccConst :=  rAlgebraSign * rCurrAcc;
            rSetAcc := rAlgebraSign*rAmpl*SIN(rFreq*rInternalTimer);
         END_IF;
         
         
      //Movement with const vel or stop during const movement
      ELSIF (rInternalTimer >= rCurrStageVel/rCurrAcc AND rInternalTimer < rCurrStageVel/rCurrAcc+rMidTime) OR bStopConst THEN
         //To build the linear part of the position trajectory, get the initial value only once
         IF NOT bPosSumAccFinished THEN  
            rPosSumTemp := rSetPos;  
            bPosSumAccFinished := TRUE; 
         END_IF;
         
         IF bStop THEN
            //Just recalculate the mid time when stop during const movement
            IF NOT bStopInited THEN
               rTimeStopTemp := rInternalTimer - rAcclDecTime;
               bStopConst:= TRUE;
               bStopInited := TRUE;
            END_IF;
            
            //Deceleration finished
            IF rInternalTimer >= rTimeStopTemp + 2.0*rAcclDecTime THEN     
               rSetPos := rLastStagePos +  rAlgebraSign * (rAcclDecTime+rTimeStopTemp)*rCurrStageVel;
               rSetVel := 0.0;
               rSetAccConst := 0.0;
               rSetAcc := 0.0;
               bReady := TRUE;
            ELSE
               //deceleration after stop and the deceleration profile not neccessary to be recalculated
               rSetPos := rLastStagePos+rAlgebraSign*rCurrStageVel*rTimeStopTemp+rAlgebraSign*rAmpl*((rInternalTimer-rTimeStopTemp)-SIN(rFreq*(rInternalTimer-rTimeStopTemp))/rFreq)/rFreq;
               rSetVel := 2.0 * rAlgebraSign*rAmpl*SIN(0.5*rFreq*(rInternalTimer-rTimeStopTemp))*SIN(0.5*rFreq*(rInternalTimer-rTimeStopTemp))/rFreq;
               rSetAccConst :=  -rAlgebraSign * rCurrAcc;
               rSetAcc := rAlgebraSign*rAmpl*SIN(rFreq*(rInternalTimer-rTimeStopTemp));
            END_IF;

         ELSE 
            //constant movement, no stop and normal movement
            rSetPos := rPosSumTemp + rAlgebraSign*rCurrStageVel*(rInternalTimer-rAcclDecTime);
            rSetVel := rAlgebraSign*rCurrStageVel;
            rSetAccConst := 0.0;
            rSetAcc := 0.0;
         END_IF;
      ELSE 
         //deceleration
         //when bStop is set here nothing special happens, we continue our normal stopping
         rSetPos := rLastStagePos+rAlgebraSign*rCurrStageVel*rMidTime+rAlgebraSign*rAmpl*((rInternalTimer-rMidTime)-SIN(rFreq*(rInternalTimer-rMidTime))/rFreq)/rFreq;
         rSetVel := 2.0 * rAlgebraSign*rAmpl*SIN(0.5*rFreq*(rInternalTimer-rMidTime))*SIN(0.5*rFreq*(rInternalTimer-rMidTime))/rFreq;
         rSetAccConst := -rAlgebraSign * rCurrAcc;
         rSetAcc := -rAlgebraSign*rAmpl*SIN(rFreq*(rInternalTimer-rAcclDecTime-rMidTime));
      END_IF;
   ELSIF rInternalTimer >= (rMidTime+2.0*rAcclDecTime) AND rInternalTimer < rCurrStageTime THEN
      //standing still (waiting time)
      rSetPos := rCurrStagePos; 
      rSetVel := 0.0;
      rSetAccConst := 0.0;
      rSetAcc := 0.0;
      IF bStop THEN  
         bReady := TRUE;
      END_IF;
   ELSE
      rSetPos := rCurrStagePos; 
      rSetVel := 0.0;
      rSetAccConst := 0.0;
      rSetAcc := 0.0;
      //end of stage reached       
      rPosSumTemp := rCurrStagePos;  //use profile value  
      rTimeSumTemp := rTimeSumTemp +  rCurrStageTime;
      IF iStage >= ProfileICM.Profile.iNoOfPoints OR bStop THEN
         //end of profile reached   
         bReady := TRUE;
      ELSE
         //end of the stage reached and get the new stage index
         iStage := iStage + 1;
         bPosSumAccFinished := FALSE;           
      END_IF;
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 120 @Pou 25 
@@@BEG_Comment@@@
/*-------------------------------------------------------------------------
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

- FB build the profile which corresponds to the input values. Acceleration should be sinus curve. The velocity and position will be 
  outputed using the intergration (In this FB the lib for integration will be not used).
 
- In case velocity and acceleration is zero, set value should be set to zero

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(15)cApplPlasticsPI @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(10)3.14159265 @RT(13)pi=3.14159265 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(12)FBICMProfile @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
43 
@Var @RT(10)ProfileICM @RT(0) @T @T @DERIVED 0 @F @RT(16)KAPPL_VisProfile @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(72)Profile from visualization with the constant parameters for pos,vel,accl @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)rTimer @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)Timer for the sin, cos, sin^2 builder @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)rAcceleration @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Ramp of velocity @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)To start the profile generator @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)To stop the profile generator @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)bTimeModeVisu @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(69)Timer mode from the visualization, TRUE:cycle time, FALSE: delay time @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)rStartPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)Start position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)End of profile reached @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)rSetPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(12)Set Position @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)rSetVel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(12)Set velocity @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)rSetAcc @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)Set accleration @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)rSetAccConst @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)Set accleration from visu @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)iStage @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)Stage counter @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)rPosSumTemp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)Temp var to count the pos @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rCurrStagePos @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)Position of Current stage @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)iOldStage @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(26)Check if the stage changed @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rCurrStageVel @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)Velocity of current stage @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rLastStagePos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)Last stage position  @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rPosDiff @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(17)Absolute position @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)rCurrStageTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)time for current stage(move + delay) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rAcclDecTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)Accleration or deceleration time @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rMidTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)Time for motion with const vel @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rAlgebraSign @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)Algebra sign for direction of motion @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)rPeriod @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(7)Periode @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)rFreq @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Frequency @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)rAmpl @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Amplitude @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rCurrAcc @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)Current acceleration @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)bPosSumAccFinished @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)If pos summed  @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bInited @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Flag init @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rTimeSumTemp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)Use to get the actual timer of respect timer @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)rInternalTimer @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)Internal timer for actual time of actual stage @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rTimeStopTemp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)To get the actual time when stop @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bStopInited @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)Flag of initializing for stop functionality @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rCurrVel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Current velocity @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)rAcclDecTimeStop @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)Acc/Deceleration time for stop @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)rPeriodStop @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)Period for stop @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)rFreqStop @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)Freq for stop @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)rAmplStop @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)Amplitude for stop @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bStopAcc @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)Stop during acceleration @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bStopConst @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)Stop during constant movement @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rCurrPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Current position @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rCalcAccDecTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(59)Calculated acc/dec time to check the time to reach  the vel @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rAlgebraSign @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)Direction @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(227)
//********************** Initialize***************************//
IF bStart AND NOT bInited THEN   
   //reset generator so it starts at the beginning again   
   rCurrAcc := ABS(rAcceleration);
   bReady:= FALSE;
   rPosSumTemp := rStartPosition;
   rTimeSumTemp := 0.0;
   iStage := 1;
   iOldStage := 0;//start with value <> iStage
   // to sum the reached pos at last time
   bPosSumAccFinished := FALSE;
   bInited := TRUE; 
   //bStop
   bStopInited := FALSE;
   rTimeStopTemp := 0.0;
   //Flag to check if stop finished in different phase
   bStopAcc:= FALSE;
   bStopConst:= FALSE;
   
ELSIF NOT bStart THEN
   bInited := FALSE;
   RETURN;
END_IF;

//********************** Calculate and Output ***************************//
IF NOT bReady AND bStart THEN
   
   //*************************Calculatation*******************************//
   
   rInternalTimer := rTimer - rTimeSumTemp; //time since start of current stage in s 
   rCurrStagePos := ProfileICM.Profile.Points[iStage].rPressure;
   
   //Get the last position
   IF iStage = 1 THEN
      rLastStagePos := rStartPosition;
   ELSE
      rLastStagePos := ProfileICM.Profile.Points[iStage-1].rPressure;
   END_IF;
   
   //Get the absolute position
   rPosDiff := ABS(rCurrStagePos - rLastStagePos);
   rCurrStageVel := ABS(ProfileICM.Profile.Points[iStage].rVelocity);
   
   //avoid singularity
   IF rCurrAcc = 0.0 THEN
      rCurrAcc := 1.0;
   END_IF;                       
   IF rCurrStageVel = 0.0 THEN
      rCurrStageVel := 1.0; 
   END_IF;

   //Check the input values
   //Use the input pos(abs) to calc the acc(dec) time assumming that the profile is triangle without midtime
   //Use this calced time to compare with the input vel.In case that it is smaller that input vel, 
   //then we take a new calced vel as the current vel replacing input value 
   rCalcAccDecTime := SQRT(rPosDiff/rCurrAcc);   
   IF rCurrAcc*rCalcAccDecTime<rCurrStageVel THEN      
      rCurrStageVel := rCurrAcc*rCalcAccDecTime;
   END_IF;
   
   //Get the time between accleration and deccleration
   IF rPosDiff <> 0.0 THEN
      rAcclDecTime := rCurrStageVel/rCurrAcc;
      rMidTime := rPosDiff/rCurrStageVel - rAcclDecTime;
   ELSE                                                   
      //The same target position as the last stage is inputed
      //when rPosDiff = 0.0 -> rMidTime = 0 and rAcclDecTime = 0
      rAcclDecTime := 0.0;
      rMidTime := 0.0;
   END_IF;

   //Check the time mode
   IF NOT bTimeModeVisu AND iStage <> iOldStage THEN 
      //only standstill time in profile 
      rCurrStageTime := ProfileICM.Profile.Points[iStage].rStartPos + rMidTime + 2.0*rAcclDecTime;
      bPosSumAccFinished := FALSE;
      iOldStage := iStage;
   ELSIF bTimeModeVisu AND iStage <> iOldStage THEN
      //time of complete stage in profile
      rCurrStageTime := ProfileICM.Profile.Points[iStage].rStartPos;
      bPosSumAccFinished := FALSE;
      iOldStage := iStage;
      
      //Error handling to check if enough time
      IF rMidTime + 2.0 * rAcclDecTime > rCurrStageTime THEN
         IF rCurrStageTime <> 0.0 THEN
            rCurrStageTime := rMidTime + 2.0 * rAcclDecTime;
         END_IF;
      END_IF;
   END_IF;

   //****************************Output**********************************// 
   
   //During movement
   IF rInternalTimer < (rMidTime+2.0*rAcclDecTime) AND rInternalTimer < rCurrStageTime THEN           
      //(never reached when rPosDiff = 0)
      IF rCurrStagePos - rLastStagePos < 0.0 THEN
         rAlgebraSign := -1.0; //position decreases 
      ELSE
         rAlgebraSign := 1.0; //position increases
      END_IF;

      //Frequency,Amplitude,Periode
      rPeriod := 2.0*rAcclDecTime;
      rFreq := 2.0*cApplPlasticsPI/rPeriod;
      rAmpl := 0.5*rCurrStageVel*rFreq;
      
      //Build the pos,vel,acc     
      //pos ~ t+sin(t) only during acceleration or deceleration
      //vel ~ sin²(t)  only during acceleration or deceleration
      //acc ~ sin(t)   only during acceleration or deceleration
      
      //acceleration or stop during acceleration
      IF rInternalTimer < rCurrStageVel/rCurrAcc OR bStopAcc THEN    
         IF bStop THEN
            //Recalculate parameters for a new deceleration profile if stop during acceleration  
            IF NOT bStopInited THEN
               rCurrVel := rSetVel;
               rAcclDecTimeStop := rCurrVel/rCurrAcc;
               rPeriodStop := 2.0*rAcclDecTimeStop;
               rFreqStop := 2.0*cApplPlasticsPI/rPeriodStop;
               rAmplStop := 0.5*rCurrVel*rFreqStop;
               rTimeStopTemp := rInternalTimer;
               rPosSumTemp := rSetPos-rAlgebraSign*rAmplStop*(0.5*rPeriodStop-SIN(rFreqStop*(0.5*rPeriodStop))/rFreqStop)/rFreqStop; 
               rCurrPos := rSetPos;
               bStopAcc := TRUE;
               bStopInited := TRUE;
            END_IF;
            
            //deceleration finished         
            IF rInternalTimer >= rTimeStopTemp + rAcclDecTimeStop THEN
               rSetPos := rCurrPos + 0.5*rAcclDecTimeStop*rCurrVel;
               rSetVel := 0.0; 
               rSetAccConst := 0.0;
               rSetAcc := 0.0;
               bReady := TRUE;
            ELSE
               //Output a new deceleration profile when stop during acceleration
               rSetPos := rPosSumTemp+rAlgebraSign*rAmplStop*((rInternalTimer-rTimeStopTemp+0.5*rPeriodStop)-SIN(rFreqStop*(rInternalTimer-rTimeStopTemp+0.5*rPeriodStop))/rFreqStop)/rFreqStop;
               rSetVel := 2.0 * rAlgebraSign*rAmplStop*SIN(0.5*rFreqStop*(rInternalTimer-rTimeStopTemp+0.5*rPeriodStop))*SIN(0.5*rFreqStop*(rInternalTimer-rTimeStopTemp+0.5*rPeriodStop))/rFreqStop;
               rSetAccConst := -rAlgebraSign * rCurrAcc;
               rSetAcc := -rAlgebraSign*rAmplStop*SIN(rFreqStop*(rInternalTimer-rTimeStopTemp));
            END_IF;
            
         ELSE
            //acceleration, no stop and normal movement
            rSetPos := rPosSumTemp+rAlgebraSign*rAmpl*(rInternalTimer-SIN(rFreq*rInternalTimer)/rFreq)/rFreq;
            rSetVel := 2.0 * rAlgebraSign*rAmpl*SIN(0.5*rFreq*rInternalTimer)*SIN(0.5*rFreq*rInternalTimer)/rFreq;
            rSetAccConst :=  rAlgebraSign * rCurrAcc;
            rSetAcc := rAlgebraSign*rAmpl*SIN(rFreq*rInternalTimer);
         END_IF;
         
         
      //Movement with const vel or stop during const movement
      ELSIF (rInternalTimer >= rCurrStageVel/rCurrAcc AND rInternalTimer < rCurrStageVel/rCurrAcc+rMidTime) OR bStopConst THEN
         //To build the linear part of the position trajectory, get the initial value only once
         IF NOT bPosSumAccFinished THEN  
            rPosSumTemp := rSetPos;  
            bPosSumAccFinished := TRUE; 
         END_IF;
         
         IF bStop THEN
            //Just recalculate the mid time when stop during const movement
            IF NOT bStopInited THEN
               rTimeStopTemp := rInternalTimer - rAcclDecTime;
               bStopConst:= TRUE;
               bStopInited := TRUE;
            END_IF;
            
            //Deceleration finished
            IF rInternalTimer >= rTimeStopTemp + 2.0*rAcclDecTime THEN     
               rSetPos := rLastStagePos +  rAlgebraSign * (rAcclDecTime+rTimeStopTemp)*rCurrStageVel;
               rSetVel := 0.0;
               rSetAccConst := 0.0;
               rSetAcc := 0.0;
               bReady := TRUE;
            ELSE
               //deceleration after stop and the deceleration profile not neccessary to be recalculated
               rSetPos := rLastStagePos+rAlgebraSign*rCurrStageVel*rTimeStopTemp+rAlgebraSign*rAmpl*((rInternalTimer-rTimeStopTemp)-SIN(rFreq*(rInternalTimer-rTimeStopTemp))/rFreq)/rFreq;
               rSetVel := 2.0 * rAlgebraSign*rAmpl*SIN(0.5*rFreq*(rInternalTimer-rTimeStopTemp))*SIN(0.5*rFreq*(rInternalTimer-rTimeStopTemp))/rFreq;
               rSetAccConst :=  -rAlgebraSign * rCurrAcc;
               rSetAcc := rAlgebraSign*rAmpl*SIN(rFreq*(rInternalTimer-rTimeStopTemp));
            END_IF;

         ELSE 
            //constant movement, no stop and normal movement
            rSetPos := rPosSumTemp + rAlgebraSign*rCurrStageVel*(rInternalTimer-rAcclDecTime);
            rSetVel := rAlgebraSign*rCurrStageVel;
            rSetAccConst := 0.0;
            rSetAcc := 0.0;
         END_IF;
      ELSE 
         //deceleration
         //when bStop is set here nothing special happens, we continue our normal stopping
         rSetPos := rLastStagePos+rAlgebraSign*rCurrStageVel*rMidTime+rAlgebraSign*rAmpl*((rInternalTimer-rMidTime)-SIN(rFreq*(rInternalTimer-rMidTime))/rFreq)/rFreq;
         rSetVel := 2.0 * rAlgebraSign*rAmpl*SIN(0.5*rFreq*(rInternalTimer-rMidTime))*SIN(0.5*rFreq*(rInternalTimer-rMidTime))/rFreq;
         rSetAccConst := -rAlgebraSign * rCurrAcc;
         rSetAcc := -rAlgebraSign*rAmpl*SIN(rFreq*(rInternalTimer-rAcclDecTime-rMidTime));
      END_IF;
   ELSIF rInternalTimer >= (rMidTime+2.0*rAcclDecTime) AND rInternalTimer < rCurrStageTime THEN
      //standing still (waiting time)
      rSetPos := rCurrStagePos; 
      rSetVel := 0.0;
      rSetAccConst := 0.0;
      rSetAcc := 0.0;
      IF bStop THEN  
         bReady := TRUE;
      END_IF;
   ELSE
      rSetPos := rCurrStagePos; 
      rSetVel := 0.0;
      rSetAccConst := 0.0;
      rSetAcc := 0.0;
      //end of stage reached       
      rPosSumTemp := rCurrStagePos;  //use profile value  
      rTimeSumTemp := rTimeSumTemp +  rCurrStageTime;
      IF iStage >= ProfileICM.Profile.iNoOfPoints OR bStop THEN
         //end of profile reached   
         bReady := TRUE;
      ELSE
         //end of the stage reached and get the new stage index
         iStage := iStage + 1;
         bPosSumAccFinished := FALSE;           
      END_IF;
   END_IF;
END_IF;

@END_Body 

@END_Contents 
