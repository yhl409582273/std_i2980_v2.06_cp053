IMPORT_OVER_LISTFILE
 SET_ALARM
, GET_SYNC_REFTO
, tsDeviceId
, tnOperationMode
, FBLockUnlock
, KSYS_Status

END_IMPORT

ALGORITHM_BLOCK ABAdditionalMoldSafety #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId (* unique Device Identifier *);
 sv_bMoldOpen : BOOL;
 sv_bMoldClosed : BOOL;
 sv_bInitDone : BOOL;
 sv_bOutputActive : BOOL (* Output is active *);
 sv_OperationMode : tnOperationMode;
 di_MoldOpenProtect : BOOL (* limit switch for mold open maximum position reached *);
 di_MoldCloseProtect : BOOL (* limit switch for mold close minimum position reached *);
 sv_bFALSE : BOOL;
END_VAR

SYSTEM_OBJECT
 erEndPosChangedWithoutMove : ALARM;
 EV_Task_1 : TASK;
 erEndFwdLimitReached : ALARM;
 erEndBwdLimitReached : ALARM;
 PU_Task_7 : TASK;
 TaskMid : TASK;
END_OBJECT

VAR
 mpbHighPresMoldOpenActive : REFTO BOOL;
END_VAR

POSTUPDATE_ALGORITHM pEndPosChanged ON EV_Task_1 WITH sv_bMoldOpen,sv_bMoldClosed

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone OR (sv_OperationMode < nHalfAutomatic) THEN
   RETURN;
END_IF;

IF mpbHighPresMoldOpenActive^ THEN
   //On 2 platen IMM´s the mold moves backward during tiebar bwd movement (high pressure mold open - function).
   //In this case a change of mold close endposition is allowed -> no alarm
   RETURN;
END_IF;

IF NOT sv_bOutputActive THEN
    SET_ALARM(Name := erEndPosChangedWithoutMove,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMoldCloseMinLimitSwitch ON PU_Task_7 WITH di_MoldCloseProtect,sv_bInitDone


VAR
 fbLockUnlock : FBLockUnlock;
 bDILinked : BOOL;
 bInit : BOOL := FALSE;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

IF NOT bInit THEN
   bDILinked := IS_LINKED(di_MoldCloseProtect);
   fbLockUnlock.DeviceId := sv_DeviceId;
   fbLockUnlock.MoveDir := cMoveFwd;
   fbLockUnlock.MoveId := cMoveAll;
   fbLockUnlock.Alarm.AlarmId := erEndFwdLimitReached;
   fbLockUnlock.bSetAlarmImmediately := TRUE;
   bInit := TRUE;
END_IF;

IF bDILinked THEN
    
    IF di_MoldCloseProtect THEN
        fbLockUnlock.Mode := nUnlock;
    ELSE
        fbLockUnlock.Mode := nLockAbort;
    END_IF;
    //lock / unlock all fwd movements
    fbLockUnlock();  
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMoldOpenMaxLimitSwitch ON PU_Task_7 WITH di_MoldOpenProtect,sv_bInitDone


VAR
 fbLockUnlock : FBLockUnlock;
 bDILinked : BOOL;
 bInit : BOOL := FALSE;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

IF NOT bInit THEN
   bDILinked := IS_LINKED(di_MoldOpenProtect);
   fbLockUnlock.DeviceId := sv_DeviceId;
   fbLockUnlock.MoveDir := cMoveBwd;
   fbLockUnlock.MoveId := cMoveAll;
   fbLockUnlock.Alarm.AlarmId := erEndBwdLimitReached;
   fbLockUnlock.bSetAlarmImmediately := TRUE;
   bInit := TRUE;
END_IF;

IF bDILinked THEN
    
    IF di_MoldOpenProtect THEN
        fbLockUnlock.Mode := nUnlock;
    ELSE
        fbLockUnlock.Mode := nLockAbort;
    END_IF;
    //lock / unlock all bwd movements
    fbLockUnlock();  
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskMid AUTOSTART


VAR
 s : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbHighPresMoldOpenActive := GET_SYNC_REFTO('TieBars1.sv_bHighPressureMoldOpenActive', T#0s, s);
IF (s <> KSYS_Status_OK) THEN
   mpbHighPresMoldOpenActive := @sv_bFALSE;
END_IF;

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 114 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(34)KEBA_STANDARD_FUNCTION : ANY_REFTO @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(22)ABAdditionalMoldSafety @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)unique Device Identifier @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bMoldOpen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_bMoldClosed @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_bOutputActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)Output is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)erEndPosChangedWithoutMove @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)EV_Task_1 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)di_MoldOpenProtect @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(51)limit switch for mold open maximum position reached @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)di_MoldCloseProtect @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(52)limit switch for mold close minimum position reached @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)erEndFwdLimitReached @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)erEndBwdLimitReached @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(25)mpbHighPresMoldOpenActive @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)sv_bFALSE @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pEndPosChanged @STRUCTURED_TEXT 
@RT(0) @RT(27)sv_bMoldOpen,sv_bMoldClosed @RT(9)EV_Task_1 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(24)pMoldCloseMinLimitSwitch @STRUCTURED_TEXT 
@RT(0) @RT(32)di_MoldCloseProtect,sv_bInitDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bDILinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(23)pMoldOpenMaxLimitSwitch @STRUCTURED_TEXT 
@RT(0) @RT(31)di_MoldOpenProtect,sv_bInitDone @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(12)fbLockUnlock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bDILinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)bInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @F @RT(11)KSYS_Status @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone OR (sv_OperationMode < nHalfAutomatic) THEN
   RETURN;
END_IF;

IF mpbHighPresMoldOpenActive^ THEN
   //On 2 platen IMM´s the mold moves backward during tiebar bwd movement (high pressure mold open - function).
   //In this case a change of mold close endposition is allowed -> no alarm
   RETURN;
END_IF;

IF NOT sv_bOutputActive THEN
    SET_ALARM(Name := erEndPosChangedWithoutMove,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

IF NOT bInit THEN
   bDILinked := IS_LINKED(di_MoldCloseProtect);
   fbLockUnlock.DeviceId := sv_DeviceId;
   fbLockUnlock.MoveDir := cMoveFwd;
   fbLockUnlock.MoveId := cMoveAll;
   fbLockUnlock.Alarm.AlarmId := erEndFwdLimitReached;
   fbLockUnlock.bSetAlarmImmediately := TRUE;
   bInit := TRUE;
END_IF;

IF bDILinked THEN
    
    IF di_MoldCloseProtect THEN
        fbLockUnlock.Mode := nUnlock;
    ELSE
        fbLockUnlock.Mode := nLockAbort;
    END_IF;
    //lock / unlock all fwd movements
    fbLockUnlock();  
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bInitDone THEN
   RETURN;
END_IF;

IF NOT bInit THEN
   bDILinked := IS_LINKED(di_MoldOpenProtect);
   fbLockUnlock.DeviceId := sv_DeviceId;
   fbLockUnlock.MoveDir := cMoveBwd;
   fbLockUnlock.MoveId := cMoveAll;
   fbLockUnlock.Alarm.AlarmId := erEndBwdLimitReached;
   fbLockUnlock.bSetAlarmImmediately := TRUE;
   bInit := TRUE;
END_IF;

IF bDILinked THEN
    
    IF di_MoldOpenProtect THEN
        fbLockUnlock.Mode := nUnlock;
    ELSE
        fbLockUnlock.Mode := nLockAbort;
    END_IF;
    //lock / unlock all bwd movements
    fbLockUnlock();  
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbHighPresMoldOpenActive := GET_SYNC_REFTO('TieBars1.sv_bHighPressureMoldOpenActive', T#0s, s);
IF (s <> KSYS_Status_OK) THEN
   mpbHighPresMoldOpenActive := @sv_bFALSE;
END_IF;

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
