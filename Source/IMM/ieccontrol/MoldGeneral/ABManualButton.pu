(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

react to manual buttons
find next target position when button is pressed

@FunctionID: S_FU_01_Mold1
*)

IMPORT_OVER_LISTFILE
 IS_LINKED
, cMoveFwd
, cMoveBwd
, cCompMoldHeightAuto
, cMoveBwdInterPos
, FBManualButton
, tsDeviceId
, tsInterCondList
, tsMoveData
, tyInstanceListArray
, tyInterCondBoolArray
, tMoveIdent
, FBCheckReady

END_IMPORT

ALGORITHM_BLOCK ABManualButton #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bInitDone : BOOL;
 sv_DeviceId : tsDeviceId;
 sv_rMoldPosition : REAL;
 sv_FwdInterruptList : tsInterCondList (* list with interrupt positions for mold close *);
 sv_BwdInterruptList : tsInterCondList (* list with interrupt positions for mold open *);
 sv_MoveCloseInterPos : tsMoveData;
 sv_MoveOpenInterPos : tsMoveData;
 sv_bUseProgramSwitches : BOOL;
 sv_InstanceDataCloseInterPos : tyInstanceListArray;
 sv_InstanceDataOpenInterPos : tyInstanceListArray;
 sv_CloseInterPosProgInSequ : tyInterCondBoolArray (* information, which instances of mold close interpos movement are programmed in sequence  *);
 sv_OpenInterPosProgInSequ : tyInterCondBoolArray (* information, which instances of mold open interpos movement are programmed in sequence *);
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
END_OBJECT

VAR
 fbManualButton : FBManualButton;
 mpbAutoAdjustReady : REFTO BOOL;
END_VAR

ALGORITHM aGetNextCloseMovement


VAR_OUTPUT
 MoveId : tMoveIdent;
 iInstance : DINT;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

MoveId := cMoveFwd;
iInstance := 1;

IF sv_bUseProgramSwitches THEN  
   //get next target position from sv_FwdInterruptList   
   FOR i := 1 TO sv_FwdInterruptList.iUsedElements DO
      IF (sv_FwdInterruptList.List[i].rTargetValue < sv_rMoldPosition) THEN
         iInstance := i;
         MoveId := cMoveFwdInterPos;
         RETURN;
      END_IF; 
   END_FOR;       
ELSE
   //sequence programmed by editor
   //-> check instance data to get next target position
   FOR i := 1 TO cMaxIntermediateConditions DO
      IF sv_CloseInterPosProgInSequ[i] AND sv_InstanceDataCloseInterPos[i].rTargetValue < sv_rMoldPosition THEN
         iInstance := i;
         MoveId := cMoveFwdInterPos;
         RETURN;
      END_IF;
   END_FOR;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aGetNextOpenMovement


VAR_OUTPUT
 MoveId : tMoveIdent;
 iInstance : DINT;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

MoveId := cMoveBwd;
iInstance := 1;

IF sv_bUseProgramSwitches THEN  
   //get next target position from sv_BwdInterruptList   
   FOR i := 1 TO sv_BwdInterruptList.iUsedElements DO
      IF (sv_BwdInterruptList.List[i].rTargetValue > sv_rMoldPosition) THEN
         iInstance := i;
         MoveId := cMoveBwdInterPos;
         RETURN;
      END_IF; 
   END_FOR;       
ELSE
   //sequence programmed by editor
   //-> check instance data to get next target position
   FOR i := 1 TO cMaxIntermediateConditions DO
      IF sv_OpenInterPosProgInSequ[i] AND sv_InstanceDataOpenInterPos[i].rTargetValue > sv_rMoldPosition THEN
         iInstance := i;
         MoveId := cMoveBwdInterPos;
         RETURN;
      END_IF;
   END_FOR;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aButtonClose


VAR_INPUT
 bButtonClose : BOOL;
END_VAR

VAR
 MoveId : tMoveIdent;
 iIntermediateCond : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpbAutoAdjustReady <> EMPTY AND NOT mpbAutoAdjustReady^ THEN
    // auto mold adjust available and active -> ignore manual button
    RETURN;
END_IF;

IF bButtonClose THEN
   
   IF sv_MoveCloseInterPos.bProgrammedInSequence THEN
      //mold close movement to interpos programmed in sequence
      aGetNextCloseMovement(MoveId => MoveId,
                            iInstance => iIntermediateCond);
   ELSE
      //no interpos movement programmed
      MoveId := cMoveFwd;
      iIntermediateCond := 1;
   END_IF;
   
END_IF;

fbManualButton(bButton := bButtonClose, MoveId := MoveId, MoveDir := cMoveFwd, IntermediateCond := iIntermediateCond);


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aButtonOpen


VAR_INPUT
 bButtonOpen : BOOL;
END_VAR

VAR
 MoveId : tMoveIdent;
 iIntermediateCond : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpbAutoAdjustReady <> EMPTY AND NOT mpbAutoAdjustReady^ THEN
    // auto mold adjust available and active -> ignore manual button
    RETURN;
END_IF;

IF bButtonOpen THEN 
   
   IF sv_MoveOpenInterPos.bProgrammedInSequence THEN
      //mold open movement to interpos programmed in sequence
      aGetNextOpenMovement(MoveId => MoveId,
                           iInstance => iIntermediateCond);
   ELSE
      //no interpos movement programmed
      MoveId := cMoveBwd;
      iIntermediateCond := 1;
   END_IF;
   
END_IF;

fbManualButton(bButton := bButtonOpen, MoveId := MoveId, MoveDir := cMoveBwd, IntermediateCond := iIntermediateCond);



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pInitDone ON PU_Task_7(10) WITH sv_bInitDone


VAR
 fbCheckAutoAdjustReady : FBCheckReady;
 DeviceIdAutoAdjust : tsDeviceId;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get reference to ready flag of auto mold adjust function unit
DeviceIdAutoAdjust.CompId := cCompMoldHeightAuto;
DeviceIdAutoAdjust.IndexId := sv_DeviceId.IndexId;

fbCheckAutoAdjustReady(DeviceId := DeviceIdAutoAdjust);
mpbAutoAdjustReady := fbCheckAutoAdjustReady.pbReady;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

react to manual buttons
find next target position when button is pressed

@FunctionID: S_FU_01_Mold1
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)IS_LINKED @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
4 
@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)cCompMoldHeightAuto @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)125 @RT(26)Component Auto Mold Height 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cMoveBwdInterPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)16 @RT(38)move backward to intermediate position 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABManualButton @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
15 
@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)fbManualButton @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)FBManualButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)mpbAutoAdjustReady @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)sv_rMoldPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_FwdInterruptList @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsInterCondList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)list with interrupt positions for mold close @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_BwdInterruptList @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsInterCondList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)list with interrupt positions for mold open @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_MoveCloseInterPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_MoveOpenInterPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_bUseProgramSwitches @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(28)sv_InstanceDataCloseInterPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tyInstanceListArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(27)sv_InstanceDataOpenInterPos @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tyInstanceListArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)sv_CloseInterPosProgInSequ @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyInterCondBoolArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(88)information, which instances of mold close interpos movement are programmed in sequence  @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_OpenInterPosProgInSequ @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tyInterCondBoolArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(86)information, which instances of mold open interpos movement are programmed in sequence @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(21)aGetNextCloseMovement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)iInstance @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aGetNextOpenMovement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)iInstance @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aButtonClose @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(12)bButtonClose @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)iIntermediateCond @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aButtonOpen @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(11)bButtonOpen @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)iIntermediateCond @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(9)pInitDone @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_bInitDone @RT(13)PU_Task_7(10) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(22)fbCheckAutoAdjustReady @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBCheckReady @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)DeviceIdAutoAdjust @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(31)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

MoveId := cMoveFwd;
iInstance := 1;

IF sv_bUseProgramSwitches THEN  
   //get next target position from sv_FwdInterruptList   
   FOR i := 1 TO sv_FwdInterruptList.iUsedElements DO
      IF (sv_FwdInterruptList.List[i].rTargetValue < sv_rMoldPosition) THEN
         iInstance := i;
         MoveId := cMoveFwdInterPos;
         RETURN;
      END_IF; 
   END_FOR;       
ELSE
   //sequence programmed by editor
   //-> check instance data to get next target position
   FOR i := 1 TO cMaxIntermediateConditions DO
      IF sv_CloseInterPosProgInSequ[i] AND sv_InstanceDataCloseInterPos[i].rTargetValue < sv_rMoldPosition THEN
         iInstance := i;
         MoveId := cMoveFwdInterPos;
         RETURN;
      END_IF;
   END_FOR;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(31)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

MoveId := cMoveBwd;
iInstance := 1;

IF sv_bUseProgramSwitches THEN  
   //get next target position from sv_BwdInterruptList   
   FOR i := 1 TO sv_BwdInterruptList.iUsedElements DO
      IF (sv_BwdInterruptList.List[i].rTargetValue > sv_rMoldPosition) THEN
         iInstance := i;
         MoveId := cMoveBwdInterPos;
         RETURN;
      END_IF; 
   END_FOR;       
ELSE
   //sequence programmed by editor
   //-> check instance data to get next target position
   FOR i := 1 TO cMaxIntermediateConditions DO
      IF sv_OpenInterPosProgInSequ[i] AND sv_InstanceDataOpenInterPos[i].rTargetValue > sv_rMoldPosition THEN
         iInstance := i;
         MoveId := cMoveBwdInterPos;
         RETURN;
      END_IF;
   END_FOR;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpbAutoAdjustReady <> EMPTY AND NOT mpbAutoAdjustReady^ THEN
    // auto mold adjust available and active -> ignore manual button
    RETURN;
END_IF;

IF bButtonClose THEN
   
   IF sv_MoveCloseInterPos.bProgrammedInSequence THEN
      //mold close movement to interpos programmed in sequence
      aGetNextCloseMovement(MoveId => MoveId,
                            iInstance => iIntermediateCond);
   ELSE
      //no interpos movement programmed
      MoveId := cMoveFwd;
      iIntermediateCond := 1;
   END_IF;
   
END_IF;

fbManualButton(bButton := bButtonClose, MoveId := MoveId, MoveDir := cMoveFwd, IntermediateCond := iIntermediateCond);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(27)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mpbAutoAdjustReady <> EMPTY AND NOT mpbAutoAdjustReady^ THEN
    // auto mold adjust available and active -> ignore manual button
    RETURN;
END_IF;

IF bButtonOpen THEN 
   
   IF sv_MoveOpenInterPos.bProgrammedInSequence THEN
      //mold open movement to interpos programmed in sequence
      aGetNextOpenMovement(MoveId => MoveId,
                           iInstance => iIntermediateCond);
   ELSE
      //no interpos movement programmed
      MoveId := cMoveBwd;
      iIntermediateCond := 1;
   END_IF;
   
END_IF;

fbManualButton(bButton := bButtonOpen, MoveId := MoveId, MoveDir := cMoveBwd, IntermediateCond := iIntermediateCond);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//get reference to ready flag of auto mold adjust function unit
DeviceIdAutoAdjust.CompId := cCompMoldHeightAuto;
DeviceIdAutoAdjust.IndexId := sv_DeviceId.IndexId;

fbCheckAutoAdjustReady(DeviceId := DeviceIdAutoAdjust);
mpbAutoAdjustReady := fbCheckAutoAdjustReady.pbReady;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
