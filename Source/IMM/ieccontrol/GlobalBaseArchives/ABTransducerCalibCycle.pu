(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Do automatic transducer calibration with data from sv_TransducerCalibData
move to both ends with outputs specified for setup mode
measuere AI there and write to lintab
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, SET_EVENT
, CHECK_REF
, tnCalibState_Error
, tnCalibState_Aborted
, tnCalibState_Done
, nSetup
, tnCalibState_Running
, tsCalibMovement
, tnOperationMode
, tsDeviceId
, KCTRL_Lintab_Point
, tsTransducerCalibData
, tevStartRequest
, ABAutoCalibRedoListener
, tyMoveDataArray
, tevStartRequestData
, KAPPL_LintabData_2P
, FBAutoCalibLog
, FBCheckReady
, FBStopStartedMovements
, ABLockList

END_IMPORT

ALGORITHM_BLOCK ABTransducerCalibCycle #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_CalibState : tsCalibMovement;
 sv_OperationMode : tnOperationMode;
 sv_DeviceId : tsDeviceId;
 sv_bDoTransducerCalib : BOOL;
 sv_TmpLintabPoint : KCTRL_Lintab_Point;
 sv_TransducerCalibData : tsTransducerCalibData;
 sv_Movements : tyMoveDataArray;
END_VAR

SYSTEM_OBJECT
 TaskMid : TASK;
 evStartRequest : tevStartRequest;
 PU_Task_7 : TASK;
 erCalibrationStopped : ALARM;
 erCalibrationFailure : ALARM;
 erTransducerCalibNoMovement : ALARM;
 erCalibrationNotActivated : ALARM;
END_OBJECT

VAR
 abAutoCalibRedoListener : ABAutoCalibRedoListener (* not unreferenced used for starting calib *);
END_VAR

PROCESS_ALGORITHM paRun ON TaskMid


VAR_TEMP
 rTmpMax : REAL;
 iCount : DINT;
END_VAR

VAR
 evStartRequestData : tevStartRequestData;
 tmpLintab : KAPPL_LintabData_2P (* temporary lintab for accumulating points *);
 iPos1 : DINT := 1;
 iPos2 : DINT := 2;
 rMinimumVoltageDiff : REAL := 0.7;
 fbLog : FBAutoCalibLog;
 bDoCalibration : BOOL := FALSE;
 bOpenArray : BOOL;
 origLintabPoints : KAPPL_LintabData_2P;
 fbCheckReady : FBCheckReady;
 fbStopStartedMovements : FBStopStartedMovements;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_INIT:
ACheckActivated (P);
END_STEP

ACTION ACheckActivated: #BEGIN_EDIT_BLOCK
bDoCalibration := FALSE;
FOR iCount:=1 TO 20 DO
   IF (sv_Movements[iCount]^.MoveDir = sv_TransducerCalibData.Dir1) AND 
      (sv_Movements[iCount]^.MoveId = sv_TransducerCalibData.Id1) THEN
      IF CHECK_REF(sv_Movements[iCount]^.pbActivated) THEN
         IF (sv_Movements[iCount]^.pbActivated^) THEN
            bDoCalibration := TRUE;                     
         END_IF;
      ELSE
         bDoCalibration := TRUE;         
      END_IF;
      EXIT;
   END_IF;
END_FOR;

;#END_EDIT_BLOCK END_ACTION (*ACheckActivated*)

(* steps *)
STEP S_RESET:
AStopmovements (P);
Action24 (P);
END_STEP

ACTION Action24: #BEGIN_EDIT_BLOCK
//restore original transducer-lintab
IF bOpenArray THEN
   sv_CalibState.piUsedLintabPoints^ := origLintabPoints.LintabPoints.uNoOfPoints;
   sv_CalibState.pLintabPoints^[1] := origLintabPoints.LintabPoints.Point[1];
   sv_CalibState.pLintabPoints^[2] := origLintabPoints.LintabPoints.Point[2];
ELSE
   sv_CalibState.pLintab^.LintabPoints.uNoOfPoints := origLintabPoints.LintabPoints.uNoOfPoints;
   sv_CalibState.pLintab^.LintabPoints.Point[1] := origLintabPoints.LintabPoints.Point[1];
   sv_CalibState.pLintab^.LintabPoints.Point[2] := origLintabPoints.LintabPoints.Point[2];
END_IF;

IF sv_CalibState.Status <> tnCalibState_Error THEN
    fbLog('Transducer calib aborted');   
    sv_CalibState.Status := tnCalibState_Aborted;
ELSE    
    fbLog('Transducer calib error');
END_IF;

;#END_EDIT_BLOCK END_ACTION (*Action24*)
STEP S_STOP:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
sv_bDoTransducerCalib := FALSE;
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*AStop*)
STEP S_NOCALIBRATION:
AFinishStep (P);
END_STEP

ACTION AFinishStep: #BEGIN_EDIT_BLOCK
fbLog('Transducer calib not started');
sv_CalibState.Status := tnCalibState_Skipped;
SET_ALARM(Name := erCalibrationNotActivated,
          SubID1 := sv_DeviceId.CompId,
          SubID2 := sv_DeviceId.IndexId);

;#END_EDIT_BLOCK END_ACTION (*AFinishStep*)
STEP Step8:
AInit (P);
END_STEP

STEP S_MOVE1:
AMove1 (P);
ACheckReadyMove1 (N);
END_STEP

ACTION ACheckReadyMove1: #BEGIN_EDIT_BLOCK
fbCheckReady(DeviceId := sv_DeviceId)

;#END_EDIT_BLOCK END_ACTION (*ACheckReadyMove1*)
STEP S_MOVE2:
ASavePos1 (P);
AMove2 (P);
ACheckReadyMove2 (N);
END_STEP

ACTION ASavePos1: #BEGIN_EDIT_BLOCK
fbLog('Transducer direction1 done');
tmpLintab.LintabPoints.Point[iPos2] := sv_TmpLintabPoint;
sv_CalibState.pDisplayLintab^.LintabPoints.Point[iPos2] := sv_TmpLintabPoint;
sv_bDoTransducerCalib := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASavePos1*)
ACTION ACheckReadyMove2: #BEGIN_EDIT_BLOCK
fbCheckReady(DeviceId := sv_DeviceId);

;#END_EDIT_BLOCK END_ACTION (*ACheckReadyMove2*)
STEP S_CHECK:
ASavePos2 (P);
ACheckSanity (P);
END_STEP

ACTION ASavePos2: #BEGIN_EDIT_BLOCK
fbLog('Transducer direction2 done');
tmpLintab.LintabPoints.Point[iPos1] := sv_TmpLintabPoint;
sv_CalibState.pDisplayLintab^.LintabPoints.Point[iPos1] := sv_TmpLintabPoint;

;#END_EDIT_BLOCK END_ACTION (*ASavePos2*)
ACTION ACheckSanity: #BEGIN_EDIT_BLOCK
// check lintab for sanity, then save it
IF ABS(tmpLintab.LintabPoints.Point[1].rX - tmpLintab.LintabPoints.Point[2].rX) >= rMinimumVoltageDiff AND 
   sv_CalibState.Status <> tnCalibState_Error THEN
   IF bOpenArray THEN
      sv_CalibState.piUsedLintabPoints^ := 2;
      sv_CalibState.pLintabPoints^[1] := tmpLintab.LintabPoints.Point[1];
      sv_CalibState.pLintabPoints^[2] := tmpLintab.LintabPoints.Point[2];      
   ELSE
      sv_CalibState.pLintab^.LintabPoints.uNoOfPoints := 2;
      sv_CalibState.pLintab^.LintabPoints.Point[1] := tmpLintab.LintabPoints.Point[1];
      sv_CalibState.pLintab^.LintabPoints.Point[2] := tmpLintab.LintabPoints.Point[2];
   END_IF;
   sv_CalibState.Status := tnCalibState_Done;
   fbLog('Transducer finished -> valid');
ELSE  
   sv_CalibState.Status := tnCalibState_Error;
   fbLog('Transducer finished -> invalid');
   SET_ALARM(Name := erTransducerCalibNoMovement,
             SubID1 := sv_DeviceId.CompId,
             SubID2 := sv_DeviceId.IndexId); 
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACheckSanity*)

(* transitions *)
GO_ON_TRANSITION Trans15 (* Trans15 *) FROM S_RESET TO S_STOP :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans18 (* Trans18 *) FROM S_STOP TO S_INIT :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TStartCalib (* Trans7 *) FROM S_INIT TO Step8 :=  #BEGIN_EDIT_BLOCK
bDoCalibration
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TNoCalib (* Trans8 *) FROM S_INIT TO S_NOCALIBRATION :=  #BEGIN_EDIT_BLOCK
NOT bDoCalibration
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TCalibStop (* Trans9 *) FROM S_NOCALIBRATION TO S_STOP :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans1 (* Trans1 *) FROM Step8 TO S_MOVE1 :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans5 (* Trans5 *) FROM S_MOVE1 TO S_MOVE2 :=  #BEGIN_EDIT_BLOCK
fbCheckReady.bReady AND S_MOVE1.T >= t#1s
;#END_EDIT_BLOCK
(*Comment :FIXME: delay because else we sometimes get a erDeviceActive on first movement*)
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM S_MOVE2 TO S_CHECK :=  #BEGIN_EDIT_BLOCK
fbCheckReady.bReady AND S_MOVE2.T >= t#1s
;#END_EDIT_BLOCK
(*Comment :FIXME: delay because else we sometimes get a erDeviceActive on first movement*)
END_TRANSITION

GO_ON_TRANSITION Trans19 (* Trans19 *) FROM S_CHECK TO S_STOP :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* stand alone actions *)
ACTION AMove1: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := sv_DeviceId;
evStartRequestData.MoveDir := sv_TransducerCalibData.Dir1; 
evStartRequestData.MoveId := sv_TransducerCalibData.Id1;
SET_EVENT(evStartRequest, evStartRequestData); 

;#END_EDIT_BLOCK END_ACTION (*AMove1*)
ACTION AMove2: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := sv_DeviceId;
evStartRequestData.MoveDir := sv_TransducerCalibData.Dir2; 
evStartRequestData.MoveId := sv_TransducerCalibData.Id2;
SET_EVENT(evStartRequest, evStartRequestData); 

;#END_EDIT_BLOCK END_ACTION (*AMove2*)
ACTION AStopmovements: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbStopStartedMovements();

;#END_EDIT_BLOCK END_ACTION (*AStopmovements*)
ACTION AInit: #BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// reverse saving of lintab
IF sv_TransducerCalibData.bReverse THEN
    iPos1 := 2;
    iPos2 := 1;
ELSE
    iPos1 := 1;
    iPos2 := 2;
END_IF;
sv_bDoTransducerCalib := TRUE;

//display original lintab
IF CHECK_REF(sv_CalibState.pLintabPoints^) AND CHECK_REF(sv_CalibState.piUsedLintabPoints^) THEN
   bOpenArray := TRUE; 
   sv_CalibState.pDisplayLintab^.LintabPoints.Point[1] := sv_CalibState.pLintabPoints^[1];
   sv_CalibState.pDisplayLintab^.LintabPoints.Point[2] := sv_CalibState.pLintabPoints^[2];
ELSE
   bOpenArray := FALSE;
   sv_CalibState.pDisplayLintab^.LintabPoints.Point := sv_CalibState.pLintab^.LintabPoints.Point;
END_IF;
sv_CalibState.pDisplayLintab^.LintabPoints.uNoOfPoints := 2;

// get maximum of transducer
// minimum is always assumed 0
// x is assumed to be Voltage -> 10V
rTmpMax := 0.0;
IF CHECK_REF(sv_TransducerCalibData.prPos1^) THEN
   rTmpMax := sv_TransducerCalibData.prPos1^;
END_IF;
IF CHECK_REF(sv_TransducerCalibData.prPos2^) THEN
   rTmpMax := MAX(rTmpMax, sv_TransducerCalibData.prPos2^);
END_IF;

// change Lintab to [0,0], [10.0, maxStroke] -> avoid erAnalogSensor during calibration
// save data for restoration in case of abortion, error
IF bOpenArray THEN
   origLintabPoints.LintabPoints.uNoOfPoints := sv_CalibState.piUsedLintabPoints^;
   origLintabPoints.LintabPoints.Point[1] := sv_CalibState.pLintabPoints^[1];
   origLintabPoints.LintabPoints.Point[2] := sv_CalibState.pLintabPoints^[2];
   sv_CalibState.piUsedLintabPoints^ := 2;
   sv_CalibState.pLintabPoints^[iPos1].rX := 0.0;
   sv_CalibState.pLintabPoints^[iPos1].rY := 0.0;
   sv_CalibState.pLintabPoints^[iPos2].rX := 10.0;
   sv_CalibState.pLintabPoints^[iPos2].rY := rTmpMax;
ELSE
   origLintabPoints.LintabPoints.uNoOfPoints := sv_CalibState.pLintab^.LintabPoints.uNoOfPoints;
   origLintabPoints.LintabPoints.Point[1] := sv_CalibState.pLintab^.LintabPoints.Point[1];
   origLintabPoints.LintabPoints.Point[2] := sv_CalibState.pLintab^.LintabPoints.Point[2];
   sv_CalibState.pLintab^.LintabPoints.uNoOfPoints := 2;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos1].rX := 0.0;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos1].rY := 0.0;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos2].rX := 10.0;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos2].rY := rTmpMax;
END_IF;

sv_CalibState.prGlobalMaxX^ := 10.0; //V
sv_CalibState.prGlobalMaxY^ := rTmpMax;
fbLog('Transducer calib started');

;#END_EDIT_BLOCK END_ACTION (*AInit*)

(* exits *)

EXIT_TRANSITION E_NotSetupMode := #BEGIN_EDIT_BLOCK
sv_OperationMode <> nSetup
;#END_EDIT_BLOCK
PRIORITY 1 WITH  INITIAL_STEP S_RESET: END_STEP
END_TRANSITION

EXIT_TRANSITION E_NotCalibratingAnymore := #BEGIN_EDIT_BLOCK
// abort calibration, when not in running state and not finished
sv_CalibState.Status <> tnCalibState_Running AND ((*S_INIT.X OR*) S_MOVE1.X OR S_MOVE2.X)
;#END_EDIT_BLOCK
PRIORITY 1 WITH  INITIAL_STEP S_RESET: END_STEP
END_TRANSITION
(* end sfc-code *)


END_ALGORITHM

POSTUPDATE_ALGORITHM pStart ON PU_Task_7 WITH sv_CalibState.Status


VAR
 bLocked : BOOL := FALSE;
 abLockList : ABLockList;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN    
   
   IF sv_CalibState.Status = tnCalibState_Running THEN
      // Check if any direction is locked, if it is, calibration start is not meaningful, 
      // because it would be stopped later
      bLocked := FALSE;
      abLockList.aCheck(MoveDir:=sv_TransducerCalibData.Dir1, MoveId:=sv_TransducerCalibData.Id1);
      bLocked := abLockList.aCheck.bLocked;
      abLockList.aCheck(MoveDir:=sv_TransducerCalibData.Dir2, MoveId:=sv_TransducerCalibData.Id2);
      bLocked := bLocked OR abLockList.aCheck.bLocked;
      IF bLocked THEN
         sv_CalibState.Status := tnCalibState_Aborted;
         SET_ALARM(erCalibrationStopped);
      ELSE
         START_PROCESS_ALGORITHM(paRun);
      END_IF;
   ELSIF sv_CalibState.Status = tnCalibState_Error THEN
      SET_ALARM(erCalibrationFailure);   
   END_IF;

END_IF;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Do automatic transducer calibration with data from sv_TransducerCalibData
move to both ends with outputs specified for setup mode
measuere AI there and write to lintab
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)CHECK_REF @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(18)tnCalibState_Error @RT(0) @T @T @DERIVED 0 @F @RT(12)tnCalibState @F 
@T 
@BEG_Attrib 
0 @RT(1)3 @RT(32)error occured during calibration 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)tnCalibState_Aborted @RT(0) @T @T @DERIVED 0 @F @RT(12)tnCalibState @F 
@T 
@BEG_Attrib 
0 @RT(1)4 @RT(19)calibration aborted 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)tnCalibState_Done @RT(0) @T @T @DERIVED 0 @F @RT(12)tnCalibState @F 
@T 
@BEG_Attrib 
0 @RT(1)2 @RT(33)calibration finished successfully 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)nSetup @RT(0) @T @T @DERIVED 0 @F @RT(15)tnOperationMode @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(36)Setup mode only for service engineer 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)tnCalibState_Running @RT(0) @T @T @DERIVED 0 @F @RT(12)tnCalibState @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(23)calibration in progress 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(22)ABTransducerCalibCycle @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
15 
@Var @RT(13)sv_CalibState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsCalibMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_bDoTransducerCalib @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)sv_TmpLintabPoint @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)KCTRL_Lintab_Point @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)sv_TransducerCalibData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tsTransducerCalibData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(14)evStartRequest @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tevStartRequest @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)erCalibrationStopped @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(20)erCalibrationFailure @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(27)erTransducerCalibNoMovement @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(23)abAutoCalibRedoListener @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)ABAutoCalibRedoListener @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(40)not unreferenced used for starting calib @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_Movements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tyMoveDataArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)erCalibrationNotActivated @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(7)rTmpMax @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(18)evStartRequestData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tevStartRequestData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)tmpLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)KAPPL_LintabData_2P @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(40)temporary lintab for accumulating points @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iPos1 @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)1 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iPos2 @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)2 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)rMinimumVoltageDiff @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.7 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)fbLog @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)FBAutoCalibLog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)bDoCalibration @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)iCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(10)bOpenArray @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)origLintabPoints @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)KAPPL_LintabData_2P @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbCheckReady @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBCheckReady @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)fbStopStartedMovements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)FBStopStartedMovements @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(6)pStart @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_CalibState.Status @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)bLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)abLockList @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)ABLockList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_SfcBody 
16 10 10 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 15 
@Step @RT(7)S_RESET @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(14)AStopmovements @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(8)Action24 @F @T @RT(1)P @RT(0) @F @F @T @TL(18)
//restore original transducer-lintab
IF bOpenArray THEN
   sv_CalibState.piUsedLintabPoints^ := origLintabPoints.LintabPoints.uNoOfPoints;
   sv_CalibState.pLintabPoints^[1] := origLintabPoints.LintabPoints.Point[1];
   sv_CalibState.pLintabPoints^[2] := origLintabPoints.LintabPoints.Point[2];
ELSE
   sv_CalibState.pLintab^.LintabPoints.uNoOfPoints := origLintabPoints.LintabPoints.uNoOfPoints;
   sv_CalibState.pLintab^.LintabPoints.Point[1] := origLintabPoints.LintabPoints.Point[1];
   sv_CalibState.pLintab^.LintabPoints.Point[2] := origLintabPoints.LintabPoints.Point[2];
END_IF;

IF sv_CalibState.Status <> tnCalibState_Error THEN
    fbLog('Transducer calib aborted');   
    sv_CalibState.Status := tnCalibState_Aborted;
ELSE    
    fbLog('Transducer calib error');
END_IF;

@F 

@Trans @RT(7)Trans15 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans15 @F 
@Step @RT(6)S_STOP @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
sv_bDoTransducerCalib := FALSE;
STOP_PROCESS_ALGORITHM();

@F 

@Trans @RT(7)Trans18 @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans18 @F 
@Step @RT(6)S_INIT @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(15)ACheckActivated @F @T @RT(1)P @RT(0) @F @F @T @TL(15)
bDoCalibration := FALSE;
FOR iCount:=1 TO 20 DO
   IF (sv_Movements[iCount]^.MoveDir = sv_TransducerCalibData.Dir1) AND 
      (sv_Movements[iCount]^.MoveId = sv_TransducerCalibData.Id1) THEN
      IF CHECK_REF(sv_Movements[iCount]^.pbActivated) THEN
         IF (sv_Movements[iCount]^.pbActivated^) THEN
            bDoCalibration := TRUE;                     
         END_IF;
      ELSE
         bDoCalibration := TRUE;         
      END_IF;
      EXIT;
   END_IF;
END_FOR;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(11)TStartCalib @F @T @F @F @T @T @TL(2)
bDoCalibration

@RT(6)Trans7 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(8)TNoCalib @F @T @F @F @T @T @TL(2)
NOT bDoCalibration

@RT(6)Trans8 @F 
@Step @RT(15)S_NOCALIBRATION @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(11)AFinishStep @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
fbLog('Transducer calib not started');
sv_CalibState.Status := tnCalibState_Skipped;
SET_ALARM(Name := erCalibrationNotActivated,
          SubID1 := sv_DeviceId.CompId,
          SubID2 := sv_DeviceId.IndexId);

@F 

@Trans @RT(10)TCalibStop @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans9 @F 
@Goto @RT(6)S_STOP @F @F 


@Step @RT(5)Step8 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AInit @F @F @RT(1)P @RT(0) @F @F @F @F 

@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans1 @F 
@Step @RT(7)S_MOVE1 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(6)AMove1 @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(16)ACheckReadyMove1 @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
fbCheckReady(DeviceId := sv_DeviceId)

@F 

@Trans @RT(6)Trans5 @F @T @F @F @T @T @TL(2)
fbCheckReady.bReady AND S_MOVE1.T >= t#1s

@RT(6)Trans5 @T @TL(1)
Comment :FIXME: delay because else we sometimes get a erDeviceActive on first movement

@Step @RT(7)S_MOVE2 @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 3 
@Acb @RT(9)ASavePos1 @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
fbLog('Transducer direction1 done');
tmpLintab.LintabPoints.Point[iPos2] := sv_TmpLintabPoint;
sv_CalibState.pDisplayLintab^.LintabPoints.Point[iPos2] := sv_TmpLintabPoint;
sv_bDoTransducerCalib := TRUE;

@F 
@Acb @RT(6)AMove2 @F @F @RT(1)P @RT(0) @F @F @F @F 
@Acb @RT(16)ACheckReadyMove2 @F @T @RT(1)N @RT(0) @F @F @T @TL(2)
fbCheckReady(DeviceId := sv_DeviceId);

@F 

@Trans @RT(6)Trans2 @F @T @F @F @T @T @TL(2)
fbCheckReady.bReady AND S_MOVE2.T >= t#1s

@RT(6)Trans2 @T @TL(1)
Comment :FIXME: delay because else we sometimes get a erDeviceActive on first movement

@Step @RT(7)S_CHECK @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(9)ASavePos2 @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
fbLog('Transducer direction2 done');
tmpLintab.LintabPoints.Point[iPos1] := sv_TmpLintabPoint;
sv_CalibState.pDisplayLintab^.LintabPoints.Point[iPos1] := sv_TmpLintabPoint;

@F 
@Acb @RT(12)ACheckSanity @F @T @RT(1)P @RT(0) @F @F @T @TL(22)
// check lintab for sanity, then save it
IF ABS(tmpLintab.LintabPoints.Point[1].rX - tmpLintab.LintabPoints.Point[2].rX) >= rMinimumVoltageDiff AND 
   sv_CalibState.Status <> tnCalibState_Error THEN
   IF bOpenArray THEN
      sv_CalibState.piUsedLintabPoints^ := 2;
      sv_CalibState.pLintabPoints^[1] := tmpLintab.LintabPoints.Point[1];
      sv_CalibState.pLintabPoints^[2] := tmpLintab.LintabPoints.Point[2];      
   ELSE
      sv_CalibState.pLintab^.LintabPoints.uNoOfPoints := 2;
      sv_CalibState.pLintab^.LintabPoints.Point[1] := tmpLintab.LintabPoints.Point[1];
      sv_CalibState.pLintab^.LintabPoints.Point[2] := tmpLintab.LintabPoints.Point[2];
   END_IF;
   sv_CalibState.Status := tnCalibState_Done;
   fbLog('Transducer finished -> valid');
ELSE  
   sv_CalibState.Status := tnCalibState_Error;
   fbLog('Transducer finished -> invalid');
   SET_ALARM(Name := erTransducerCalibNoMovement,
             SubID1 := sv_DeviceId.CompId,
             SubID2 := sv_DeviceId.IndexId); 
END_IF;

@F 

@Trans @RT(7)Trans19 @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans19 @F 
@Goto @RT(6)S_STOP @F @F 
@END_SfcData 
@SaActions 4 
@SaText @RT(6)AMove1 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := sv_DeviceId;
evStartRequestData.MoveDir := sv_TransducerCalibData.Dir1; 
evStartRequestData.MoveId := sv_TransducerCalibData.Id1;
SET_EVENT(evStartRequest, evStartRequestData); 


@SaText @RT(6)AMove2 1 @TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

evStartRequestData.DeviceId := sv_DeviceId;
evStartRequestData.MoveDir := sv_TransducerCalibData.Dir2; 
evStartRequestData.MoveId := sv_TransducerCalibData.Id2;
SET_EVENT(evStartRequest, evStartRequestData); 


@SaText @RT(14)AStopmovements 1 @TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbStopStartedMovements();


@SaText @RT(5)AInit 1 @TL(63)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// reverse saving of lintab
IF sv_TransducerCalibData.bReverse THEN
    iPos1 := 2;
    iPos2 := 1;
ELSE
    iPos1 := 1;
    iPos2 := 2;
END_IF;
sv_bDoTransducerCalib := TRUE;

//display original lintab
IF CHECK_REF(sv_CalibState.pLintabPoints^) AND CHECK_REF(sv_CalibState.piUsedLintabPoints^) THEN
   bOpenArray := TRUE; 
   sv_CalibState.pDisplayLintab^.LintabPoints.Point[1] := sv_CalibState.pLintabPoints^[1];
   sv_CalibState.pDisplayLintab^.LintabPoints.Point[2] := sv_CalibState.pLintabPoints^[2];
ELSE
   bOpenArray := FALSE;
   sv_CalibState.pDisplayLintab^.LintabPoints.Point := sv_CalibState.pLintab^.LintabPoints.Point;
END_IF;
sv_CalibState.pDisplayLintab^.LintabPoints.uNoOfPoints := 2;

// get maximum of transducer
// minimum is always assumed 0
// x is assumed to be Voltage -> 10V
rTmpMax := 0.0;
IF CHECK_REF(sv_TransducerCalibData.prPos1^) THEN
   rTmpMax := sv_TransducerCalibData.prPos1^;
END_IF;
IF CHECK_REF(sv_TransducerCalibData.prPos2^) THEN
   rTmpMax := MAX(rTmpMax, sv_TransducerCalibData.prPos2^);
END_IF;

// change Lintab to [0,0], [10.0, maxStroke] -> avoid erAnalogSensor during calibration
// save data for restoration in case of abortion, error
IF bOpenArray THEN
   origLintabPoints.LintabPoints.uNoOfPoints := sv_CalibState.piUsedLintabPoints^;
   origLintabPoints.LintabPoints.Point[1] := sv_CalibState.pLintabPoints^[1];
   origLintabPoints.LintabPoints.Point[2] := sv_CalibState.pLintabPoints^[2];
   sv_CalibState.piUsedLintabPoints^ := 2;
   sv_CalibState.pLintabPoints^[iPos1].rX := 0.0;
   sv_CalibState.pLintabPoints^[iPos1].rY := 0.0;
   sv_CalibState.pLintabPoints^[iPos2].rX := 10.0;
   sv_CalibState.pLintabPoints^[iPos2].rY := rTmpMax;
ELSE
   origLintabPoints.LintabPoints.uNoOfPoints := sv_CalibState.pLintab^.LintabPoints.uNoOfPoints;
   origLintabPoints.LintabPoints.Point[1] := sv_CalibState.pLintab^.LintabPoints.Point[1];
   origLintabPoints.LintabPoints.Point[2] := sv_CalibState.pLintab^.LintabPoints.Point[2];
   sv_CalibState.pLintab^.LintabPoints.uNoOfPoints := 2;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos1].rX := 0.0;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos1].rY := 0.0;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos2].rX := 10.0;
   sv_CalibState.pLintab^.LintabPoints.Point[iPos2].rY := rTmpMax;
END_IF;

sv_CalibState.prGlobalMaxX^ := 10.0; //V
sv_CalibState.prGlobalMaxY^ := rTmpMax;
fbLog('Transducer calib started');


@SaTrans 0 
@SaExits 2 
@SaExit @SaText @RT(14)E_NotSetupMode 1 @TL(2)
sv_OperationMode <> nSetup

@RT(7)S_RESET @RT(1)1 @F @F @SaSfc @RT(14)E_NotSetupMode 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(8)unnamed1 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(8)unnamed3 @F @T @F @F @T @T @TL(2)


@RT(8)unnamed3 @F 
@Goto @RT(9)unlabeled @F @F 
@END_SfcData 

@SaExit @SaText @RT(23)E_NotCalibratingAnymore 1 @TL(3)
// abort calibration, when not in running state and not finished
sv_CalibState.Status <> tnCalibState_Running AND ((*S_INIT.X OR*) S_MOVE1.X OR S_MOVE2.X)

@RT(7)S_RESET @RT(1)1 @F @F @SaSfc @RT(23)E_NotCalibratingAnymore 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(8)unnamed4 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(8)unnamed6 @F @T @F @F @T @T @TL(2)


@RT(8)unnamed6 @F 
@Goto @RT(9)unlabeled @F @F 
@END_SfcData 

@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(28)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN    
   
   IF sv_CalibState.Status = tnCalibState_Running THEN
      // Check if any direction is locked, if it is, calibration start is not meaningful, 
      // because it would be stopped later
      bLocked := FALSE;
      abLockList.aCheck(MoveDir:=sv_TransducerCalibData.Dir1, MoveId:=sv_TransducerCalibData.Id1);
      bLocked := abLockList.aCheck.bLocked;
      abLockList.aCheck(MoveDir:=sv_TransducerCalibData.Dir2, MoveId:=sv_TransducerCalibData.Id2);
      bLocked := bLocked OR abLockList.aCheck.bLocked;
      IF bLocked THEN
         sv_CalibState.Status := tnCalibState_Aborted;
         SET_ALARM(erCalibrationStopped);
      ELSE
         START_PROCESS_ALGORITHM(paRun);
      END_IF;
   ELSIF sv_CalibState.Status = tnCalibState_Error THEN
      SET_ALARM(erCalibrationFailure);   
   END_IF;

END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
