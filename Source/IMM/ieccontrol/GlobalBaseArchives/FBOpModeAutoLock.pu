(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

FB to lock and unlock half- and fullautomatic mode. 
If IMM is already in automatic mode, no locking takes place, the output flag "bLocked" stays false.  
*)

IMPORT_OVER_LISTFILE
 tnOperationMode
, tsLockOperationModeAuto
, FBResourceLock
, KSYS_Status

END_IMPORT

FUNCTION_BLOCK FBOpModeAutoLock #DUMMY_EDIT_BLOCK

VAR_INPUT
 Execute : BOOL;
 bLock : BOOL;
END_VAR

VAR_OUTPUT
 Done : BOOL;
 bLocked : BOOL;
END_VAR

SYSTEM_VAR
 sv_OperationMode : tnOperationMode;
 sv_LockOperationModeAuto : tsLockOperationModeAuto;
END_VAR

VAR
 iStep : DINT;
 bExecuteOld : BOOL;
 bLockIntern : BOOL;
 fbResourceLock : FBResourceLock;
 pDemandedOpMode : REFTO tnOperationMode;
 s : KSYS_Status;
END_VAR
#BEGIN_EDIT_BLOCK
IF (iStep = 0) THEN
    IF (pDemandedOpMode = EMPTY) THEN
        pDemandedOpMode := GET_SYNC_REFTO("OperationMode1.sv_DemandedOperationMode", T#0s, s);
    END_IF;
    IF (Execute AND (NOT bExecuteOld)) THEN
        bLockIntern := bLock;
        Done := FALSE; 
        iStep := 10; 
    END_IF;
    bExecuteOld := Execute; 
END_IF;

IF (iStep = 10) THEN
    IF (bLockIntern = bLocked) THEN
       iStep := 100;   
    ELSE     
        IF (sv_OperationMode <= nManual) THEN
            fbResourceLock(Execute := FALSE); 
            iStep := 20;
        ELSE 
            // lock not possible because already in automatic mode
            iStep := 100;
        END_IF;
    END_IF;
END_IF;

IF (iStep = 20) THEN
    fbResourceLock(TRUE, TRUE, @sv_LockOperationModeAuto.sResourceLock);
    IF (fbResourceLock.Done) THEN
        IF (fbResourceLock.bLocked) THEN
           iStep := 30; 
        ELSE 
           iStep := 100; 
        END_IF;
    END_IF;    
END_IF;

IF (iStep = 30) THEN
    IF (bLockIntern) THEN
        bLocked := TRUE;
        sv_LockOperationModeAuto.iLockCounter := sv_LockOperationModeAuto.iLockCounter + 1; 
        IF ((sv_OperationMode > nManual) OR (pDemandedOpMode^ > nManual)) THEN
            // already in automatic mode or automatic mode requested
            bLocked := FALSE; 
            sv_LockOperationModeAuto.iLockCounter := sv_LockOperationModeAuto.iLockCounter - 1; 
        END_IF;
    ELSE
        bLocked := FALSE; 
        sv_LockOperationModeAuto.iLockCounter := sv_LockOperationModeAuto.iLockCounter - 1; 
    END_IF;
    
    fbResourceLock(bLock := FALSE);
    iStep := 100; 
END_IF;


IF (iStep = 100) THEN
    iStep := 0; 
    Done := TRUE; 
END_IF;


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 165 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

FB to lock and unlock half- and fullautomatic mode. 
If IMM is already in automatic mode, no locking takes place, the output flag "bLocked" stays false.  
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(16)FBOpModeAutoLock @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(24)sv_LockOperationModeAuto @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)tsLockOperationModeAuto @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)Execute @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bLock @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)Done @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)bLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)iStep @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bExecuteOld @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bLockIntern @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbResourceLock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)FBResourceLock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)pDemandedOpMode @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)s @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(61)
IF (iStep = 0) THEN
    IF (pDemandedOpMode = EMPTY) THEN
        pDemandedOpMode := GET_SYNC_REFTO("OperationMode1.sv_DemandedOperationMode", T#0s, s);
    END_IF;
    IF (Execute AND (NOT bExecuteOld)) THEN
        bLockIntern := bLock;
        Done := FALSE; 
        iStep := 10; 
    END_IF;
    bExecuteOld := Execute; 
END_IF;

IF (iStep = 10) THEN
    IF (bLockIntern = bLocked) THEN
       iStep := 100;   
    ELSE     
        IF (sv_OperationMode <= nManual) THEN
            fbResourceLock(Execute := FALSE); 
            iStep := 20;
        ELSE 
            // lock not possible because already in automatic mode
            iStep := 100;
        END_IF;
    END_IF;
END_IF;

IF (iStep = 20) THEN
    fbResourceLock(TRUE, TRUE, @sv_LockOperationModeAuto.sResourceLock);
    IF (fbResourceLock.Done) THEN
        IF (fbResourceLock.bLocked) THEN
           iStep := 30; 
        ELSE 
           iStep := 100; 
        END_IF;
    END_IF;    
END_IF;

IF (iStep = 30) THEN
    IF (bLockIntern) THEN
        bLocked := TRUE;
        sv_LockOperationModeAuto.iLockCounter := sv_LockOperationModeAuto.iLockCounter + 1; 
        IF ((sv_OperationMode > nManual) OR (pDemandedOpMode^ > nManual)) THEN
            // already in automatic mode or automatic mode requested
            bLocked := FALSE; 
            sv_LockOperationModeAuto.iLockCounter := sv_LockOperationModeAuto.iLockCounter - 1; 
        END_IF;
    ELSE
        bLocked := FALSE; 
        sv_LockOperationModeAuto.iLockCounter := sv_LockOperationModeAuto.iLockCounter - 1; 
    END_IF;
    
    fbResourceLock(bLock := FALSE);
    iStep := 100; 
END_IF;


IF (iStep = 100) THEN
    iStep := 0; 
    Done := TRUE; 
END_IF;

@END_Body 

@END_Contents 
