(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Do step with low and high output value.
*)

IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, cApplPlasticsNoError
, ABConstMovement
, tsVelPre
, tMoveIdent
, R_TRIG

END_IMPORT

ALGORITHM_BLOCK ABStepOutput #DUMMY_EDIT_BLOCK

VAR
 abConstMovement : ABConstMovement;
 CycleTime : TIME (* (of capturing) *);
 bStarted : BOOL;
 mpConstant : REFTO tsVelPre;
 mprMaxSpeed : REFTO REAL;
END_VAR

ALGORITHM aInit


VAR_INPUT
 pConst : REFTO tsVelPre (* pointer to systemvariable that contains profile *);
 MoveId : tMoveIdent (* moveId of constant movement *);
 prMaxSpeed : REFTO REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpConstant := pConst;

abConstMovement.aInit(pConst := pConst,
                      MoveId := MoveId);

mprMaxSpeed := prMaxSpeed;



;#END_EDIT_BLOCK END_ALGORITHM

(*
Output profile for back pressure calibration
and measure the pressure input
*)

ALGORITHM aRun


VAR_INPUT
 bStart : BOOL (* start constant calib block *);
 bStop : BOOL (* stop constant calib block *);
 bDirection : BOOL (* movement direction *);
 rActPos : REAL (* actual position *);
 rTargetPos : REAL (* target position *);
 bUsePosDetect : BOOL (* TRUE: movement should stop at target position *);
 dDelayTimeOn : TIME (* Delay Time between preoutput and  constoutput *);
 dDelayTimeOff : TIME (* Delay Time between pump stop and bActive FALSE *);
 rPositionUp : REAL;
 rPositionDown : REAL;
 rLowOutput : REAL;
 rHighOutput : REAL;
 dMaxMoveTime : TIME;
 rStopRamp : REAL;
END_VAR

VAR_OUTPUT
 bActive : BOOL (* movement is active *);
 rOutputPre : REAL (* pressure output *);
 rOutputVel : REAL (* velocity output *);
 bPreOutputReached : BOOL (* preoutput ready *);
 bError : BOOL (* flag to indicate if error occured *);
 iErrorInfo : DINT (* additional error info *);
END_VAR

VAR
 fbREdge_Start : R_TRIG;
 iStage : DINT;
 bUeStopRamp : BOOL;
 rSavePreOutput : REAL;
 rSaveRamp : REAL;
 rDownPosition : REAL;
 rUpPosition : REAL;
 dMinDelayTimStop : TIME := T#50ms;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
fbREdge_Start(CLK := bStart);
IF fbREdge_Start.Q THEN
   iStage := 1;
   bStarted := TRUE;
    
   rDownPosition := rPositionDown;
   rUpPosition := rPositionUp;

   rSavePreOutput := mpConstant^.Velocity.PreOutput.rOutputValue;
   mpConstant^.Velocity.PreOutput.rOutputValue :=  rHighOutput;
   mpConstant^.Velocity.PreOutput.rRamp := 1.0e10;
   rSaveRamp := mpConstant^.Velocity.Output.rRamp;

   IF (rStopRamp > 0.0) THEN
      bUeStopRamp := TRUE;
      mpConstant^.Velocity.Output.rRamp := rStopRamp;
   ELSE   
      bUeStopRamp := FALSE;
   END_IF;


   abConstMovement.aRun(bStart := FALSE);
   CycleTime := GET_TASK_INTERVAL();
END_IF;
IF bStop THEN
    bStarted := FALSE;
END_IF;

IF bStarted THEN
   //call const movement block
   abConstMovement.aRun(bStart := bStart,
                        bStop := bStop,
                        bDirection := bDirection,
                        rActPos := rActPos,
                        rTargetPos := rTargetPos,
                        bUsePosDetect := bUsePosDetect,
                        rStartOutputPre := 0.0,
                        rStartOutputVel := rHighOutput,
                        dDelayTimeOn := dDelayTimeOn,
                        dDelayTimeOff := MAX(dDelayTimeOff, dMinDelayTimStop),
                        dMaxTime := dMaxMoveTime);

   IF (bDirection AND (rActPos >=  rDownPosition)) OR
      (NOT bDirection AND (rActPos <=  rDownPosition)) THEN
      iStage := 3;
   ELSIF (bDirection AND (rActPos >=  rUpPosition) ) OR
      (NOT bDirection AND (rActPos <=  rUpPosition)) THEN
      iStage := 2;
   END_IF;
    
   (* to do a jump without a ramp we directly output the low value *)
   IF iStage = 1 THEN    
      rOutputVel := MIN(rLowOutput,mpConstant^.Velocity.Output.rOutputValue);
   ELSIF iStage = 2 THEN
      IF (bUeStopRamp) THEN
         rOutputVel := MIN(abConstMovement.aRun.rOutputVel, rHighOutput);
      ELSE
         rOutputVel := rHighOutput;
      END_IF;
   ELSIF iStage = 3 THEN
      IF (bUeStopRamp) THEN
         rOutputVel := abConstMovement.aRun.rOutputVel;
      ELSE
         rOutputVel := MIN(rLowOutput, abConstMovement.aRun.rOutputVel);  
      END_IF;
   ELSE    
      rOutputVel := 0.0; 
   END_IF;

   rOutputPre := abConstMovement.aRun.rOutputPre; 
   IF (bDirection AND (rActPos <  rTargetPos)) OR
      (NOT bDirection AND (rActPos >  rTargetPos)) THEN
      bActive := TRUE;
      bPreOutputReached := TRUE;
   ELSE
      bActive := abConstMovement.aRun.bActive;
      bPreOutputReached := abConstMovement.aRun.bPreOutputReached;
   END_IF;
   
   bError := abConstMovement.aRun.bError;
ELSE
   // not started
   rOutputPre := 0.0; 
   rOutputVel := 0.0;
   bPreOutputReached := TRUE;
   bActive := FALSE;
   bError := FALSE;
   
   abConstMovement.aRun(bStart := FALSE,
                        bStop := TRUE); 
END_IF;
   
//finished ramping down -> switch off
IF bStarted AND NOT abConstMovement.aRun.bActive THEN
   bStarted := FALSE;
   rOutputPre := 0.0;
   rOutputVel := 0.0; 
   mpConstant^.Velocity.PreOutput.rOutputValue := rSavePreOutput;   
   mpConstant^.Velocity.Output.rRamp := rSaveRamp;
END_IF;


IF abConstMovement.aRun.bError THEN
   mpConstant^.Velocity.PreOutput.rOutputValue := rSavePreOutput;
   mpConstant^.Velocity.Output.rRamp := rSaveRamp;

   IF abConstMovement.aRun.iErrorInfo.Pressure <> cApplPlasticsNoError THEN
      iErrorInfo := abConstMovement.aRun.iErrorInfo.Pressure;
   ELSE
      iErrorInfo := abConstMovement.aRun.iErrorInfo.Velocity;
   END_IF;
   bActive := FALSE;
ELSIF NOT bError THEN
    iErrorInfo := cApplPlasticsNoError;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 152 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Do step with low and high output value.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(20)cApplPlasticsNoError @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(8)No Error 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(12)ABStepOutput @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(15)abConstMovement @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABConstMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)CycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)(of capturing) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bStarted @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mpConstant @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mprMaxSpeed @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(6)pConst @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(47)pointer to systemvariable that contains profile @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)moveId of constant movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)prMaxSpeed @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
28 
@Var @RT(6)bStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)start constant calib block @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)stop constant calib block @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)bDirection @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)movement direction @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)rActPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)rTargetPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)target position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)bUsePosDetect @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(45)TRUE: movement should stop at target position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)dDelayTimeOn @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(45)Delay Time between preoutput and  constoutput @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)dDelayTimeOff @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)Delay Time between pump stop and bActive FALSE @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)rPositionUp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)rPositionDown @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)rLowOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)rHighOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)dMaxMoveTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)rStopRamp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)bActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)movement is active @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)rOutputPre @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)pressure output @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)rOutputVel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)velocity output @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(17)bPreOutputReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)preoutput ready @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)flag to indicate if error occured @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(13)fbREdge_Start @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)iStage @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bUeStopRamp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)rSavePreOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)rSaveRamp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rDownPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)rUpPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)dMinDelayTimStop @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(6)T#50ms @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpConstant := pConst;

abConstMovement.aInit(pConst := pConst,
                      MoveId := MoveId);

mprMaxSpeed := prMaxSpeed;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(122)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
fbREdge_Start(CLK := bStart);
IF fbREdge_Start.Q THEN
   iStage := 1;
   bStarted := TRUE;
    
   rDownPosition := rPositionDown;
   rUpPosition := rPositionUp;

   rSavePreOutput := mpConstant^.Velocity.PreOutput.rOutputValue;
   mpConstant^.Velocity.PreOutput.rOutputValue :=  rHighOutput;
   mpConstant^.Velocity.PreOutput.rRamp := 1.0e10;
   rSaveRamp := mpConstant^.Velocity.Output.rRamp;

   IF (rStopRamp > 0.0) THEN
      bUeStopRamp := TRUE;
      mpConstant^.Velocity.Output.rRamp := rStopRamp;
   ELSE   
      bUeStopRamp := FALSE;
   END_IF;


   abConstMovement.aRun(bStart := FALSE);
   CycleTime := GET_TASK_INTERVAL();
END_IF;
IF bStop THEN
    bStarted := FALSE;
END_IF;

IF bStarted THEN
   //call const movement block
   abConstMovement.aRun(bStart := bStart,
                        bStop := bStop,
                        bDirection := bDirection,
                        rActPos := rActPos,
                        rTargetPos := rTargetPos,
                        bUsePosDetect := bUsePosDetect,
                        rStartOutputPre := 0.0,
                        rStartOutputVel := rHighOutput,
                        dDelayTimeOn := dDelayTimeOn,
                        dDelayTimeOff := MAX(dDelayTimeOff, dMinDelayTimStop),
                        dMaxTime := dMaxMoveTime);

   IF (bDirection AND (rActPos >=  rDownPosition)) OR
      (NOT bDirection AND (rActPos <=  rDownPosition)) THEN
      iStage := 3;
   ELSIF (bDirection AND (rActPos >=  rUpPosition) ) OR
      (NOT bDirection AND (rActPos <=  rUpPosition)) THEN
      iStage := 2;
   END_IF;
    
   (* to do a jump without a ramp we directly output the low value *)
   IF iStage = 1 THEN    
      rOutputVel := MIN(rLowOutput,mpConstant^.Velocity.Output.rOutputValue);
   ELSIF iStage = 2 THEN
      IF (bUeStopRamp) THEN
         rOutputVel := MIN(abConstMovement.aRun.rOutputVel, rHighOutput);
      ELSE
         rOutputVel := rHighOutput;
      END_IF;
   ELSIF iStage = 3 THEN
      IF (bUeStopRamp) THEN
         rOutputVel := abConstMovement.aRun.rOutputVel;
      ELSE
         rOutputVel := MIN(rLowOutput, abConstMovement.aRun.rOutputVel);  
      END_IF;
   ELSE    
      rOutputVel := 0.0; 
   END_IF;

   rOutputPre := abConstMovement.aRun.rOutputPre; 
   IF (bDirection AND (rActPos <  rTargetPos)) OR
      (NOT bDirection AND (rActPos >  rTargetPos)) THEN
      bActive := TRUE;
      bPreOutputReached := TRUE;
   ELSE
      bActive := abConstMovement.aRun.bActive;
      bPreOutputReached := abConstMovement.aRun.bPreOutputReached;
   END_IF;
   
   bError := abConstMovement.aRun.bError;
ELSE
   // not started
   rOutputPre := 0.0; 
   rOutputVel := 0.0;
   bPreOutputReached := TRUE;
   bActive := FALSE;
   bError := FALSE;
   
   abConstMovement.aRun(bStart := FALSE,
                        bStop := TRUE); 
END_IF;
   
//finished ramping down -> switch off
IF bStarted AND NOT abConstMovement.aRun.bActive THEN
   bStarted := FALSE;
   rOutputPre := 0.0;
   rOutputVel := 0.0; 
   mpConstant^.Velocity.PreOutput.rOutputValue := rSavePreOutput;   
   mpConstant^.Velocity.Output.rRamp := rSaveRamp;
END_IF;


IF abConstMovement.aRun.bError THEN
   mpConstant^.Velocity.PreOutput.rOutputValue := rSavePreOutput;
   mpConstant^.Velocity.Output.rRamp := rSaveRamp;

   IF abConstMovement.aRun.iErrorInfo.Pressure <> cApplPlasticsNoError THEN
      iErrorInfo := abConstMovement.aRun.iErrorInfo.Pressure;
   ELSE
      iErrorInfo := abConstMovement.aRun.iErrorInfo.Velocity;
   END_IF;
   bActive := FALSE;
ELSIF NOT bError THEN
    iErrorInfo := cApplPlasticsNoError;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
Output profile for back pressure calibration
and measure the pressure input
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
