(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Wait for cycle start condition to be satisfied
(half/full auto mode)
*)

IMPORT_OVER_LISTFILE
 cCompOperationMode
, cMoveStart
, tevCycleStart
, tnOperationMode
, tsDeviceId
, FBStart

END_IMPORT

ALGORITHM_BLOCK ABWaitCycleStart #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_OperationMode : tnOperationMode;
 sv_bFirstCycle : BOOL;
 sv_bSkipCycleStartCond : BOOL;
 sv_iActMoldProtectRetry : DINT;
END_VAR

SYSTEM_OBJECT
 EV_Task_3 : TASK;
 evCycleStart : tevCycleStart;
END_OBJECT

VAR
 mbGotStartSignal : BOOL;
 mbWaitForStartSignal : BOOL (* currently waiting for a start signal *);
END_VAR

(*
React to evCycleStart event from OperationMode1 FU
*)

EVENT_ALGORITHM evaCycleStart ON EV_Task_3 WITH evCycleStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* mbGotStartSignal is automatically reset when aWautCycleStart returns TRUE once *)
mbGotStartSignal := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM

(*
Begin to wait for a cycle start event.

This needs to be executed once before calling aWaitCycleStart
It tells the OperationMode1 FU to wait for a cycle start condition
(open safety gate/press start button) and then send a evCycleStart event.
*)

ALGORITHM aCycleStartRequest


VAR
 DeviceId : tsDeviceId;
 fbStart : FBStart;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbGotStartSignal := FALSE;

IF (sv_OperationMode = nHalfAutomatic OR sv_bFirstCycle) AND NOT sv_bSkipCycleStartCond THEN
   (* wait for cycle start event only in half auto mode or
      in first cycle of full auto mode *)
   DeviceId.CompId := cCompOperationMode;
   DeviceId.IndexId := 1;
   
   fbStart(DeviceId := DeviceId,
           MoveDir  := cMoveNone,
           MoveId   := cMoveStart);
   
   mbWaitForStartSignal := TRUE;
ELSE
   mbWaitForStartSignal := FALSE;
END_IF;

IF NOT sv_bSkipCycleStartCond THEN
   //reset when starting a new cycle but not when restarting because of mold protect
   sv_iActMoldProtectRetry := 0;
END_IF;

sv_bSkipCycleStartCond := FALSE;



;#END_EDIT_BLOCK END_ALGORITHM

(*
bCanStart is TRUE when the cycle is ready to be started.
On the next call bCanStart is reset to FALSE again.

In half auto mode or on the first cycle(sv_bFirstCycle TRUE) it waits for a evCycleStart event
In full auto mode (second or later cycle) it immediately allows the cycle to start
*)

ALGORITHM aWaitCycleStart


VAR_OUTPUT
 bCanStart : BOOL (* Got the cycle start event -> autocycle can start *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbWaitForStartSignal THEN
   IF mbGotStartSignal THEN
      bCanStart := TRUE;
      mbGotStartSignal := FALSE;
   ELSE
      bCanStart := FALSE;
   END_IF;
ELSE
   (* we are in full auto mode and not in the first cycle
      -> always allow to start *)
   bCanStart := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Wait for cycle start condition to be satisfied
(half/full auto mode)
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(18)cCompOperationMode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)111 @RT(24)Component Operation Mode 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)cMoveStart @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)19 @RT(19)start (eg Airvalve) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABWaitCycleStart @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)evCycleStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(13)tevCycleStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_bFirstCycle @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)mbGotStartSignal @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mbWaitForStartSignal @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)currently waiting for a start signal @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)sv_bSkipCycleStartCond @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_iActMoldProtectRetry @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(13)evaCycleStart @STRUCTURED_TEXT 
@RT(0) @RT(12)evCycleStart @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(18)aCycleStartRequest @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)fbStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)FBStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aWaitCycleStart @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(9)bCanStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(48)Got the cycle start event -> autocycle can start @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* mbGotStartSignal is automatically reset when aWautCycleStart returns TRUE once *)
mbGotStartSignal := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(1)
React to evCycleStart event from OperationMode1 FU
@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbGotStartSignal := FALSE;

IF (sv_OperationMode = nHalfAutomatic OR sv_bFirstCycle) AND NOT sv_bSkipCycleStartCond THEN
   (* wait for cycle start event only in half auto mode or
      in first cycle of full auto mode *)
   DeviceId.CompId := cCompOperationMode;
   DeviceId.IndexId := 1;
   
   fbStart(DeviceId := DeviceId,
           MoveDir  := cMoveNone,
           MoveId   := cMoveStart);
   
   mbWaitForStartSignal := TRUE;
ELSE
   mbWaitForStartSignal := FALSE;
END_IF;

IF NOT sv_bSkipCycleStartCond THEN
   //reset when starting a new cycle but not when restarting because of mold protect
   sv_iActMoldProtectRetry := 0;
END_IF;

sv_bSkipCycleStartCond := FALSE;


@END_Body 

@@@BEG_Comment@@@ 
@TL(5)
Begin to wait for a cycle start event.

This needs to be executed once before calling aWaitCycleStart
It tells the OperationMode1 FU to wait for a cycle start condition
(open safety gate/press start button) and then send a evCycleStart event.
@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbWaitForStartSignal THEN
   IF mbGotStartSignal THEN
      bCanStart := TRUE;
      mbGotStartSignal := FALSE;
   ELSE
      bCanStart := FALSE;
   END_IF;
ELSE
   (* we are in full auto mode and not in the first cycle
      -> always allow to start *)
   bCanStart := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(5)
bCanStart is TRUE when the cycle is ready to be started.
On the next call bCanStart is reset to FALSE again.

In half auto mode or on the first cycle(sv_bFirstCycle TRUE) it waits for a evCycleStart event
In full auto mode (second or later cycle) it immediately allows the cycle to start
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
