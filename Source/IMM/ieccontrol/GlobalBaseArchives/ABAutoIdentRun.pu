IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, SET_ALARM
, FCalcSetVelocity
, SET_EVENT
, nSetup
, cAutoIdentNoCycles
, cMoveFwd
, cMoveBwd
, cIdentFileEjectorFwd
, cIdentFileEjectorBwd
, ABAutoIdentMeasure
, FBIdentWriteLog
, RTC
, tsVelPre
, tsSetTimes
, KAPPL_VisProfile

END_IMPORT

ALGORITHM_BLOCK ABAutoIdentRun #DUMMY_EDIT_BLOCK

SYSTEM_OBJECT
 TaskSlow : TASK;
END_OBJECT

VAR
 abAutoIdentMeasure : ABAutoIdentMeasure;
 fbIdentWriteLog : FBIdentWriteLog;
 msFileName : STRING(255);
 miFileCounter : UDINT;
 mbDeleteFiles : BOOL;
 mdDeadTime : TIME;
 mrMaxRamp : REAL;
 mbLogFileSaved : BOOL := TRUE;
 fbGetTime : RTC;
 mdStartTime : TIME;
 mConstValuesFwd : tsVelPre;
 mConstValuesBwd : tsVelPre;
 mTimesSetFwd : tsSetTimes;
 mTimesSetBwd : tsSetTimes;
 mDelayTimeOffFwd : TIME;
 mDelayTimeOffBwd : TIME;
 mbCalculationDone : BOOL;
END_VAR

ALGORITHM aCalcMovementData


VAR_INPUT
 rMaxVelocityFwd : REAL (* max speed forward *);
 rMaxVelocityBwd : REAL (* max speed forward *);
 rStroke : REAL (* max. stroke of actual movement *);
 ConstValuesFwd : tsVelPre (* settings for constant movement forward *);
 ConstValuesBwd : tsVelPre (* settings for constant movement backward *);
 dDelayTimeOffFwd : TIME (* delay valve close movement forward *);
 dDelayTimeOffBwd : TIME (* delay valve close movement backward *);
 bMoveFwdPositionRising : BOOL (* position rising during movement forward *);
END_VAR

VAR_IN_OUT
 TimesSetFwd : tsSetTimes (* time settings movement forward *);
 TimesSetBwd : tsSetTimes (* time settings movement backward *);
END_VAR

VAR_OUTPUT
 rSetVelocityFwd : REAL (* contant velocity reference movement forward *);
 rSetVelocityBwd : REAL (* contant velocity reference movement backward *);
 rSetVelocityStartPosFwd : REAL (* contant velocity reference move to start position forward *);
 rSetVelocityStartPosBwd : REAL (* contant velocity reference move to start position backward *);
 rNoisePos : REAL (* end position first movement *);
 rFwdStartPos : REAL (* start position movement forward *);
 rFwdEndPos : REAL (* end position movement forward *);
 rBwdStartPos : REAL (* start position movement backward *);
 rBwdEndPos : REAL (* end position movement backward *);
 bDone : BOOL (* calculation done *);
 bError : BOOL (* error at calculation *);
 iErrorInfo : DINT (* additional error info *);
END_VAR

VAR_TEMP
 rSetVelocityRel : REAL;
END_VAR

VAR
 dMaxMoveTime : TIME := T#1s;
 rNoisePosRel : REAL := 0.75;
 rFwdStartPosRel : REAL := 0.05;
 rFwdEndPosRel : REAL := 0.5;
 rBwdStartPosRel : REAL := 0.75;
 rBwdEndPosRel : REAL := 0.25;
END_VAR
#BEGIN_EDIT_BLOCK
mConstValuesFwd := ConstValuesFwd;
mConstValuesBwd := ConstValuesBwd;

mTimesSetFwd := TimesSetFwd;
mTimesSetBwd := TimesSetBwd;
mDelayTimeOffFwd := dDelayTimeOffFwd;
mDelayTimeOffBwd := dDelayTimeOffBwd;


rSetVelocityRel := FCalcSetVelocity(rMaxVelocity:=rMaxVelocityFwd,
                                    rStroke:=rStroke,
                                    dMaxMoveTime:=dMaxMoveTime);
rSetVelocityFwd := rMaxVelocityFwd * rSetVelocityRel / 100.0;

rSetVelocityRel := FCalcSetVelocity(rMaxVelocity:=rMaxVelocityBwd,
                                    rStroke:=rStroke,
                                    dMaxMoveTime:=dMaxMoveTime);
rSetVelocityBwd := rMaxVelocityBwd * rSetVelocityRel / 100.0;

IF bMoveFwdPositionRising THEN
   rNoisePos := rNoisePosRel * rStroke;
   rFwdStartPos := rFwdStartPosRel * rStroke;
   rFwdEndPos := rFwdEndPosRel * rStroke;
   rBwdStartPos := rBwdStartPosRel * rStroke;
   rBwdEndPos := rBwdEndPosRel * rStroke;
ELSE
   rNoisePos := (1.0 - rNoisePosRel) * rStroke;
   rFwdStartPos := (1.0 - rFwdStartPosRel) * rStroke;
   rFwdEndPos := (1.0 - rFwdEndPosRel) * rStroke;
   rBwdStartPos := (1.0 - rBwdStartPosRel) * rStroke;
   rBwdEndPos := (1.0 - rBwdEndPosRel) * rStroke;   
END_IF;

rSetVelocityStartPosFwd := mConstValuesFwd.Velocity.Output.rOutputValue;
rSetVelocityStartPosBwd := mConstValuesBwd.Velocity.Output.rOutputValue;

IF TimesSetFwd.dMaxMoveTime <=T#0s THEN
   TimesSetFwd.dMaxMoveTime :=T#60s; 
END_IF;
IF TimesSetBwd.dMaxMoveTime <=T#0s THEN
   TimesSetBwd.dMaxMoveTime :=T#60s; 
END_IF;

TimesSetFwd.dSetDelayTimeValve := T#0s;
TimesSetBwd.dSetDelayTimeValve := T#0s;


bDone := TRUE;
bError := FALSE;
iErrorInfo := 0;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInitMeasureData


VAR_OUTPUT
 bDone : BOOL (* initialization done *);
 bError : BOOL (* error at initialization *);
 iErrorInfo : DINT (* additional error info *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

 
abAutoIdentMeasure.aInit();
fbGetTime();
mdStartTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT));
bDone := abAutoIdentMeasure.aInit.Done;
bError := abAutoIdentMeasure.aInit.Error;
iErrorInfo := abAutoIdentMeasure.aInit.ErrorInfo;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aMeasureData


VAR_INPUT
 rPosition : REAL (* actual position *);
 rVelocityReference : REAL (* velocity reference *);
 rActVelocity : REAL (* actual velocity *);
 rPressureReference : REAL (* pressure reference *);
 rActPressure : REAL (* actual pressure *);
 rPositionNonLinear : REAL (* actual position calulated with lintab (e.g. mold position from toggle lever) *);
 rVelocityNonLinear : REAL (* actual velocity calculated from non linear position *);
END_VAR

VAR
 dActTime : TIME;
END_VAR
#BEGIN_EDIT_BLOCK
fbGetTime();
dActTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT)) - mdStartTime; 
abAutoIdentMeasure.aRecord(rS:=rPosition,
                           rVSet:=rVelocityReference,                               
                           rVAct:=rActVelocity,
                           rPSet:=rPressureReference,
                           rPAct:=rActPressure,
                           dT:=dActTime,
                           rVNonLinear:=rPositionNonLinear,
                           rSNonLinear:=rVelocityNonLinear);


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStopMeasurement

#BEGIN_EDIT_BLOCK
abAutoIdentMeasure.aCloseMeasurement();


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aDetectDeadTimeMaxRamp


VAR_OUTPUT
 rRamp : REAL (* calculated max. ramp from actual velocity *);
 dDeadTime : TIME (* detected dead time *);
 bDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bDone := mbCalculationDone;
rRamp := abAutoIdentMeasure.aDetectDeadTimeMaxRamp.rRamp;
dDeadTime := abAutoIdentMeasure.aDetectDeadTimeMaxRamp.dDeadTime;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aRestoreSavedData


VAR_IN_OUT
 ConstValuesFwd : tsVelPre (* settings for constant movement forward *);
 ConstValuesBwd : tsVelPre (* settings for constant movement backward *);
 TimesSetFwd : tsSetTimes (* time settings movement forward *);
 TimesSetBwd : tsSetTimes (* time settings movement backward *);
 DelayTimeOffFwd : TIME (* delay valve close movement forward *);
 DelayTimeOffBwd : TIME (* delay valve close movement backward *);
END_VAR
#BEGIN_EDIT_BLOCK
ConstValuesFwd := mConstValuesFwd;
ConstValuesBwd := mConstValuesBwd;

TimesSetFwd.dMaxMoveTime := mTimesSetFwd.dMaxMoveTime;
TimesSetBwd.dMaxMoveTime := mTimesSetBwd.dMaxMoveTime;
DelayTimeOffFwd := mDelayTimeOffFwd;
DelayTimeOffBwd := mDelayTimeOffBwd;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStoreIdentData


VAR_INPUT
 rMaxRampFwd : REAL (* calculated max. ramp movement forward *);
 rMaxRampBwd : REAL (* calculated max. ramp movement backward *);
 dDeadTimeFwdMean : TIME (* sum of detected dead time movement forward *);
 dDeadTimeBwdMean : TIME (* sum of detected dead time movement backward *);
 iIdentCounter : UDINT (* number of ident cycles *);
END_VAR

VAR_IN_OUT
 FwdProfVis : KAPPL_VisProfile (* profile data movement forward *);
 BwdProfVis : KAPPL_VisProfile (* profile data movement backward *);
 DelayTimeOffFwd : TIME (* delay valve close movement forward *);
 DelayTimeOffBwd : TIME (* delay valve close movement backward *);
END_VAR

VAR
 dDeadTimeFwd : TIME;
 dDeadTimeBwd : TIME;
END_VAR
#BEGIN_EDIT_BLOCK
IF rMaxRampFwd > 0.0 THEN
   FwdProfVis.rMaxRampVel := rMaxRampFwd;
END_IF;
IF rMaxRampBwd > 0.0 THEN
   BwdProfVis.rMaxRampVel := rMaxRampBwd;
END_IF;
IF dDeadTimeFwdMean > T#0s THEN
   dDeadTimeFwd := DIVTIME(dDeadTimeFwdMean, iIdentCounter);
   mDelayTimeOffFwd := dDeadTimeFwd;
   DelayTimeOffFwd := dDeadTimeFwd;
END_IF;
DelayTimeOffFwd := mDelayTimeOffFwd; 
IF dDeadTimeBwdMean > T#0s THEN
   dDeadTimeBwd := DIVTIME(dDeadTimeBwdMean, iIdentCounter);  
   mDelayTimeOffBwd := dDeadTimeBwd;
END_IF;
DelayTimeOffBwd := mDelayTimeOffBwd;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStoreIdentDataConst


VAR_INPUT
 rMaxRampFwd : REAL (* calculated max. ramp movement forward *);
 rMaxRampBwd : REAL (* calculated max. ramp movement backward *);
 dDeadTimeFwdMean : TIME (* sum of detected dead time movement forward *);
 dDeadTimeBwdMean : TIME (* sum of detected dead time movement backward *);
 iIdentCounter : UDINT (* number of ident cycles *);
END_VAR

VAR_IN_OUT
 FwdProfVis : KAPPL_VisProfile (* profile data movement forward *);
 BwdProfConst1 : tsVelPre (* settings for constant movement backward move id 1 *);
 BwdProfConst2 : tsVelPre (* settings for constant movement backward move id 2 *);
 DelayTimeOffFwd : TIME (* delay valve close movement forward *);
 DelayTimeOffBwd : TIME (* delay valve close movement backward *);
END_VAR

VAR
 dDeadTimeFwd : TIME;
 dDeadTimeBwd : TIME;
END_VAR
#BEGIN_EDIT_BLOCK
IF rMaxRampFwd > 0.0 THEN
   FwdProfVis.rMaxRampVel := rMaxRampFwd;
END_IF;
IF rMaxRampBwd > 0.0 THEN
   BwdProfConst1.Velocity.Output.rRamp := rMaxRampBwd;
   BwdProfConst2.Velocity.Output.rRamp := rMaxRampBwd;
END_IF;
IF dDeadTimeFwdMean > T#0s THEN
   dDeadTimeFwd := DIVTIME(dDeadTimeFwdMean, iIdentCounter);
   mDelayTimeOffFwd := dDeadTimeFwd;
   DelayTimeOffFwd := dDeadTimeFwd;
END_IF;
DelayTimeOffFwd := mDelayTimeOffFwd; 
IF dDeadTimeBwdMean > T#0s THEN
   dDeadTimeBwd := DIVTIME(dDeadTimeBwdMean, iIdentCounter);  
   mDelayTimeOffBwd := dDeadTimeBwd;
END_IF;
DelayTimeOffBwd := mDelayTimeOffBwd;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aWriteLog


VAR_OUTPUT
 bDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bDone := mbLogFileSaved;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paWriteLog ON TaskSlow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbIdentWriteLog(sFileName   := msFileName,
                iFileCounter:= miFileCounter,
                bDeleteFiles:= mbDeleteFiles, 
                dDeadTime   := mdDeadTime, 
                rRamp       := mrMaxRamp);
IF fbIdentWriteLog.bDone THEN
   mbLogFileSaved := TRUE;
ELSE   
   mbLogFileSaved := FALSE;
END_IF;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paDetectDeadTimeMaxRamp ON TaskSlow

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abAutoIdentMeasure.aDetectDeadTimeMaxRamp();
mbCalculationDone := TRUE;

STOP_PROCESS_ALGORITHM();



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStartDetection

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbCalculationDone := FALSE;
START_PROCESS_ALGORITHM(paDetectDeadTimeMaxRamp);


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aEndIdent

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abAutoIdentMeasure.aEnd();


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStartLogging


VAR_INPUT
 sFileName : STRING(255) (* file name movement *);
 iFileCounter : UDINT (* actual ident cycle index *);
 bDeleteFiles : BOOL (* delete old files *);
 dDeadTime : TIME (* detected dead time *);
 rMaxRamp : REAL (* calculated max. ramp *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbLogFileSaved := FALSE;
msFileName := sFileName;
miFileCounter := iFileCounter;
mbDeleteFiles := bDeleteFiles;
mdDeadTime := dDeadTime;
mrMaxRamp := rMaxRamp;

START_PROCESS_ALGORITHM(paWriteLog);



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 120 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
4 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)FCalcSetVelocity @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
6 
@Var @RT(6)nSetup @RT(0) @T @T @DERIVED 0 @F @RT(15)tnOperationMode @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(36)Setup mode only for service engineer 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)cAutoIdentNoCycles @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)10 @RT(49)number of cycles for auto identification of ramps 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveFwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)12 @RT(16)movement forward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)cMoveBwd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(17)movement backward 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cIdentFileEjectorFwd @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(21)'IdentEjectorRampFwd' @RT(30)Filename for Ident Ejector Fwd 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cIdentFileEjectorBwd @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(21)'IdentEjectorRampBwd' @RT(30)Filename for Ident Ejector Bwd 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABAutoIdentRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
18 
@Var @RT(8)TaskSlow @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)abAutoIdentMeasure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)ABAutoIdentMeasure @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbIdentWriteLog @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)FBIdentWriteLog @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)msFileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)miFileCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mbDeleteFiles @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mdDeadTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mrMaxRamp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mbLogFileSaved @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)fbGetTime @RT(0) @T @T @DERIVED 0 @F @RT(3)RTC @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mdStartTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mConstValuesFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mConstValuesBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mTimesSetFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)mTimesSetBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mDelayTimeOffFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mDelayTimeOffBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mbCalculationDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

14 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(17)aCalcMovementData @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
29 
@Var @RT(15)rMaxVelocityFwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(17)max speed forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)rMaxVelocityBwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(17)max speed forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)rStroke @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)max. stroke of actual movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)ConstValuesFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)settings for constant movement forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)ConstValuesBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(39)settings for constant movement backward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)dDelayTimeOffFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)delay valve close movement forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)dDelayTimeOffBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)delay valve close movement backward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)bMoveFwdPositionRising @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(39)position rising during movement forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)TimesSetFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)time settings movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(11)TimesSetBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(31)time settings movement backward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)rSetVelocityFwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)contant velocity reference movement forward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(15)rSetVelocityBwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)contant velocity reference movement backward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(23)rSetVelocityStartPosFwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)contant velocity reference move to start position forward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(23)rSetVelocityStartPosBwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(58)contant velocity reference move to start position backward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)rNoisePos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)end position first movement @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)rFwdStartPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(31)start position movement forward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)rFwdEndPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)end position movement forward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)rBwdStartPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)start position movement backward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)rBwdEndPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)end position movement backward @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)dMaxMoveTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)T#1s @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)rNoisePosRel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.75 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rFwdStartPosRel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.05 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rFwdEndPosRel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(3)0.5 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rBwdStartPosRel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.75 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rBwdEndPosRel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)0.25 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)rSetVelocityRel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)calculation done @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)error at calculation @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aInitMeasureData @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)initialization done @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)error at initialization @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aMeasureData @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(9)rPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)rVelocityReference @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)velocity reference @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)rActVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual velocity @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)rPressureReference @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)pressure reference @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)rActPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual pressure @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)rPositionNonLinear @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(76)actual position calulated with lintab (e.g. mold position from toggle lever) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)rVelocityNonLinear @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(51)actual velocity calculated from non linear position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)dActTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aStopMeasurement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(22)aDetectDeadTimeMaxRamp @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(5)rRamp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(41)calculated max. ramp from actual velocity @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)dDeadTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)detected dead time @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(17)aRestoreSavedData @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(14)ConstValuesFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)settings for constant movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(14)ConstValuesBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(39)settings for constant movement backward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(11)TimesSetFwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)time settings movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(11)TimesSetBwd @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsSetTimes @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(31)time settings movement backward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)DelayTimeOffFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)delay valve close movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)DelayTimeOffBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)delay valve close movement backward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aStoreIdentData @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(11)rMaxRampFwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)calculated max. ramp movement forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)rMaxRampBwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)calculated max. ramp movement backward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)dDeadTimeFwdMean @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)sum of detected dead time movement forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)dDeadTimeBwdMean @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)sum of detected dead time movement backward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)iIdentCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)number of ident cycles @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)FwdProfVis @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_VisProfile @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)profile data movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(10)BwdProfVis @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_VisProfile @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)profile data movement backward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)DelayTimeOffFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)delay valve close movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)DelayTimeOffBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)delay valve close movement backward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(12)dDeadTimeFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)dDeadTimeBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(20)aStoreIdentDataConst @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
12 
@Var @RT(11)rMaxRampFwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)calculated max. ramp movement forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)rMaxRampBwd @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)calculated max. ramp movement backward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)dDeadTimeFwdMean @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)sum of detected dead time movement forward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)dDeadTimeBwdMean @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(43)sum of detected dead time movement backward @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)iIdentCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)number of ident cycles @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)FwdProfVis @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_VisProfile @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)profile data movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(13)BwdProfConst1 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(49)settings for constant movement backward move id 1 @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(13)BwdProfConst2 @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(49)settings for constant movement backward move id 2 @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)DelayTimeOffFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)delay valve close movement forward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(15)DelayTimeOffBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(35)delay valve close movement backward @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(12)dDeadTimeFwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)dDeadTimeBwd @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aWriteLog @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(5)bDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(10)paWriteLog @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(23)paDetectDeadTimeMaxRamp @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)TaskSlow @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aStartDetection @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aEndIdent @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(13)aStartLogging @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(9)sFileName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)file name movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)iFileCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)actual ident cycle index @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)bDeleteFiles @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)delete old files @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)dDeadTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)detected dead time @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)rMaxRamp @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)calculated max. ramp @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(51)
mConstValuesFwd := ConstValuesFwd;
mConstValuesBwd := ConstValuesBwd;

mTimesSetFwd := TimesSetFwd;
mTimesSetBwd := TimesSetBwd;
mDelayTimeOffFwd := dDelayTimeOffFwd;
mDelayTimeOffBwd := dDelayTimeOffBwd;


rSetVelocityRel := FCalcSetVelocity(rMaxVelocity:=rMaxVelocityFwd,
                                    rStroke:=rStroke,
                                    dMaxMoveTime:=dMaxMoveTime);
rSetVelocityFwd := rMaxVelocityFwd * rSetVelocityRel / 100.0;

rSetVelocityRel := FCalcSetVelocity(rMaxVelocity:=rMaxVelocityBwd,
                                    rStroke:=rStroke,
                                    dMaxMoveTime:=dMaxMoveTime);
rSetVelocityBwd := rMaxVelocityBwd * rSetVelocityRel / 100.0;

IF bMoveFwdPositionRising THEN
   rNoisePos := rNoisePosRel * rStroke;
   rFwdStartPos := rFwdStartPosRel * rStroke;
   rFwdEndPos := rFwdEndPosRel * rStroke;
   rBwdStartPos := rBwdStartPosRel * rStroke;
   rBwdEndPos := rBwdEndPosRel * rStroke;
ELSE
   rNoisePos := (1.0 - rNoisePosRel) * rStroke;
   rFwdStartPos := (1.0 - rFwdStartPosRel) * rStroke;
   rFwdEndPos := (1.0 - rFwdEndPosRel) * rStroke;
   rBwdStartPos := (1.0 - rBwdStartPosRel) * rStroke;
   rBwdEndPos := (1.0 - rBwdEndPosRel) * rStroke;   
END_IF;

rSetVelocityStartPosFwd := mConstValuesFwd.Velocity.Output.rOutputValue;
rSetVelocityStartPosBwd := mConstValuesBwd.Velocity.Output.rOutputValue;

IF TimesSetFwd.dMaxMoveTime <=T#0s THEN
   TimesSetFwd.dMaxMoveTime :=T#60s; 
END_IF;
IF TimesSetBwd.dMaxMoveTime <=T#0s THEN
   TimesSetBwd.dMaxMoveTime :=T#60s; 
END_IF;

TimesSetFwd.dSetDelayTimeValve := T#0s;
TimesSetBwd.dSetDelayTimeValve := T#0s;


bDone := TRUE;
bError := FALSE;
iErrorInfo := 0;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

 
abAutoIdentMeasure.aInit();
fbGetTime();
mdStartTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT));
bDone := abAutoIdentMeasure.aInit.Done;
bError := abAutoIdentMeasure.aInit.Error;
iErrorInfo := abAutoIdentMeasure.aInit.ErrorInfo;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
fbGetTime();
dActTime := TOD_TO_TIME(DT_TO_TOD(fbGetTime.CDT)) - mdStartTime; 
abAutoIdentMeasure.aRecord(rS:=rPosition,
                           rVSet:=rVelocityReference,                               
                           rVAct:=rActVelocity,
                           rPSet:=rPressureReference,
                           rPAct:=rActPressure,
                           dT:=dActTime,
                           rVNonLinear:=rPositionNonLinear,
                           rSNonLinear:=rVelocityNonLinear);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(2)
abAutoIdentMeasure.aCloseMeasurement();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bDone := mbCalculationDone;
rRamp := abAutoIdentMeasure.aDetectDeadTimeMaxRamp.rRamp;
dDeadTime := abAutoIdentMeasure.aDetectDeadTimeMaxRamp.dDeadTime;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
ConstValuesFwd := mConstValuesFwd;
ConstValuesBwd := mConstValuesBwd;

TimesSetFwd.dMaxMoveTime := mTimesSetFwd.dMaxMoveTime;
TimesSetBwd.dMaxMoveTime := mTimesSetBwd.dMaxMoveTime;
DelayTimeOffFwd := mDelayTimeOffFwd;
DelayTimeOffBwd := mDelayTimeOffBwd;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(19)
IF rMaxRampFwd > 0.0 THEN
   FwdProfVis.rMaxRampVel := rMaxRampFwd;
END_IF;
IF rMaxRampBwd > 0.0 THEN
   BwdProfVis.rMaxRampVel := rMaxRampBwd;
END_IF;
IF dDeadTimeFwdMean > T#0s THEN
   dDeadTimeFwd := DIVTIME(dDeadTimeFwdMean, iIdentCounter);
   mDelayTimeOffFwd := dDeadTimeFwd;
   DelayTimeOffFwd := dDeadTimeFwd;
END_IF;
DelayTimeOffFwd := mDelayTimeOffFwd; 
IF dDeadTimeBwdMean > T#0s THEN
   dDeadTimeBwd := DIVTIME(dDeadTimeBwdMean, iIdentCounter);  
   mDelayTimeOffBwd := dDeadTimeBwd;
END_IF;
DelayTimeOffBwd := mDelayTimeOffBwd;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
IF rMaxRampFwd > 0.0 THEN
   FwdProfVis.rMaxRampVel := rMaxRampFwd;
END_IF;
IF rMaxRampBwd > 0.0 THEN
   BwdProfConst1.Velocity.Output.rRamp := rMaxRampBwd;
   BwdProfConst2.Velocity.Output.rRamp := rMaxRampBwd;
END_IF;
IF dDeadTimeFwdMean > T#0s THEN
   dDeadTimeFwd := DIVTIME(dDeadTimeFwdMean, iIdentCounter);
   mDelayTimeOffFwd := dDeadTimeFwd;
   DelayTimeOffFwd := dDeadTimeFwd;
END_IF;
DelayTimeOffFwd := mDelayTimeOffFwd; 
IF dDeadTimeBwdMean > T#0s THEN
   dDeadTimeBwd := DIVTIME(dDeadTimeBwdMean, iIdentCounter);  
   mDelayTimeOffBwd := dDeadTimeBwd;
END_IF;
DelayTimeOffBwd := mDelayTimeOffBwd;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bDone := mbLogFileSaved;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbIdentWriteLog(sFileName   := msFileName,
                iFileCounter:= miFileCounter,
                bDeleteFiles:= mbDeleteFiles, 
                dDeadTime   := mdDeadTime, 
                rRamp       := mrMaxRamp);
IF fbIdentWriteLog.bDone THEN
   mbLogFileSaved := TRUE;
ELSE   
   mbLogFileSaved := FALSE;
END_IF;
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(11)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abAutoIdentMeasure.aDetectDeadTimeMaxRamp();
mbCalculationDone := TRUE;

STOP_PROCESS_ALGORITHM();


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbCalculationDone := FALSE;
START_PROCESS_ALGORITHM(paDetectDeadTimeMaxRamp);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abAutoIdentMeasure.aEnd();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbLogFileSaved := FALSE;
msFileName := sFileName;
miFileCounter := iFileCounter;
mbDeleteFiles := bDeleteFiles;
mdDeadTime := dDeadTime;
mrMaxRamp := rMaxRamp;

START_PROCESS_ALGORITHM(paWriteLog);


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
