IMPORT_OVER_LISTFILE
 SET_ALARM
, SET_EVENT
, nSetup
, tnCalibState_Running
, tnOperationMode
, tsIdentMovement
, tsIdentSpeedMovement
, tevRedoIdentEvent
, tevRedoIdentSpeedEvent
, tevRedoIdentEventData
, tevRedoIdentSpeedEventData

END_IMPORT

ALGORITHM_BLOCK ABAutoIdentRedoListener #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_OperationMode : tnOperationMode;
 sv_IdentState : tsIdentMovement;
 sv_IdentMaxSpeedState : tsIdentSpeedMovement;
 sv_IdentMinSpeedState : tsIdentSpeedMovement;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 erSetupModeRequiredForCalib : ALARM;
 evRedoIdentStart : tevRedoIdentEvent;
 evRedoIdentMaxSpeedStart : tevRedoIdentSpeedEvent;
 evRedoIdentMinSpeedStart : tevRedoIdentSpeedEvent;
END_OBJECT

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
*)

POSTUPDATE_ALGORITHM pUpdateRedo ON PU_Task_7 WITH sv_IdentState.bRedo


VAR_TEMP
 RedoStartData : tevRedoIdentEventData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_IdentState.bRedo THEN
    IF sv_OperationMode <> nSetup THEN
       SET_ALARM(erSetupModeRequiredForCalib);
       sv_IdentState.bRedo := FALSE;
       RETURN;
    END_IF;
    RedoStartData.pMovement := @sv_IdentState;
    SET_EVENT(evRedoIdentStart, RedoStartData);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
*)

POSTUPDATE_ALGORITHM pUpdateStatus ON PU_Task_7 WITH sv_IdentState.Status

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* reset bRedo flag, when calibration is finished or aborted *)
IF sv_IdentState.Status <> tnCalibState_Running AND sv_IdentState.bRedo THEN
    sv_IdentState.bRedo := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
*)

POSTUPDATE_ALGORITHM pUpdateMaxRedo ON PU_Task_7 WITH sv_IdentMaxSpeedState.bRedo


VAR_TEMP
 RedoStartData : tevRedoIdentSpeedEventData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_IdentMaxSpeedState.bRedo THEN
    IF sv_OperationMode <> nSetup THEN
       SET_ALARM(erSetupModeRequiredForCalib);
       sv_IdentMaxSpeedState.bRedo := FALSE;
       RETURN;
    END_IF;
    RedoStartData.pMovement := @sv_IdentMaxSpeedState;
    SET_EVENT(evRedoIdentMaxSpeedStart, RedoStartData);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
*)

POSTUPDATE_ALGORITHM pUpdateMaxStatus ON PU_Task_7 WITH sv_IdentMaxSpeedState.Status

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* reset bRedo flag, when calibration is finished or aborted *)
IF sv_IdentMaxSpeedState.Status <> tnCalibState_Running AND sv_IdentMaxSpeedState.bRedo THEN
    sv_IdentMaxSpeedState.bRedo := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
*)

POSTUPDATE_ALGORITHM pUpdateMinRedo ON PU_Task_7 WITH sv_IdentMinSpeedState.bRedo


VAR_TEMP
 RedoStartData : tevRedoIdentSpeedEventData;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_IdentMinSpeedState.bRedo THEN
    IF sv_OperationMode <> nSetup THEN
       SET_ALARM(erSetupModeRequiredForCalib);
       sv_IdentMinSpeedState.bRedo := FALSE;
       RETURN;
    END_IF;
    RedoStartData.pMovement := @sv_IdentMinSpeedState;
    SET_EVENT(evRedoIdentMinSpeedStart, RedoStartData);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
*)

POSTUPDATE_ALGORITHM pUpdateMinStatus ON PU_Task_7 WITH sv_IdentMinSpeedState.Status

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* reset bRedo flag, when calibration is finished or aborted *)
IF sv_IdentMinSpeedState.Status <> tnCalibState_Running AND sv_IdentMinSpeedState.bRedo THEN
    sv_IdentMinSpeedState.bRedo := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 152 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(6)nSetup @RT(0) @T @T @DERIVED 0 @F @RT(15)tnOperationMode @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(36)Setup mode only for service engineer 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)tnCalibState_Running @RT(0) @T @T @DERIVED 0 @F @RT(12)tnCalibState @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(23)calibration in progress 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(23)ABAutoIdentRedoListener @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_IdentState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tsIdentMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_IdentMaxSpeedState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tsIdentSpeedMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_IdentMinSpeedState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(20)tsIdentSpeedMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(27)erSetupModeRequiredForCalib @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)evRedoIdentStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tevRedoIdentEvent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)evRedoIdentMaxSpeedStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevRedoIdentSpeedEvent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(24)evRedoIdentMinSpeedStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevRedoIdentSpeedEvent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(11)pUpdateRedo @STRUCTURED_TEXT 
@RT(0) @RT(19)sv_IdentState.bRedo @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(13)RedoStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)tevRedoIdentEventData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)pUpdateStatus @STRUCTURED_TEXT 
@RT(0) @RT(20)sv_IdentState.Status @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pUpdateMaxRedo @STRUCTURED_TEXT 
@RT(0) @RT(27)sv_IdentMaxSpeedState.bRedo @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(13)RedoStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevRedoIdentSpeedEventData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pUpdateMaxStatus @STRUCTURED_TEXT 
@RT(0) @RT(28)sv_IdentMaxSpeedState.Status @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pUpdateMinRedo @STRUCTURED_TEXT 
@RT(0) @RT(27)sv_IdentMinSpeedState.bRedo @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(13)RedoStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevRedoIdentSpeedEventData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pUpdateMinStatus @STRUCTURED_TEXT 
@RT(0) @RT(28)sv_IdentMinSpeedState.Status @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_IdentState.bRedo THEN
    IF sv_OperationMode <> nSetup THEN
       SET_ALARM(erSetupModeRequiredForCalib);
       sv_IdentState.bRedo := FALSE;
       RETURN;
    END_IF;
    RedoStartData.pMovement := @sv_IdentState;
    SET_EVENT(evRedoIdentStart, RedoStartData);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* reset bRedo flag, when calibration is finished or aborted *)
IF sv_IdentState.Status <> tnCalibState_Running AND sv_IdentState.bRedo THEN
    sv_IdentState.bRedo := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_IdentMaxSpeedState.bRedo THEN
    IF sv_OperationMode <> nSetup THEN
       SET_ALARM(erSetupModeRequiredForCalib);
       sv_IdentMaxSpeedState.bRedo := FALSE;
       RETURN;
    END_IF;
    RedoStartData.pMovement := @sv_IdentMaxSpeedState;
    SET_EVENT(evRedoIdentMaxSpeedStart, RedoStartData);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* reset bRedo flag, when calibration is finished or aborted *)
IF sv_IdentMaxSpeedState.Status <> tnCalibState_Running AND sv_IdentMaxSpeedState.bRedo THEN
    sv_IdentMaxSpeedState.bRedo := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_IdentMinSpeedState.bRedo THEN
    IF sv_OperationMode <> nSetup THEN
       SET_ALARM(erSetupModeRequiredForCalib);
       sv_IdentMinSpeedState.bRedo := FALSE;
       RETURN;
    END_IF;
    RedoStartData.pMovement := @sv_IdentMinSpeedState;
    SET_EVENT(evRedoIdentMinSpeedStart, RedoStartData);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(* reset bRedo flag, when calibration is finished or aborted *)
IF sv_IdentMinSpeedState.Status <> tnCalibState_Running AND sv_IdentMinSpeedState.bRedo THEN
    sv_IdentMinSpeedState.bRedo := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

sets a evRedoStart event, which notifies the autocalibration FU to start this calibration movement
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
