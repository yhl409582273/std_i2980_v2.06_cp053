(*
read one line from a the file File
returns 'EOF_REACHED' at the end of the file
@h WARNING: returns a empty string every second time the function is called
*)

IMPORT_OVER_LISTFILE
 KFILE_Open_Data

END_IMPORT

FUNCTION FReadLineFromFile : STRING(255) #DUMMY_EDIT_BLOCK

VAR_INPUT
 File : KFILE_Open_Data;
END_VAR

VAR
 ReadString : STRING(255) := '';
 DatenLesen : STRING(255);
 readcount : DINT := 0;
END_VAR
#BEGIN_EDIT_BLOCK
REPEAT   
    readcount := KFILE_Read(Token:=File.Token,Length:=1,Buffer:=DatenLesen);
    
    IF readcount<>0
         AND DatenLesen<>'$R' 
         AND DatenLesen<>'$N' 
         AND DatenLesen<>'$L' THEN 
            ReadString := CONCAT(ReadString,DatenLesen); 
    END_IF;
    
UNTIL readcount=0
         OR DatenLesen='$R' 
         OR DatenLesen='$N' 
         OR DatenLesen='$L'
         OR File.Status = KFILE_Status_NOTOK
END_REPEAT;


IF LEN(ReadString)=0 AND (readcount = 0  
    OR File.Status = KFILE_Status_NOTOK) THEN 
    ReadString := 'EOF_REACHED'; 
END_IF;
FReadLineFromFile:=ReadString;


;#END_EDIT_BLOCK END_FUNCTION



#END_OF_IEC_PART

@Puma @IecEditor 6 30 @Pou 25 
@@@BEG_Comment@@@
read one line from a the file File
returns 'EOF_REACHED' at the end of the file
@h WARNING: returns a empty string every second time the function is called
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION @RT(17)FReadLineFromFile @STRUCTURED_TEXT 
@RT(11)STRING(255) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(4)File @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KFILE_Open_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)ReadString @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(2)'' @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)DatenLesen @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)readcount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(24)
REPEAT   
    readcount := KFILE_Read(Token:=File.Token,Length:=1,Buffer:=DatenLesen);
    
    IF readcount<>0
         AND DatenLesen<>'$R' 
         AND DatenLesen<>'$N' 
         AND DatenLesen<>'$L' THEN 
            ReadString := CONCAT(ReadString,DatenLesen); 
    END_IF;
    
UNTIL readcount=0
         OR DatenLesen='$R' 
         OR DatenLesen='$N' 
         OR DatenLesen='$L'
         OR File.Status = KFILE_Status_NOTOK
END_REPEAT;


IF LEN(ReadString)=0 AND (readcount = 0  
    OR File.Status = KFILE_Status_NOTOK) THEN 
    ReadString := 'EOF_REACHED'; 
END_IF;
FReadLineFromFile:=ReadString;

@END_Body 

@END_Contents 
