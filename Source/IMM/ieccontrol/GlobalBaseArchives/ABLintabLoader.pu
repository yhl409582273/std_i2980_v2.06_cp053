(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

lintab loader 

@FunctionID: CR_0030048

*)

IMPORT_OVER_LISTFILE
 GET_RUNTIME
, KFILE_Open
, KFILE_Read
, KFILE_Close
, STRING_TO_ASCII
, KFILE_GetFirst
, KFILE_GetNext
, KCAT_GetHandle
, KCAT_GetValue
, CMD_LINTABLOAD
, CMD_LINTABLISTFILES
, cLTBLDR_ERR_UNKNOWNCMD
, KFILE_Mode_ReadOnly
, KFILE_Status_OK
, cLTBLDR_ERR_FILENOTFOUND
, cLTBLDR_ERR_OUTOFBOUND
, cLTBLDR_MAXFILES
, cLTBLDR_ERR_MAXFILESREACHED
, KCAT_Status_OK
, cLTBLDR_ROOTPATH
, tsLintabLoaderData
, KFILE_Status
, tsTraceLevel
, KFILE_Open_Data
, KCTRL_Lintab_Point
, KAPPL_LintabData
, KCAT_Status
, KCAT_HandleData

END_IMPORT

ALGORITHM_BLOCK ABLintabLoader #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_LintabLoaderData : tsLintabLoaderData;
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 TaskVis : TASK;
 PU_Task_7 : TASK;
END_OBJECT

VAR
 mbCmdActive : BOOL;
 Status : KFILE_Status;
 absoluteLTBPath : STRING(255);
END_VAR

POSTUPDATE_ALGORITHM pRunHMICmd ON PU_Task_7 WITH sv_LintabLoaderData.HMIComm.iCmdCtrl

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((sv_LintabLoaderData.HMIComm.iCmdCtrl MOD 2) = 1) THEN // start command req.
    IF mbCmdActive THEN
        RETURN;     
    END_IF;
    
    CASE sv_LintabLoaderData.HMIComm.iCmdSel OF
        CMD_LINTABLOAD: 
            mbCmdActive := TRUE; 
            START_PROCESS_ALGORITHM(paLoad);

        CMD_LINTABLISTFILES:
            mbCmdActive := TRUE;                                     
            START_PROCESS_ALGORITHM(paListFiles);
    ELSE
        sv_LintabLoaderData.HMIComm.iCmdRet := cLTBLDR_ERR_UNKNOWNCMD;            
        sv_LintabLoaderData.HMIComm.iCmdCtrl := sv_LintabLoaderData.HMIComm.iCmdCtrl + 1;
    END_CASE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCmdDone


VAR_INPUT
 iRetCode : DINT;
END_VAR

VAR
 iTmp : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iTmp := sv_LintabLoaderData.HMIComm.iCmdCtrl;
iTmp := iTmp + (iTmp MOD 2); 
sv_LintabLoaderData.HMIComm.iCmdCtrl := iTmp;  // i MOD 2 = 0 
sv_LintabLoaderData.HMIComm.iCmdRet := iRetCode;
mbCmdActive := FALSE; 



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paLoad ON TaskVis


VAR
 dummy : DINT;
 t : TIME;
 tl : DINT;
 i : DINT;
 iLine : DINT;
 FileOpenData : KFILE_Open_Data;
 sColumn : STRING(255);
 sChar : STRING(1);
 bConvert : BOOL;
 iColumn : DINT;
 tmpPoint : KCTRL_Lintab_Point;
 tmpLintab : KAPPL_LintabData (* do not make VAR_TEMP, workaround CR_36866 *);
 iMaxPoints : DINT;
 bNoData : BOOL;
 AsciiChar : BYTE;
 // testSX : STRING(255);
 // testSY : STRING(255);
 // testS : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TraceLevel.bApplication THEN
   dummy := Print ('LOAD %s', sv_LintabLoaderData.sName);
   t := GET_RUNTIME();
END_IF;
 
iLine := 0; 
iColumn := 0; 
sColumn := ''; 
bConvert := FALSE;
iMaxPoints := GET_HIGH_BOUND(tmpLintab.LintabPoints.Point);

FileOpenData := KFILE_Open(CONCAT(absoluteLTBPath, '/', sv_LintabLoaderData.sName, '/', sv_LintabLoaderData.HMIComm.sFileName), KFILE_Mode_ReadOnly);

IF FileOpenData.Status <> KFILE_Status_OK THEN
    aCmdDone(cLTBLDR_ERR_FILENOTFOUND);
    STOP_PROCESS_ALGORITHM();
    RETURN; 
END_IF;

REPEAT
      // read character   
      i := KFILE_Read(FileOpenData.Token, 1, sChar);
      
      // new line detected         
      IF (sChar = '$R') OR (sChar = '$L') THEN 
          iColumn := 0; 
          bConvert := TRUE; 
      END_IF; 

      // new column detected         
      IF (sChar = ';') THEN 
          iColumn := 1; 
          bConvert := TRUE;       
      END_IF;

      // no more characters left        
      IF (i = 0) THEN 
          iColumn := iColumn + 1; 
          bConvert := TRUE; 
      END_IF; 

      IF bConvert THEN
             // try to convert linedata to lintabdata if there were no invalid chars in line and length > 0 
             IF (NOT bNoData) AND (LEN(sColumn) > 0) THEN
                  IF ((iColumn MOD 2) = 1) THEN
                     tmpPoint.rX := STRING_TO_REAL(sColumn);
                  ELSE 
                     tmpPoint.rY := STRING_TO_REAL(sColumn);                      

                     // check array limits
                     IF iLine >= iMaxPoints THEN
                            tmpLintab.LintabPoints.uNoOfPoints := DINT_TO_UDINT(iLine);
                            sv_LintabLoaderData.pLintab^ := tmpLintab;
                            sv_LintabLoaderData.HMIComm.sActFileName := sv_LintabLoaderData.HMIComm.sFileName;
                            Status := KFILE_Close(FileOpenData.Token);                         
                            aCmdDone(cLTBLDR_ERR_OUTOFBOUND);
                            STOP_PROCESS_ALGORITHM();
                            RETURN; 
                     END_IF;
                      
                     iLine := iLine + 1;                     
                     tmpLintab.LintabPoints.Point[iLine] := tmpPoint;
                  END_IF;
             END_IF; 
             IF (iColumn MOD 2) = 0 THEN // if x value invalid, do not try to convert y; so only reset bNoData if y value reached
                 bNoData := FALSE;              
             END_IF;
             sColumn := '';         
             bConvert := FALSE; 
      END_IF; 
      IF i = 1 THEN
         AsciiChar:=STRING_TO_ASCII(sChar);          
         IF (NOT bNoData) AND (AsciiChar > 16#20) AND (sChar <> ';') THEN // ignore control chars (ascii code 0x20 and lower), ignore if there where invalid chars previously, ignore column seperator
                 IF ((AsciiChar >= 16#30) AND (AsciiChar < 16#40)) // digit
                     OR (sChar = '.') OR (sChar = '-') OR (sChar = '+') THEN
                   sColumn := CONCAT(sColumn, sChar);                               
                 ELSE
                   bNoData := TRUE; // invalid char detected
                 END_IF;
         END_IF;
      END_IF;
UNTIL i = 0
END_REPEAT; 

Status := KFILE_Close(FileOpenData.Token);

IF sv_TraceLevel.bApplication THEN
   tl := LINT_TO_DINT(TIME_TO_LINT((GET_RUNTIME() - t)/1000));
   dummy := Print ('LOAD done %s; time: %d ms', sv_LintabLoaderData.sName, tl);
END_IF;

tmpLintab.LintabPoints.uNoOfPoints := DINT_TO_UDINT(iLine);
sv_LintabLoaderData.pLintab^ := tmpLintab;
sv_LintabLoaderData.HMIComm.sActFileName := sv_LintabLoaderData.HMIComm.sFileName;
aCmdDone(0);
STOP_PROCESS_ALGORITHM();

//debug
(*FOR i:=1 TO iLine DO
    tmpPoint := tmpLintab.LintabPoints.Point[i];
    testSX := REAL_TO_FORMATTED_STRING(tmpPoint.rX, 10, 5);
    testSY := REAL_TO_FORMATTED_STRING(tmpPoint.rY,10, 5);    
    testS := CONCAT(testSX, ';', testSY);
    dummy:=Print("%s", testS);
END_FOR;
*)


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paListFiles ON TaskVis


VAR
 dummy : DINT;
 sFile : STRING(255);
 i : DINT;
 t : TIME;
 tl : DINT;
 iLenRootPath : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TraceLevel.bApplication THEN
   dummy := Print ('LIST %s', sv_LintabLoaderData.sName);
   t := GET_RUNTIME();
END_IF;
 
i := 0; 
Status := KFILE_GetFirst(CONCAT(absoluteLTBPath, '/', sv_LintabLoaderData.sName), sFile);
iLenRootPath := LEN(CONCAT(absoluteLTBPath, '/', sv_LintabLoaderData.sName, '/'));

WHILE (Status = KFILE_Status_OK) DO
    i := i + 1; 
    IF i > cLTBLDR_MAXFILES THEN
               
        IF sv_TraceLevel.bApplication THEN
           tl := LINT_TO_DINT(TIME_TO_LINT((GET_RUNTIME() - t)/1000));
           dummy := Print ('LIST Done %s; time: %d ms', sv_LintabLoaderData.sName, tl);
        END_IF;
        
        sv_LintabLoaderData.HMIComm.FileList.iFileCount := cLTBLDR_MAXFILES; 
        aCmdDone(cLTBLDR_ERR_MAXFILESREACHED);
        STOP_PROCESS_ALGORITHM();
        RETURN; 
    END_IF;
    sv_LintabLoaderData.HMIComm.FileList.yFile[i] := RIGHT(sFile, LEN(sFile) - iLenRootPath); 
    Status := KFILE_GetNext(sFile, sFile);
END_WHILE;

IF sv_TraceLevel.bApplication THEN
   tl := LINT_TO_DINT(TIME_TO_LINT((GET_RUNTIME() - t)/1000));
   dummy := Print ('LIST Done %s; time: %d ms', sv_LintabLoaderData.sName, tl);
END_IF;

sv_LintabLoaderData.HMIComm.FileList.iFileCount := i; 
aCmdDone(0);
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paInit ON TaskVis AUTOSTART


VAR
 Status_CAT : KCAT_Status;
 StatusName_CAT : KCAT_HandleData;
 sRootPath : STRING(255);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

StatusName_CAT := KCAT_GetHandle('System.workPath');
IF StatusName_CAT.Status = KCAT_Status_OK THEN
    Status_CAT := KCAT_GetValue(Handle := StatusName_CAT.Handle, Buffer := sRootPath);
END_IF;

absoluteLTBPath := CONCAT(sRootPath,cLTBLDR_ROOTPATH);
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 103 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

lintab loader 

@FunctionID: CR_0030048

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
9 
@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)KFILE_Open @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)KFILE_Read @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)KFILE_Close @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)STRING_TO_ASCII @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KFILE_GetFirst @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KFILE_GetNext @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_GetHandle @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)KCAT_GetValue @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
11 
@Var @RT(14)CMD_LINTABLOAD @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)CMD_LINTABLISTFILES @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)cLTBLDR_ERR_UNKNOWNCMD @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)KFILE_Mode_ReadOnly @RT(0) @T @T @DERIVED 0 @F @RT(10)KFILE_Mode @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(22)opens for reading only 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)KFILE_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(12)KFILE_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(18)command successful 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(24)cLTBLDR_ERR_FILENOTFOUND @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(12)16#0002_0001 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)cLTBLDR_ERR_OUTOFBOUND @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(12)16#0002_0002 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cLTBLDR_MAXFILES @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)20 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(27)cLTBLDR_ERR_MAXFILESREACHED @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(12)16#0001_0001 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_Status_OK @RT(0) @T @T @DERIVED 0 @F @RT(11)KCAT_Status @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)cLTBLDR_ROOTPATH @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(25)'/workspace/data/lintab/' @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(14)ABLintabLoader @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(19)sv_LintabLoaderData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tsLintabLoaderData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskVis @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)mbCmdActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KFILE_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)absoluteLTBPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @F @RT(12)tsTraceLevel @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

5 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(10)pRunHMICmd @STRUCTURED_TEXT 
@RT(0) @RT(36)sv_LintabLoaderData.HMIComm.iCmdCtrl @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(8)aCmdDone @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)iRetCode @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)iTmp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paLoad @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
18 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)tl @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iLine @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)FileOpenData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KFILE_Open_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)sColumn @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sChar @RT(0) @T @F @DT @RT(9)STRING(1) @RT(0) @T @T @STRING 0 @F @RT(1)1 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)bConvert @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)iColumn @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)tmpPoint @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)KCTRL_Lintab_Point @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)tmpLintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(41)do not make VAR_TEMP, workaround CR_36866 @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)iMaxPoints @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bNoData @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)AsciiChar @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)testSX @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)testSY @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)testS @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(11)paListFiles @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sFile @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)tl @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)iLenRootPath @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(6)paInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskVis @T @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(10)Status_CAT @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)StatusName_CAT @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)sRootPath @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(24)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF ((sv_LintabLoaderData.HMIComm.iCmdCtrl MOD 2) = 1) THEN // start command req.
    IF mbCmdActive THEN
        RETURN;     
    END_IF;
    
    CASE sv_LintabLoaderData.HMIComm.iCmdSel OF
        CMD_LINTABLOAD: 
            mbCmdActive := TRUE; 
            START_PROCESS_ALGORITHM(paLoad);

        CMD_LINTABLISTFILES:
            mbCmdActive := TRUE;                                     
            START_PROCESS_ALGORITHM(paListFiles);
    ELSE
        sv_LintabLoaderData.HMIComm.iCmdRet := cLTBLDR_ERR_UNKNOWNCMD;            
        sv_LintabLoaderData.HMIComm.iCmdCtrl := sv_LintabLoaderData.HMIComm.iCmdCtrl + 1;
    END_CASE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iTmp := sv_LintabLoaderData.HMIComm.iCmdCtrl;
iTmp := iTmp + (iTmp MOD 2); 
sv_LintabLoaderData.HMIComm.iCmdCtrl := iTmp;  // i MOD 2 = 0 
sv_LintabLoaderData.HMIComm.iCmdRet := iRetCode;
mbCmdActive := FALSE; 


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(112)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TraceLevel.bApplication THEN
   dummy := Print ('LOAD %s', sv_LintabLoaderData.sName);
   t := GET_RUNTIME();
END_IF;
 
iLine := 0; 
iColumn := 0; 
sColumn := ''; 
bConvert := FALSE;
iMaxPoints := GET_HIGH_BOUND(tmpLintab.LintabPoints.Point);

FileOpenData := KFILE_Open(CONCAT(absoluteLTBPath, '/', sv_LintabLoaderData.sName, '/', sv_LintabLoaderData.HMIComm.sFileName), KFILE_Mode_ReadOnly);

IF FileOpenData.Status <> KFILE_Status_OK THEN
    aCmdDone(cLTBLDR_ERR_FILENOTFOUND);
    STOP_PROCESS_ALGORITHM();
    RETURN; 
END_IF;

REPEAT
      // read character   
      i := KFILE_Read(FileOpenData.Token, 1, sChar);
      
      // new line detected         
      IF (sChar = '$R') OR (sChar = '$L') THEN 
          iColumn := 0; 
          bConvert := TRUE; 
      END_IF; 

      // new column detected         
      IF (sChar = ';') THEN 
          iColumn := 1; 
          bConvert := TRUE;       
      END_IF;

      // no more characters left        
      IF (i = 0) THEN 
          iColumn := iColumn + 1; 
          bConvert := TRUE; 
      END_IF; 

      IF bConvert THEN
             // try to convert linedata to lintabdata if there were no invalid chars in line and length > 0 
             IF (NOT bNoData) AND (LEN(sColumn) > 0) THEN
                  IF ((iColumn MOD 2) = 1) THEN
                     tmpPoint.rX := STRING_TO_REAL(sColumn);
                  ELSE 
                     tmpPoint.rY := STRING_TO_REAL(sColumn);                      

                     // check array limits
                     IF iLine >= iMaxPoints THEN
                            tmpLintab.LintabPoints.uNoOfPoints := DINT_TO_UDINT(iLine);
                            sv_LintabLoaderData.pLintab^ := tmpLintab;
                            sv_LintabLoaderData.HMIComm.sActFileName := sv_LintabLoaderData.HMIComm.sFileName;
                            Status := KFILE_Close(FileOpenData.Token);                         
                            aCmdDone(cLTBLDR_ERR_OUTOFBOUND);
                            STOP_PROCESS_ALGORITHM();
                            RETURN; 
                     END_IF;
                      
                     iLine := iLine + 1;                     
                     tmpLintab.LintabPoints.Point[iLine] := tmpPoint;
                  END_IF;
             END_IF; 
             IF (iColumn MOD 2) = 0 THEN // if x value invalid, do not try to convert y; so only reset bNoData if y value reached
                 bNoData := FALSE;              
             END_IF;
             sColumn := '';         
             bConvert := FALSE; 
      END_IF; 
      IF i = 1 THEN
         AsciiChar:=STRING_TO_ASCII(sChar);          
         IF (NOT bNoData) AND (AsciiChar > 16#20) AND (sChar <> ';') THEN // ignore control chars (ascii code 0x20 and lower), ignore if there where invalid chars previously, ignore column seperator
                 IF ((AsciiChar >= 16#30) AND (AsciiChar < 16#40)) // digit
                     OR (sChar = '.') OR (sChar = '-') OR (sChar = '+') THEN
                   sColumn := CONCAT(sColumn, sChar);                               
                 ELSE
                   bNoData := TRUE; // invalid char detected
                 END_IF;
         END_IF;
      END_IF;
UNTIL i = 0
END_REPEAT; 

Status := KFILE_Close(FileOpenData.Token);

IF sv_TraceLevel.bApplication THEN
   tl := LINT_TO_DINT(TIME_TO_LINT((GET_RUNTIME() - t)/1000));
   dummy := Print ('LOAD done %s; time: %d ms', sv_LintabLoaderData.sName, tl);
END_IF;

tmpLintab.LintabPoints.uNoOfPoints := DINT_TO_UDINT(iLine);
sv_LintabLoaderData.pLintab^ := tmpLintab;
sv_LintabLoaderData.HMIComm.sActFileName := sv_LintabLoaderData.HMIComm.sFileName;
aCmdDone(0);
STOP_PROCESS_ALGORITHM();

//debug
(*FOR i:=1 TO iLine DO
    tmpPoint := tmpLintab.LintabPoints.Point[i];
    testSX := REAL_TO_FORMATTED_STRING(tmpPoint.rX, 10, 5);
    testSY := REAL_TO_FORMATTED_STRING(tmpPoint.rY,10, 5);    
    testS := CONCAT(testSX, ';', testSY);
    dummy:=Print("%s", testS);
END_FOR;
*)

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(41)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TraceLevel.bApplication THEN
   dummy := Print ('LIST %s', sv_LintabLoaderData.sName);
   t := GET_RUNTIME();
END_IF;
 
i := 0; 
Status := KFILE_GetFirst(CONCAT(absoluteLTBPath, '/', sv_LintabLoaderData.sName), sFile);
iLenRootPath := LEN(CONCAT(absoluteLTBPath, '/', sv_LintabLoaderData.sName, '/'));

WHILE (Status = KFILE_Status_OK) DO
    i := i + 1; 
    IF i > cLTBLDR_MAXFILES THEN
               
        IF sv_TraceLevel.bApplication THEN
           tl := LINT_TO_DINT(TIME_TO_LINT((GET_RUNTIME() - t)/1000));
           dummy := Print ('LIST Done %s; time: %d ms', sv_LintabLoaderData.sName, tl);
        END_IF;
        
        sv_LintabLoaderData.HMIComm.FileList.iFileCount := cLTBLDR_MAXFILES; 
        aCmdDone(cLTBLDR_ERR_MAXFILESREACHED);
        STOP_PROCESS_ALGORITHM();
        RETURN; 
    END_IF;
    sv_LintabLoaderData.HMIComm.FileList.yFile[i] := RIGHT(sFile, LEN(sFile) - iLenRootPath); 
    Status := KFILE_GetNext(sFile, sFile);
END_WHILE;

IF sv_TraceLevel.bApplication THEN
   tl := LINT_TO_DINT(TIME_TO_LINT((GET_RUNTIME() - t)/1000));
   dummy := Print ('LIST Done %s; time: %d ms', sv_LintabLoaderData.sName, tl);
END_IF;

sv_LintabLoaderData.HMIComm.FileList.iFileCount := i; 
aCmdDone(0);
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

StatusName_CAT := KCAT_GetHandle('System.workPath');
IF StatusName_CAT.Status = KCAT_Status_OK THEN
    Status_CAT := KCAT_GetValue(Handle := StatusName_CAT.Handle, Buffer := sRootPath);
END_IF;

absoluteLTBPath := CONCAT(sRootPath,cLTBLDR_ROOTPATH);
STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
