(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB saves executed movements a list (sv_MovementHistory).
Only movements in HA or FA are saved in this list.
If operation mode changes to manual or setup or if the shotcounter is increased the list is resetted. 
*)

IMPORT_OVER_LISTFILE
 cMoveNone
, cMinMoveIdent
, tsMovementHistory
, tnOperationMode
, tsMoveCtrl

END_IMPORT

ALGORITHM_BLOCK ABMovementHistory #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_MovementHistory : tsMovementHistory;
 sv_iShotCounterAct : DINT;
 sv_OperationMode : tnOperationMode;
 sv_bStepBwdActive : BOOL (* TRUE: stepping bwd is active *);
END_VAR

SYSTEM_OBJECT
 PU_Task_3 : TASK;
 PU_Task_7 : TASK;
END_OBJECT

VAR_EXTERNAL
 g_MoveCtrl : tsMoveCtrl;
END_VAR

ALGORITHM aResetList


VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

FOR i := 1 TO sv_MovementHistory.iActCount DO
   sv_MovementHistory.Data[i].MoveDir := cMoveNone;
   sv_MovementHistory.Data[i].MoveId := cMinMoveIdent;
   sv_MovementHistory.Data[i].iCount := 0;
END_FOR;

sv_MovementHistory.iActCount := 0;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aAddMovement


VAR_INPUT
 MoveId : DINT;
 MoveDir : DINT;
 iCount : DINT;
END_VAR

VAR
 bEqual : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_MovementHistory.iActCount < cMovementHistoryLength) THEN
   
   //only add if it is different from the last entry
   IF sv_MovementHistory.iActCount > 0 THEN
      bEqual := (sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveDir = MoveDir) AND
             (sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveId = MoveId) AND
             (sv_MovementHistory.Data[sv_MovementHistory.iActCount].iCount = iCount);
   ELSE
      bEqual := FALSE;
   END_IF;
      
   IF NOT bEqual THEN
      sv_MovementHistory.iActCount := sv_MovementHistory.iActCount + 1;
      sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveDir := MoveDir;
      sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveId := MoveId;
      sv_MovementHistory.Data[sv_MovementHistory.iActCount].iCount := iCount;
   END_IF;
      
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aRemoveMovement

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_MovementHistory.iActCount > 0 THEN
   sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveDir := cMoveNone;
   sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveId := cMinMoveIdent;
   sv_MovementHistory.Data[sv_MovementHistory.iActCount].iCount := 0;
   sv_MovementHistory.iActCount := (sv_MovementHistory.iActCount - 1);
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pShotCounter ON PU_Task_3 WITH sv_iShotCounterAct

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aResetList();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pOpMode ON PU_Task_7 WITH sv_OperationMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode < nHalfAutomatic THEN
   aResetList();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aUpdate

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//only add movements which finish successfully (without bStop) in HA an FA mode
IF (sv_OperationMode >= nHalfAutomatic) THEN //AND (NOT g_MoveCtrl.bStop) THEN
   IF sv_bStepBwdActive AND (NOT g_MoveCtrl.bStop) THEN
      aRemoveMovement();
   ELSIF NOT sv_bStepBwdActive THEN
      aAddMovement(MoveId := g_MoveCtrl.pData^.MoveId,
                   MoveDir := g_MoveCtrl.pData^.MoveDir,
                   iCount :=  g_MoveCtrl.iCount);
   END_IF;   
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 138 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB saves executed movements a list (sv_MovementHistory).
Only movements in HA or FA are saved in this list.
If operation mode changes to manual or setup or if the shotcounter is increased the list is resetted. 
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(9)cMoveNone @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(13)cMinMoveIdent @RT(4)None 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cMinMoveIdent @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(32)lower limit for MoveId / MoveDir 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(17)ABMovementHistory @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
7 
@Var @RT(18)sv_MovementHistory @RT(0) @T @T @DERIVED 0 @F @RT(17)tsMovementHistory @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)sv_iShotCounterAct @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)g_MoveCtrl @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsMoveCtrl @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 6 @F @F @F @F 

@Var @RT(17)sv_bStepBwdActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(28)TRUE: stepping bwd is active @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(10)aResetList @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aAddMovement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(6)MoveId @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)MoveDir @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)iCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bEqual @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(15)aRemoveMovement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(12)pShotCounter @STRUCTURED_TEXT 
@RT(0) @RT(18)sv_iShotCounterAct @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(7)pOpMode @STRUCTURED_TEXT 
@RT(0) @RT(16)sv_OperationMode @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(7)aUpdate @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

FOR i := 1 TO sv_MovementHistory.iActCount DO
   sv_MovementHistory.Data[i].MoveDir := cMoveNone;
   sv_MovementHistory.Data[i].MoveId := cMinMoveIdent;
   sv_MovementHistory.Data[i].iCount := 0;
END_FOR;

sv_MovementHistory.iActCount := 0;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(25)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_MovementHistory.iActCount < cMovementHistoryLength) THEN
   
   //only add if it is different from the last entry
   IF sv_MovementHistory.iActCount > 0 THEN
      bEqual := (sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveDir = MoveDir) AND
             (sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveId = MoveId) AND
             (sv_MovementHistory.Data[sv_MovementHistory.iActCount].iCount = iCount);
   ELSE
      bEqual := FALSE;
   END_IF;
      
   IF NOT bEqual THEN
      sv_MovementHistory.iActCount := sv_MovementHistory.iActCount + 1;
      sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveDir := MoveDir;
      sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveId := MoveId;
      sv_MovementHistory.Data[sv_MovementHistory.iActCount].iCount := iCount;
   END_IF;
      
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_MovementHistory.iActCount > 0 THEN
   sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveDir := cMoveNone;
   sv_MovementHistory.Data[sv_MovementHistory.iActCount].MoveId := cMinMoveIdent;
   sv_MovementHistory.Data[sv_MovementHistory.iActCount].iCount := 0;
   sv_MovementHistory.iActCount := (sv_MovementHistory.iActCount - 1);
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aResetList();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode < nHalfAutomatic THEN
   aResetList();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//only add movements which finish successfully (without bStop) in HA an FA mode
IF (sv_OperationMode >= nHalfAutomatic) THEN //AND (NOT g_MoveCtrl.bStop) THEN
   IF sv_bStepBwdActive AND (NOT g_MoveCtrl.bStop) THEN
      aRemoveMovement();
   ELSIF NOT sv_bStepBwdActive THEN
      aAddMovement(MoveId := g_MoveCtrl.pData^.MoveId,
                   MoveDir := g_MoveCtrl.pData^.MoveDir,
                   iCount :=  g_MoveCtrl.iCount);
   END_IF;   
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
