IMPORT_OVER_LISTFILE
 tyStringBuffer

END_IMPORT

ALGORITHM_BLOCK ABFiFoString #DUMMY_EDIT_BLOCK

VAR
 myFiFo : tyStringBuffer;
 miFiFoCount : DINT := 0;
 miFiFoWriteIndex : DINT := 0;
 miFiFoReadIndex : DINT := 0;
 mbEmpty : BOOL := TRUE;
 mbFull : BOOL := FALSE;
END_VAR

ALGORITHM aWrite


VAR_INPUT
 sValue : STRING(255);
END_VAR

VAR_TEMP
 ret : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
mbEmpty := FALSE;
IF (mbFull) THEN
   ret := Print('*** [ERROR] fifo overflow ***');

ELSE
   miFiFoCount := miFiFoCount + 1;
   miFiFoWriteIndex := miFiFoWriteIndex + 1;
   IF (miFiFoWriteIndex > GET_HIGH_BOUND(myFiFo)) THEN
      miFiFoWriteIndex := GET_LOW_BOUND(myFiFo);
   
   END_IF;
   myFiFo[miFiFoWriteIndex] := sValue;
   mbFull := (miFiFoCount = GET_HIGH_BOUND(myFiFo));
              
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

FUNCTION fRead : STRING(255)
 #DUMMY_EDIT_BLOCK

VAR
 ret : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
mbFull := FALSE;
IF (mbEmpty) THEN
   fRead := 'EMPTY';
   ret := Print('*** [ERROR] fifo underflow ***');

ELSE
   miFiFoCount := miFiFoCount - 1;
   miFiFoReadIndex := miFiFoReadIndex + 1;
   IF miFiFoReadIndex > GET_HIGH_BOUND(myFiFo) THEN
      miFiFoReadIndex := GET_LOW_BOUND(myFiFo);

   END_IF;
   fRead := myFiFo[miFiFoReadIndex];
   myFiFo[miFiFoReadIndex] := '';
   mbEmpty := (miFiFoCount = 0);

END_IF;


;#END_EDIT_BLOCK END_FUNCTION

ALGORITHM aReset


VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
mbEmpty := TRUE;
mbFull := FALSE;

miFiFoCount := 0;
miFiFoWriteIndex := 0;
miFiFoReadIndex := 0;

FOR i := GET_LOW_BOUND(myFiFo) TO GET_HIGH_BOUND(myFiFo) DO
   myFiFo[i] := '';
   
END_FOR



;#END_EDIT_BLOCK END_ALGORITHM

(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional
@h    external safety devices that are intended for the particular purpose, and meet the necessary
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter
@h    "CE conformity, directives and standards".

This algorithm block represents a stack for string values.
*)

FUNCTION fGetCount : DINT
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
fGetCount := miFiFoCount;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fIsEmpty : BOOL
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
fIsEmpty := mbEmpty;


;#END_EDIT_BLOCK END_FUNCTION

FUNCTION fIsFull : BOOL
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
fIsFull := mbFull;


;#END_EDIT_BLOCK END_FUNCTION



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 103 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(12)ABFiFoString @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(6)myFiFo @RT(0) @T @T @DERIVED 0 @F @RT(14)tyStringBuffer @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)miFiFoCount @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)miFiFoWriteIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)miFiFoReadIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)mbEmpty @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mbFull @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aWrite @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(6)sValue @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(3)ret @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(5)fRead @STRUCTURED_TEXT 
@RT(11)STRING(255) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(3)ret @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aReset @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(9)fGetCount @STRUCTURED_TEXT 
@RT(4)DINT @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(8)fIsEmpty @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(7)fIsFull @STRUCTURED_TEXT 
@RT(4)BOOL @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(16)
mbEmpty := FALSE;
IF (mbFull) THEN
   ret := Print('*** [ERROR] fifo overflow ***');

ELSE
   miFiFoCount := miFiFoCount + 1;
   miFiFoWriteIndex := miFiFoWriteIndex + 1;
   IF (miFiFoWriteIndex > GET_HIGH_BOUND(myFiFo)) THEN
      miFiFoWriteIndex := GET_LOW_BOUND(myFiFo);
   
   END_IF;
   myFiFo[miFiFoWriteIndex] := sValue;
   mbFull := (miFiFoCount = GET_HIGH_BOUND(myFiFo));
              
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
mbFull := FALSE;
IF (mbEmpty) THEN
   fRead := 'EMPTY';
   ret := Print('*** [ERROR] fifo underflow ***');

ELSE
   miFiFoCount := miFiFoCount - 1;
   miFiFoReadIndex := miFiFoReadIndex + 1;
   IF miFiFoReadIndex > GET_HIGH_BOUND(myFiFo) THEN
      miFiFoReadIndex := GET_LOW_BOUND(myFiFo);

   END_IF;
   fRead := myFiFo[miFiFoReadIndex];
   myFiFo[miFiFoReadIndex] := '';
   mbEmpty := (miFiFoCount = 0);

END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
mbEmpty := TRUE;
mbFull := FALSE;

miFiFoCount := 0;
miFiFoWriteIndex := 0;
miFiFoReadIndex := 0;

FOR i := GET_LOW_BOUND(myFiFo) TO GET_HIGH_BOUND(myFiFo) DO
   myFiFo[i] := '';
   
END_FOR


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(2)
fGetCount := miFiFoCount;

@END_Body 

@@@BEG_Comment@@@ 
@TL(11)
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional
@h    external safety devices that are intended for the particular purpose, and meet the necessary
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter
@h    "CE conformity, directives and standards".

This algorithm block represents a stack for string values.
@@@END_Comment@@@ 

@BEG_Body 
@TL(2)
fIsEmpty := mbEmpty;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(2)
fIsFull := mbFull;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
