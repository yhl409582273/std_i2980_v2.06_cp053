(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Algorithm block for calculation of the hydraulic maximum values (flow and pressure) depending
on the required pumps in the following way:
+ maximum flow = sum of the absolute flows of all required pumps
+ maximum pressure:
By default the lowest max. pressure of all required pumps is taken.
If the aInit algorithm is called with input parameter "bUseMaxPressure" = TRUE, the highest max. pressure
of the required pumps is taken as hydraulic maximum value.

The max values are updated automatically after the pump assignment is changed or
if the absolute flow / maximum pressure of a pump changes.
*)

IMPORT_OVER_LISTFILE
 GET_SYNC_REFTO
, cCompPump
, tsRequiredPumps
, tsHydrMaxValues
, tyPumpData
, tyNumberOfDevices
, FBDebugTrace

END_IMPORT

ALGORITHM_BLOCK ABCalcHydrMaxValues #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_PumpData : tyPumpData;
 sv_iPumpFlowChanged : DINT (* must be increased by every pump if sv_rAbsFlow is changed *);
 sv_iPumpPressureChanged : DINT (* must be increased by every pump if sv_rMaxPressure is changed *);
 sv_NumberOfDevices : tyNumberOfDevices;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
END_OBJECT

VAR
 mpRequiredPumps : REFTO tsRequiredPumps;
 mpHydrMaxValues : REFTO tsHydrMaxValues;
 mbInitDone : BOOL;
 mbUseMaxPressure : BOOL;
END_VAR

ALGORITHM aCalcAbsFlow


VAR_TEMP
 i : DINT;
END_VAR

VAR
 rTmpFlow : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

rTmpFlow := 0.0;
FOR i := 1 TO sv_NumberOfDevices[cCompPump] DO
   IF mpRequiredPumps^.RequiredPumps[i] THEN
      rTmpFlow := rTmpFlow + sv_PumpData[i].prAbsFlow^;
   END_IF;
END_FOR;

mpHydrMaxValues^.rAbsFlow := rTmpFlow;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCalcMaxPressure


VAR_TEMP
 i : DINT;
END_VAR

VAR
 rTmpPressure : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

rTmpPressure := 0.0;

FOR i := 1 TO sv_NumberOfDevices[cCompPump] DO
   IF mpRequiredPumps^.RequiredPumps[i] THEN
      IF rTmpPressure = 0.0 THEN
         rTmpPressure := sv_PumpData[i].prMaxPressure^;
      ELSE
         IF mbUseMaxPressure THEN
            //maximum pressure = highest max pressure value of all required pumps
            rTmpPressure := MAX(rTmpPressure, sv_PumpData[i].prMaxPressure^);
         ELSE
            //maximum pressure = lowest max pressure value of all required pumps
            rTmpPressure := MIN(rTmpPressure, sv_PumpData[i].prMaxPressure^);
         END_IF;          
      END_IF;     
   END_IF;
END_FOR;

mpHydrMaxValues^.rMaxPressure := rTmpPressure;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInit


VAR_INPUT
 pRequiredPumps : REFTO tsRequiredPumps (* refto SV with information about required pumps *);
 pHydrMaxValues : REFTO tsHydrMaxValues (* refto SV where the calculated max values should be stored *);
 bUseMaxPressure : BOOL (* TRUE: the highest maximum pressure of all required pumps is taken as hydraulic maximum value *);
END_VAR

VAR
 fbDebugTrace : FBDebugTrace;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT CHECK_REF(pRequiredPumps^) THEN
   fbDebugTrace('reference to RequiredPumps not valid');
   RETURN;
END_IF;

IF NOT CHECK_REF(pHydrMaxValues^) THEN
   fbDebugTrace('reference to hydraulic max values not valid');
   RETURN;
END_IF;

mbInitDone := TRUE;
mpRequiredPumps := pRequiredPumps;
mpHydrMaxValues := pHydrMaxValues;
mbUseMaxPressure := bUseMaxPressure;

aCalcAbsFlow();
aCalcMaxPressure();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pPumpAssignment ON PU_Task_7 WITH mpRequiredPumps^.RequiredPumps

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aCalcAbsFlow();
aCalcMaxPressure();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pPumpFlowChanged ON PU_Task_7 WITH sv_iPumpFlowChanged

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbInitDone THEN
   //pump flow has changed -> recalc 
   aCalcAbsFlow();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pPumpPressureChanged ON PU_Task_7 WITH sv_iPumpPressureChanged

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbInitDone THEN
   //pump pressure has changed -> recalc 
   aCalcMaxPressure();
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 144 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Algorithm block for calculation of the hydraulic maximum values (flow and pressure) depending
on the required pumps in the following way:
+ maximum flow = sum of the absolute flows of all required pumps
+ maximum pressure:
By default the lowest max. pressure of all required pumps is taken.
If the aInit algorithm is called with input parameter "bUseMaxPressure" = TRUE, the highest max. pressure
of the required pumps is taken as hydraulic maximum value.

The max values are updated automatically after the pump assignment is changed or
if the absolute flow / maximum pressure of a pump changes.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(9)cCompPump @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(3)113 @RT(14)Component Pump 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(19)ABCalcHydrMaxValues @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(15)mpRequiredPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mpHydrMaxValues @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsHydrMaxValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_PumpData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tyPumpData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_iPumpFlowChanged @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)must be increased by every pump if sv_rAbsFlow is changed @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_iPumpPressureChanged @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(61)must be increased by every pump if sv_rMaxPressure is changed @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(10)mbInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)sv_NumberOfDevices @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(17)tyNumberOfDevices @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)mbUseMaxPressure @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

6 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aCalcAbsFlow @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(8)rTmpFlow @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aCalcMaxPressure @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(12)rTmpPressure @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(14)pRequiredPumps @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(15)tsRequiredPumps @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)refto SV with information about required pumps @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)pHydrMaxValues @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @F @RT(15)tsHydrMaxValues @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)refto SV where the calculated max values should be stored @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)bUseMaxPressure @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(92)TRUE: the highest maximum pressure of all required pumps is taken as hydraulic maximum value @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pPumpAssignment @STRUCTURED_TEXT 
@RT(0) @RT(30)mpRequiredPumps^.RequiredPumps @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pPumpFlowChanged @STRUCTURED_TEXT 
@RT(0) @RT(19)sv_iPumpFlowChanged @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pPumpPressureChanged @STRUCTURED_TEXT 
@RT(0) @RT(23)sv_iPumpPressureChanged @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

rTmpFlow := 0.0;
FOR i := 1 TO sv_NumberOfDevices[cCompPump] DO
   IF mpRequiredPumps^.RequiredPumps[i] THEN
      rTmpFlow := rTmpFlow + sv_PumpData[i].prAbsFlow^;
   END_IF;
END_FOR;

mpHydrMaxValues^.rAbsFlow := rTmpFlow;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(25)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

rTmpPressure := 0.0;

FOR i := 1 TO sv_NumberOfDevices[cCompPump] DO
   IF mpRequiredPumps^.RequiredPumps[i] THEN
      IF rTmpPressure = 0.0 THEN
         rTmpPressure := sv_PumpData[i].prMaxPressure^;
      ELSE
         IF mbUseMaxPressure THEN
            //maximum pressure = highest max pressure value of all required pumps
            rTmpPressure := MAX(rTmpPressure, sv_PumpData[i].prMaxPressure^);
         ELSE
            //maximum pressure = lowest max pressure value of all required pumps
            rTmpPressure := MIN(rTmpPressure, sv_PumpData[i].prMaxPressure^);
         END_IF;          
      END_IF;     
   END_IF;
END_FOR;

mpHydrMaxValues^.rMaxPressure := rTmpPressure;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(25)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT CHECK_REF(pRequiredPumps^) THEN
   fbDebugTrace('reference to RequiredPumps not valid');
   RETURN;
END_IF;

IF NOT CHECK_REF(pHydrMaxValues^) THEN
   fbDebugTrace('reference to hydraulic max values not valid');
   RETURN;
END_IF;

mbInitDone := TRUE;
mpRequiredPumps := pRequiredPumps;
mpHydrMaxValues := pHydrMaxValues;
mbUseMaxPressure := bUseMaxPressure;

aCalcAbsFlow();
aCalcMaxPressure();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aCalcAbsFlow();
aCalcMaxPressure();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbInitDone THEN
   //pump flow has changed -> recalc 
   aCalcAbsFlow();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF mbInitDone THEN
   //pump pressure has changed -> recalc 
   aCalcMaxPressure();
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
