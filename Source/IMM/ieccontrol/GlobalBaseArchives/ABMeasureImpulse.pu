IMPORT_OVER_LISTFILE
 KCAT_GetHandleFromEPName
, KCAT_GetName
, SET_ALARM
, GET_SYNC_REFTO
, GET_TASK_INTERVAL
, KCAT_Status_NOTOK
, KCAT_Status_OK
, KSYS_Status_OK
, cApplPlasticsImpulseWrongParams
, cApplPlasticsNoError
, MeasureVI_State_OK
, KCTRL_Ret_OK
, cApplPlasticsImpulseCalcFailed
, tsDeviceId
, KCTRL_Impulse_Param
, KCTRL_Impulse
, KHW_Vel_Data
, ABMeasureVI
, KCAT_HandleData
, KCAT_NameData
, KSYS_Status
, KCTRL_Ret
//  tnMeasureVIState
, tnMeasureVIState
, tyImpulseArray
, R_TRIG

END_IMPORT

ALGORITHM_BLOCK ABMeasureImpulse #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 erInvalidEndpointReference : ALARM;
END_OBJECT

VAR
 mpbImpulseInput : REFTO BOOL (* reference to the impulse input *);
 mpImpulseParamRef : REFTO KCTRL_Impulse_Param;
 mbReParam : BOOL;
 abImpulse : KCTRL_Impulse;
 mpImpulseTime : REFTO KHW_Vel_Data;
 mbVIAvailable : BOOL;
 abImpulseVI : ABMeasureVI;
 mbInitError : BOOL;
 mpImpulseFilterLimit : REFTO REAL (* filter limit used by worng mounted gains *);
 mrImpulseFilterLimit : REAL;
END_VAR

ALGORITHM aInit


VAR_INPUT
 sInputVariable : STRING(255) (* the name of the variable which will be user for counting the impulses *);
 ImpulseParam : REFTO KCTRL_Impulse_Param (* reference to input impulse parameters *);
 pImpulseFilterLimit : REFTO REAL;
END_VAR

VAR
 Handle : KCAT_HandleData;
 NameData : KCAT_NameData;
 KState : KSYS_Status;
 sEndpointName : STRING(255);
 iPos : INT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
Handle.Status := KCAT_Status_NOTOK;

iPos := FIND(sInputVariable, ".");    
IF (iPos > 0) THEN
    sEndpointName := REPLACE(sInputVariable, "v", 1, iPos + 1);
    Handle := KCAT_GetHandleFromEPName(sEndpointName);
END_IF;

IF (Handle.Status <> KCAT_Status_OK) THEN
   // VI input not available -> use DI Input
   mbVIAvailable := FALSE;                  
ELSE 
   NameData := KCAT_GetName(Handle.Handle);
   IF (NameData.Status <> KCAT_Status_OK) THEN
      mbInitError := TRUE;
      SET_ALARM(Name := erInvalidEndpointReference,
               SubID1 := sv_DeviceId.CompId,
               SubID2 := sv_DeviceId.IndexId,
               Param1 := sEndpointName);
      RETURN;
   ELSE
      IF (FIND(NameData.Name, 'VI:') <> 0) THEN
          mbVIAvailable := TRUE;
      END_IF;
   END_IF;        
END_IF;


IF mbVIAvailable THEN
        
   mpImpulseTime := GET_SYNC_REFTO(sEndpointName, T#0s,  KState);
                                 
   IF KState <> KSYS_Status_OK THEN
       mbInitError := TRUE;
       SET_ALARM(Name := erInvalidEndpointReference,
            SubID1 := sv_DeviceId.CompId,
            SubID2 := sv_DeviceId.IndexId,
            Param1 := sEndpointName);
   END_IF;
ELSE    
    
   // get reference to input variable
   mpbImpulseInput := GET_SYNC_REFTO(sInputVariable, T#0s, KState);
                                           
   IF KState <> KSYS_Status_OK THEN
       mbInitError := TRUE;
       SET_ALARM(Name := erInvalidEndpointReference,
                SubID1 := sv_DeviceId.CompId,
                SubID2 := sv_DeviceId.IndexId,
                Param1 := sInputVariable);
   END_IF;
        
END_IF;
//get reference of velocity filter time
IF CHECK_REF(pImpulseFilterLimit^) THEN
    mrImpulseFilterLimit := pImpulseFilterLimit^;
    mpImpulseFilterLimit := pImpulseFilterLimit;
ELSE
    mrImpulseFilterLimit := 0.0;
END_IF;

// save impulse param reference
mpImpulseParamRef := ImpulseParam;




;#END_EDIT_BLOCK END_ALGORITHM

(*
This algo calculates a rounds per time value,
incrementing a counter using the
KCTR_Impuls function which is feeded
with an boolean impulse from sInputVariable.                                            

If no or bad parameters are set the calculation will stop,
until the parameters are set to working values again.
During error status the bError flag indicates the problem 
with parameterization

Optional filtering of a measure with wrong mounted gains (not exactly parted in number of gain parts).
Without this filter, the result would be oscillate with every impulse. Set impulse filter limit
to the percentuale oscillating difference. Being in this interval the result is the mean value  
of one turn.

Return error codes:
iErrorInfo = cApplPlasticsImpulseWrongParams -> wrong parameterisation of VI Block
iErrorInfo = cApplPlasticsImpulseCalcFailed -> calculation error of VI Block

    
*)

ALGORITHM aRun


VAR_OUTPUT
 rRoundsPerTime : REAL (* velocity in rounds per mImpulseParam.rTime in seconds *);
 iRoundsCounter : UDINT (* counting the rounds *);
 bError : BOOL (* indicates that an error occured - wrong or no parameters! *);
 iErrorInfo : DINT (* indicates that type of the last error that occured: 1: cannot get reference of input variable, 2: no or wrong impuls parameters *);
END_VAR

VAR_TEMP
 iTmpCnt : DINT;
END_VAR

VAR
 parStatus : KCTRL_Ret (* parameterization status *);
 // calcStateVI : tnMeasureVIState (* calculation status *);
 // calcStatus : KCTRL_Ret (* calculation status *);
 bInitDone : BOOL;
 parStateVI : tnMeasureVIState;
 bFilter : BOOL;
 tyImpulse : tyImpulseArray;
 iCnt : DINT;
 fbREdgeImpulse : R_TRIG;
 rMeanValue : REAL;
 iGain : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*@ system.ABMeasureImpuls.aRun.Function: Calculates a rounds per time value,
    if VI-Input available (f.e. on CP03x) and in use, calculate witch AB abImpulseVI
    if DI-Input is in use, incrementing a counter using the KCTR_Impulse function which is feeded
       with an boolean impulse from sInputVariable.
    => if both are configured (DI and VI) the VI will be used
    
    if no or bad parameters are set the calculation will stop, until the parameters are set to working values again.
       During error status the bError flag indicates the problem with parameterization *)
 
IF mbInitError THEN
   // call of aInit failed -> invalid endpoint-reference
   bError := TRUE;
   iErrorInfo := cApplPlasticsImpulseWrongParams;
   RETURN;
END_IF;


IF NOT bInitDone OR mbReParam THEN
    // reset error
    bError := FALSE;
    iErrorInfo := cApplPlasticsNoError;
    IF mbVIAvailable THEN
       
        //init parameters of VI MeasureBlock
        abImpulseVI.Par(Param := mpImpulseParamRef^,
                        parState => parStateVI);
        
        IF (parStateVI <> MeasureVI_State_OK) THEN
           bError := TRUE;
           iErrorInfo := cApplPlasticsImpulseWrongParams;
        END_IF;
    ELSE        
        
        //init impulse measure block    
        abImpulse.Par(dCycleTime := GET_TASK_INTERVAL(),
                      Param := mpImpulseParamRef^,
                      parStatus => parStatus);
            
        IF parStatus <> KCTRL_Ret_OK THEN
           bError := TRUE;
           iErrorInfo := cApplPlasticsImpulseWrongParams;
        END_IF;
                
        //init block
        abImpulse.Init(uImpStart := 0);
    END_IF;
    
    // Check if filter has to be start or switch of
    IF CHECK_REF(mpImpulseFilterLimit^) THEN
       mrImpulseFilterLimit := mpImpulseFilterLimit^;
    END_IF;
    
    bFilter := FALSE; 
    IF mrImpulseFilterLimit > 0.0 AND mpImpulseParamRef^.rGain > 1.0 THEN
        bFilter := TRUE;
        iGain := REAL_TO_DINT(mpImpulseParamRef^.rGain);
        iCnt := 1;
        FOR iTmpCnt := 1 TO iGain DO
           tyImpulse[iTmpCnt] := 0.0;  //initialise filter history
        END_FOR;
        fbREdgeImpulse(CLK := FALSE);
    END_IF;
    mbReParam := FALSE;
    bInitDone := NOT bError;
END_IF;



//cyclic part
IF NOT bError THEN 
    IF (mbVIAvailable) THEN
        abImpulseVI.Calculate(VIData := mpImpulseTime^,
                              rImpV => rRoundsPerTime);
        bError := abImpulseVI.Calculate.calcState <> MeasureVI_State_OK;
        fbREdgeImpulse(CLK := mpImpulseTime^.newPeriodReady);
    ELSE
        abImpulse.Calculate(bX := mpbImpulseInput^,
                            uImp => iRoundsCounter,
                            rImpV => rRoundsPerTime);
        bError := abImpulse.Calculate.calcStatus <> KCTRL_Ret_OK;
        fbREdgeImpulse(CLK := mpbImpulseInput^);
    END_IF;
    IF bFilter THEN
       IF fbREdgeImpulse.Q THEN
          iCnt := iCnt + 1;
          IF iCnt > iGain THEN
             iCnt := 1;
          END_IF; 
          tyImpulse[iCnt] := rRoundsPerTime;
          rMeanValue := 0.0;
          FOR iTmpCnt := 1 TO iGain DO
             rMeanValue := rMeanValue + tyImpulse[iTmpCnt];
          END_FOR; 
          rMeanValue := rMeanValue / DINT_TO_REAL(iGain); 
       END_IF;  
       // Check if velocity is changing 
       IF ABS(rMeanValue - rRoundsPerTime) > mrImpulseFilterLimit * rRoundsPerTime THEN
          FOR iTmpCnt := 1 TO iGain DO
             tyImpulse[iTmpCnt] := rRoundsPerTime;
          END_FOR; 
       ELSE
          rRoundsPerTime := rMeanValue; 
       END_IF; 
    END_IF;
    IF bError THEN
        iErrorInfo := cApplPlasticsImpulseCalcFailed;
    END_IF;
END_IF;
    


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pImpulseParamteresChanged ON PU_Task_7 WITH mpImpulseParamRef^,mpImpulseFilterLimit^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbReParam := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aResetRoundsCounter

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abImpulse.Init(uImpStart := 0);


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
5 
@Var @RT(24)KCAT_GetHandleFromEPName @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KCAT_GetName @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)SET_ALARM @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)GET_SYNC_REFTO @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
8 
@Var @RT(17)KCAT_Status_NOTOK @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KCAT_Status_OK @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)KSYS_Status_OK @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(31)cApplPlasticsImpulseWrongParams @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(20)cApplPlasticsNoError @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)MeasureVI_State_OK @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KCTRL_Ret_OK @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(30)cApplPlasticsImpulseCalcFailed @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(16)ABMeasureImpulse @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(26)erInvalidEndpointReference @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)mpbImpulseInput @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)reference to the impulse input @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mpImpulseParamRef @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(19)KCTRL_Impulse_Param @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mbReParam @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)abImpulse @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCTRL_Impulse @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mpImpulseTime @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(12)KHW_Vel_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mbVIAvailable @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)abImpulseVI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)ABMeasureVI @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mbInitError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mpImpulseFilterLimit @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(40)filter limit used by worng mounted gains @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)mrImpulseFilterLimit @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

4 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(14)sInputVariable @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(69)the name of the variable which will be user for counting the impulses @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)ImpulseParam @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(19)KCTRL_Impulse_Param @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)reference to input impulse parameters @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)pImpulseFilterLimit @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)Handle @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)NameData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)KCAT_NameData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)KState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sEndpointName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(3)INT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(14)rRoundsPerTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(53)velocity in rounds per mImpulseParam.rTime in seconds @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(14)iRoundsCounter @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)counting the rounds @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(57)indicates that an error occured - wrong or no parameters! @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(127)indicates that type of the last error that occured: 1: cannot get reference of input variable, 2: no or wrong impuls parameters @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)iTmpCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(9)parStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)KCTRL_Ret @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)parameterization status @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)calcStateVI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tnMeasureVIState @RT(0) @T @T @UNKNOWN 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)calculation status @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)calcStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(9)KCTRL_Ret @RT(0) @T @T @UNKNOWN 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)calculation status @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)parStateVI @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tnMeasureVIState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bFilter @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)tyImpulse @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tyImpulseArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iCnt @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)fbREdgeImpulse @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rMeanValue @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iGain @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(25)pImpulseParamteresChanged @STRUCTURED_TEXT 
@RT(0) @RT(40)mpImpulseParamRef^,mpImpulseFilterLimit^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(19)aResetRoundsCounter @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(70)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
Handle.Status := KCAT_Status_NOTOK;

iPos := FIND(sInputVariable, ".");    
IF (iPos > 0) THEN
    sEndpointName := REPLACE(sInputVariable, "v", 1, iPos + 1);
    Handle := KCAT_GetHandleFromEPName(sEndpointName);
END_IF;

IF (Handle.Status <> KCAT_Status_OK) THEN
   // VI input not available -> use DI Input
   mbVIAvailable := FALSE;                  
ELSE 
   NameData := KCAT_GetName(Handle.Handle);
   IF (NameData.Status <> KCAT_Status_OK) THEN
      mbInitError := TRUE;
      SET_ALARM(Name := erInvalidEndpointReference,
               SubID1 := sv_DeviceId.CompId,
               SubID2 := sv_DeviceId.IndexId,
               Param1 := sEndpointName);
      RETURN;
   ELSE
      IF (FIND(NameData.Name, 'VI:') <> 0) THEN
          mbVIAvailable := TRUE;
      END_IF;
   END_IF;        
END_IF;


IF mbVIAvailable THEN
        
   mpImpulseTime := GET_SYNC_REFTO(sEndpointName, T#0s,  KState);
                                 
   IF KState <> KSYS_Status_OK THEN
       mbInitError := TRUE;
       SET_ALARM(Name := erInvalidEndpointReference,
            SubID1 := sv_DeviceId.CompId,
            SubID2 := sv_DeviceId.IndexId,
            Param1 := sEndpointName);
   END_IF;
ELSE    
    
   // get reference to input variable
   mpbImpulseInput := GET_SYNC_REFTO(sInputVariable, T#0s, KState);
                                           
   IF KState <> KSYS_Status_OK THEN
       mbInitError := TRUE;
       SET_ALARM(Name := erInvalidEndpointReference,
                SubID1 := sv_DeviceId.CompId,
                SubID2 := sv_DeviceId.IndexId,
                Param1 := sInputVariable);
   END_IF;
        
END_IF;
//get reference of velocity filter time
IF CHECK_REF(pImpulseFilterLimit^) THEN
    mrImpulseFilterLimit := pImpulseFilterLimit^;
    mpImpulseFilterLimit := pImpulseFilterLimit;
ELSE
    mrImpulseFilterLimit := 0.0;
END_IF;

// save impulse param reference
mpImpulseParamRef := ImpulseParam;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(115)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

(*@ system.ABMeasureImpuls.aRun.Function: Calculates a rounds per time value,
    if VI-Input available (f.e. on CP03x) and in use, calculate witch AB abImpulseVI
    if DI-Input is in use, incrementing a counter using the KCTR_Impulse function which is feeded
       with an boolean impulse from sInputVariable.
    => if both are configured (DI and VI) the VI will be used
    
    if no or bad parameters are set the calculation will stop, until the parameters are set to working values again.
       During error status the bError flag indicates the problem with parameterization *)
 
IF mbInitError THEN
   // call of aInit failed -> invalid endpoint-reference
   bError := TRUE;
   iErrorInfo := cApplPlasticsImpulseWrongParams;
   RETURN;
END_IF;


IF NOT bInitDone OR mbReParam THEN
    // reset error
    bError := FALSE;
    iErrorInfo := cApplPlasticsNoError;
    IF mbVIAvailable THEN
       
        //init parameters of VI MeasureBlock
        abImpulseVI.Par(Param := mpImpulseParamRef^,
                        parState => parStateVI);
        
        IF (parStateVI <> MeasureVI_State_OK) THEN
           bError := TRUE;
           iErrorInfo := cApplPlasticsImpulseWrongParams;
        END_IF;
    ELSE        
        
        //init impulse measure block    
        abImpulse.Par(dCycleTime := GET_TASK_INTERVAL(),
                      Param := mpImpulseParamRef^,
                      parStatus => parStatus);
            
        IF parStatus <> KCTRL_Ret_OK THEN
           bError := TRUE;
           iErrorInfo := cApplPlasticsImpulseWrongParams;
        END_IF;
                
        //init block
        abImpulse.Init(uImpStart := 0);
    END_IF;
    
    // Check if filter has to be start or switch of
    IF CHECK_REF(mpImpulseFilterLimit^) THEN
       mrImpulseFilterLimit := mpImpulseFilterLimit^;
    END_IF;
    
    bFilter := FALSE; 
    IF mrImpulseFilterLimit > 0.0 AND mpImpulseParamRef^.rGain > 1.0 THEN
        bFilter := TRUE;
        iGain := REAL_TO_DINT(mpImpulseParamRef^.rGain);
        iCnt := 1;
        FOR iTmpCnt := 1 TO iGain DO
           tyImpulse[iTmpCnt] := 0.0;  //initialise filter history
        END_FOR;
        fbREdgeImpulse(CLK := FALSE);
    END_IF;
    mbReParam := FALSE;
    bInitDone := NOT bError;
END_IF;



//cyclic part
IF NOT bError THEN 
    IF (mbVIAvailable) THEN
        abImpulseVI.Calculate(VIData := mpImpulseTime^,
                              rImpV => rRoundsPerTime);
        bError := abImpulseVI.Calculate.calcState <> MeasureVI_State_OK;
        fbREdgeImpulse(CLK := mpImpulseTime^.newPeriodReady);
    ELSE
        abImpulse.Calculate(bX := mpbImpulseInput^,
                            uImp => iRoundsCounter,
                            rImpV => rRoundsPerTime);
        bError := abImpulse.Calculate.calcStatus <> KCTRL_Ret_OK;
        fbREdgeImpulse(CLK := mpbImpulseInput^);
    END_IF;
    IF bFilter THEN
       IF fbREdgeImpulse.Q THEN
          iCnt := iCnt + 1;
          IF iCnt > iGain THEN
             iCnt := 1;
          END_IF; 
          tyImpulse[iCnt] := rRoundsPerTime;
          rMeanValue := 0.0;
          FOR iTmpCnt := 1 TO iGain DO
             rMeanValue := rMeanValue + tyImpulse[iTmpCnt];
          END_FOR; 
          rMeanValue := rMeanValue / DINT_TO_REAL(iGain); 
       END_IF;  
       // Check if velocity is changing 
       IF ABS(rMeanValue - rRoundsPerTime) > mrImpulseFilterLimit * rRoundsPerTime THEN
          FOR iTmpCnt := 1 TO iGain DO
             tyImpulse[iTmpCnt] := rRoundsPerTime;
          END_FOR; 
       ELSE
          rRoundsPerTime := rMeanValue; 
       END_IF; 
    END_IF;
    IF bError THEN
        iErrorInfo := cApplPlasticsImpulseCalcFailed;
    END_IF;
END_IF;
    

@END_Body 

@@@BEG_Comment@@@ 
@TL(20)
This algo calculates a rounds per time value,
incrementing a counter using the
KCTR_Impuls function which is feeded
with an boolean impulse from sInputVariable.                                            

If no or bad parameters are set the calculation will stop,
until the parameters are set to working values again.
During error status the bError flag indicates the problem 
with parameterization

Optional filtering of a measure with wrong mounted gains (not exactly parted in number of gain parts).
Without this filter, the result would be oscillate with every impulse. Set impulse filter limit
to the percentuale oscillating difference. Being in this interval the result is the mean value  
of one turn.

Return error codes:
iErrorInfo = cApplPlasticsImpulseWrongParams -> wrong parameterisation of VI Block
iErrorInfo = cApplPlasticsImpulseCalcFailed -> calculation error of VI Block

    
@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbReParam := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abImpulse.Init(uImpStart := 0);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
