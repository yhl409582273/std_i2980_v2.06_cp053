(*
/*-------------------------------------------------------------------------
 *                   (c) 2015 by KEBA AG
 *                            Linz/AUSTRIA
 *                         All rights reserved
 *--------------------------------------------------------------------------*/
Implementation of movement with constant speed for specified time.
Start and stop ramps are used for acceleration and deceleration. 
*)

IMPORT_OVER_LISTFILE
 KCTRL_YXGen_RampType_Sin
, cInvalidVelocityParams
, cCycleTimeError
, cInvalidMovementLimits
, KCTRL_YXGen_RampType_Square
, KCTRL_Ret_OK
, cNoValidParams
, cCyclicCalculationError
, KCTRL_YXGen_LightA
, KCTRL_YXGenParam
, KCTRL_YXGen_Accelerations

END_IMPORT

ALGORITHM_BLOCK ABConstMoveTime #DUMMY_EDIT_BLOCK

VAR
 mdCycleTime : TIME;
 mrMaxVelocity : REAL;
 mrMaxAcceleration : REAL;
 mdMovementTime : TIME;
 mbParamOK : BOOL;
 mrMovementTime : REAL;
 mrCycleTime : REAL;
 abKCTRL_YXGen : KCTRL_YXGen_LightA;
END_VAR

ALGORITHM aPar


VAR_INPUT
 rMaxVelocity : REAL (* limitation value *);
 rMaxAcceleration : REAL (* max. acceleration at end position *);
 dMoveTime : TIME (* move time with const velocity, time for ramps icluded *);
 dCycleTime : TIME (* cycle time of controler task *);
 bRampTypeSquare : BOOL (* use square ramps *);
END_VAR

VAR_OUTPUT
 bError : BOOL (* error during param *);
 iErrorInfo : DINT (* additional error info *);
END_VAR

VAR
 YXGenParam : KCTRL_YXGenParam := (Mode:=(RampType:=KCTRL_YXGen_RampType_Sin),ProfilePoints:=(uNoOfPoints:=2));
 YXGenAccelerations : KCTRL_YXGen_Accelerations;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
bError := FALSE;
iErrorInfo := 0;
mbParamOK := FALSE;

mdCycleTime := dCycleTime;
mrMaxVelocity := rMaxVelocity;
mrMaxAcceleration := rMaxAcceleration;
mdMovementTime := dMoveTime;

// check invalid parameters
IF (mrMaxAcceleration <= 0.0) OR (mrMaxVelocity <= 0.0) THEN
    bError := TRUE;
    iErrorInfo := cInvalidVelocityParams;
    RETURN;
ELSIF (mdCycleTime <= T#0s) THEN
    bError := TRUE;
    iErrorInfo := cCycleTimeError;
    RETURN;
ELSIF (dMoveTime < T#0s) THEN   
    bError := TRUE;
    iErrorInfo := cInvalidMovementLimits;
    RETURN;   
END_IF;


mrMovementTime := LINT_TO_REAL(TIME_TO_LINT(dMoveTime))*1.0e-6;
mrCycleTime := LINT_TO_REAL(TIME_TO_LINT(dCycleTime))*1.0e-6;

// calculation of stop ramp
YXGenParam.ProfilePoints.uNoOfPoints := 3;
IF (2.0 * mrMaxVelocity / mrMaxAcceleration > mrMovementTime) THEN
   // parametrized velocity can't be reached, because acceleration to low
   // maximum velocity reached at half movement time 
   // stop ramp starts at half movement time
   YXGenParam.ProfilePoints.Point[1].rX := 0.0;
   YXGenParam.ProfilePoints.Point[1].rY := 0.5 * mrMaxAcceleration * mrMovementTime;
    
   YXGenParam.ProfilePoints.Point[2].rX := 0.125 * mrMaxAcceleration * mrMovementTime * mrMovementTime;
   YXGenParam.ProfilePoints.Point[2].rY := 0.5 * mrMaxAcceleration * mrMovementTime;

   YXGenParam.ProfilePoints.Point[3].rX := 2.0 * YXGenParam.ProfilePoints.Point[2].rX;
   YXGenParam.ProfilePoints.Point[3].rY := 0.0;
ELSE
   // parametrized velocity can be reached
   // calculation of stop ramp with parametrized velocity and acceleration
   YXGenParam.ProfilePoints.Point[1].rX := 0.0;
   YXGenParam.ProfilePoints.Point[1].rY := mrMaxVelocity;
    
   YXGenParam.ProfilePoints.Point[2].rX := mrMaxVelocity * mrMovementTime - 1.5 * mrMaxVelocity * mrMaxVelocity / rMaxAcceleration;
   YXGenParam.ProfilePoints.Point[2].rY := mrMaxVelocity;

   YXGenParam.ProfilePoints.Point[3].rX := YXGenParam.ProfilePoints.Point[2].rX + 0.5 * mrMaxVelocity * mrMaxVelocity / rMaxAcceleration;
   YXGenParam.ProfilePoints.Point[3].rY := 0.0;
END_IF;

IF bRampTypeSquare THEN
   YXGenParam.Mode.RampType := KCTRL_YXGen_RampType_Square;
ELSE
   YXGenParam.Mode.RampType := KCTRL_YXGen_RampType_Sin;
END_IF;


abKCTRL_YXGen.Par(dCycleTime:=mdCycleTime,
                  Param:=YXGenParam);

YXGenAccelerations.rStart := mrMaxAcceleration;
YXGenAccelerations.rStop := mrMaxAcceleration;
YXGenAccelerations.rSoft := mrMaxAcceleration;
abKCTRL_YXGen.ParAccelerations(Accelerations:=YXGenAccelerations);

abKCTRL_YXGen.Init(rX0 := 0.0,
                   rY0 := 0.0); 

IF (abKCTRL_YXGen.Par.parStatus <> KCTRL_Ret_OK) OR
   (abKCTRL_YXGen.ParAccelerations.parStatus <> KCTRL_Ret_OK) OR
   (abKCTRL_YXGen.Init.initStatus <> KCTRL_Ret_OK) THEN
   bError := TRUE;
   iErrorInfo := cInvalidVelocityParams;
   RETURN;
END_IF;

// parametrization finished with valid parameters
mbParamOK := TRUE;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aRun


VAR_INPUT
 bStart : BOOL R_EDGE (* start movement *);
 bStop : BOOL (* stop movement *);
END_VAR

VAR_OUTPUT
 bError : BOOL (* error during param *);
 iErrorInfo : DINT (* additional error info *);
 rVelocity : REAL (* actual velocity *);
 bReady : BOOL (* movement time elapsed *);
END_VAR

VAR
 rActPosition : REAL;
 rActTime : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF NOT mbParamOK THEN
   bError := TRUE;
   iErrorInfo := cNoValidParams;
   rVelocity := 0.0; 
   RETURN;
END_IF;   

IF bStart THEN
   abKCTRL_YXGen.Init(rX0 := 0.0,
                     rY0 := 0.0);
   IF (abKCTRL_YXGen.Init.initStatus <> KCTRL_Ret_OK) THEN
      bError := TRUE;
      iErrorInfo := cInvalidVelocityParams;
      rVelocity := 0.0;
      RETURN;
   END_IF;    
   rActPosition := 0.0;
   rActTime := 0.0;
   bReady := FALSE;
END_IF;


abKCTRL_YXGen.Calculate(rX:=rActPosition,
                        bSoftStop := bStop);
IF (abKCTRL_YXGen.Calculate.calcStatus <> KCTRL_Ret_OK) THEN
   bError := TRUE;
   iErrorInfo := cCyclicCalculationError;
   rVelocity := 0.0;
   RETURN;
END_IF;

rVelocity := abKCTRL_YXGen.Calculate.rY;
rActPosition := rActPosition + abKCTRL_YXGen.Calculate.rY * mrCycleTime;
rActTime := rActTime + mrCycleTime;
IF (rActTime >= mrMovementTime) OR
   (abKCTRL_YXGen.Calculate.State.bProfileEndReached) OR
   (abKCTRL_YXGen.Calculate.State.bSoftStopCompleted) THEN
   bReady := TRUE;
   rVelocity := 0.0;
END_IF;
    
bError := FALSE;
iErrorInfo := 0;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 144 @Pou 25 
@@@BEG_Comment@@@
/*-------------------------------------------------------------------------
 *                   (c) 2015 by KEBA AG
 *                            Linz/AUSTRIA
 *                         All rights reserved
 *--------------------------------------------------------------------------*/
Implementation of movement with constant speed for specified time.
Start and stop ramps are used for acceleration and deceleration. 
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
8 
@Var @RT(24)KCTRL_YXGen_RampType_Sin @RT(0) @T @T @DERIVED 0 @F @RT(20)KCTRL_YXGen_RampType @F 
@T 
@BEG_Attrib 
0 @RT(1)2 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)cInvalidVelocityParams @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)cCycleTimeError @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)cInvalidMovementLimits @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(27)KCTRL_YXGen_RampType_Square @RT(0) @T @T @DERIVED 0 @F @RT(20)KCTRL_YXGen_RampType @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)KCTRL_Ret_OK @RT(0) @T @T @DERIVED 0 @F @RT(9)KCTRL_Ret @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)cNoValidParams @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)cCyclicCalculationError @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(15)ABConstMoveTime @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(11)mdCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)mrMaxVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mrMaxAcceleration @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mdMovementTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mbParamOK @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mrMovementTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mrCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)abKCTRL_YXGen @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)KCTRL_YXGen_LightA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aPar @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(12)rMaxVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)limitation value @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)rMaxAcceleration @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)max. acceleration at end position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)dMoveTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(53)move time with const velocity, time for ramps icluded @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)dCycleTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(28)cycle time of controler task @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)bRampTypeSquare @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)use square ramps @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)error during param @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)YXGenParam @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KCTRL_YXGenParam @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(76)(Mode:=(RampType:=KCTRL_YXGen_RampType_Sin),ProfilePoints:=(uNoOfPoints:=2)) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)YXGenAccelerations @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(25)KCTRL_YXGen_Accelerations @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
8 
@Var @RT(6)bStart @RT(0) @T @F @DT @RT(11)BOOL R_EDGE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)start movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)stop movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)error during param @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)rVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual velocity @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)movement time elapsed @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(12)rActPosition @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)rActTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(89)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
bError := FALSE;
iErrorInfo := 0;
mbParamOK := FALSE;

mdCycleTime := dCycleTime;
mrMaxVelocity := rMaxVelocity;
mrMaxAcceleration := rMaxAcceleration;
mdMovementTime := dMoveTime;

// check invalid parameters
IF (mrMaxAcceleration <= 0.0) OR (mrMaxVelocity <= 0.0) THEN
    bError := TRUE;
    iErrorInfo := cInvalidVelocityParams;
    RETURN;
ELSIF (mdCycleTime <= T#0s) THEN
    bError := TRUE;
    iErrorInfo := cCycleTimeError;
    RETURN;
ELSIF (dMoveTime < T#0s) THEN   
    bError := TRUE;
    iErrorInfo := cInvalidMovementLimits;
    RETURN;   
END_IF;


mrMovementTime := LINT_TO_REAL(TIME_TO_LINT(dMoveTime))*1.0e-6;
mrCycleTime := LINT_TO_REAL(TIME_TO_LINT(dCycleTime))*1.0e-6;

// calculation of stop ramp
YXGenParam.ProfilePoints.uNoOfPoints := 3;
IF (2.0 * mrMaxVelocity / mrMaxAcceleration > mrMovementTime) THEN
   // parametrized velocity can't be reached, because acceleration to low
   // maximum velocity reached at half movement time 
   // stop ramp starts at half movement time
   YXGenParam.ProfilePoints.Point[1].rX := 0.0;
   YXGenParam.ProfilePoints.Point[1].rY := 0.5 * mrMaxAcceleration * mrMovementTime;
    
   YXGenParam.ProfilePoints.Point[2].rX := 0.125 * mrMaxAcceleration * mrMovementTime * mrMovementTime;
   YXGenParam.ProfilePoints.Point[2].rY := 0.5 * mrMaxAcceleration * mrMovementTime;

   YXGenParam.ProfilePoints.Point[3].rX := 2.0 * YXGenParam.ProfilePoints.Point[2].rX;
   YXGenParam.ProfilePoints.Point[3].rY := 0.0;
ELSE
   // parametrized velocity can be reached
   // calculation of stop ramp with parametrized velocity and acceleration
   YXGenParam.ProfilePoints.Point[1].rX := 0.0;
   YXGenParam.ProfilePoints.Point[1].rY := mrMaxVelocity;
    
   YXGenParam.ProfilePoints.Point[2].rX := mrMaxVelocity * mrMovementTime - 1.5 * mrMaxVelocity * mrMaxVelocity / rMaxAcceleration;
   YXGenParam.ProfilePoints.Point[2].rY := mrMaxVelocity;

   YXGenParam.ProfilePoints.Point[3].rX := YXGenParam.ProfilePoints.Point[2].rX + 0.5 * mrMaxVelocity * mrMaxVelocity / rMaxAcceleration;
   YXGenParam.ProfilePoints.Point[3].rY := 0.0;
END_IF;

IF bRampTypeSquare THEN
   YXGenParam.Mode.RampType := KCTRL_YXGen_RampType_Square;
ELSE
   YXGenParam.Mode.RampType := KCTRL_YXGen_RampType_Sin;
END_IF;


abKCTRL_YXGen.Par(dCycleTime:=mdCycleTime,
                  Param:=YXGenParam);

YXGenAccelerations.rStart := mrMaxAcceleration;
YXGenAccelerations.rStop := mrMaxAcceleration;
YXGenAccelerations.rSoft := mrMaxAcceleration;
abKCTRL_YXGen.ParAccelerations(Accelerations:=YXGenAccelerations);

abKCTRL_YXGen.Init(rX0 := 0.0,
                   rY0 := 0.0); 

IF (abKCTRL_YXGen.Par.parStatus <> KCTRL_Ret_OK) OR
   (abKCTRL_YXGen.ParAccelerations.parStatus <> KCTRL_Ret_OK) OR
   (abKCTRL_YXGen.Init.initStatus <> KCTRL_Ret_OK) THEN
   bError := TRUE;
   iErrorInfo := cInvalidVelocityParams;
   RETURN;
END_IF;

// parametrization finished with valid parameters
mbParamOK := TRUE;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(48)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF NOT mbParamOK THEN
   bError := TRUE;
   iErrorInfo := cNoValidParams;
   rVelocity := 0.0; 
   RETURN;
END_IF;   

IF bStart THEN
   abKCTRL_YXGen.Init(rX0 := 0.0,
                     rY0 := 0.0);
   IF (abKCTRL_YXGen.Init.initStatus <> KCTRL_Ret_OK) THEN
      bError := TRUE;
      iErrorInfo := cInvalidVelocityParams;
      rVelocity := 0.0;
      RETURN;
   END_IF;    
   rActPosition := 0.0;
   rActTime := 0.0;
   bReady := FALSE;
END_IF;


abKCTRL_YXGen.Calculate(rX:=rActPosition,
                        bSoftStop := bStop);
IF (abKCTRL_YXGen.Calculate.calcStatus <> KCTRL_Ret_OK) THEN
   bError := TRUE;
   iErrorInfo := cCyclicCalculationError;
   rVelocity := 0.0;
   RETURN;
END_IF;

rVelocity := abKCTRL_YXGen.Calculate.rY;
rActPosition := rActPosition + abKCTRL_YXGen.Calculate.rY * mrCycleTime;
rActTime := rActTime + mrCycleTime;
IF (rActTime >= mrMovementTime) OR
   (abKCTRL_YXGen.Calculate.State.bProfileEndReached) OR
   (abKCTRL_YXGen.Calculate.State.bSoftStopCompleted) THEN
   bReady := TRUE;
   rVelocity := 0.0;
END_IF;
    
bError := FALSE;
iErrorInfo := 0;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
