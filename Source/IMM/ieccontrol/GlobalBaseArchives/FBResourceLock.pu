IMPORT_OVER_LISTFILE
 GET_RUNTIME
, tpsResourceLock

END_IMPORT

FUNCTION_BLOCK FBResourceLock #DUMMY_EDIT_BLOCK

VAR_INPUT
 Execute : BOOL;
 bLock : BOOL;
 pResourceLock : tpsResourceLock;
END_VAR

VAR_OUTPUT
 bLocked : BOOL;
 Done : BOOL;
END_VAR

VAR
 pResourceLockIntern : tpsResourceLock;
 t : TIME;
 iStep : DINT;
 iTmpRequestId : DWORD;
 oldExe : BOOL;
 bLockCntOld : UDINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF (iStep = 0) THEN
    IF (Execute AND (NOT oldExe)) THEN
        iStep := 5;
        pResourceLockIntern := pResourceLock;    // copy reference because of  IEC Generate bug
    END_IF;
END_IF;

oldExe := Execute; 

IF (iStep = 5) THEN
    bLocked := FALSE; 
    IF (bLock) THEN
      Done := FALSE; 
      IF (pResourceLockIntern^.iLocked MOD 2 = 1) THEN
         iStep := 0; 
         Done := TRUE;  // no way to get resource, do not even try
      ELSE 
         t := GET_RUNTIME(); // getruntime is guaranteed to return a different value each call (see CIkbTypSystem::IecGetRunTime)
         iTmpRequestId := LINT_TO_DWORD(TIME_TO_LINT(t)); // use only lower 31 bits
         iTmpRequestId := iTmpRequestId AND 16#0FFFFFFF;  // highest 4 bits are reserved: bit 31 for IEC, bit 30 for HmiServer, rest for future use
         iTmpRequestId := iTmpRequestId OR 16#80000000;  // set bit 31, request id is never 0

         // iTmpRequestId is guaranteed to be unique for 2^28 µs ~ 270 sec ~ 5 min
         // this is sufficient because unique id is only necessary during race-condition: 
         // start of request until response
         bLockCntOld := pResourceLockIntern^.iLocked; 
         pResourceLockIntern^.iRequest := iTmpRequestId;
         iStep := 10; 
      END_IF;
    ELSE 
        iStep := 0; 
        Done := TRUE; 
    END_IF;    
END_IF; 

IF (iStep = 10) THEN
     IF (iTmpRequestId = pResourceLockIntern^.iResponse) THEN
         bLocked := TRUE;  // we have won the race         
         iStep := 20; 
     ELSIF (bLockCntOld <> pResourceLockIntern^.iLocked) THEN // we have lost the race, another client got the lock 
         iStep := 0; 
         Done := TRUE; 
     END_IF;
END_IF;

IF (iStep = 20) THEN
    IF (NOT bLock) THEN
          bLocked := FALSE; 
          pResourceLockIntern^.iResponse := 0;
          iStep := 0; 
    ELSE 
        Done := TRUE; 
    END_IF;
END_IF;




;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 159 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(11)GET_RUNTIME @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(14)FBResourceLock @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(7)Execute @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bLock @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)pResourceLock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tpsResourceLock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)pResourceLockIntern @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tpsResourceLock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)bLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(4)Done @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)t @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)iStep @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)iTmpRequestId @RT(0) @T @F @DT @RT(5)DWORD @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)oldExe @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)bLockCntOld @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(57)
IF (iStep = 0) THEN
    IF (Execute AND (NOT oldExe)) THEN
        iStep := 5;
        pResourceLockIntern := pResourceLock;    // copy reference because of  IEC Generate bug
    END_IF;
END_IF;

oldExe := Execute; 

IF (iStep = 5) THEN
    bLocked := FALSE; 
    IF (bLock) THEN
      Done := FALSE; 
      IF (pResourceLockIntern^.iLocked MOD 2 = 1) THEN
         iStep := 0; 
         Done := TRUE;  // no way to get resource, do not even try
      ELSE 
         t := GET_RUNTIME(); // getruntime is guaranteed to return a different value each call (see CIkbTypSystem::IecGetRunTime)
         iTmpRequestId := LINT_TO_DWORD(TIME_TO_LINT(t)); // use only lower 31 bits
         iTmpRequestId := iTmpRequestId AND 16#0FFFFFFF;  // highest 4 bits are reserved: bit 31 for IEC, bit 30 for HmiServer, rest for future use
         iTmpRequestId := iTmpRequestId OR 16#80000000;  // set bit 31, request id is never 0

         // iTmpRequestId is guaranteed to be unique for 2^28 µs ~ 270 sec ~ 5 min
         // this is sufficient because unique id is only necessary during race-condition: 
         // start of request until response
         bLockCntOld := pResourceLockIntern^.iLocked; 
         pResourceLockIntern^.iRequest := iTmpRequestId;
         iStep := 10; 
      END_IF;
    ELSE 
        iStep := 0; 
        Done := TRUE; 
    END_IF;    
END_IF; 

IF (iStep = 10) THEN
     IF (iTmpRequestId = pResourceLockIntern^.iResponse) THEN
         bLocked := TRUE;  // we have won the race         
         iStep := 20; 
     ELSIF (bLockCntOld <> pResourceLockIntern^.iLocked) THEN // we have lost the race, another client got the lock 
         iStep := 0; 
         Done := TRUE; 
     END_IF;
END_IF;

IF (iStep = 20) THEN
    IF (NOT bLock) THEN
          bLocked := FALSE; 
          pResourceLockIntern^.iResponse := 0;
          iStep := 0; 
    ELSE 
        Done := TRUE; 
    END_IF;
END_IF;



@END_Body 

@END_Contents 
