(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Register a movement in the system.
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, START_PROCESS_ALGORITHM
, ASSERT
, tevMovementRegister
, tsDeviceId
, tyMoveDataArray
, tevMovementRegisterData
, tsMoveData
, ABRegisterDelay

END_IMPORT

ALGORITHM_BLOCK ABMovementRegister #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
 sv_bDeviceReady : BOOL;
 sv_NumberOfMovements : DINT;
 sv_Movements : tyMoveDataArray;
 sv_bAllPUTasksExecuted : BOOL;
END_VAR

SYSTEM_OBJECT
 Task10ms : TASK;
 erNoSvMove : ALARM;
 erMaxMovementsExeeded : ALARM;
 erNoSvDeviceReady : ALARM;
 erAssert : ALARM;
 evMovementRegister : tevMovementRegister;
END_OBJECT

VAR
 evMovementRegisterData : tevMovementRegisterData;
 mpMovementData : REFTO tsMoveData;
END_VAR

(*
Register the movement identified by pMovementData.
For each movement a separate ABMovementRegister block is necessary.
It is not allowed to call aRegister more than once.
*)

ALGORITHM aRegister


VAR_INPUT
 pMovementData : REFTO tsMoveData;
END_VAR

VAR
 bAlreadyCalled : BOOL;
 b : BOOL;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bAlreadyCalled THEN
   //it is not allowed to call aRegister more than once
   dummy := Print('ABMovementRegister.aRegister called multiple times.$nUse a separate ABMovementRegister for each movement to register!');
   b := ASSERT(FALSE, erAssert);
   RETURN;
END_IF;

mpMovementData := pMovementData;

//arm registration
evMovementRegisterData.DeviceId :=  sv_DeviceId;
evMovementRegisterData.Mode := nMoveRegModeArm;
SET_EVENT(evMovementRegister, evMovementRegisterData);

START_PROCESS_ALGORITHM(paDelay);
bAlreadyCalled := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM

(*
@i for registering a movment 2 evMovemnetRegister is sent twice
@i the first one with the mode nMoveRegModeArm, then a delaytime is waited and the event is sent again
@i with the mode nMoveRegModeFire.
@i this is necessary to notice the start and the end of the movmentregistration.

*)

PROCESS_ALGORITHM paDelay ON Task10ms


VAR
 abRegisterDelay : ABRegisterDelay;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP INIT: (*sv_bInitStart is TRUE and all relevant PU - tasks and EV - tasks are
executed at least one time*)
END_STEP


(* steps *)
STEP WAIT:
Action1 (P);
END_STEP

ACTION Action1: #BEGIN_EDIT_BLOCK
//get registration delaytime
abRegisterDelay.aGet();


;#END_EDIT_BLOCK END_ACTION (*Action1*)
STEP REG:
aRegisterMovement (P);
END_STEP

ACTION aRegisterMovement: #BEGIN_EDIT_BLOCK
START_PROCESS_ALGORITHM(paSetRegisterEventFire);
STOP_PROCESS_ALGORITHM();

;#END_EDIT_BLOCK END_ACTION (*aRegisterMovement*)

(* transitions *)
TRANSITION Trans4 (* Trans4 *) FROM INIT TO WAIT :=  #BEGIN_EDIT_BLOCK
sv_bAllPUTasksExecuted

;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans2 (* Trans2 *) FROM WAIT TO REG :=  #BEGIN_EDIT_BLOCK
WAIT.T >= abRegisterDelay.aGet.Time
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paSetRegisterEventFire ON Task10ms

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF CHECK_REF(mpMovementData^) THEN
   IF  IS_LINKED(sv_bDeviceReady) THEN
      IF sv_NumberOfMovements < cMaxDeviceMovements THEN
         // add reference of sv_MoveXxx to the movementarray
         sv_NumberOfMovements := sv_NumberOfMovements + 1;
         sv_Movements[sv_NumberOfMovements] := mpMovementData;
            
         //sending registration-event to CentralCoordination
         evMovementRegisterData.sFuName := GET_MY_FU_NAME();
         evMovementRegisterData.Mode := nMoveRegModeFire; 
         evMovementRegisterData.DeviceId :=  sv_DeviceId;
         evMovementRegisterData.pbDeviceReady := @sv_bDeviceReady;
         evMovementRegisterData.pMovementData := mpMovementData;    
         SET_EVENT(evMovementRegister, evMovementRegisterData);
      ELSE
         // too much movements registered
         SET_ALARM(Name := erMaxMovementsExeeded,
                  SubID1 := sv_DeviceId.CompId,
                  SubID2 := sv_DeviceId.IndexId,
                  SubID3 := cMaxDeviceMovements);
      END_IF;
   ELSE
      // sv_bDeviceReady missing
      SET_ALARM(Name := erNoSvDeviceReady,
                SubID1 := sv_DeviceId.CompId);
   END_IF;   
ELSE
   // reference of sv_MoveXxx not valid
   SET_ALARM(Name := erNoSvMove,
            SubID1 := sv_DeviceId.CompId);
END_IF;

STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Register a movement in the system.
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)START_PROCESS_ALGORITHM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(18)ABMovementRegister @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
13 
@Var @RT(8)Task10ms @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)erNoSvMove @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)erMaxMovementsExeeded @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)erNoSvDeviceReady @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(18)evMovementRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)tevMovementRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_bDeviceReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)sv_NumberOfMovements @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_Movements @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tyMoveDataArray @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)evMovementRegisterData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(23)tevMovementRegisterData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mpMovementData @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(22)sv_bAllPUTasksExecuted @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aRegister @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
4 
@Var @RT(13)pMovementData @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)bAlreadyCalled @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(7)paDelay @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(8)Task10ms @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(15)abRegisterDelay @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABRegisterDelay @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(22)paSetRegisterEventFire @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(8)Task10ms @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(22)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bAlreadyCalled THEN
   //it is not allowed to call aRegister more than once
   dummy := Print('ABMovementRegister.aRegister called multiple times.$nUse a separate ABMovementRegister for each movement to register!');
   b := ASSERT(FALSE, erAssert);
   RETURN;
END_IF;

mpMovementData := pMovementData;

//arm registration
evMovementRegisterData.DeviceId :=  sv_DeviceId;
evMovementRegisterData.Mode := nMoveRegModeArm;
SET_EVENT(evMovementRegister, evMovementRegisterData);

START_PROCESS_ALGORITHM(paDelay);
bAlreadyCalled := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(3)
Register the movement identified by pMovementData.
For each movement a separate ABMovementRegister block is necessary.
It is not allowed to call aRegister more than once.
@@@END_Comment@@@ 

@BEG_SfcBody 
8 6 5 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(4)INIT @F @T @F @F @RT(0) @T @TL(2)
sv_bInitStart is TRUE and all relevant PU - tasks and EV - tasks are
executed at least one time

@AcbCont @RT(7)unnamed @F 0 

@Trans @RT(6)Trans4 @F @T @F @F @T @T @TL(3)
sv_bAllPUTasksExecuted


@RT(6)Trans4 @F 
@Step @RT(4)WAIT @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(7)Action1 @F @T @RT(1)P @RT(0) @F @F @T @TL(4)
//get registration delaytime
abRegisterDelay.aGet();


@F 

@Trans @RT(6)Trans2 @F @T @F @F @T @T @TL(2)
WAIT.T >= abRegisterDelay.aGet.Time

@RT(6)Trans2 @F 
@Step @RT(3)REG @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(17)aRegisterMovement @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
START_PROCESS_ALGORITHM(paSetRegisterEventFire);
STOP_PROCESS_ALGORITHM();

@F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(5)
@i for registering a movment 2 evMovemnetRegister is sent twice
@i the first one with the mode nMoveRegModeArm, then a delaytime is waited and the event is sent again
@i with the mode nMoveRegModeFire.
@i this is necessary to notice the start and the end of the movmentregistration.

@@@END_Comment@@@ 

@BEG_Body 
@TL(39)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF CHECK_REF(mpMovementData^) THEN
   IF  IS_LINKED(sv_bDeviceReady) THEN
      IF sv_NumberOfMovements < cMaxDeviceMovements THEN
         // add reference of sv_MoveXxx to the movementarray
         sv_NumberOfMovements := sv_NumberOfMovements + 1;
         sv_Movements[sv_NumberOfMovements] := mpMovementData;
            
         //sending registration-event to CentralCoordination
         evMovementRegisterData.sFuName := GET_MY_FU_NAME();
         evMovementRegisterData.Mode := nMoveRegModeFire; 
         evMovementRegisterData.DeviceId :=  sv_DeviceId;
         evMovementRegisterData.pbDeviceReady := @sv_bDeviceReady;
         evMovementRegisterData.pMovementData := mpMovementData;    
         SET_EVENT(evMovementRegister, evMovementRegisterData);
      ELSE
         // too much movements registered
         SET_ALARM(Name := erMaxMovementsExeeded,
                  SubID1 := sv_DeviceId.CompId,
                  SubID2 := sv_DeviceId.IndexId,
                  SubID3 := cMaxDeviceMovements);
      END_IF;
   ELSE
      // sv_bDeviceReady missing
      SET_ALARM(Name := erNoSvDeviceReady,
                SubID1 := sv_DeviceId.CompId);
   END_IF;   
ELSE
   // reference of sv_MoveXxx not valid
   SET_ALARM(Name := erNoSvMove,
            SubID1 := sv_DeviceId.CompId);
END_IF;

STOP_PROCESS_ALGORITHM();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
