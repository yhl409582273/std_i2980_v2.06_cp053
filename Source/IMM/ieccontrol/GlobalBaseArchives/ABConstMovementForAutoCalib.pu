(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB provides all functions to realize a constant movement.
It includes the following funcionalities:
- initialization of the constant output blocks 
- automatic reparam of all necessary blocks after change in the constant output
  Attention: reparam will be done after the movement is stopped and not during the movement is active
- constant output for pressure and velocity
- timeout detection (including automatic stop after timeout)

Difference to ABConstMovement:
immediately do reparam when a parameter change

@F S_KPIEC_ALAMOVE_03

*)

IMPORT_OVER_LISTFILE
 tsVelPre
, KAPPL_Plastics_ConstOutput_Pos
, KAPPL_ConstOutputData
, tMoveIdent
, tsDeviceId
, TOF
, tsErrorInfo
, TON
, R_TRIG

END_IMPORT

ALGORITHM_BLOCK ABConstMovementForAutoCalib #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 erMoveTimeout : ALARM;
 erInvalidConstReference : ALARM;
 erVelocityOutput : ALARM;
 erPressureOutput : ALARM;
END_OBJECT

VAR
 mpConst : REFTO tsVelPre;
 fbConstOutputPre : KAPPL_Plastics_ConstOutput_Pos;
 fbConstOutputVel : KAPPL_Plastics_ConstOutput_Pos;
 ConstOutputVelocity : KAPPL_ConstOutputData;
 ConstOutputPressure : KAPPL_ConstOutputData;
 mbMovementActive : BOOL;
 mbReParam : BOOL;
 mMoveId : tMoveIdent;
 mbReferenceValid : BOOL (* info if reference is valid *);
END_VAR

(*
This algorithm copies the input values to local variables and starts
the process algorithm for initialization of constant output blocks.
*)

ALGORITHM aInit


VAR_INPUT
 pConst : REFTO tsVelPre (* pointer to systemvariable that contains the constant output *);
 MoveId : tMoveIdent (* moveId of constant movement *);
END_VAR

VAR
 bInitDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
    //copy reference of vis variable
    mpConst := pConst;
    mMoveId := MoveId;
    
    IF CHECK_REF(mpConst^) THEN
        mbReferenceValid := TRUE;
         ConstOutputVelocity.OutputValue := mpConst^.Velocity.Output.rOutputValue;
         ConstOutputVelocity.Acceleration := mpConst^.Velocity.Output.rRamp;
         
         ConstOutputPressure.OutputValue := mpConst^.Pressure.Output.rOutputValue;
         ConstOutputPressure.Acceleration := mpConst^.Pressure.Output.rRamp;
         
         mbReParam := TRUE;       
       
    ELSE
        SET_ALARM(Name := erInvalidConstReference,
                SubID1 := sv_DeviceId.CompId,
                SubID2 := sv_DeviceId.IndexId,
                SubID3 := mMoveId);
    END_IF;
    
    bInitDone  := TRUE;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

(*
Following functions are realized in this algorithm:

1) reparam of the constant output - blocks
2) constant output for pressure and velocity
3) Timeout detection if dMaxMoveTime is bigger than 0.
   dMaxMoveTime = 0 means no timeout detection active
   If a timeout is detected an alarm will be set and the profileoutput will be stopped automatically
*)

ALGORITHM aRun


VAR_INPUT
 bStart : BOOL (* start constant output *);
 bStop : BOOL (* stop constant output *);
 bDirection : BOOL (* TRUE: position is getting bigger; FALSE: position is getting smaller *);
 rActPos : REAL (* actual position *);
 rTargetPos : REAL (* target position *);
 bUsePosDetect : BOOL (* TRUE: movement should stop at target position *);
 rStartOutputPre : REAL (* start output pressure *);
 rStartOutputVel : REAL (* start ouotput velocity *);
 dMaxTime : TIME (* maximum move time *);
 dDelayTimeOn : TIME (* Delay Time between preoutput and  constoutput *);
 dDelayTimeOff : TIME (* Delay Time between pump stop and bActive FALSE *);
END_VAR

VAR_OUTPUT
 rOutputPre : REAL (* calculated pressure output *);
 rOutputVel : REAL (* calculated velocity ouput *);
 bActive : BOOL (* constant movement is active *);
 bPreOutputReached : BOOL (* preoutput ready *);
 dActTime : TIME (* actual move time *);
 bError : BOOL (* flag if error was detected *);
 bTimeOut : BOOL (* timeout occured *);
 iErrorInfo : tsErrorInfo (* additional error info *);
END_VAR

VAR
 bActiveInt : BOOL;
 fbTOFActive : TOF;
 fbTimer : TON;
 fbREdge_Start : R_TRIG;
 fbREdge_Timeout : R_TRIG;
 bAlarmSet : BOOL;
 fbREdgeVelError : R_TRIG;
 fbREdgePresError : R_TRIG;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
//do not execute if reference to constant output is not valid
IF NOT mbReferenceValid THEN
    
    //set alarm because algorithm can be called without calling aInit before
    IF NOT bAlarmSet THEN
        SET_ALARM(Name := erInvalidConstReference,
                  SubID1 := sv_DeviceId.CompId,
                  SubID2 := sv_DeviceId.IndexId,
                  SubID3 := mMoveId);
        bAlarmSet := TRUE;
    END_IF;
        
    bError := TRUE;
    RETURN;
END_IF;

IF mbReParam THEN
    fbConstOutputVel(PreOutputRamp := mpConst^.Velocity.PreOutput.rRamp,
                    PreOutputValue := mpConst^.Velocity.PreOutput.rOutputValue,
                    ConstOutputData := ConstOutputVelocity,
                    MinOutputValue := mpConst^.Velocity.rMinOutput, 
                    DelayTime := dDelayTimeOn,                     
                    ErrorInfo => iErrorInfo.Velocity, 
                    ReParam := TRUE);
   
    fbConstOutputPre(PreOutputRamp := mpConst^.Pressure.PreOutput.rRamp,
                    PreOutputValue := mpConst^.Pressure.PreOutput.rOutputValue,                    
                    ConstOutputData := ConstOutputPressure,
                    MinOutputValue := mpConst^.Pressure.rMinOutput,                   
                    DelayTime := dDelayTimeOn,                     
                    ErrorInfo => iErrorInfo.Pressure,
                    ReParam := TRUE);
    
    IF fbConstOutputVel.Error THEN
        SET_ALARM(Name := erVelocityOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := fbConstOutputVel.ErrorInfo);
    END_IF;
    
    IF fbConstOutputPre.Error THEN
        SET_ALARM(Name := erPressureOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := fbConstOutputPre.ErrorInfo);
    END_IF;
    
    IF fbConstOutputVel.Error OR fbConstOutputPre.Error THEN
        //don´t do movement if one of the outputblocks has an error
        bError := TRUE;
        RETURN;
    END_IF;
        
    mbReParam := FALSE;
END_IF;
 
fbREdge_Start(CLK := bStart);
IF fbREdge_Start.Q THEN
    //reset timer for timeout detection
    fbTimer(IN := FALSE);
    bTimeOut := FALSE;
    dActTime := t#0s;
    fbREdgeVelError(CLK := FALSE);
    fbREdgePresError(CLK := FALSE);
END_IF; 
 

fbConstOutputVel(Start :=  bStart,
                 Stop := bStop OR bTimeOut,
                 StartOutputValue := rStartOutputVel,
                 Direction := bDirection,
                 Position := rActPos,
                 TargetPosition := rTargetPos,
                 ReduceReadyDiff := 0.0, 
                 UsePositionDetection := bUsePosDetect,
                 ReParam := FALSE,
                 DelayTime := dDelayTimeOn,                 
                 Output => rOutputVel,
                 ErrorInfo => iErrorInfo.Velocity);    
                                                       
fbConstOutputPre(Start :=  bStart,
                 Stop := bStop OR bTimeOut,
                 StartOutputValue := rStartOutputPre,
                 Direction := bDirection,
                 Position := rActPos,
                 TargetPosition := rTargetPos,
                 ReduceReadyDiff := 0.0, 
                 UsePositionDetection := bUsePosDetect,                 
                 ReParam := FALSE,
                 DelayTime := dDelayTimeOn,                 
                 Output => rOutputPre,
                 ErrorInfo => iErrorInfo.Pressure);

bPreOutputReached := fbConstOutputPre.PreOutputReady AND fbConstOutputVel.PreOutputReady;
bError := fbConstOutputPre.Error OR fbConstOutputVel.Error;

//set alarm if error during velocity output occurs
fbREdgeVelError(CLK := fbConstOutputVel.Error);
IF fbREdgeVelError.Q THEN
    SET_ALARM(Name := erVelocityOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := iErrorInfo.Velocity);
END_IF;

//set alarm if error during pressure output occurs
fbREdgePresError(CLK := fbConstOutputPre.Error);
IF fbREdgePresError.Q THEN
    SET_ALARM(Name := erPressureOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := iErrorInfo.Pressure);
END_IF;

//combine ready - flags
IF (fbConstOutputPre.Ready AND fbConstOutputVel.Ready) OR bError THEN
    bActiveInt := FALSE;
    mbMovementActive := FALSE;
    //call library - blocks with Start = FALSE after movement is ready
//    fbConstOutputVel(Start := FALSE);
  //  fbConstOutputPre(Start := FALSE);
ELSE
    bActiveInt := TRUE;
    mbMovementActive := TRUE;
END_IF;

//Timeout detection
IF bActiveInt THEN
    fbTimer(IN := TRUE,
            PT := dMaxTime);
    dActTime := fbTimer.ET;    
    //dMaxTime = 0 means timeout detection is deactivated!!
    IF dMaxTime > t#0.0s THEN
        bTimeOut := fbTimer.Q;
    END_IF;
END_IF;

//set timeout alarm
fbREdge_Timeout(CLK := bTimeOut);
IF fbREdge_Timeout.Q THEN
    SET_ALARM(Name := erMoveTimeout,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId);    
END_IF;

// set output bActive
fbTOFActive(bActiveInt, dDelayTimeOff);
bActive := fbTOFActive.Q;



;#END_EDIT_BLOCK END_ALGORITHM

(*
This algorithm reacts on changes of the constant output settings.
If the settings changed the process algorithm for initialization will be started.
*)

POSTUPDATE_ALGORITHM PConstChanged ON PU_Task_7 WITH mpConst^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

    ConstOutputVelocity.OutputValue := mpConst^.Velocity.Output.rOutputValue;
    ConstOutputVelocity.Acceleration := mpConst^.Velocity.Output.rRamp;
    
    ConstOutputPressure.OutputValue := mpConst^.Pressure.Output.rOutputValue;
    ConstOutputPressure.Acceleration := mpConst^.Pressure.Output.rRamp;
    
    mbReParam := TRUE;



;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 97 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB provides all functions to realize a constant movement.
It includes the following funcionalities:
- initialization of the constant output blocks 
- automatic reparam of all necessary blocks after change in the constant output
  Attention: reparam will be done after the movement is stopped and not during the movement is active
- constant output for pressure and velocity
- timeout detection (including automatic stop after timeout)

Difference to ABConstMovement:
immediately do reparam when a parameter change

@F S_KPIEC_ALAMOVE_03

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(27)ABConstMovementForAutoCalib @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
15 
@Var @RT(7)mpConst @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)fbConstOutputPre @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(30)KAPPL_Plastics_ConstOutput_Pos @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)fbConstOutputVel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(30)KAPPL_Plastics_ConstOutput_Pos @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)ConstOutputVelocity @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KAPPL_ConstOutputData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)ConstOutputPressure @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(21)KAPPL_ConstOutputData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mbMovementActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mbReParam @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)erMoveTimeout @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(7)mMoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(16)mbReferenceValid @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)info if reference is valid @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)erInvalidConstReference @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)erVelocityOutput @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)erPressureOutput @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(6)pConst @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(59)pointer to systemvariable that contains the constant output @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)moveId of constant movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
27 
@Var @RT(6)bStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)start constant output @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)stop constant output @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)bDirection @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(68)TRUE: position is getting bigger; FALSE: position is getting smaller @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)rActPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)rTargetPos @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)target position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)bUsePosDetect @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(45)TRUE: movement should stop at target position @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)rStartOutputPre @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)start output pressure @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)rStartOutputVel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)start ouotput velocity @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)dMaxTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(17)maximum move time @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)bActiveInt @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)fbTOFActive @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TOF @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)dDelayTimeOn @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(45)Delay Time between preoutput and  constoutput @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)dDelayTimeOff @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)Delay Time between pump stop and bActive FALSE @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)rOutputPre @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)calculated pressure output @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)rOutputVel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)calculated velocity ouput @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)bActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)constant movement is active @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(17)bPreOutputReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)preoutput ready @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(8)dActTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)actual move time @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)flag if error was detected @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(8)bTimeOut @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)timeout occured @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsErrorInfo @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)fbTimer @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbREdge_Start @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbREdge_Timeout @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bAlarmSet @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)fbREdgeVelError @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)fbREdgePresError @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(13)PConstChanged @STRUCTURED_TEXT 
@RT(0) @RT(8)mpConst^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(32)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
    //copy reference of vis variable
    mpConst := pConst;
    mMoveId := MoveId;
    
    IF CHECK_REF(mpConst^) THEN
        mbReferenceValid := TRUE;
         ConstOutputVelocity.OutputValue := mpConst^.Velocity.Output.rOutputValue;
         ConstOutputVelocity.Acceleration := mpConst^.Velocity.Output.rRamp;
         
         ConstOutputPressure.OutputValue := mpConst^.Pressure.Output.rOutputValue;
         ConstOutputPressure.Acceleration := mpConst^.Pressure.Output.rRamp;
         
         mbReParam := TRUE;       
       
    ELSE
        SET_ALARM(Name := erInvalidConstReference,
                SubID1 := sv_DeviceId.CompId,
                SubID2 := sv_DeviceId.IndexId,
                SubID3 := mMoveId);
    END_IF;
    
    bInitDone  := TRUE;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
This algorithm copies the input values to local variables and starts
the process algorithm for initialization of constant output blocks.
@@@END_Comment@@@ 

@BEG_Body 
@TL(160)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
//do not execute if reference to constant output is not valid
IF NOT mbReferenceValid THEN
    
    //set alarm because algorithm can be called without calling aInit before
    IF NOT bAlarmSet THEN
        SET_ALARM(Name := erInvalidConstReference,
                  SubID1 := sv_DeviceId.CompId,
                  SubID2 := sv_DeviceId.IndexId,
                  SubID3 := mMoveId);
        bAlarmSet := TRUE;
    END_IF;
        
    bError := TRUE;
    RETURN;
END_IF;

IF mbReParam THEN
    fbConstOutputVel(PreOutputRamp := mpConst^.Velocity.PreOutput.rRamp,
                    PreOutputValue := mpConst^.Velocity.PreOutput.rOutputValue,
                    ConstOutputData := ConstOutputVelocity,
                    MinOutputValue := mpConst^.Velocity.rMinOutput, 
                    DelayTime := dDelayTimeOn,                     
                    ErrorInfo => iErrorInfo.Velocity, 
                    ReParam := TRUE);
   
    fbConstOutputPre(PreOutputRamp := mpConst^.Pressure.PreOutput.rRamp,
                    PreOutputValue := mpConst^.Pressure.PreOutput.rOutputValue,                    
                    ConstOutputData := ConstOutputPressure,
                    MinOutputValue := mpConst^.Pressure.rMinOutput,                   
                    DelayTime := dDelayTimeOn,                     
                    ErrorInfo => iErrorInfo.Pressure,
                    ReParam := TRUE);
    
    IF fbConstOutputVel.Error THEN
        SET_ALARM(Name := erVelocityOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := fbConstOutputVel.ErrorInfo);
    END_IF;
    
    IF fbConstOutputPre.Error THEN
        SET_ALARM(Name := erPressureOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := fbConstOutputPre.ErrorInfo);
    END_IF;
    
    IF fbConstOutputVel.Error OR fbConstOutputPre.Error THEN
        //don´t do movement if one of the outputblocks has an error
        bError := TRUE;
        RETURN;
    END_IF;
        
    mbReParam := FALSE;
END_IF;
 
fbREdge_Start(CLK := bStart);
IF fbREdge_Start.Q THEN
    //reset timer for timeout detection
    fbTimer(IN := FALSE);
    bTimeOut := FALSE;
    dActTime := t#0s;
    fbREdgeVelError(CLK := FALSE);
    fbREdgePresError(CLK := FALSE);
END_IF; 
 

fbConstOutputVel(Start :=  bStart,
                 Stop := bStop OR bTimeOut,
                 StartOutputValue := rStartOutputVel,
                 Direction := bDirection,
                 Position := rActPos,
                 TargetPosition := rTargetPos,
                 ReduceReadyDiff := 0.0, 
                 UsePositionDetection := bUsePosDetect,
                 ReParam := FALSE,
                 DelayTime := dDelayTimeOn,                 
                 Output => rOutputVel,
                 ErrorInfo => iErrorInfo.Velocity);    
                                                       
fbConstOutputPre(Start :=  bStart,
                 Stop := bStop OR bTimeOut,
                 StartOutputValue := rStartOutputPre,
                 Direction := bDirection,
                 Position := rActPos,
                 TargetPosition := rTargetPos,
                 ReduceReadyDiff := 0.0, 
                 UsePositionDetection := bUsePosDetect,                 
                 ReParam := FALSE,
                 DelayTime := dDelayTimeOn,                 
                 Output => rOutputPre,
                 ErrorInfo => iErrorInfo.Pressure);

bPreOutputReached := fbConstOutputPre.PreOutputReady AND fbConstOutputVel.PreOutputReady;
bError := fbConstOutputPre.Error OR fbConstOutputVel.Error;

//set alarm if error during velocity output occurs
fbREdgeVelError(CLK := fbConstOutputVel.Error);
IF fbREdgeVelError.Q THEN
    SET_ALARM(Name := erVelocityOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := iErrorInfo.Velocity);
END_IF;

//set alarm if error during pressure output occurs
fbREdgePresError(CLK := fbConstOutputPre.Error);
IF fbREdgePresError.Q THEN
    SET_ALARM(Name := erPressureOutput,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId,
              SubID4 := iErrorInfo.Pressure);
END_IF;

//combine ready - flags
IF (fbConstOutputPre.Ready AND fbConstOutputVel.Ready) OR bError THEN
    bActiveInt := FALSE;
    mbMovementActive := FALSE;
    //call library - blocks with Start = FALSE after movement is ready
//    fbConstOutputVel(Start := FALSE);
  //  fbConstOutputPre(Start := FALSE);
ELSE
    bActiveInt := TRUE;
    mbMovementActive := TRUE;
END_IF;

//Timeout detection
IF bActiveInt THEN
    fbTimer(IN := TRUE,
            PT := dMaxTime);
    dActTime := fbTimer.ET;    
    //dMaxTime = 0 means timeout detection is deactivated!!
    IF dMaxTime > t#0.0s THEN
        bTimeOut := fbTimer.Q;
    END_IF;
END_IF;

//set timeout alarm
fbREdge_Timeout(CLK := bTimeOut);
IF fbREdge_Timeout.Q THEN
    SET_ALARM(Name := erMoveTimeout,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              SubID3 := mMoveId);    
END_IF;

// set output bActive
fbTOFActive(bActiveInt, dDelayTimeOff);
bActive := fbTOFActive.Q;


@END_Body 

@@@BEG_Comment@@@ 
@TL(7)
Following functions are realized in this algorithm:

1) reparam of the constant output - blocks
2) constant output for pressure and velocity
3) Timeout detection if dMaxMoveTime is bigger than 0.
   dMaxMoveTime = 0 means no timeout detection active
   If a timeout is detected an alarm will be set and the profileoutput will be stopped automatically
@@@END_Comment@@@ 

@BEG_Body 
@TL(14)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

    ConstOutputVelocity.OutputValue := mpConst^.Velocity.Output.rOutputValue;
    ConstOutputVelocity.Acceleration := mpConst^.Velocity.Output.rRamp;
    
    ConstOutputPressure.OutputValue := mpConst^.Pressure.Output.rOutputValue;
    ConstOutputPressure.Acceleration := mpConst^.Pressure.Output.rRamp;
    
    mbReParam := TRUE;


@END_Body 

@@@BEG_Comment@@@ 
@TL(2)
This algorithm reacts on changes of the constant output settings.
If the settings changed the process algorithm for initialization will be started.
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
