(*
This function block traces all pending alarms.
The trace looks like the following example:
1 ExceptionInterpretation1.erCpuFanDefect class: 5 type: 66 SubIDs: 1 1 1 1 - 6338 112 0 0

*)

IMPORT_OVER_LISTFILE
 ALARM_HANDLER
, KSYS_Alarm_Data
, KSYS_Status

END_IMPORT

FUNCTION_BLOCK FBTracePendingAlarms #DUMMY_EDIT_BLOCK

VAR
 abAlarmHandler : ALARM_HANDLER;
 sName : STRING(255);
 AlarmData : KSYS_Alarm_Data;
 Status : KSYS_Status;
 iCounter : DINT;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iCounter := 1;
dummy := Print('current alarms:');
Status := abAlarmHandler.GetFirstAlarm();
WHILE Status = KSYS_Status_OK DO
   Status := abAlarmHandler.GetAlarmName(AlarmName := sName);
   AlarmData := abAlarmHandler.GetAlarmData();
   dummy := Print('%d %s class: %d type: %d SubIDs: %d %d %d %d - %d %d %d %d', iCounter, sName, AlarmData.Class, AlarmData.Type,
                  AlarmData.SubIDs.SubID1_Used, AlarmData.SubIDs.SubID2_Used, AlarmData.SubIDs.SubID3_Used, AlarmData.SubIDs.SubID4_Used,
                  AlarmData.SubIDs.SubID1, AlarmData.SubIDs.SubID2, AlarmData.SubIDs.SubID3, AlarmData.SubIDs.SubID4);
   Status := abAlarmHandler.GetNextAlarm();
   iCounter := iCounter + 1;
END_WHILE;



;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 121 @Pou 25 
@@@BEG_Comment@@@
This function block traces all pending alarms.
The trace looks like the following example:
1 ExceptionInterpretation1.erCpuFanDefect class: 5 type: 66 SubIDs: 1 1 1 1 - 6338 112 0 0

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(20)FBTracePendingAlarms @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(14)abAlarmHandler @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ALARM_HANDLER @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)sName @RT(0) @T @F @DT @RT(11)STRING(255) @RT(0) @T @T @STRING 0 @F @RT(3)255 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)AlarmData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KSYS_Alarm_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)Status @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KSYS_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)iCounter @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(19)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

iCounter := 1;
dummy := Print('current alarms:');
Status := abAlarmHandler.GetFirstAlarm();
WHILE Status = KSYS_Status_OK DO
   Status := abAlarmHandler.GetAlarmName(AlarmName := sName);
   AlarmData := abAlarmHandler.GetAlarmData();
   dummy := Print('%d %s class: %d type: %d SubIDs: %d %d %d %d - %d %d %d %d', iCounter, sName, AlarmData.Class, AlarmData.Type,
                  AlarmData.SubIDs.SubID1_Used, AlarmData.SubIDs.SubID2_Used, AlarmData.SubIDs.SubID3_Used, AlarmData.SubIDs.SubID4_Used,
                  AlarmData.SubIDs.SubID1, AlarmData.SubIDs.SubID2, AlarmData.SubIDs.SubID3, AlarmData.SubIDs.SubID4);
   Status := abAlarmHandler.GetNextAlarm();
   iCounter := iCounter + 1;
END_WHILE;


@END_Body 

@END_Contents 
