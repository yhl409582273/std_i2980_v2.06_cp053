IMPORT_OVER_LISTFILE
 FFixCylinderData
, FCalculateCylinderSize
, FScaleAndFloor
, tnDataState
, KAPPL_LintabData
, tsCylinderData

END_IMPORT

ALGORITHM_BLOCK ABUpdateRelLintabVel #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bCalcMaxValuesFromCylData : BOOL (* TRUE: calculate max speed and max pressure values by using cylinder data;  FALSE: max values must be entered manually *);
 sv_DataState : tnDataState;
 sv_iReadMachineDataCount : UDINT;
END_VAR

SYSTEM_OBJECT
 PU_Task_7 : TASK;
 PU_Task_3 : TASK;
END_OBJECT

VAR
 mpLintabOut : REFTO KAPPL_LintabData (* OUT: velocity lintab of movement *);
 mprAbsFlow : REFTO REAL (* IN: maximum absolute flow in l/min *);
 mpCylinderData : REFTO tsCylinderData (* IN: cylinder data *);
 mprMaxSpeed : REFTO REAL (* IN/OUT: max speed of movement *);
 mprMaxSpeedCalc : REFTO REAL (* IN/OUT: max speed of movement (calculated) *);
 mprMaxSpeedCalib : REFTO REAL (* IN/OUT: max speed of movement (calculated) *);
 mbprMaxSpeedCalibLinked : BOOL := FALSE (* IN/OUT: max speed of movement (calculated) *);
 mprMaxSpeedReducePercent : REFTO REAL (* IN: percentage to reduce max speed *);
 miMaxSpeedDigitsToFloor : SINT := 0 (* IN: max speed digits to floor *);
 mbInitDone : BOOL;
 mbFwd : BOOL;
END_VAR

ALGORITHM aUpdateLintabOut

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// save data to Vel lintab
mpLintabOut^.LintabPoints.uNoOfPoints := 2;
mpLintabOut^.LintabPoints.Point[1].rX := 0.0;
mpLintabOut^.LintabPoints.Point[1].rY := 0.0;
mpLintabOut^.LintabPoints.Point[2].rX := mprMaxSpeedCalc^;
mpLintabOut^.LintabPoints.Point[2].rY := 100.0; // %


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aCalcMaxVelocity


VAR_TEMP
 tmp : BOOL;
END_VAR

VAR
 rMaxFlow : REAL (* maximum flow in mm^3/sec *);
 rSize : REAL;
 bSmallSize : BOOL;
 rScalePercent : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bCalcMaxValuesFromCylData THEN
   // no calculation necessary
   RETURN;
END_IF;

tmp := FFixCylinderData(mpCylinderData);

// convert from l/min to mm^3/sec            
rMaxFlow := mprAbsFlow^ * 100.0 *100.0 *100.0 / 60.0;

bSmallSize := mbFwd AND mpCylinderData^.bUseSmallSize OR
                 ((NOT mbFwd AND NOT mpCylinderData^.bUseSmallSize));
 
rSize := FCalculateCylinderSize(CylinderData := mpCylinderData^, 
                                bSmallSize := bSmallSize, 
                                bCalcHighPressSize := FALSE);
// mm³/s / mm² ->mm/s  
mprMaxSpeedCalc^ := rMaxFlow / rSize;
IF ((mbInitDone AND sv_DataState = nReady) AND (mprMaxSpeed^ > mprMaxSpeedCalc^)) THEN
   // prevent recalculation on machine data load except if max. value exceeds custom value
   rScalePercent := 100.0;
   IF mprMaxSpeedReducePercent <> EMPTY THEN
      rScalePercent := 100.0 - mprMaxSpeedReducePercent^;
   END_IF;
   mprMaxSpeed^ := FScaleAndFloor(mprMaxSpeedCalc^, rScalePercent, miMaxSpeedDigitsToFloor);
END_IF;
// check max velocity for visualization
IF (mbprMaxSpeedCalibLinked) THEN
   IF(mprMaxSpeedCalib^ <= 0.0) OR (mprMaxSpeedCalib^ > mprMaxSpeedCalc^) THEN
      mprMaxSpeedCalib^ := mprMaxSpeedCalc^;
   END_IF;
END_IF;   

   




;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aInit


VAR_INPUT
 pLintabOut : REFTO KAPPL_LintabData;
 prMaxSpeed : REFTO REAL;
 prMaxSpeedCalc : REFTO REAL;
 prAbsFlow : REFTO REAL (* absolute flow in l/min *);
 bFwd : BOOL (* TRUE if block is used for fwd movement *);
 pCylinderData : REFTO tsCylinderData;
 prMaxSpeedReducePercent : REFTO REAL;
 iMaxSpeedDigitsToFloor : SINT;
 prMaxSpeedCalib : REFTO REAL;
END_VAR

VAR
 // prMaxPumpFlow : REFTO REAL;
 tmp : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbInitDone := FALSE;
mprAbsFlow := prAbsFlow;
mpCylinderData := pCylinderData;
mpLintabOut := pLintabOut;
mprMaxSpeed := prMaxSpeed;
mprMaxSpeedCalc := prMaxSpeedCalc;
mprMaxSpeedCalib := prMaxSpeedCalib;
mprMaxSpeedReducePercent := prMaxSpeedReducePercent;
miMaxSpeedDigitsToFloor := iMaxSpeedDigitsToFloor;
mbFwd := bFwd;

IF NOT CHECK_REF(prAbsFlow^) THEN
    tmp := Print('prAbsFlow not valid');
    RETURN;
END_IF;

IF NOT CHECK_REF(pCylinderData^) THEN
    tmp := Print('pCylinderData not valid');
    RETURN;
END_IF;

IF (NOT CHECK_REF(pLintabOut^)) THEN
    tmp := Print('pLintabOut not valid');
    RETURN;    
END_IF;

IF (NOT CHECK_REF(prMaxSpeed^)) THEN
    tmp := Print('prMaxSpeed not valid');
    RETURN;    
END_IF;

IF (NOT CHECK_REF(prMaxSpeedCalc^)) THEN
    tmp := Print('prMaxSpeedCalc not valid');
    RETURN;    
END_IF;

IF (CHECK_REF(mprMaxSpeedCalib^)) THEN
    mbprMaxSpeedCalibLinked := TRUE;
END_IF;

aCalcMaxVelocity();

//update lintab
aUpdateLintabOut();

// init successful
mbInitDone := TRUE;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pUpdateVelocity ON PU_Task_7 WITH mprAbsFlow^,mpCylinderData^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
         
IF NOT mbInitDone OR (sv_DataState = nReadMachineData) THEN
   RETURN;
END_IF;

// reset calib value if diameter or flow is changed
IF mbprMaxSpeedCalibLinked AND (sv_DataState = nReady) THEN
   mprMaxSpeedCalib^ := 0.0;
END_IF;

aCalcMaxVelocity();






;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pUpdateVelocityLintab ON PU_Task_7 WITH mprMaxSpeedCalc^

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
         
IF NOT mbInitDone THEN
    RETURN;
END_IF;

aUpdateLintabOut();




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pUpdateMaxVelocity ON PU_Task_7 WITH mprMaxSpeedCalib^


VAR
 rScalePercent : REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_DataState = nReadMachineData THEN
   RETURN;
END_IF;

IF ((mprMaxSpeedCalib^ < mprMaxSpeed^) AND (mprMaxSpeedCalib^ > 0.0)) THEN
   rScalePercent := 100.0;
   IF mprMaxSpeedReducePercent <> EMPTY THEN
      rScalePercent := 100.0 - mprMaxSpeedReducePercent^;
   END_IF;
   mprMaxSpeed^ := FScaleAndFloor(mprMaxSpeedCalib^, rScalePercent, miMaxSpeedDigitsToFloor);
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMachineDataLoaded ON PU_Task_7 WITH sv_iReadMachineDataCount

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aCalcMaxVelocity();


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMachineDataLoadingStarted ON PU_Task_3(1) WITH sv_DataState

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_DataState = nReadMachineData THEN
   //reset max speed calib at the beginning of machine data loading
   //if max speed calib is part of the loaded machine data, the correct value comes from the XMl file
   //if max speed calib is not part of machine data it is set to max speed calc
   //when calling aCalcMaxVelocity after loading machine data is finished
   IF mbprMaxSpeedCalibLinked THEN
      mprMaxSpeedCalib^ := 0.0;
   END_IF;   
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 114 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
3 
@Var @RT(16)FFixCylinderData @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)FCalculateCylinderSize @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)FScaleAndFloor @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(20)ABUpdateRelLintabVel @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
16 
@Var @RT(28)sv_bCalcMaxValuesFromCylData @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(117)TRUE: calculate max speed and max pressure values by using cylinder data;  FALSE: max values must be entered manually @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_DataState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tnDataState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)mpLintabOut @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)OUT: velocity lintab of movement @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mprAbsFlow @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)IN: maximum absolute flow in l/min @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)mpCylinderData @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(14)tsCylinderData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(17)IN: cylinder data @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)mprMaxSpeed @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)IN/OUT: max speed of movement @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)mprMaxSpeedCalc @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)IN/OUT: max speed of movement (calculated) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(16)mprMaxSpeedCalib @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)IN/OUT: max speed of movement (calculated) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)mbprMaxSpeedCalibLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(5)FALSE @RT(42)IN/OUT: max speed of movement (calculated) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mprMaxSpeedReducePercent @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)IN: percentage to reduce max speed @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)miMaxSpeedDigitsToFloor @RT(0) @T @F @DT @RT(4)SINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)0 @RT(29)IN: max speed digits to floor @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mbInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)mbFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)sv_iReadMachineDataCount @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

8 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aUpdateLintabOut @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aCalcMaxVelocity @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(3)tmp @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(8)rMaxFlow @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)maximum flow in mm^3/sec @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)rSize @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)bSmallSize @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)rScalePercent @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(10)pLintabOut @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)prMaxSpeed @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)prMaxSpeedCalc @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)prAbsFlow @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(22)absolute flow in l/min @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)bFwd @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(38)TRUE if block is used for fwd movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)pCylinderData @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(14)tsCylinderData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(23)prMaxSpeedReducePercent @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(22)iMaxSpeedDigitsToFloor @RT(0) @T @F @DT @RT(4)SINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)prMaxPumpFlow @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(3)tmp @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)prMaxSpeedCalib @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(15)pUpdateVelocity @STRUCTURED_TEXT 
@RT(0) @RT(27)mprAbsFlow^,mpCylinderData^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(21)pUpdateVelocityLintab @STRUCTURED_TEXT 
@RT(0) @RT(16)mprMaxSpeedCalc^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(18)pUpdateMaxVelocity @STRUCTURED_TEXT 
@RT(0) @RT(17)mprMaxSpeedCalib^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(13)rScalePercent @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(18)pMachineDataLoaded @STRUCTURED_TEXT 
@RT(0) @RT(24)sv_iReadMachineDataCount @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(26)pMachineDataLoadingStarted @STRUCTURED_TEXT 
@RT(0) @RT(12)sv_DataState @RT(12)PU_Task_3(1) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(12)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

// save data to Vel lintab
mpLintabOut^.LintabPoints.uNoOfPoints := 2;
mpLintabOut^.LintabPoints.Point[1].rX := 0.0;
mpLintabOut^.LintabPoints.Point[1].rY := 0.0;
mpLintabOut^.LintabPoints.Point[2].rX := mprMaxSpeedCalc^;
mpLintabOut^.LintabPoints.Point[2].rY := 100.0; // %

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(42)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT sv_bCalcMaxValuesFromCylData THEN
   // no calculation necessary
   RETURN;
END_IF;

tmp := FFixCylinderData(mpCylinderData);

// convert from l/min to mm^3/sec            
rMaxFlow := mprAbsFlow^ * 100.0 *100.0 *100.0 / 60.0;

bSmallSize := mbFwd AND mpCylinderData^.bUseSmallSize OR
                 ((NOT mbFwd AND NOT mpCylinderData^.bUseSmallSize));
 
rSize := FCalculateCylinderSize(CylinderData := mpCylinderData^, 
                                bSmallSize := bSmallSize, 
                                bCalcHighPressSize := FALSE);
// mm³/s / mm² ->mm/s  
mprMaxSpeedCalc^ := rMaxFlow / rSize;
IF ((mbInitDone AND sv_DataState = nReady) AND (mprMaxSpeed^ > mprMaxSpeedCalc^)) THEN
   // prevent recalculation on machine data load except if max. value exceeds custom value
   rScalePercent := 100.0;
   IF mprMaxSpeedReducePercent <> EMPTY THEN
      rScalePercent := 100.0 - mprMaxSpeedReducePercent^;
   END_IF;
   mprMaxSpeed^ := FScaleAndFloor(mprMaxSpeedCalc^, rScalePercent, miMaxSpeedDigitsToFloor);
END_IF;
// check max velocity for visualization
IF (mbprMaxSpeedCalibLinked) THEN
   IF(mprMaxSpeedCalib^ <= 0.0) OR (mprMaxSpeedCalib^ > mprMaxSpeedCalc^) THEN
      mprMaxSpeedCalib^ := mprMaxSpeedCalc^;
   END_IF;
END_IF;   

   



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(54)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbInitDone := FALSE;
mprAbsFlow := prAbsFlow;
mpCylinderData := pCylinderData;
mpLintabOut := pLintabOut;
mprMaxSpeed := prMaxSpeed;
mprMaxSpeedCalc := prMaxSpeedCalc;
mprMaxSpeedCalib := prMaxSpeedCalib;
mprMaxSpeedReducePercent := prMaxSpeedReducePercent;
miMaxSpeedDigitsToFloor := iMaxSpeedDigitsToFloor;
mbFwd := bFwd;

IF NOT CHECK_REF(prAbsFlow^) THEN
    tmp := Print('prAbsFlow not valid');
    RETURN;
END_IF;

IF NOT CHECK_REF(pCylinderData^) THEN
    tmp := Print('pCylinderData not valid');
    RETURN;
END_IF;

IF (NOT CHECK_REF(pLintabOut^)) THEN
    tmp := Print('pLintabOut not valid');
    RETURN;    
END_IF;

IF (NOT CHECK_REF(prMaxSpeed^)) THEN
    tmp := Print('prMaxSpeed not valid');
    RETURN;    
END_IF;

IF (NOT CHECK_REF(prMaxSpeedCalc^)) THEN
    tmp := Print('prMaxSpeedCalc not valid');
    RETURN;    
END_IF;

IF (CHECK_REF(mprMaxSpeedCalib^)) THEN
    mbprMaxSpeedCalibLinked := TRUE;
END_IF;

aCalcMaxVelocity();

//update lintab
aUpdateLintabOut();

// init successful
mbInitDone := TRUE;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
         
IF NOT mbInitDone OR (sv_DataState = nReadMachineData) THEN
   RETURN;
END_IF;

// reset calib value if diameter or flow is changed
IF mbprMaxSpeedCalibLinked AND (sv_DataState = nReady) THEN
   mprMaxSpeedCalib^ := 0.0;
END_IF;

aCalcMaxVelocity();





@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
         
IF NOT mbInitDone THEN
    RETURN;
END_IF;

aUpdateLintabOut();



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_DataState = nReadMachineData THEN
   RETURN;
END_IF;

IF ((mprMaxSpeedCalib^ < mprMaxSpeed^) AND (mprMaxSpeedCalib^ > 0.0)) THEN
   rScalePercent := 100.0;
   IF mprMaxSpeedReducePercent <> EMPTY THEN
      rScalePercent := 100.0 - mprMaxSpeedReducePercent^;
   END_IF;
   mprMaxSpeed^ := FScaleAndFloor(mprMaxSpeedCalib^, rScalePercent, miMaxSpeedDigitsToFloor);
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aCalcMaxVelocity();

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_DataState = nReadMachineData THEN
   //reset max speed calib at the beginning of machine data loading
   //if max speed calib is part of the loaded machine data, the correct value comes from the XMl file
   //if max speed calib is not part of machine data it is set to max speed calc
   //when calling aCalcMaxVelocity after loading machine data is finished
   IF mbprMaxSpeedCalibLinked THEN
      mprMaxSpeedCalib^ := 0.0;
   END_IF;   
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
