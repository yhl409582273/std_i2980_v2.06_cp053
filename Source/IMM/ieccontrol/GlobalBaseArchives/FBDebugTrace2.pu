(*
Used for making traceoutputs to serial trace and infolog.
The text will be formatted like that: ´"Device Mold1: sText"
The outputs can be filtered by the settings in sv_TraceFilter.
sv_TraceFilter.bFilterOn          switches the filter on
sv_TraceFilter.DeviceFilter[x]    DeviceID of the devices that should output the trace. The outputs of every other Device will be filtered.

Depending on TraceLevel also sv_TraceLevel is checked
and if sv_TraceLevel.bXxxx is FALSE the message is not printed
*)

IMPORT_OVER_LISTFILE
 KPROT_UserInfoLog
, cMaxTraceFilters
, cAllDevIndex
, tnTraceLevel
, tsTraceLevel
, tsTraceFilter
, tsDeviceId
//  KPROT_Status

END_IMPORT

FUNCTION_BLOCK FBDebugTrace2 #DUMMY_EDIT_BLOCK

VAR_INPUT
 TraceLevel : tnTraceLevel (* Trace level that is checked in sv_TraceLevel.bXxxx *);
 sText : STRING(128) (* Text for Trace and Infolog *);
END_VAR

SYSTEM_VAR
 sv_TraceLevel : tsTraceLevel;
 sv_TraceFilter : tsTraceFilter;
 sv_DeviceId : tsDeviceId;
END_VAR

VAR_TEMP
 i : DINT;
 bFiltered : BOOL;
END_VAR

VAR
 // State : KPROT_Status;
 dummy : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TraceFilter.bFilterOn THEN
   FOR i := 1 TO cMaxTraceFilters DO
       bFiltered := TRUE;
       IF sv_TraceFilter.DeviceFilter[i].CompId = sv_DeviceId.CompId AND
         (sv_TraceFilter.DeviceFilter[i].IndexId = sv_DeviceId.IndexId OR
          sv_TraceFilter.DeviceFilter[i].IndexId = cAllDevIndex)         THEN
            
           bFiltered := FALSE; 
           EXIT;
       END_IF;
   END_FOR;
END_IF;

CASE TraceLevel OF
   nApplication:
   IF NOT sv_TraceLevel.bApplication THEN
      bFiltered := TRUE;
   END_IF;
   nRegistration:
   IF NOT sv_TraceLevel.bRegistration THEN
      bFiltered := TRUE;
   END_IF;
   nLockUnlock:
   IF NOT sv_TraceLevel.bLockUnlock THEN
      bFiltered := TRUE;
   END_IF;
   nDeviceState:
   IF NOT sv_TraceLevel.bDeviceState THEN
      bFiltered := TRUE;
   END_IF;
   nAnalog:
   IF NOT sv_TraceLevel.bAnalog THEN
      bFiltered := TRUE;
   END_IF;
   nServo:
   IF NOT sv_TraceLevel.bServo THEN
      bFiltered := TRUE;
   END_IF;
   nODCInterpreter:
   IF NOT sv_TraceLevel.bODCInterpreter THEN
      bFiltered := TRUE;
   END_IF;
   nODCDependencies:
   IF NOT sv_TraceLevel.bODCDependencies THEN
      bFiltered := TRUE;
   END_IF;
END_CASE;

IF NOT bFiltered THEN
    
    (*State := KPROT_UserInfoLog(Text:= 'Device %1i.%2i: %5s',
                            Param1:= sv_DeviceId.CompId,
                            Param2:= sv_DeviceId.IndexId,
                            Param3:= 0,
                            Param4:= 0,
                            Param5:=sText);*)
    dummy := Print("Device %d.%d: %s",
                    sv_DeviceId.CompId,
                    sv_DeviceId.IndexId,
                    sText);
END_IF;


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@
Used for making traceoutputs to serial trace and infolog.
The text will be formatted like that: ´"Device Mold1: sText"
The outputs can be filtered by the settings in sv_TraceFilter.
sv_TraceFilter.bFilterOn          switches the filter on
sv_TraceFilter.DeviceFilter[x]    DeviceID of the devices that should output the trace. The outputs of every other Device will be filtered.

Depending on TraceLevel also sv_TraceLevel is checked
and if sv_TraceLevel.bXxxx is FALSE the message is not printed
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(17)KPROT_UserInfoLog @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
2 
@Var @RT(16)cMaxTraceFilters @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(1)4 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)cAllDevIndex @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(2)11 @RT(59)to lock all devices of a component ( = cMaxDeviceIndex + 1) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(13)FBDebugTrace2 @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(10)TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tnTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(50)Trace level that is checked in sv_TraceLevel.bXxxx @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)sText @RT(0) @T @F @DT @RT(11)STRING(128) @RT(0) @T @T @STRING 0 @F @RT(3)128 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)Text for Trace and Infolog @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)sv_TraceFilter @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsTraceFilter @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(5)State @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KPROT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(9)bFiltered @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(67)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_TraceFilter.bFilterOn THEN
   FOR i := 1 TO cMaxTraceFilters DO
       bFiltered := TRUE;
       IF sv_TraceFilter.DeviceFilter[i].CompId = sv_DeviceId.CompId AND
         (sv_TraceFilter.DeviceFilter[i].IndexId = sv_DeviceId.IndexId OR
          sv_TraceFilter.DeviceFilter[i].IndexId = cAllDevIndex)         THEN
            
           bFiltered := FALSE; 
           EXIT;
       END_IF;
   END_FOR;
END_IF;

CASE TraceLevel OF
   nApplication:
   IF NOT sv_TraceLevel.bApplication THEN
      bFiltered := TRUE;
   END_IF;
   nRegistration:
   IF NOT sv_TraceLevel.bRegistration THEN
      bFiltered := TRUE;
   END_IF;
   nLockUnlock:
   IF NOT sv_TraceLevel.bLockUnlock THEN
      bFiltered := TRUE;
   END_IF;
   nDeviceState:
   IF NOT sv_TraceLevel.bDeviceState THEN
      bFiltered := TRUE;
   END_IF;
   nAnalog:
   IF NOT sv_TraceLevel.bAnalog THEN
      bFiltered := TRUE;
   END_IF;
   nServo:
   IF NOT sv_TraceLevel.bServo THEN
      bFiltered := TRUE;
   END_IF;
   nODCInterpreter:
   IF NOT sv_TraceLevel.bODCInterpreter THEN
      bFiltered := TRUE;
   END_IF;
   nODCDependencies:
   IF NOT sv_TraceLevel.bODCDependencies THEN
      bFiltered := TRUE;
   END_IF;
END_CASE;

IF NOT bFiltered THEN
    
    (*State := KPROT_UserInfoLog(Text:= 'Device %1i.%2i: %5s',
                            Param1:= sv_DeviceId.CompId,
                            Param2:= sv_DeviceId.IndexId,
                            Param3:= 0,
                            Param4:= 0,
                            Param5:=sText);*)
    dummy := Print("Device %d.%d: %s",
                    sv_DeviceId.CompId,
                    sv_DeviceId.IndexId,
                    sText);
END_IF;

@END_Body 

@END_Contents 
