(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB starts and stopps the process algorithms for fast output and mid output.
After a change in the lintab, a minimum output voltage is calculated.
During the operation modes manual, HA and FA the output to the valve is at least this calculated minimum voltage,
even if there is actually no movement active.
In setup mode, the output voltage is set to 0.0 if the valve is stopped.
This block offers also the possibility to add a dither signal to the output.
Setting the dither amplitude to 0.0 disables the signal.
If the application is not running on a CP 03x, the dither amplitude is automatically resetted to 0.0. 
*)

IMPORT_OVER_LISTFILE
 WRITE_SVREAL_DIRECT
, cLintabPA
, cLintabPB
, cLintabNotDef
, cLintabAT
, cLintabBT
, ABAnalogHWOut
, ABAnalogOutput
, tsDeviceId
, KAPPL_LintabData
, tnOperationMode
, tnAnaOutputMode
, FBDebugTrace
, FBSinus
, KCTRL_Lintab_Light
, KCTRL_Lintab_Param_Light
, KCAT_HandleData
, KCAT_Status

END_IMPORT

ALGORITHM_BLOCK ABValveOutput #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_rVelocity : REAL;
 sv_DeviceId : tsDeviceId;
 sv_Lintab : KAPPL_LintabData;
 sv_rMinVoltageBackPressOutput : REAL (* minimum output voltage of AO back pressure *);
 sv_rValueMinVoltageBackPresDet : REAL (* x - value [bar] for detection of minimum output voltage of AO back pressure *);
 sv_OperationMode : tnOperationMode;
 sv_bInitStart : BOOL;
 sv_rDitherAmplitude : REAL;
 sv_rDitherFrequency : REAL;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 TaskAnalog : TASK;
 TaskInject : TASK;
 erVariableNotLinked : ALARM;
 PU_Task_7 : TASK;
 PU_Task_3 : TASK;
END_OBJECT

VAR
 abAnalogHWOut : ABAnalogHWOut;
 abAnalogOutput : ABAnalogOutput;
 mprVelocitySource : REFTO REAL;
 mbStop : BOOL;
 mbStopped : BOOL := TRUE;
 mrMinVoltageBackPressureOutput : REAL (* minimum voltage for AO backpressure (only considered in HA and FA) *);
END_VAR

ALGORITHM aStart


VAR_INPUT
 pLintab : REFTO KAPPL_LintabData;
 AnaOutMode : tnAnaOutputMode;
 prVelocity : REFTO REAL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStop := FALSE;
mbStopped := FALSE;

mprVelocitySource := prVelocity;

abAnalogOutput.aInit (pLintab := pLintab);

CASE AnaOutMode OF
    
        nAnaOutputModeMid:  START_PROCESS_ALGORITHM(paMidOutput);
        nAnaOutputModeFast: START_PROCESS_ALGORITHM(paFastOutput);
END_CASE;    


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aStop


VAR_OUTPUT
 bReady : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT mbStopped THEN
   mbStop := TRUE;
END_IF;
bReady := mbStopped;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSetErrorMessage


VAR
 fbDebugTrace : FBDebugTrace;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT abAnalogHWOut.aIsLinked() THEN
   SET_ALARM(Name := erVariableNotLinked,
             SubID1 := sv_DeviceId.CompId,
             SubID2 := sv_DeviceId.IndexId,
             Param1 := 'ao_Pressure');
ELSE
   IF abAnalogOutput.aRun.bError THEN
      fbDebugTrace(CONCAT('ABValveOutput: error ',DINT_TO_STRING(abAnalogOutput.aRun.iErrorInfo),' in ABAnalogOutput'));
   END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paMidOutput ON TaskAnalog


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 fbSinus : FBSinus;
 rDither : REAL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP OUT:
Init (P);
AOUT (N);
END_STEP

ACTION Init: #BEGIN_EDIT_BLOCK
mbStopped := FALSE;

;#END_EDIT_BLOCK END_ACTION (*Init*)
ACTION AOUT: #BEGIN_EDIT_BLOCK
IF sv_rDitherAmplitude > 0.0 THEN
   fbSinus(rAmplitude := sv_rDitherAmplitude,
           rFrequency := sv_rDitherFrequency,
           rOut => rDither);
ELSE
   rDither := 0.0;
END_IF;

b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^); 
(* Lintab Calculation *)
abAnalogOutput.aRun(rSetValue := sv_rVelocity);

(* Output to AO and Shortcircuit detection *)
abAnalogHWOut.aOut(rValue := (MAX(abAnalogOutput.aRun.rOutput, mrMinVoltageBackPressureOutput)) + rDither);

;#END_EDIT_BLOCK END_ACTION (*AOUT*)

(* steps *)
STEP ERROR_STOP:
AErrorStop (P);
END_STEP

ACTION AErrorStop: #BEGIN_EDIT_BLOCK
sv_rVelocity := 0.0;
aSetErrorMessage();

;#END_EDIT_BLOCK END_ACTION (*AErrorStop*)
STEP S_Stop:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
mbStop := FALSE; 
(* Stopping Analog Output*)
abAnalogHWOut.aOut(rValue := mrMinVoltageBackPressureOutput);
mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ACTION (*AStop*)

(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM OUT TO ERROR_STOP :=  #BEGIN_EDIT_BLOCK
abAnalogOutput.aRun.bError OR
abAnalogHWOut.aOut.bError
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans5 (* Trans5 *) FROM ERROR_STOP TO S_Stop :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TStop (* Trans4 *) FROM OUT TO S_Stop :=  #BEGIN_EDIT_BLOCK
mbStop
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TNewOutput (* Trans3 *) FROM S_Stop TO OUT :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

PROCESS_ALGORITHM paFastOutput ON TaskInject


VAR_TEMP
 b : BOOL;
END_VAR

VAR
 fbSinus : FBSinus;
 rDither : REAL;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP OUT:
Init (P);
AOUT (N);
END_STEP

ACTION Init: #BEGIN_EDIT_BLOCK
mbStopped := FALSE;

;#END_EDIT_BLOCK END_ACTION (*Init*)
ACTION AOUT: #BEGIN_EDIT_BLOCK
IF sv_rDitherAmplitude > 0.0 THEN
   fbSinus(rAmplitude := sv_rDitherAmplitude,
           rFrequency := sv_rDitherFrequency,
           rOut => rDither);
ELSE
   rDither := 0.0;
END_IF;

b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^);
(* Lintab Calculation *)
abAnalogOutput.aRun(rSetValue := sv_rVelocity);

(* Output to AO and Shortcircuit detection *)
abAnalogHWOut.aOut(rValue := (MAX(abAnalogOutput.aRun.rOutput, mrMinVoltageBackPressureOutput)) + rDither);

;#END_EDIT_BLOCK END_ACTION (*AOUT*)

(* steps *)
STEP ERROR_STOP:
AErrorStop (P);
END_STEP

ACTION AErrorStop: #BEGIN_EDIT_BLOCK
sv_rVelocity := 0.0;
aSetErrorMessage();

;#END_EDIT_BLOCK END_ACTION (*AErrorStop*)
STEP S_Stop:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
mbStop := FALSE; 
(* Stopping Analog Output*)
abAnalogHWOut.aOut(rValue := mrMinVoltageBackPressureOutput);
mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();


;#END_EDIT_BLOCK END_ACTION (*AStop*)

(* transitions *)
TRANSITION Trans1 (* Trans1 *) FROM OUT TO ERROR_STOP :=  #BEGIN_EDIT_BLOCK
abAnalogOutput.aRun.bError OR
abAnalogHWOut.aOut.bError
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION Trans5 (* Trans5 *) FROM ERROR_STOP TO S_Stop :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TStop (* Trans4 *) FROM OUT TO S_Stop :=  #BEGIN_EDIT_BLOCK
mbStop
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TNewOutput (* Trans8 *) FROM S_Stop TO OUT :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)
(* end sfc-code *)


END_ALGORITHM

ALGORITHM aGetMinVoltage


VAR_INPUT
 pLintab : REFTO KAPPL_LintabData;
 rXValue : REAL (* xValue (for example 1% or 2 bar) *);
END_VAR

VAR_OUTPUT
 rMinVoltage : REAL (* according voltage for rXValue *);
END_VAR

VAR
 Lintab : KCTRL_Lintab_Light;
 LintabParams : KCTRL_Lintab_Param_Light;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

LintabParams.LintabPoints := pLintab^.LintabPoints;
LintabParams.Mode.bLinearExtrapolation := TRUE; 
LintabParams.Mode.bSetNegativeValuesToZero := FALSE;
LintabParams.Mode.bZeroExtrapolation := FALSE;
Lintab.Par(Param := LintabParams);

IF Lintab.Par.parStatus <> KCTRL_Ret_OK THEN
   rMinVoltage := 0.0;
   RETURN; //error -> return 0.0
END_IF;

//calculate value
Lintab.Calculate(rX := rXValue);
IF Lintab.Calculate.calcStatus <> KCTRL_Ret_OK THEN
   rMinVoltage := 0.0;
   RETURN; //error -> return 0.0
ELSE
   rMinVoltage := Lintab.Calculate.rY;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLintab ON PU_Task_7 WITH sv_Lintab,sv_rValueMinVoltageBackPresDet

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetMinVoltage(pLintab := @sv_Lintab,
               rXValue := sv_rValueMinVoltageBackPresDet,
               rMinVoltage => sv_rMinVoltageBackPressOutput);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pDitherAmplitude ON PU_Task_7 WITH sv_bInitStart,sv_rDitherAmplitude


VAR
 HandleData : KCAT_HandleData;
 CatStatus : KCAT_Status;
 sDevice : STRING(31);
 bInitDone : BOOL;
 bCurrentOutput : BOOL (* TRUE: current output available *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
   //get device name
   HandleData := KCAT_GetHandle('IO.ONBOARD.deviceName');
   IF HandleData.Status = KCAT_Status_OK THEN
      CatStatus := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sDevice);  
      sDevice := LEFT(sDevice,5);
      
      IF sDevice ='CP 03' THEN
         bCurrentOutput := TRUE;     
      END_IF;  
   END_IF;
   
   bInitDone := TRUE;
   
END_IF;

IF NOT bCurrentOutput THEN
   //set dither amplitude to 0.0 (=disable dither signal)
   sv_rDitherAmplitude := 0.0;
END_IF;




;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pSetMinVoltage ON PU_Task_3 WITH sv_bInitDone,sv_rMinVoltageBackPressOutput,sv_OperationMode

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN
   //setup mode -> set minimum output voltage to 0.0
   mrMinVoltageBackPressureOutput := 0.0;
ELSE
   //all other operation modes
   mrMinVoltageBackPressureOutput := sv_rMinVoltageBackPressOutput;     
END_IF;

IF mbStopped THEN
   //write to AO immediately if device is not active
   abAnalogHWOut.aOut(rValue := mrMinVoltageBackPressureOutput);
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 10 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB starts and stopps the process algorithms for fast output and mid output.
After a change in the lintab, a minimum output voltage is calculated.
During the operation modes manual, HA and FA the output to the valve is at least this calculated minimum voltage,
even if there is actually no movement active.
In setup mode, the output voltage is set to 0.0 if the valve is stopped.
This block offers also the possibility to add a dither signal to the output.
Setting the dither amplitude to 0.0 disables the signal.
If the application is not running on a CP 03x, the dither amplitude is automatically resetted to 0.0. 
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(19)WRITE_SVREAL_DIRECT @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
5 
@Var @RT(9)cLintabPA @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cLintabPB @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)cLintabNotDef @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cLintabAT @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(9)cLintabBT @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABValveOutput @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
21 
@Var @RT(10)TaskAnalog @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)TaskInject @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(12)sv_rVelocity @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)abAnalogHWOut @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)ABAnalogHWOut @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)abAnalogOutput @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)ABAnalogOutput @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(17)mprVelocitySource @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mbStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mbStopped @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(4)TRUE @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(19)erVariableNotLinked @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)sv_Lintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(29)sv_rMinVoltageBackPressOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)minimum output voltage of AO back pressure @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(30)sv_rValueMinVoltageBackPresDet @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(75)x - value [bar] for detection of minimum output voltage of AO back pressure @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(30)mrMinVoltageBackPressureOutput @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(66)minimum voltage for AO backpressure (only considered in HA and FA) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)PU_Task_3 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)sv_OperationMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnOperationMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rDitherAmplitude @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)sv_rDitherFrequency @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

9 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aStart @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(7)pLintab @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)AnaOutMode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)tnAnaOutputMode @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(10)prVelocity @RT(0) @T @T @REFTO 0 @T @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aStop @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)bReady @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(16)aSetErrorMessage @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(11)paMidOutput @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskAnalog @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(7)fbSinus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)FBSinus @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)rDither @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(12)paFastOutput @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(10)TaskInject @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(7)fbSinus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)FBSinus @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)rDither @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(1)b @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(14)aGetMinVoltage @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(7)pLintab @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(16)KAPPL_LintabData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)rXValue @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(32)xValue (for example 1% or 2 bar) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)rMinVoltage @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)according voltage for rXValue @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)Lintab @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)KCTRL_Lintab_Light @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)LintabParams @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(24)KCTRL_Lintab_Param_Light @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(7)pLintab @STRUCTURED_TEXT 
@RT(0) @RT(40)sv_Lintab,sv_rValueMinVoltageBackPresDet @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pDitherAmplitude @STRUCTURED_TEXT 
@RT(0) @RT(33)sv_bInitStart,sv_rDitherAmplitude @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(10)HandleData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)KCAT_HandleData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)CatStatus @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)KCAT_Status @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)sDevice @RT(0) @T @F @DT @RT(10)STRING(31) @RT(0) @T @T @STRING 0 @F @RT(2)31 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(14)bCurrentOutput @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(30)TRUE: current output available @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(14)pSetMinVoltage @STRUCTURED_TEXT 
@RT(0) @RT(59)sv_bInitDone,sv_rMinVoltageBackPressOutput,sv_OperationMode @RT(9)PU_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mbStop := FALSE;
mbStopped := FALSE;

mprVelocitySource := prVelocity;

abAnalogOutput.aInit (pLintab := pLintab);

CASE AnaOutMode OF
    
        nAnaOutputModeMid:  START_PROCESS_ALGORITHM(paMidOutput);
        nAnaOutputModeFast: START_PROCESS_ALGORITHM(paFastOutput);
END_CASE;    

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(10)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT mbStopped THEN
   mbStop := TRUE;
END_IF;
bReady := mbStopped;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT abAnalogHWOut.aIsLinked() THEN
   SET_ALARM(Name := erVariableNotLinked,
             SubID1 := sv_DeviceId.CompId,
             SubID2 := sv_DeviceId.IndexId,
             Param1 := 'ao_Pressure');
ELSE
   IF abAnalogOutput.aRun.bError THEN
      fbDebugTrace(CONCAT('ABValveOutput: error ',DINT_TO_STRING(abAnalogOutput.aRun.iErrorInfo),' in ABAnalogOutput'));
   END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
8 5 7 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(3)OUT @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(4)Init @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
mbStopped := FALSE;

@F 
@Acb @RT(4)AOUT @F @T @RT(1)N @RT(0) @F @F @T @TL(15)
IF sv_rDitherAmplitude > 0.0 THEN
   fbSinus(rAmplitude := sv_rDitherAmplitude,
           rFrequency := sv_rDitherFrequency,
           rOut => rDither);
ELSE
   rDither := 0.0;
END_IF;

b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^); 
(* Lintab Calculation *)
abAnalogOutput.aRun(rSetValue := sv_rVelocity);

(* Output to AO and Shortcircuit detection *)
abAnalogHWOut.aOut(rValue := (MAX(abAnalogOutput.aRun.rOutput, mrMinVoltageBackPressureOutput)) + rDither);

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(3)
abAnalogOutput.aRun.bError OR
abAnalogHWOut.aOut.bError

@RT(6)Trans1 @F 
@Step @RT(10)ERROR_STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(10)AErrorStop @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
sv_rVelocity := 0.0;
aSetErrorMessage();

@F 

@Trans @RT(6)Trans5 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans5 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(5)TStop @F @T @T @F @T @F @TL(2)
mbStop

@RT(6)Trans4 @F 


@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
mbStop := FALSE; 
(* Stopping Analog Output*)
abAnalogHWOut.aOut(rValue := mrMinVoltageBackPressureOutput);
mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();


@F 

@Trans @RT(10)TNewOutput @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans3 @F 
@Goto @RT(3)OUT @F @F 
@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_SfcBody 
9 6 9 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 5 
@Step @RT(3)OUT @F @T @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(4)Init @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
mbStopped := FALSE;

@F 
@Acb @RT(4)AOUT @F @T @RT(1)N @RT(0) @F @F @T @TL(15)
IF sv_rDitherAmplitude > 0.0 THEN
   fbSinus(rAmplitude := sv_rDitherAmplitude,
           rFrequency := sv_rDitherFrequency,
           rOut => rDither);
ELSE
   rDither := 0.0;
END_IF;

b := WRITE_SVREAL_DIRECT(sv_rVelocity, mprVelocitySource^);
(* Lintab Calculation *)
abAnalogOutput.aRun(rSetValue := sv_rVelocity);

(* Output to AO and Shortcircuit detection *)
abAnalogHWOut.aOut(rValue := (MAX(abAnalogOutput.aRun.rOutput, mrMinVoltageBackPressureOutput)) + rDither);

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 3 
@Trans @RT(6)Trans1 @F @T @F @F @T @T @TL(3)
abAnalogOutput.aRun.bError OR
abAnalogHWOut.aOut.bError

@RT(6)Trans1 @F 
@Step @RT(10)ERROR_STOP @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(10)AErrorStop @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
sv_rVelocity := 0.0;
aSetErrorMessage();

@F 

@Trans @RT(6)Trans5 @F @T @F @F @T @F @TL(2)
TRUE

@RT(6)Trans5 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(5)TStop @F @T @T @F @T @F @TL(2)
mbStop

@RT(6)Trans4 @F 


@Step @RT(6)S_Stop @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(7)
mbStop := FALSE; 
(* Stopping Analog Output*)
abAnalogHWOut.aOut(rValue := mrMinVoltageBackPressureOutput);
mbStopped := TRUE;
STOP_PROCESS_ALGORITHM();


@F 

@Trans @RT(10)TNewOutput @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans8 @F 
@Goto @RT(3)OUT @F @F 
@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 0 
@END_SfcBody 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(26)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

LintabParams.LintabPoints := pLintab^.LintabPoints;
LintabParams.Mode.bLinearExtrapolation := TRUE; 
LintabParams.Mode.bSetNegativeValuesToZero := FALSE;
LintabParams.Mode.bZeroExtrapolation := FALSE;
Lintab.Par(Param := LintabParams);

IF Lintab.Par.parStatus <> KCTRL_Ret_OK THEN
   rMinVoltage := 0.0;
   RETURN; //error -> return 0.0
END_IF;

//calculate value
Lintab.Calculate(rX := rXValue);
IF Lintab.Calculate.calcStatus <> KCTRL_Ret_OK THEN
   rMinVoltage := 0.0;
   RETURN; //error -> return 0.0
ELSE
   rMinVoltage := Lintab.Calculate.rY;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

aGetMinVoltage(pLintab := @sv_Lintab,
               rXValue := sv_rValueMinVoltageBackPresDet,
               rMinVoltage => sv_rMinVoltageBackPressOutput);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(28)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF NOT bInitDone THEN
   //get device name
   HandleData := KCAT_GetHandle('IO.ONBOARD.deviceName');
   IF HandleData.Status = KCAT_Status_OK THEN
      CatStatus := KCAT_GetValue(Handle := HandleData.Handle, Buffer := sDevice);  
      sDevice := LEFT(sDevice,5);
      
      IF sDevice ='CP 03' THEN
         bCurrentOutput := TRUE;     
      END_IF;  
   END_IF;
   
   bInitDone := TRUE;
   
END_IF;

IF NOT bCurrentOutput THEN
   //set dither amplitude to 0.0 (=disable dither signal)
   sv_rDitherAmplitude := 0.0;
END_IF;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF sv_OperationMode = nSetup THEN
   //setup mode -> set minimum output voltage to 0.0
   mrMinVoltageBackPressureOutput := 0.0;
ELSE
   //all other operation modes
   mrMinVoltageBackPressureOutput := sv_rMinVoltageBackPressOutput;     
END_IF;

IF mbStopped THEN
   //write to AO immediately if device is not active
   abAnalogHWOut.aOut(rValue := mrMinVoltageBackPressureOutput);
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
