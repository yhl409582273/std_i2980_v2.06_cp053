IMPORT_OVER_LISTFILE
 GET_TASK_INTERVAL
, MeasureVI_State_NOTOK
, MeasureVI_State_OK
, MeasureVI_State_InvalidParam
, tnMeasureVIState
, KCTRL_Impulse_Param
, KHW_Vel_Data

END_IMPORT

ALGORITHM_BLOCK ABMeasureVI #DUMMY_EDIT_BLOCK

VAR
 // mRev : UDINT (* total count of revolutions *);
 mRpm : REAL (* count of revolutions per time unit *);
 mGain : REAL (* count of cams *);
 mTimeUnit : REAL (* time unit for the calculated velocity in s, eg. 60 for rounds per minute (rpm) *);
 mVMin : REAL (* minimum velocity *);
 mState : tnMeasureVIState := MeasureVI_State_NOTOK (* local state variable *);
END_VAR

ALGORITHM Par


VAR_OUTPUT
 parState : tnMeasureVIState;
END_VAR

VAR_IN_OUT
 Param : KCTRL_Impulse_Param;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

parState := MeasureVI_State_OK;
// setting rGain represents setting count of screw cams
IF (Param.rGain > 0.0) THEN
    mGain := Param.rGain;
ELSE
    mGain := 1.0;
    parState := MeasureVI_State_InvalidParam;
END_IF;

//@ set time unit for the output signal, 1/rTime[s], e.g. 60.0 for revolutions per minute [1/min]
IF (Param.rTime > 0.0) THEN
    mTimeUnit := Param.rTime;
ELSE
    mTimeUnit := 60.0;
    parState := MeasureVI_State_InvalidParam;
END_IF;

//@ setting minimum output velocity, according to time unit (set with rTime), if the calculated
//  velocity is lower than this, the output velocity will be set to zero.
IF (Param.rImpVMin >= 0.0) THEN
    mVMin := Param.rImpVMin;
ELSE
    mVMin := 1.0;
    parState := MeasureVI_State_InvalidParam;
END_IF;

// set state to local member variable
mState := parState;




;#END_EDIT_BLOCK END_ALGORITHM

// ALGORITHM Init


// VAR_INPUT
 // uImpStart : UDINT;
// END_VAR
// #BEGIN_EDIT_BLOCK
// mRev := uImpStart;


// ;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM Calculate


VAR_OUTPUT
 calcState : tnMeasureVIState;
 rImpV : REAL;
END_VAR

VAR_INPUT
 VIData : KHW_Vel_Data;
END_VAR

VAR
 rActPeriodTime : REAL;
 rCycleTime : REAL := 2.0e-3;
 bParam : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF NOT bParam THEN
   rCycleTime := LINT_TO_REAL(TIME_TO_LINT(GET_TASK_INTERVAL())) * 1.0e-6;
   bParam := TRUE;
END_IF;
// check parametrizing state
IF (mState <> MeasureVI_State_OK) THEN
   calcState := mState;
   RETURN;
END_IF;

// calculate velocity according to the set time unit
IF (VIData.periodTime > 0.0) THEN
   // reset time
   IF VIData.newPeriodReady THEN
      rActPeriodTime := 0.0;   
   END_IF;    
   // velocity is inverse proportional to elapsed time
   // if next period is longer than last one
   mRpm := mTimeUnit /(MAX(VIData.periodTime, rActPeriodTime) * mGain);       
   IF (mRpm < mVMin) THEN
      mRpm := 0.0;    
   END_IF;
   rActPeriodTime := rActPeriodTime + rCycleTime;
ELSE
   mRpm := 0.0;
END_IF;
//mRev = mRev + cycleTime/(VIData.periodTime * mGain); // todo implement revolution counter

// set output variables
rImpV := mRpm;
calcState := MeasureVI_State_OK;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 159 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(17)GET_TASK_INTERVAL @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
3 
@Var @RT(21)MeasureVI_State_NOTOK @RT(0) @T @T @DERIVED 0 @F @RT(16)tnMeasureVIState @F 
@T 
@BEG_Attrib 
0 @RT(1)1 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)MeasureVI_State_OK @RT(0) @T @T @DERIVED 0 @F @RT(16)tnMeasureVIState @F 
@T 
@BEG_Attrib 
0 @RT(1)0 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(28)MeasureVI_State_InvalidParam @RT(0) @T @T @DERIVED 0 @F @RT(16)tnMeasureVIState @F 
@T 
@BEG_Attrib 
0 @RT(1)2 @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(11)ABMeasureVI @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(4)mRev @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @T 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)total count of revolutions @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)mRpm @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(34)count of revolutions per time unit @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)mGain @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)count of cams @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)mTimeUnit @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(78)time unit for the calculated velocity in s, eg. 60 for rounds per minute (rpm) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(5)mVMin @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(16)minimum velocity @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tnMeasureVIState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(21)MeasureVI_State_NOTOK @RT(20)local state variable @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

3 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(3)Par @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(8)parState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tnMeasureVIState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)Param @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(19)KCTRL_Impulse_Param @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)Init @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @T 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(9)uImpStart @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)Calculate @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
6 
@Var @RT(9)calcState @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)tnMeasureVIState @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(5)rImpV @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)VIData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)KHW_Vel_Data @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)rActPeriodTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)rCycleTime @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(6)2.0e-3 @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)bParam @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(36)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

parState := MeasureVI_State_OK;
// setting rGain represents setting count of screw cams
IF (Param.rGain > 0.0) THEN
    mGain := Param.rGain;
ELSE
    mGain := 1.0;
    parState := MeasureVI_State_InvalidParam;
END_IF;

//@ set time unit for the output signal, 1/rTime[s], e.g. 60.0 for revolutions per minute [1/min]
IF (Param.rTime > 0.0) THEN
    mTimeUnit := Param.rTime;
ELSE
    mTimeUnit := 60.0;
    parState := MeasureVI_State_InvalidParam;
END_IF;

//@ setting minimum output velocity, according to time unit (set with rTime), if the calculated
//  velocity is lower than this, the output velocity will be set to zero.
IF (Param.rImpVMin >= 0.0) THEN
    mVMin := Param.rImpVMin;
ELSE
    mVMin := 1.0;
    parState := MeasureVI_State_InvalidParam;
END_IF;

// set state to local member variable
mState := parState;



@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(2)
mRev := uImpStart;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(36)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
IF NOT bParam THEN
   rCycleTime := LINT_TO_REAL(TIME_TO_LINT(GET_TASK_INTERVAL())) * 1.0e-6;
   bParam := TRUE;
END_IF;
// check parametrizing state
IF (mState <> MeasureVI_State_OK) THEN
   calcState := mState;
   RETURN;
END_IF;

// calculate velocity according to the set time unit
IF (VIData.periodTime > 0.0) THEN
   // reset time
   IF VIData.newPeriodReady THEN
      rActPeriodTime := 0.0;   
   END_IF;    
   // velocity is inverse proportional to elapsed time
   // if next period is longer than last one
   mRpm := mTimeUnit /(MAX(VIData.periodTime, rActPeriodTime) * mGain);       
   IF (mRpm < mVMin) THEN
      mRpm := 0.0;    
   END_IF;
   rActPeriodTime := rActPeriodTime + rCycleTime;
ELSE
   mRpm := 0.0;
END_IF;
//mRev = mRev + cycleTime/(VIData.periodTime * mGain); // todo implement revolution counter

// set output variables
rImpV := mRpm;
calcState := MeasureVI_State_OK;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
