(*
IntermediateCond is optional(only needed for movements with intermediate conditions)
It starts from 1 to and goes up to the maximum intermediate condition
For movements without intermediate conditions it should be 0.

*)

IMPORT_OVER_LISTFILE
 SET_EVENT
, ASSERT
, tsDeviceId
, tMoveIdent
, tsMoveData
, tevStartData
, tevStart

END_IMPORT

FUNCTION_BLOCK FBStart #DUMMY_EDIT_BLOCK

VAR_INPUT
 DeviceId : tsDeviceId (* Device that should be started *);
 MoveDir : tMoveIdent (* Movement direction to start *);
 MoveId : tMoveIdent (* Movement ID to start *);
 IntermediateCond : DINT (* optional: Intermediate condition that should be used for the movement *);
 pbPosReached : REFTO BOOL (* optional: *);
 pMovementData : REFTO tsMoveData (* optional: Reference to the sv_MoveXxx *);
END_VAR

SYSTEM_VAR
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 evStart : tevStart;
 erAssert : ALARM;
END_OBJECT

VAR
 evStartData : tevStartData;
 dummy : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//if the movements are still not registered, gives application programmer code offset and frame offset
dummy := ASSERT(sv_bInitDone, erAssert);    

//send start event
evStartData.DeviceId := DeviceId;
evStartData.MoveDir := MoveDir;
evStartData.MoveId := MoveId;
evStartData.IntermediateCond := IntermediateCond;
evStartData.pbPosReached := pbPosReached;
evStartData.pMovementData := pMovementData;
SET_EVENT(evStart,evStartData);





;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 96 @Pou 25 
@@@BEG_Comment@@@
IntermediateCond is optional(only needed for movements with intermediate conditions)
It starts from 1 to and goes up to the maximum intermediate condition
For movements without intermediate conditions it should be 0.

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_EVENT @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(7)FBStart @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(8)DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)Device that should be started @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)MoveDir @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)Movement direction to start @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)Movement ID to start @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)IntermediateCond @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(69)optional: Intermediate condition that should be used for the movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)pbPosReached @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(9)optional: @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)pMovementData @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(10)tsMoveData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(37)optional: Reference to the sv_MoveXxx @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)evStartData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tevStartData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(7)evStart @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(8)tevStart @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(20)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//if the movements are still not registered, gives application programmer code offset and frame offset
dummy := ASSERT(sv_bInitDone, erAssert);    

//send start event
evStartData.DeviceId := DeviceId;
evStartData.MoveDir := MoveDir;
evStartData.MoveId := MoveId;
evStartData.IntermediateCond := IntermediateCond;
evStartData.pbPosReached := pbPosReached;
evStartData.pMovementData := pMovementData;
SET_EVENT(evStart,evStartData);




@END_Body 

@END_Contents 
