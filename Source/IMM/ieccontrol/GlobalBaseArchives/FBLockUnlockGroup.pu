(*
With this FunctionBlock a group of movements can be locked. 
Groups can be locked or unlocked every time, no matter if a member of the group is active or inactive.
With the parameter "Mode" 2 different Lock-Modes and the Unlock-Mode can be chosen.

Mode = enLockResume
  -if an inactive movement is locked and started afterwards it will stand still until it is being unlocked.
  -if an active movement is being locked it stopps its motion until it is being unlocked.
  In both cases the movement resumes its motion automatically after unlocking.

Mode = enLockAbort  
  -if an inactively locked movement is tried to be started it will inactively remain until it is being unlocked and started again.
  -if an active movement is being locked it will stop its motion. To restart the movement it has to be unlocked first 
   and started again.
   
Mode = Unlock
   Unlock Movement  

The group-membership of each movement has to be defined in systemVariable sv_MoveXxx.LockGroups[].
Every movement can be member of multible lockgroups. 
The lockgroups itself are defined by constants in the LockGroups.tu file
*)

IMPORT_OVER_LISTFILE
 ASSERT
, tLockGroup
, tsAlarm
, tnLockUnlock
, tevLockUnlockGroup
, tevLockUnlockGroupData
, tsDeviceId

END_IMPORT

FUNCTION_BLOCK FBLockUnlockGroup #DUMMY_EDIT_BLOCK

VAR_INPUT
 Group : tLockGroup (* Group to lock *);
 Alarm : tsAlarm (* this alarm is set if the locked movement is tried to be started *);
 Mode : tnLockUnlock (* Modes: enLockResume, enLockAbort, enUnlock *);
 bSetAlarmImmediately : BOOL (* FALSE: alarm is set if locked movement should be started; TRUE: alarm is set immediately *);
END_VAR

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
 sv_bInitDone : BOOL;
END_VAR

SYSTEM_OBJECT
 evLockUnlockGroup : tevLockUnlockGroup;
 erAssert : ALARM;
END_OBJECT

VAR
 evLockUnlockGroupData : tevLockUnlockGroupData;
 dummy : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//if the movements are still not registered, gives application programmer code offset and frame offset
dummy := ASSERT(sv_bInitDone, erAssert);

evLockUnlockGroupData.DeviceIdSender := sv_DeviceId;
evLockUnlockGroupData.Group          := Group;
evLockUnlockGroupData.Alarm          := Alarm;
evLockUnlockGroupData.Mode           := Mode;
evLockUnlockGroupData.bSetAlarmImmediately := bSetAlarmImmediately;
SET_EVENT(evLockUnlockGroup, evLockUnlockGroupData);


;#END_EDIT_BLOCK END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 10 @Pou 25 
@@@BEG_Comment@@@
With this FunctionBlock a group of movements can be locked. 
Groups can be locked or unlocked every time, no matter if a member of the group is active or inactive.
With the parameter "Mode" 2 different Lock-Modes and the Unlock-Mode can be chosen.

Mode = enLockResume
  -if an inactive movement is locked and started afterwards it will stand still until it is being unlocked.
  -if an active movement is being locked it stopps its motion until it is being unlocked.
  In both cases the movement resumes its motion automatically after unlocking.

Mode = enLockAbort  
  -if an inactively locked movement is tried to be started it will inactively remain until it is being unlocked and started again.
  -if an active movement is being locked it will stop its motion. To restart the movement it has to be unlocked first 
   and started again.
   
Mode = Unlock
   Unlock Movement  

The group-membership of each movement has to be defined in systemVariable sv_MoveXxx.LockGroups[].
Every movement can be member of multible lockgroups. 
The lockgroups itself are defined by constants in the LockGroups.tu file
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(6)ASSERT @RT(0) @T @T @DERIVED 0 @F @RT(8)FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(17)FBLockUnlockGroup @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
10 
@Var @RT(5)Group @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tLockGroup @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(13)Group to lock @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)Alarm @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(7)tsAlarm @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(63)this alarm is set if the locked movement is tried to be started @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)Mode @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tnLockUnlock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(42)Modes: enLockResume, enLockAbort, enUnlock @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)evLockUnlockGroup @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tevLockUnlockGroup @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)evLockUnlockGroupData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevLockUnlockGroupData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(8)erAssert @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(5)dummy @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)sv_bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)bSetAlarmImmediately @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(88)FALSE: alarm is set if locked movement should be started; TRUE: alarm is set immediately @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(15)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//if the movements are still not registered, gives application programmer code offset and frame offset
dummy := ASSERT(sv_bInitDone, erAssert);

evLockUnlockGroupData.DeviceIdSender := sv_DeviceId;
evLockUnlockGroupData.Group          := Group;
evLockUnlockGroupData.Alarm          := Alarm;
evLockUnlockGroupData.Mode           := Mode;
evLockUnlockGroupData.bSetAlarmImmediately := bSetAlarmImmediately;
SET_EVENT(evLockUnlockGroup, evLockUnlockGroupData);

@END_Body 

@END_Contents 
