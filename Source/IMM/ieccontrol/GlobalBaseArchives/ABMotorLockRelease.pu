IMPORT_OVER_LISTFILE
 ALARM_EVENT
, tsTraceLevel
, ABMotorLockList
, FBDebugTrace
, ALARM_EVENT_DATA
, tsElementMotorLock

END_IMPORT

ALGORITHM_BLOCK ABMotorLockRelease #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bMotorLocked : BOOL;
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 EV_Task_3 : TASK;
 evAlarmMotorLock : ALARM_EVENT;
 evAlarmMotorRelease : ALARM_EVENT;
END_OBJECT

VAR
 abMotorLockList : ABMotorLockList;
 mbInitDone : BOOL;
 miEntries : DINT;
 fbDebugTrace : FBDebugTrace;
END_VAR

EVENT_ALGORITHM evaAlarmMotorLock ON EV_Task_3 WITH evAlarmMotorLock


VAR_INPUT
 evAlarmMotorLockData : ALARM_EVENT_DATA;
END_VAR

VAR
 ElementMotorLock : tsElementMotorLock;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInitDone THEN
    abMotorLockList.aInit();
    mbInitDone := TRUE;
END_IF;

IF sv_TraceLevel.bLockUnlock THEN
   fbDebugTrace(CONCAT('motor locked   by alarm ', GET_ALARM_NAME(evAlarmMotorLockData.NAME)));
END_IF;

//search if entry already exists
ElementMotorLock.SearchData.Alarm := evAlarmMotorLockData.NAME;
ElementMotorLock.SearchData.SubID1 := evAlarmMotorLockData.SUBID1;
ElementMotorLock.SearchData.SubID2 := evAlarmMotorLockData.SUBID2;
ElementMotorLock.SearchData.SubID3 := evAlarmMotorLockData.SUBID3;
ElementMotorLock.SearchData.SubID4 := evAlarmMotorLockData.SUBID4;

abMotorLockList.aSearch(SearchData := ElementMotorLock.SearchData); 

IF NOT abMotorLockList.aSearch.bFound THEN
    //add entry
    ElementMotorLock.ElementData.Alarm := evAlarmMotorLockData.NAME;
    ElementMotorLock.ElementData.SubID1 := evAlarmMotorLockData.SUBID1;
    ElementMotorLock.ElementData.SubID2 := evAlarmMotorLockData.SUBID2;
    ElementMotorLock.ElementData.SubID3 := evAlarmMotorLockData.SUBID3;
    ElementMotorLock.ElementData.SubID4 := evAlarmMotorLockData.SUBID4;
    abMotorLockList.aAdd(Element := ElementMotorLock);
END_IF;

//get number of elements
miEntries := abMotorLockList.aGetElementCount();
IF miEntries > 0 THEN
    //one or more entries in the list -> release motor
    sv_bMotorLocked := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

EVENT_ALGORITHM evaAlarmMotorRelease ON EV_Task_3 WITH evAlarmMotorRelease


VAR_INPUT
 evAlarmMotorReleaseData : ALARM_EVENT_DATA;
END_VAR

VAR
 ElementMotorRelease : tsElementMotorLock;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInitDone THEN
    abMotorLockList.aInit();
    mbInitDone := TRUE;
END_IF;

IF sv_TraceLevel.bLockUnlock THEN
   fbDebugTrace(CONCAT('motor unlocked by alarm ', GET_ALARM_NAME(evAlarmMotorReleaseData.NAME)));
END_IF;

//search if entry already exists
ElementMotorRelease.SearchData.Alarm := evAlarmMotorReleaseData.NAME;
ElementMotorRelease.SearchData.SubID1 := evAlarmMotorReleaseData.SUBID1;
ElementMotorRelease.SearchData.SubID2 := evAlarmMotorReleaseData.SUBID2;
ElementMotorRelease.SearchData.SubID3 := evAlarmMotorReleaseData.SUBID3;
ElementMotorRelease.SearchData.SubID4 := evAlarmMotorReleaseData.SUBID4;

abMotorLockList.aSearch(SearchData := ElementMotorRelease.SearchData); 

IF abMotorLockList.aSearch.bFound THEN
    //remove entry
    abMotorLockList.aRemove(SearchData := ElementMotorRelease.SearchData);
END_IF;

//get number of elements
miEntries := abMotorLockList.aGetElementCount();
IF miEntries = 0 THEN
    //no lock entries left -> release motor
    sv_bMotorLocked := FALSE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 52 @Pou 25 
@@@BEG_Comment@@@

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(18)ABMotorLockRelease @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
9 
@Var @RT(9)EV_Task_3 @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(16)evAlarmMotorLock @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(19)evAlarmMotorRelease @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(11)ALARM_EVENT @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(15)sv_bMotorLocked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)abMotorLockList @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABMotorLockList @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)mbInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)miEntries @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @F @RT(12)FBDebugTrace @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(17)evaAlarmMotorLock @STRUCTURED_TEXT 
@RT(0) @RT(16)evAlarmMotorLock @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(20)evAlarmMotorLockData @RT(0) @T @T @DERIVED 0 @F @RT(16)ALARM_EVENT_DATA @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(16)ElementMotorLock @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tsElementMotorLock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@EVENT_ALGORITHM @RT(20)evaAlarmMotorRelease @STRUCTURED_TEXT 
@RT(0) @RT(19)evAlarmMotorRelease @RT(9)EV_Task_3 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(23)evAlarmMotorReleaseData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(16)ALARM_EVENT_DATA @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(19)ElementMotorRelease @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)tsElementMotorLock @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(35)
IF NOT mbInitDone THEN
    abMotorLockList.aInit();
    mbInitDone := TRUE;
END_IF;

IF sv_TraceLevel.bLockUnlock THEN
   fbDebugTrace(CONCAT('motor locked   by alarm ', GET_ALARM_NAME(evAlarmMotorLockData.NAME)));
END_IF;

//search if entry already exists
ElementMotorLock.SearchData.Alarm := evAlarmMotorLockData.NAME;
ElementMotorLock.SearchData.SubID1 := evAlarmMotorLockData.SUBID1;
ElementMotorLock.SearchData.SubID2 := evAlarmMotorLockData.SUBID2;
ElementMotorLock.SearchData.SubID3 := evAlarmMotorLockData.SUBID3;
ElementMotorLock.SearchData.SubID4 := evAlarmMotorLockData.SUBID4;

abMotorLockList.aSearch(SearchData := ElementMotorLock.SearchData); 

IF NOT abMotorLockList.aSearch.bFound THEN
    //add entry
    ElementMotorLock.ElementData.Alarm := evAlarmMotorLockData.NAME;
    ElementMotorLock.ElementData.SubID1 := evAlarmMotorLockData.SUBID1;
    ElementMotorLock.ElementData.SubID2 := evAlarmMotorLockData.SUBID2;
    ElementMotorLock.ElementData.SubID3 := evAlarmMotorLockData.SUBID3;
    ElementMotorLock.ElementData.SubID4 := evAlarmMotorLockData.SUBID4;
    abMotorLockList.aAdd(Element := ElementMotorLock);
END_IF;

//get number of elements
miEntries := abMotorLockList.aGetElementCount();
IF miEntries > 0 THEN
    //one or more entries in the list -> release motor
    sv_bMotorLocked := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(30)
IF NOT mbInitDone THEN
    abMotorLockList.aInit();
    mbInitDone := TRUE;
END_IF;

IF sv_TraceLevel.bLockUnlock THEN
   fbDebugTrace(CONCAT('motor unlocked by alarm ', GET_ALARM_NAME(evAlarmMotorReleaseData.NAME)));
END_IF;

//search if entry already exists
ElementMotorRelease.SearchData.Alarm := evAlarmMotorReleaseData.NAME;
ElementMotorRelease.SearchData.SubID1 := evAlarmMotorReleaseData.SUBID1;
ElementMotorRelease.SearchData.SubID2 := evAlarmMotorReleaseData.SUBID2;
ElementMotorRelease.SearchData.SubID3 := evAlarmMotorReleaseData.SUBID3;
ElementMotorRelease.SearchData.SubID4 := evAlarmMotorReleaseData.SUBID4;

abMotorLockList.aSearch(SearchData := ElementMotorRelease.SearchData); 

IF abMotorLockList.aSearch.bFound THEN
    //remove entry
    abMotorLockList.aRemove(SearchData := ElementMotorRelease.SearchData);
END_IF;

//get number of elements
miEntries := abMotorLockList.aGetElementCount();
IF miEntries = 0 THEN
    //no lock entries left -> release motor
    sv_bMotorLocked := FALSE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
