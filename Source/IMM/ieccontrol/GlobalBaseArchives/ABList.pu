(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


This AB is a model of a list-administration. It provides methods for adding, removing, searching 
and fetching listelements.
The list is seperated in 2 dataparts:
- mListStruct.List[x].SearchData
- mListStruct.List[x].ElementData
SearchData is the data which is used for searching an entry in the list.
ElementData is a additional datapart.

The block must be adapted before it is ready for use. 
For customizing the list, new listtypes have to be created. (see the models in ListTypes.tu)
This can be done easily by replacing the string "XY" by any list identifier. 
Example: To create a Motorlist copy and adapt the datatypes of ListTypes.tu.
          Search and replace "XY" by "Motor"  -> tsListStructMotor.
         Rename ABList.pu and Search and replace "XY" by "Motor".

*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, tsListStructXY
, tsDeviceId
, FBDebugTrace
, tsTraceLevel
, tsElementXY
, tsSearchDataXY

END_IMPORT

ALGORITHM_BLOCK ABList #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_DeviceId : tsDeviceId;
 sv_TraceLevel : tsTraceLevel;
END_VAR

SYSTEM_OBJECT
 erListOverflow : ALARM;
END_OBJECT

VAR
 mListStruct : tsListStructXY;
 miNextFree : DINT;
 miLowBound : DINT;
 miHighBound : DINT;
 mbInit : BOOL;
 miLastFound : DINT;
 miActElement : DINT;
 fbDebugTrace : FBDebugTrace;
END_VAR

ALGORITHM aInit

#BEGIN_EDIT_BLOCK
miLowBound := GET_LOW_BOUND(mListStruct.List);
miHighBound := GET_HIGH_BOUND(mListStruct.List); 
miNextFree := miLowBound;
miLastFound := miLowBound;
miActElement := miLowBound;
mbInit := TRUE;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aAdd


VAR_INPUT
 Element : tsElementXY;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN;; END_IF;

IF miNextFree < miHighBound THEN
    
    mListStruct.List[miNextFree] := Element;
    mListStruct.Used[miNextFree] := TRUE;
    miNextFree := miNextFree + 1;
ELSE    
    //error: List Full
    SET_ALARM(Name := erListOverflow,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              Param1 := 'ABList.aAdd');
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aAddAt


VAR_INPUT
 Element : tsElementXY;
 iPos : DINT;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR

VAR
 iStart : DINT;
 iEnd : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

IF miNextFree <= miHighBound THEN 
    IF iPos < miHighBound AND iPos >= miLowBound THEN
    
        IF iPos < miNextFree THEN
        
            iStart := miNextFree;
            iEnd := iPos+1;
        ELSE       
            i := iPos;
            iEnd := miNextFree;
        END_IF;
        miNextFree := i + 1;
        
        //reorganize list
        FOR i := iStart TO iEnd BY -1 DO
            mListStruct.List[i] := mListStruct.List[i-1];
            mListStruct.Used[i] := TRUE;
        END_FOR; 
        //adding Element
        mListStruct.List[iPos] := Element;
        mListStruct.Used[iPos] := TRUE;
    ELSE
        //error: out of bounds
        IF sv_TraceLevel.bApplication THEN
            fbDebugTrace(sText := 'ABList.aAddAt: Error: Out of ListBounds');
        END_IF;
    END_IF;     
ELSE
    //error: List Full
    SET_ALARM(Name := erListOverflow,
            SubID1 := sv_DeviceId.CompId,
            SubID2 := sv_DeviceId.IndexId,
            Param1 := 'ABList.aAddAt');
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSearch


VAR_INPUT
 SearchData : tsSearchDataXY;
END_VAR

VAR_OUTPUT
 Element : tsElementXY;
 iPos : DINT;
 bFound : BOOL;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN;; END_IF;

iPos := 0;
bFound := FALSE;

FOR i := miLowBound TO miNextFree-1 DO
    
    IF mListStruct.List[i].SearchData = SearchData THEN
       
       Element := mListStruct.List[i]; 
       //remember foundposition for aSearchNext 
       miLastFound := i; 
       iPos := i;
       bFound := TRUE;
       RETURN;;
    END_IF;
END_FOR;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aSearchNext


VAR_INPUT
 SearchData : tsSearchDataXY;
END_VAR

VAR_OUTPUT
 Element : tsElementXY;
 iPos : DINT;
 bFound : BOOL;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN;; END_IF;

iPos := 0;
bFound := FALSE;

FOR i := miLastFound+1 TO miNextFree-1 DO
    
    IF mListStruct.List[i].SearchData = SearchData THEN
       
       Element := mListStruct.List[i]; 
       //remember foundposition for then next aSearchNext 
       miLastFound := i; 
       iPos := i;
       bFound := TRUE;
       RETURN;;
    END_IF;
END_FOR;



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aRemove


VAR_INPUT
 SearchData : tsSearchDataXY;
END_VAR

VAR_OUTPUT
 Element : tsElementXY;
 iPos : DINT;
 bFound : BOOL;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

iPos := 0;
bFound := FALSE;

FOR i := miLowBound TO miNextFree-1 DO
    
    IF mListStruct.List[i].SearchData = SearchData THEN
       
       iPos := i;
       bFound := TRUE;
       Element := mListStruct.List[i];
       //reorganize list
       FOR i := iPos TO miNextFree-1 DO           
           mListStruct.List[i] := mListStruct.List[i+1];
       END_FOR;
       mListStruct.Used[miNextFree-1] := FALSE; 
       miNextFree := miNextFree - 1; 
       RETURN;
    END_IF;
END_FOR;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aRemoveAt


VAR_INPUT
 iPos : DINT;
END_VAR

VAR_OUTPUT
 Element : tsElementXY;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

IF iPos <= miHighBound AND iPos >= miLowBound THEN
    
    Element:= mListStruct.List[iPos];
    miActElement := iPos;

    //reorganize list
    FOR i := iPos TO miNextFree-1 DO           
        mListStruct.List[i] := mListStruct.List[i+1];
    END_FOR;
    mListStruct.Used[miNextFree-1] := FALSE;
    
    miNextFree := miNextFree - 1;
ELSE
    //error: out of bounds
    IF sv_TraceLevel.bApplication THEN
        fbDebugTrace(sText := 'ABList.aRemoveAt: Error: Out of ListBounds');
    END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aRemoveAll


VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;
FOR i := miNextFree-1 TO miLowBound DO
    //clearing the whole list
    mListStruct.Used[i] := FALSE;
END_FOR;
miNextFree := miLowBound;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aElementAt


VAR_OUTPUT
 Element : tsElementXY;
END_VAR

VAR_INPUT
 iPos : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

IF iPos <= miHighBound AND iPos >= miLowBound THEN

    Element := mListStruct.List[iPos];
    miActElement := iPos;
ELSE
    //error: out of bounds
    IF sv_TraceLevel.bApplication THEN
        fbDebugTrace(sText := 'ABList.aElementAt: Error: Out of ListBounds');
    END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aModifyAt


VAR_INPUT
 iPos : DINT;
END_VAR

VAR_IN_OUT
 Element : tsElementXY;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

IF iPos <= miHighBound AND iPos >= miLowBound THEN

     mListStruct.List[iPos] := Element;
     miActElement := iPos;
ELSE
    //error: out of bounds
    IF sv_TraceLevel.bApplication THEN
        fbDebugTrace(sText := 'ABList.aModifyAt: Error: Out of ListBounds');
    END_IF;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

FUNCTION aGetSize : DINT
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;
//returns the size of the list
aGetSize := miHighBound - miLowBound;



;#END_EDIT_BLOCK END_FUNCTION

FUNCTION aGetElementCount : DINT
 #DUMMY_EDIT_BLOCK
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

aGetElementCount:= miNextFree - miLowBound;



;#END_EDIT_BLOCK END_FUNCTION

ALGORITHM aFirstElement


VAR_OUTPUT
 Element : tsElementXY;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

miActElement := miLowBound;
Element := mListStruct.List[miLowBound];



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aNextElement


VAR_OUTPUT
 Element : tsElementXY;
 iPos : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

IF miActElement < miHighBound THEN

    miActElement := miActElement + 1;
    iPos := miActElement;
    Element := mListStruct.List[miActElement];
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aLastElement


VAR_OUTPUT
 Element : tsElementXY;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

miActElement := miNextFree - 1;
Element := mListStruct.List[miActElement];



;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aPrevElement


VAR_OUTPUT
 Element : tsElementXY;
 iPos : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

IF miActElement > miLowBound THEN

    miActElement := miActElement - 1;
    iPos := miActElement;
    Element := mListStruct.List[miActElement];
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aImport


VAR_INPUT
 ListStruct : tsListStructXY;
END_VAR

VAR_TEMP
 i : DINT;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

miLastFound := miLowBound;
miActElement := miLowBound;
miNextFree := miLowBound;
mListStruct :=  ListStruct;

//cheching used elements
FOR i := miLowBound TO miHighBound DO
    
   IF NOT mListStruct.Used[i] THEN
        miNextFree := i;
        RETURN;
   END_IF;
END_FOR;    


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aExport


VAR_OUTPUT
 ListStruct : tsListStructXY;
END_VAR
#BEGIN_EDIT_BLOCK
IF NOT mbInit THEN RETURN; END_IF;

ListStruct := mListStruct;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 10 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".


This AB is a model of a list-administration. It provides methods for adding, removing, searching 
and fetching listelements.
The list is seperated in 2 dataparts:
- mListStruct.List[x].SearchData
- mListStruct.List[x].ElementData
SearchData is the data which is used for searching an entry in the list.
ElementData is a additional datapart.

The block must be adapted before it is ready for use. 
For customizing the list, new listtypes have to be created. (see the models in ListTypes.tu)
This can be done easily by replacing the string "XY" by any list identifier. 
Example: To create a Motorlist copy and adapt the datatypes of ListTypes.tu.
          Search and replace "XY" by "Motor"  -> tsListStructMotor.
         Rename ABList.pu and Search and replace "XY" by "Motor".

@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(6)ABList @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
11 
@Var @RT(14)erListOverflow @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(11)mListStruct @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsListStructXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)miNextFree @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(10)miLowBound @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)miHighBound @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)mbInit @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)miLastFound @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)miActElement @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(12)fbDebugTrace @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBDebugTrace @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)sv_TraceLevel @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)tsTraceLevel @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

18 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aAdd @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(6)aAddAt @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@Var @RT(6)iStart @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(4)iEnd @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(7)aSearch @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(10)SearchData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsSearchDataXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bFound @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(11)aSearchNext @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(10)SearchData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsSearchDataXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bFound @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(7)aRemove @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
5 
@Var @RT(10)SearchData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsSearchDataXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bFound @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aRemoveAt @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
3 
@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(10)aRemoveAll @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(10)aElementAt @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(9)aModifyAt @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(8)aGetSize @STRUCTURED_TEXT 
@RT(4)DINT @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@FUNCTION @RT(16)aGetElementCount @STRUCTURED_TEXT 
@RT(4)DINT @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(13)aFirstElement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aNextElement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aLastElement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(12)aPrevElement @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(7)Element @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsElementXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(4)iPos @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(7)aImport @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(10)ListStruct @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsListStructXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(1)i @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 4 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(7)aExport @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(10)ListStruct @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(14)tsListStructXY @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(7)
miLowBound := GET_LOW_BOUND(mListStruct.List);
miHighBound := GET_HIGH_BOUND(mListStruct.List); 
miNextFree := miLowBound;
miLastFound := miLowBound;
miActElement := miLowBound;
mbInit := TRUE;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(15)
IF NOT mbInit THEN RETURN;; END_IF;

IF miNextFree < miHighBound THEN
    
    mListStruct.List[miNextFree] := Element;
    mListStruct.Used[miNextFree] := TRUE;
    miNextFree := miNextFree + 1;
ELSE    
    //error: List Full
    SET_ALARM(Name := erListOverflow,
              SubID1 := sv_DeviceId.CompId,
              SubID2 := sv_DeviceId.IndexId,
              Param1 := 'ABList.aAdd');
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(37)
IF NOT mbInit THEN RETURN; END_IF;

IF miNextFree <= miHighBound THEN 
    IF iPos < miHighBound AND iPos >= miLowBound THEN
    
        IF iPos < miNextFree THEN
        
            iStart := miNextFree;
            iEnd := iPos+1;
        ELSE       
            i := iPos;
            iEnd := miNextFree;
        END_IF;
        miNextFree := i + 1;
        
        //reorganize list
        FOR i := iStart TO iEnd BY -1 DO
            mListStruct.List[i] := mListStruct.List[i-1];
            mListStruct.Used[i] := TRUE;
        END_FOR; 
        //adding Element
        mListStruct.List[iPos] := Element;
        mListStruct.Used[iPos] := TRUE;
    ELSE
        //error: out of bounds
        IF sv_TraceLevel.bApplication THEN
            fbDebugTrace(sText := 'ABList.aAddAt: Error: Out of ListBounds');
        END_IF;
    END_IF;     
ELSE
    //error: List Full
    SET_ALARM(Name := erListOverflow,
            SubID1 := sv_DeviceId.CompId,
            SubID2 := sv_DeviceId.IndexId,
            Param1 := 'ABList.aAddAt');
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
IF NOT mbInit THEN RETURN;; END_IF;

iPos := 0;
bFound := FALSE;

FOR i := miLowBound TO miNextFree-1 DO
    
    IF mListStruct.List[i].SearchData = SearchData THEN
       
       Element := mListStruct.List[i]; 
       //remember foundposition for aSearchNext 
       miLastFound := i; 
       iPos := i;
       bFound := TRUE;
       RETURN;;
    END_IF;
END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(19)
IF NOT mbInit THEN RETURN;; END_IF;

iPos := 0;
bFound := FALSE;

FOR i := miLastFound+1 TO miNextFree-1 DO
    
    IF mListStruct.List[i].SearchData = SearchData THEN
       
       Element := mListStruct.List[i]; 
       //remember foundposition for then next aSearchNext 
       miLastFound := i; 
       iPos := i;
       bFound := TRUE;
       RETURN;;
    END_IF;
END_FOR;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(22)
IF NOT mbInit THEN RETURN; END_IF;

iPos := 0;
bFound := FALSE;

FOR i := miLowBound TO miNextFree-1 DO
    
    IF mListStruct.List[i].SearchData = SearchData THEN
       
       iPos := i;
       bFound := TRUE;
       Element := mListStruct.List[i];
       //reorganize list
       FOR i := iPos TO miNextFree-1 DO           
           mListStruct.List[i] := mListStruct.List[i+1];
       END_FOR;
       mListStruct.Used[miNextFree-1] := FALSE; 
       miNextFree := miNextFree - 1; 
       RETURN;
    END_IF;
END_FOR;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
IF NOT mbInit THEN RETURN; END_IF;

IF iPos <= miHighBound AND iPos >= miLowBound THEN
    
    Element:= mListStruct.List[iPos];
    miActElement := iPos;

    //reorganize list
    FOR i := iPos TO miNextFree-1 DO           
        mListStruct.List[i] := mListStruct.List[i+1];
    END_FOR;
    mListStruct.Used[miNextFree-1] := FALSE;
    
    miNextFree := miNextFree - 1;
ELSE
    //error: out of bounds
    IF sv_TraceLevel.bApplication THEN
        fbDebugTrace(sText := 'ABList.aRemoveAt: Error: Out of ListBounds');
    END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(7)
IF NOT mbInit THEN RETURN; END_IF;
FOR i := miNextFree-1 TO miLowBound DO
    //clearing the whole list
    mListStruct.Used[i] := FALSE;
END_FOR;
miNextFree := miLowBound;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
IF NOT mbInit THEN RETURN; END_IF;

IF iPos <= miHighBound AND iPos >= miLowBound THEN

    Element := mListStruct.List[iPos];
    miActElement := iPos;
ELSE
    //error: out of bounds
    IF sv_TraceLevel.bApplication THEN
        fbDebugTrace(sText := 'ABList.aElementAt: Error: Out of ListBounds');
    END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(13)
IF NOT mbInit THEN RETURN; END_IF;

IF iPos <= miHighBound AND iPos >= miLowBound THEN

     mListStruct.List[iPos] := Element;
     miActElement := iPos;
ELSE
    //error: out of bounds
    IF sv_TraceLevel.bApplication THEN
        fbDebugTrace(sText := 'ABList.aModifyAt: Error: Out of ListBounds');
    END_IF;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(5)
IF NOT mbInit THEN RETURN; END_IF;
//returns the size of the list
aGetSize := miHighBound - miLowBound;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(5)
IF NOT mbInit THEN RETURN; END_IF;

aGetElementCount:= miNextFree - miLowBound;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(6)
IF NOT mbInit THEN RETURN; END_IF;

miActElement := miLowBound;
Element := mListStruct.List[miLowBound];


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
IF NOT mbInit THEN RETURN; END_IF;

IF miActElement < miHighBound THEN

    miActElement := miActElement + 1;
    iPos := miActElement;
    Element := mListStruct.List[miActElement];
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(6)
IF NOT mbInit THEN RETURN; END_IF;

miActElement := miNextFree - 1;
Element := mListStruct.List[miActElement];


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(9)
IF NOT mbInit THEN RETURN; END_IF;

IF miActElement > miLowBound THEN

    miActElement := miActElement - 1;
    iPos := miActElement;
    Element := mListStruct.List[miActElement];
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(16)
IF NOT mbInit THEN RETURN; END_IF;

miLastFound := miLowBound;
miActElement := miLowBound;
miNextFree := miLowBound;
mListStruct :=  ListStruct;

//cheching used elements
FOR i := miLowBound TO miHighBound DO
    
   IF NOT mListStruct.Used[i] THEN
        miNextFree := i;
        RETURN;
   END_IF;
END_FOR;    

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(4)
IF NOT mbInit THEN RETURN; END_IF;

ListStruct := mListStruct;

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
