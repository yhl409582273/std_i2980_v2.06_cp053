(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB is used to realize a constant movement in combination with
standstill detection. This is necessary for transducer calibration.
After stand still is detected, the according values will be written 
to the selected LintabPoint. 

It includes the following funcionalities:
- initialization of the constant output blocks 
- automatic reparam of all necessary blocks after change in the constant output
- constant output for pressure and velocity
- stand still detection
- writing to lintab 
*)

IMPORT_OVER_LISTFILE
 cApplPlasticsNoError
, ABConstMovement
, FBStandStill
, tsVelPre
, tMoveIdent
, KCTRL_Lintab_Point
, R_TRIG

END_IMPORT

ALGORITHM_BLOCK ABConstCalib #DUMMY_EDIT_BLOCK

VAR
 abConstMovement : ABConstMovement;
 fbStandStill : FBStandStill;
END_VAR

ALGORITHM aInit


VAR_INPUT
 pConst : REFTO tsVelPre (* pointer to systemvariable that contains the constant output *);
 MoveId : tMoveIdent (* moveId of constant movement *);
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abConstMovement.aInit(pConst := pConst,
                      MoveId := MoveId);


;#END_EDIT_BLOCK END_ALGORITHM

(*
The basic function in this algorithm is equal to ABConstMovement.
Additionally a standstill detection is done.
After stand still is detected, the according values (voltage, position) will be written 
to the selected LintabPoint.
*)

ALGORITHM aRun


VAR_INPUT
 bStart : BOOL (* start constant calib block *);
 bStop : BOOL (* stop constant calib block *);
 rActVoltage : REAL (* actual voltage *);
 rMaxVoltageDiff : REAL (* maximum voltage difference to detect standstill *);
 dStandStillDetectTime : TIME (* time to detect standstill (if voltage difference during this time is lower than rMaxVoltageDiff then standstill is detected) *);
END_VAR

VAR_IN_OUT
 LintabPoint : KCTRL_Lintab_Point (* lintab point that should be modified after standstill is detected *);
END_VAR

VAR_INPUT
 rSetValue : REAL (* value that should be entered in the lintab after standstill is detected *);
 dDelayTimeOn : TIME (* Delay Time between preoutput and  constoutput *);
 dDelayTimeOff : TIME (* Delay Time between pump stop and bActive FALSE *);
END_VAR

VAR_OUTPUT
 bActive : BOOL (* movement is active *);
 rOutputPre : REAL (* pressure output *);
 rOutputVel : REAL (* velocity output *);
 bPreOutputReached : BOOL (* preoutput ready *);
 bPointDetected : BOOL (* lintab point detected *);
 bError : BOOL (* flag to indicate if error occured *);
 iErrorInfo : DINT (* additional error info *);
END_VAR

VAR
 fb_RTrigStandStill : R_TRIG;
 fbREdge_Start : R_TRIG;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
fbREdge_Start(CLK := bStart);
IF fbREdge_Start.Q THEN
    bPointDetected := FALSE;
    abConstMovement.aRun(bStart := FALSE);
    fbStandStill(bDoCalib := FALSE);
END_IF;

//call const movement block
abConstMovement.aRun(bStart := bStart,
                     bStop := bStop OR bPointDetected,
                     bUsePosDetect := FALSE,
                     dDelayTimeOn := dDelayTimeOn, 
                     dDelayTimeOff := dDelayTimeOff,                      
                     rStartOutputPre := 0.0,
                     rStartOutputVel := 0.0);

//copy output values
rOutputPre := abConstMovement.aRun.rOutputPre;
rOutputVel := abConstMovement.aRun.rOutputVel;
bPreOutputReached := abConstMovement.aRun.bPreOutputReached;
bActive := abConstMovement.aRun.bActive;
bError := abConstMovement.aRun.bError;

IF bError THEN
    IF abConstMovement.aRun.iErrorInfo.Pressure <> cApplPlasticsNoError THEN
        iErrorInfo := abConstMovement.aRun.iErrorInfo.Pressure;
    ELSE
        iErrorInfo := abConstMovement.aRun.iErrorInfo.Velocity;
    END_IF;
ELSE
    iErrorInfo := cApplPlasticsNoError;
END_IF;

//detect stand still
IF NOT bPointDetected THEN
    fbStandStill(rActVoltage := rActVoltage,
                 bDoCalib := TRUE,
                 dCalibTime := dStandStillDetectTime,
                 dDelayTime := dDelayTimeOn,
                 rMaxVoltageDiff := rMaxVoltageDiff);
END_IF;

fb_RTrigStandStill(CLK := fbStandStill.bStandStill);
IF fb_RTrigStandStill.Q THEN
    //write value to lintab
    IF CHECK_REF(LintabPoint) THEN
        LintabPoint.rX := rActVoltage;
        LintabPoint.rY := rSetValue;
    END_IF;
    bPointDetected := TRUE;
END_IF;


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 113 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

This AB is used to realize a constant movement in combination with
standstill detection. This is necessary for transducer calibration.
After stand still is detected, the according values will be written 
to the selected LintabPoint. 

It includes the following funcionalities:
- initialization of the constant output blocks 
- automatic reparam of all necessary blocks after change in the constant output
- constant output for pressure and velocity
- stand still detection
- writing to lintab 
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
0 
@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
1 
@Var @RT(20)cApplPlasticsNoError @RT(0) @T @F @DT @RT(0) @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(12)ABConstCalib @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(15)abConstMovement @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(15)ABConstMovement @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)fbStandStill @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(12)FBStandStill @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

2 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(5)aInit @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
2 
@Var @RT(6)pConst @RT(0) @T @T @REFTO 0 @F @DERIVED 0 @T @T @DT @RT(8)tsVelPre @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(59)pointer to systemvariable that contains the constant output @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(6)MoveId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tMoveIdent @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)moveId of constant movement @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(4)aRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
18 
@Var @RT(6)bStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)start constant calib block @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(5)bStop @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)stop constant calib block @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)rActVoltage @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)actual voltage @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(15)rMaxVoltageDiff @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(47)maximum voltage difference to detect standstill @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)dStandStillDetectTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(124)time to detect standstill (if voltage difference during this time is lower than rMaxVoltageDiff then standstill is detected) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)LintabPoint @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(18)KCTRL_Lintab_Point @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(65)lintab point that should be modified after standstill is detected @RT(0) 
@END_Attrib 
1 2 @F @F @F @F 

@Var @RT(9)rSetValue @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(71)value that should be entered in the lintab after standstill is detected @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(12)dDelayTimeOn @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(45)Delay Time between preoutput and  constoutput @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(13)dDelayTimeOff @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(46)Delay Time between pump stop and bActive FALSE @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)bActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(18)movement is active @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)rOutputPre @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)pressure output @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)rOutputVel @RT(0) @T @F @DT @RT(4)REAL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)velocity output @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(17)bPreOutputReached @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)preoutput ready @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(14)bPointDetected @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)lintab point detected @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(33)flag to indicate if error occured @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)iErrorInfo @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(21)additional error info @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(18)fb_RTrigStandStill @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(13)fbREdge_Start @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(6)R_TRIG @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(8)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

abConstMovement.aInit(pConst := pConst,
                      MoveId := MoveId);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(57)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
 
fbREdge_Start(CLK := bStart);
IF fbREdge_Start.Q THEN
    bPointDetected := FALSE;
    abConstMovement.aRun(bStart := FALSE);
    fbStandStill(bDoCalib := FALSE);
END_IF;

//call const movement block
abConstMovement.aRun(bStart := bStart,
                     bStop := bStop OR bPointDetected,
                     bUsePosDetect := FALSE,
                     dDelayTimeOn := dDelayTimeOn, 
                     dDelayTimeOff := dDelayTimeOff,                      
                     rStartOutputPre := 0.0,
                     rStartOutputVel := 0.0);

//copy output values
rOutputPre := abConstMovement.aRun.rOutputPre;
rOutputVel := abConstMovement.aRun.rOutputVel;
bPreOutputReached := abConstMovement.aRun.bPreOutputReached;
bActive := abConstMovement.aRun.bActive;
bError := abConstMovement.aRun.bError;

IF bError THEN
    IF abConstMovement.aRun.iErrorInfo.Pressure <> cApplPlasticsNoError THEN
        iErrorInfo := abConstMovement.aRun.iErrorInfo.Pressure;
    ELSE
        iErrorInfo := abConstMovement.aRun.iErrorInfo.Velocity;
    END_IF;
ELSE
    iErrorInfo := cApplPlasticsNoError;
END_IF;

//detect stand still
IF NOT bPointDetected THEN
    fbStandStill(rActVoltage := rActVoltage,
                 bDoCalib := TRUE,
                 dCalibTime := dStandStillDetectTime,
                 dDelayTime := dDelayTimeOn,
                 rMaxVoltageDiff := rMaxVoltageDiff);
END_IF;

fb_RTrigStandStill(CLK := fbStandStill.bStandStill);
IF fb_RTrigStandStill.Q THEN
    //write value to lintab
    IF CHECK_REF(LintabPoint) THEN
        LintabPoint.rX := rActVoltage;
        LintabPoint.rY := rSetValue;
    END_IF;
    bPointDetected := TRUE;
END_IF;

@END_Body 

@@@BEG_Comment@@@ 
@TL(4)
The basic function in this algorithm is equal to ABConstMovement.
Additionally a standstill detection is done.
After stand still is detected, the according values (voltage, position) will be written 
to the selected LintabPoint.
@@@END_Comment@@@ 
@END_Body 

@END_Contents 
