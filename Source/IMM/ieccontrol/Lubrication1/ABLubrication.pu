(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Algorithm block for lubrication
*)

IMPORT_OVER_LISTFILE
 IS_LINKED
, tyPanelButton
, tsDeviceId
, tsLubValues
, tevPanelButtonRegisterData
, tevPanelButtonRegister
, FBLubrication
, tsPanelButton

END_IMPORT

ALGORITHM_BLOCK ABLubrication #DUMMY_EDIT_BLOCK

SYSTEM_VAR
 sv_bButtonLubrication : BOOL;
 sv_iPanelMovementSelector : DINT;
 sv_PanelButtons : tyPanelButton;
 sv_DeviceId : tsDeviceId;
 di_ButtonGeneral1 : BOOL;
 di_ButtonGeneral2 : BOOL;
 do_Lubrication : BOOL (* output for centrallubrication *);
 di_ButtonLubrication : BOOL;
 di_LubLimitAchieved : BOOL (* optional input *);
 di_LubPressureAchieved : BOOL (* lubPressureAchieved *);
 sv_iShotCounterRetain : UDINT;
 sv_bLubricationActive : BOOL;
 sv_bLedLubrication : BOOL;
 sv_bLedLubrication_ledAttr : BYTE (* Panel LED Attr *);
 sv_bHMILedLubrication : BOOL;
 sv_bHMILedLubrication_ledAttr : BYTE (* Panel LED Attr *);
 sv_LubricationSetValues : tsLubValues;
 sv_LubricationActValues : tsLubValues;
 sv_bInitStart : BOOL;
 miShotCounterLastLub : UDINT;
END_VAR

SYSTEM_OBJECT
 TaskMid : TASK;
 PU_Task_7 : TASK;
 PU_Task_13 : TASK;
 evPanelButtonRegister : tevPanelButtonRegister;
END_OBJECT

VAR
 mbLubLedExists : BOOL;
 mbDoLubrication : BOOL;
 evPanelButtonRegisterData : tevPanelButtonRegisterData;
 mpbButtonGeneralLubrication1 : REFTO BOOL;
 mpbButtonGeneralLubrication2 : REFTO BOOL;
 mbDIButtonLubricationLinked : BOOL;
 mbDIButtonGeneral1Linked : BOOL;
 mbDIButtonGeneral2Linked : BOOL;
 mpiPanelMovementSelector : REFTO DINT;
END_VAR

VAR CONSTANT
 cButtonLubrication : DINT := 1;
END_VAR

POSTUPDATE_ALGORITHM pRegisterButtons ON PU_Task_13 WITH sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
                              
mpbButtonGeneralLubrication1 := EMPTY;
mpbButtonGeneralLubrication2 := EMPTY;

evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonMovement; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonLubrication;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonLubrication;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonLubrication;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedLubrication;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedLubrication_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

mbDIButtonLubricationLinked := IS_LINKED(di_ButtonLubrication);

mbDIButtonGeneral1Linked := IS_LINKED(di_ButtonGeneral1);
mbDIButtonGeneral2Linked := IS_LINKED(di_ButtonGeneral2);

IF (mbDIButtonGeneral1Linked AND mbDIButtonGeneral2Linked) THEN
    mpiPanelMovementSelector := @sv_iPanelMovementSelector;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLedControl ON PU_Task_7 WITH sv_bLubricationActive,sv_bInitStart


VAR
 bInitDone : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check if led is available
IF NOT bInitDone THEN
   
   sv_bHMILedLubrication_ledAttr := 16#3;
   IF IS_LINKED(sv_bLedLubrication) AND IS_LINKED(sv_bLedLubrication_ledAttr) THEN
       sv_bLedLubrication_ledAttr := sv_bHMILedLubrication_ledAttr;
       mbLubLedExists := TRUE;
   ELSE
       mbLubLedExists := FALSE;
   END_IF;
    
   bInitDone := TRUE;
END_IF;

//led should be on in all modes
IF sv_bLubricationActive THEN
   sv_bHMILedLubrication := TRUE;
ELSE
   sv_bHMILedLubrication := FALSE;
END_IF;

IF mbLubLedExists THEN
   sv_bLedLubrication := sv_bHMILedLubrication;
END_IF;


IF NOT sv_bLubricationActive THEN
    STOP_PROCESS_ALGORITHM(paRun);
ELSE
    //save shot counter
    miShotCounterLastLub := sv_iShotCounterRetain;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

PROCESS_ALGORITHM paRun ON TaskMid


VAR
 fbLubrication : FBLubrication;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbLubrication(bUseLubPressureSensor := TRUE,
              bDoLubrication := mbDoLubrication,
              dLubTime := sv_LubricationSetValues.dLubTime,
              dOnTime := sv_LubricationSetValues.dOnTime,
              dOffTime := sv_LubricationSetValues.dOffTime,
              pbLubPressureAchieved := @di_LubPressureAchieved,
              pbLubLimitAchieved := @di_LubLimitAchieved,
              dActLubTime => sv_LubricationActValues.dLubTime,
              dActOnTime => sv_LubricationActValues.dOnTime,
              dActOffTime => sv_LubricationActValues.dOffTime,
              bDigOut => do_Lubrication,
              bActive => sv_bLubricationActive);


;#END_EDIT_BLOCK END_ALGORITHM

ALGORITHM aLubricationButton


VAR_INPUT
 bButton : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bButton THEN
    //button pressed -> check if lubrication is already active
    IF NOT sv_bLubricationActive THEN
        mbDoLubrication := TRUE;
        START_PROCESS_ALGORITHM(paRun);
    ELSE
        //lubrication is already 
        mbDoLubrication := FALSE;
    END_IF;
END_IF;



;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pLubricationButton ON PU_Task_7 WITH di_ButtonLubrication,sv_bButtonLubrication,mpbButtonGeneralLubrication1^, mpbButtonGeneralLubrication2^


VAR
 bButton : BOOL;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bButton := sv_bButtonLubrication;

IF mbDIButtonLubricationLinked THEN
    bButton := bButton OR di_ButtonLubrication;
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralLubrication1^) THEN
    bButton := bButton OR mpbButtonGeneralLubrication1^;
END_IF;

IF CHECK_REF(mpbButtonGeneralLubrication2^) THEN
    bButton := bButton OR mpbButtonGeneralLubrication2^;
END_IF;


aLubricationButton(bButton := bButton);


;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pShotCounterChanged ON PU_Task_7 WITH sv_iShotCounterRetain,sv_bInitStart

#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_iShotCounterRetain = 0) THEN
   //shot counter retain is 0 => reset also shot counter of last lubrication
   miShotCounterLastLub := 0;
END_IF;

IF sv_LubricationSetValues.iInterval > 0 THEN
   IF (sv_iShotCounterRetain - miShotCounterLastLub) >= sv_LubricationSetValues.iInterval THEN
      //start lubrication
      mbDoLubrication := TRUE;
      START_PROCESS_ALGORITHM(paRun);
   END_IF;    
END_IF;

sv_LubricationActValues.iInterval := sv_iShotCounterRetain - miShotCounterLastLub;





;#END_EDIT_BLOCK END_ALGORITHM

POSTUPDATE_ALGORITHM pMoveSelectorChanged ON PU_Task_7 WITH mpiPanelMovementSelector^


VAR
 Button : tsPanelButton;
END_VAR
#BEGIN_EDIT_BLOCK
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbButtonGeneralLubrication1 := EMPTY;
mpbButtonGeneralLubrication2 := EMPTY;

IF (sv_iPanelMovementSelector > 0) THEN                        
    Button := sv_PanelButtons[sv_iPanelMovementSelector];
    IF Button.iCompId = sv_DeviceId.CompId AND 
        Button.iIndexId = sv_DeviceId.IndexId THEN
        
        IF Button.iButtonId = cButtonLubrication THEN
            mpbButtonGeneralLubrication1 := @di_ButtonGeneral1;
            mpbButtonGeneralLubrication2 := @di_ButtonGeneral2;            
        END_IF;    
    END_IF;
END_IF;
                 


;#END_EDIT_BLOCK END_ALGORITHM



END_ALGORITHM_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 80 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".

Algorithm block for lubrication
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
1 
@Var @RT(9)IS_LINKED @RT(0) @T @T @DERIVED 0 @F @RT(22)KEBA_STANDARD_FUNCTION @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@ALGORITHM_BLOCK @RT(13)ABLubrication @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
34 
@Var @RT(21)sv_bButtonLubrication @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)sv_iPanelMovementSelector @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)sv_PanelButtons @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tyPanelButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(11)sv_DeviceId @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(10)tsDeviceId @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_ButtonGeneral1 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(17)di_ButtonGeneral2 @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)do_Lubrication @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)output for centrallubrication @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(20)di_ButtonLubrication @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(19)di_LubLimitAchieved @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)optional input @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(22)di_LubPressureAchieved @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)lubPressureAchieved @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(7)TaskMid @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)PU_Task_7 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(10)PU_Task_13 @RT(0) @T @F @DT @RT(4)TASK @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(21)sv_iShotCounterRetain @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_bLubricationActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(18)sv_bLedLubrication @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(26)sv_bLedLubrication_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)Panel LED Attr @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(21)sv_bHMILedLubrication @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(29)sv_bHMILedLubrication_ledAttr @RT(0) @T @F @DT @RT(4)BYTE @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)Panel LED Attr @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(14)mbLubLedExists @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(23)sv_LubricationSetValues @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsLubValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(23)sv_LubricationActValues @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(11)tsLubValues @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(13)sv_bInitStart @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(15)mbDoLubrication @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(20)miShotCounterLastLub @RT(0) @T @F @DT @RT(5)UDINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 8 @F @F @F @F 

@Var @RT(25)evPanelButtonRegisterData @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(26)tevPanelButtonRegisterData @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(21)evPanelButtonRegister @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(22)tevPanelButtonRegister @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(28)mpbButtonGeneralLubrication1 @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(28)mpbButtonGeneralLubrication2 @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(27)mbDIButtonLubricationLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbDIButtonGeneral1Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mbDIButtonGeneral2Linked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(24)mpiPanelMovementSelector @RT(0) @T @T @REFTO 0 @T @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)cButtonLubrication @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(1)1 @RT(0) @RT(0) 
@END_Attrib 
1 15 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 

7 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(16)pRegisterButtons @STRUCTURED_TEXT 
@RT(0) @RT(13)sv_bInitStart @RT(10)PU_Task_13 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(11)pLedControl @STRUCTURED_TEXT 
@RT(0) @RT(35)sv_bLubricationActive,sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@PROCESS_ALGORITHM @RT(5)paRun @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(7)TaskMid @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(13)fbLubrication @RT(0) @T @T @RENAMED 0 @T @T @DT @RT(13)FBLubrication @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@ALGORITHM @RT(18)aLubricationButton @STRUCTURED_TEXT 
@RT(0) @RT(0) @RT(0) @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)bButton @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(18)pLubricationButton @STRUCTURED_TEXT 
@RT(0) @RT(103)di_ButtonLubrication,sv_bButtonLubrication,mpbButtonGeneralLubrication1^, mpbButtonGeneralLubrication2^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(7)bButton @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(19)pShotCounterChanged @STRUCTURED_TEXT 
@RT(0) @RT(35)sv_iShotCounterRetain,sv_bInitStart @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
0 
@END_Dcl 

@END_Export 

@BEG_Export 

@BEG_Algo 
@POSTUPDATE_ALGORITHM @RT(20)pMoveSelectorChanged @STRUCTURED_TEXT 
@RT(0) @RT(25)mpiPanelMovementSelector^ @RT(9)PU_Task_7 @F @F 
@END_Algo 

@BEG_Dcl 
@RT(16)DclTreeContainer 
1 
@Var @RT(6)Button @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(13)tsPanelButton @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_Body 
@TL(28)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)
                              
mpbButtonGeneralLubrication1 := EMPTY;
mpbButtonGeneralLubrication2 := EMPTY;

evPanelButtonRegisterData.Button.nPanelButtonType := nPanelButtonMovement; 
evPanelButtonRegisterData.Button.iCompId := sv_DeviceId.CompId;
evPanelButtonRegisterData.Button.iIndexId := sv_DeviceId.IndexId;
evPanelButtonRegisterData.Button.iButtonId := cButtonLubrication;
evPanelButtonRegisterData.Button.pbActionVar1 := @sv_bButtonLubrication;
evPanelButtonRegisterData.Button.pbActionVar2 := @sv_bButtonLubrication;
evPanelButtonRegisterData.Button.Optional.pbLedVar := @sv_bHMILedLubrication;
evPanelButtonRegisterData.Button.Optional.piLedVarAttr := @sv_bHMILedLubrication_ledAttr;
SET_EVENT(evPanelButtonRegister, evPanelButtonRegisterData);

mbDIButtonLubricationLinked := IS_LINKED(di_ButtonLubrication);

mbDIButtonGeneral1Linked := IS_LINKED(di_ButtonGeneral1);
mbDIButtonGeneral2Linked := IS_LINKED(di_ButtonGeneral2);

IF (mbDIButtonGeneral1Linked AND mbDIButtonGeneral2Linked) THEN
    mpiPanelMovementSelector := @sv_iPanelMovementSelector;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(39)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

//check if led is available
IF NOT bInitDone THEN
   
   sv_bHMILedLubrication_ledAttr := 16#3;
   IF IS_LINKED(sv_bLedLubrication) AND IS_LINKED(sv_bLedLubrication_ledAttr) THEN
       sv_bLedLubrication_ledAttr := sv_bHMILedLubrication_ledAttr;
       mbLubLedExists := TRUE;
   ELSE
       mbLubLedExists := FALSE;
   END_IF;
    
   bInitDone := TRUE;
END_IF;

//led should be on in all modes
IF sv_bLubricationActive THEN
   sv_bHMILedLubrication := TRUE;
ELSE
   sv_bHMILedLubrication := FALSE;
END_IF;

IF mbLubLedExists THEN
   sv_bLedLubrication := sv_bHMILedLubrication;
END_IF;


IF NOT sv_bLubricationActive THEN
    STOP_PROCESS_ALGORITHM(paRun);
ELSE
    //save shot counter
    miShotCounterLastLub := sv_iShotCounterRetain;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(18)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

fbLubrication(bUseLubPressureSensor := TRUE,
              bDoLubrication := mbDoLubrication,
              dLubTime := sv_LubricationSetValues.dLubTime,
              dOnTime := sv_LubricationSetValues.dOnTime,
              dOffTime := sv_LubricationSetValues.dOffTime,
              pbLubPressureAchieved := @di_LubPressureAchieved,
              pbLubLimitAchieved := @di_LubLimitAchieved,
              dActLubTime => sv_LubricationActValues.dLubTime,
              dActOnTime => sv_LubricationActValues.dOnTime,
              dActOffTime => sv_LubricationActValues.dOffTime,
              bDigOut => do_Lubrication,
              bActive => sv_bLubricationActive);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(17)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF bButton THEN
    //button pressed -> check if lubrication is already active
    IF NOT sv_bLubricationActive THEN
        mbDoLubrication := TRUE;
        START_PROCESS_ALGORITHM(paRun);
    ELSE
        //lubrication is already 
        mbDoLubrication := FALSE;
    END_IF;
END_IF;


@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

bButton := sv_bButtonLubrication;

IF mbDIButtonLubricationLinked THEN
    bButton := bButton OR di_ButtonLubrication;
END_IF;

// external panel button
IF CHECK_REF(mpbButtonGeneralLubrication1^) THEN
    bButton := bButton OR mpbButtonGeneralLubrication1^;
END_IF;

IF CHECK_REF(mpbButtonGeneralLubrication2^) THEN
    bButton := bButton OR mpbButtonGeneralLubrication2^;
END_IF;


aLubricationButton(bButton := bButton);

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(23)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

IF (sv_iShotCounterRetain = 0) THEN
   //shot counter retain is 0 => reset also shot counter of last lubrication
   miShotCounterLastLub := 0;
END_IF;

IF sv_LubricationSetValues.iInterval > 0 THEN
   IF (sv_iShotCounterRetain - miShotCounterLastLub) >= sv_LubricationSetValues.iInterval THEN
      //start lubrication
      mbDoLubrication := TRUE;
      START_PROCESS_ALGORITHM(paRun);
   END_IF;    
END_IF;

sv_LubricationActValues.iInterval := sv_iShotCounterRetain - miShotCounterLastLub;




@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 

@BEG_Body 
@TL(21)
(**************************************** WARNING ********************************************
 *** The KEBA Kemro K2 System including software is not intended for safety control tasks! ***
 ***                       For further information see Comment tab!                        ***
 *********************************************************************************************)

mpbButtonGeneralLubrication1 := EMPTY;
mpbButtonGeneralLubrication2 := EMPTY;

IF (sv_iPanelMovementSelector > 0) THEN                        
    Button := sv_PanelButtons[sv_iPanelMovementSelector];
    IF Button.iCompId = sv_DeviceId.CompId AND 
        Button.iIndexId = sv_DeviceId.IndexId THEN
        
        IF Button.iButtonId = cButtonLubrication THEN
            mpbButtonGeneralLubrication1 := @di_ButtonGeneral1;
            mpbButtonGeneralLubrication2 := @di_ButtonGeneral2;            
        END_IF;    
    END_IF;
END_IF;
                 

@END_Body 

@@@BEG_Comment@@@ 
@TL(0)

@@@END_Comment@@@ 
@END_Body 

@END_Contents 
