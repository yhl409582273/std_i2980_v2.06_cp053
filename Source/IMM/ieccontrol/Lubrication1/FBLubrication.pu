(*
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".
*)

IMPORT_OVER_LISTFILE
 SET_ALARM
, KPROT_UserInfoLog
, TON
, KPROT_Status

END_IMPORT

FUNCTION_BLOCK FBLubrication #DUMMY_EDIT_BLOCK

VAR_INPUT
 bUseLubPressureSensor : BOOL (* use pressure achieve sensor *);
 bDoLubrication : BOOL (* start and stop lubrication *);
 dLubTime : TIME (* complete lubrication time *);
 dOnTime : TIME (* lubrication on time *);
 dOffTime : TIME (* lubrication off time *);
 pbLubPressureAchieved : REFTO BOOL (* reference to lubrication pressure achieved variable *);
 pbLubLimitAchieved : REFTO BOOL (* reference to lubrication limit achieved variable *);
END_VAR

VAR_OUTPUT
 dActLubTime : TIME (* actual lubrication time *);
 dActOnTime : TIME (* actual on time *);
 dActOffTime : TIME (* actual off time *);
 bDigOut : BOOL (* state for lubrication output *);
 bActive : BOOL (* flag if lubrication is active *);
 bError : BOOL (* error during lubrication *);
END_VAR

SYSTEM_OBJECT
 erLubLimitAchieved : ALARM;
 erCentralLubError : ALARM;
END_OBJECT

VAR
 fbLubTime : TON;
 fbOnTime : TON;
 fbOffTime : TON;
 bInitDone : BOOL;
 bLubLimitLinked : BOOL (* input for lubrication limit is linked or not *);
 bLubPressureLinked : BOOL (* input for lubrication pressure achieved is linked or not *);
 bLevelTooLow : BOOL (* flag if lubrication limit is too low *);
 status : KPROT_Status;
 t1 : DINT;
 t2 : DINT;
 t3 : DINT;
END_VAR

(* IecGraph-Code *)

(* init step *)
INITIAL_STEP S_Init:
ACheckAvailableInputs (P);
AInit (P);
END_STEP

ACTION ACheckAvailableInputs: #BEGIN_EDIT_BLOCK
IF NOT bInitDone THEN
    bLubLimitLinked := CHECK_REF(pbLubLimitAchieved^);
    bLubPressureLinked := CHECK_REF(pbLubPressureAchieved^);
    bInitDone := TRUE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACheckAvailableInputs*)
ACTION AInit: #BEGIN_EDIT_BLOCK
fbLubTime(IN := FALSE,
          PT := dLubTime);

bError := FALSE;
bActive := TRUE;

;#END_EDIT_BLOCK END_ACTION (*AInit*)

(* steps *)
STEP S_Check_Conditions:
ACheckLubLimit (S);
END_STEP

ACTION ACheckLubLimit: #BEGIN_EDIT_BLOCK
IF bLubLimitLinked THEN
    //check if level is too low
    bLevelTooLow := pbLubLimitAchieved^;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ACheckLubLimit*)
STEP S_SetError:
ASetError (P);
END_STEP

ACTION ASetError: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erCentralLubError);
bError := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASetError*)
STEP S_On:
ALubTime (S);
AInitOn (P);
ARunOnTime (N);
ASetDigout (P);
END_STEP

ACTION ALubTime: #BEGIN_EDIT_BLOCK
fbLubTime(IN := TRUE,
          PT := dLubTime);

dActLubTime := fbLubTime.ET;

;#END_EDIT_BLOCK END_ACTION (*ALubTime*)
ACTION AInitOn: #BEGIN_EDIT_BLOCK
fbOnTime(IN := FALSE,
         PT := dOnTime);

//reset off time
dActOffTime := t#0s;

;#END_EDIT_BLOCK END_ACTION (*AInitOn*)
ACTION ARunOnTime: #BEGIN_EDIT_BLOCK
fbOnTime(IN := TRUE,
         PT := dOnTime);

IF dOffTime = t#0s THEN
   dActOnTime := fbLubTime.ET;
ELSE
   dActOnTime := fbOnTime.ET;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*ARunOnTime*)
ACTION ASetDigout: #BEGIN_EDIT_BLOCK
bDigOut := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASetDigout*)
STEP S_CheckOk:
AResetDigout (P);
END_STEP

ACTION AResetDigout: #BEGIN_EDIT_BLOCK
bDigOut := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AResetDigout*)
STEP S_SetLubError:
ASetLubError (P);
END_STEP

ACTION ASetLubError: #BEGIN_EDIT_BLOCK
SET_ALARM(Name := erCentralLubError);
bError := TRUE;

;#END_EDIT_BLOCK END_ACTION (*ASetLubError*)
STEP S_Off:
AInitOff (P);
ARunOffTime (N);
END_STEP

ACTION AInitOff: #BEGIN_EDIT_BLOCK
fbOffTime(IN := FALSE,
          PT := dOffTime);

;#END_EDIT_BLOCK END_ACTION (*AInitOff*)
ACTION ARunOffTime: #BEGIN_EDIT_BLOCK
fbOffTime(IN := TRUE,
          PT := dOffTime);

dActOffTime := fbOffTime.ET;

;#END_EDIT_BLOCK END_ACTION (*ARunOffTime*)
STEP S_Decide:
END_STEP

STEP S_InfoLog:
AInfoLog (P);
END_STEP

ACTION AInfoLog: #BEGIN_EDIT_BLOCK
t1 := LINT_TO_DINT(TIME_TO_LINT(dLubTime / 1000));
t2 := LINT_TO_DINT(TIME_TO_LINT(dOnTime / 1000));
t3 := LINT_TO_DINT(TIME_TO_LINT(dOffTime / 1000));
status := KPROT_UserInfoLog("%5s %1i ms, on/off %2i/%3i ms", t1, t2, t3, 0, "Lubrication done: lub.time ");

;#END_EDIT_BLOCK END_ACTION (*AInfoLog*)
STEP S_Ready:
AReady (P);
END_STEP

ACTION AReady: #BEGIN_EDIT_BLOCK
bActive := FALSE;

;#END_EDIT_BLOCK END_ACTION (*AReady*)

(* transitions *)
TRANSITION TInitDone (* Trans3 *) FROM S_Init TO S_Check_Conditions :=  #BEGIN_EDIT_BLOCK
bDoLubrication
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TNoError (* Trans10 *) FROM S_Check_Conditions TO S_On :=  #BEGIN_EDIT_BLOCK
//sensor not available or pressure not achieved
NOT bLubPressureLinked 
OR(bLubPressureLinked AND NOT pbLubPressureAchieved^)
OR NOT bUseLubPressureSensor
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TError (* Trans11 *) FROM S_Check_Conditions TO S_SetError :=  #BEGIN_EDIT_BLOCK
//sensor available and pressure achieved
bLubPressureLinked 
AND pbLubPressureAchieved^
AND bUseLubPressureSensor
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TErrorSet (* Trans12 *) FROM S_SetError TO S_Ready :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TOnTimeReady (* Trans2 *) FROM S_On TO S_CheckOk :=  #BEGIN_EDIT_BLOCK
fbOnTime.Q
AND dOffTime <> t#0s 
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans22 (* Trans22 *) FROM S_On TO S_CheckOk :=  #BEGIN_EDIT_BLOCK
(*Lub. output will be true during Lub. time, 
in the case that Lub. on time is "0".*) 
fbLubTime.Q
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TPressureAchieved (* Trans13 *) FROM S_CheckOk TO S_Off :=  #BEGIN_EDIT_BLOCK
//sensor not availabel or pressure reached
NOT bLubPressureLinked OR
(bLubPressureLinked AND pbLubPressureAchieved^)
OR NOT bUseLubPressureSensor

;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TNotAchieved (* Trans14 *) FROM S_CheckOk TO S_SetLubError :=  #BEGIN_EDIT_BLOCK
//sensor available and pressure not reached
bLubPressureLinked 
AND NOT pbLubPressureAchieved^
AND bUseLubPressureSensor

;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TSet (* Trans12 *) FROM S_SetLubError TO S_Ready :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TOffTimeReady (* Trans6 *) FROM S_Off TO S_Decide :=  #BEGIN_EDIT_BLOCK
fbOffTime.Q
AND dOffTime <> t#0s
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION Trans23 (* Trans23 *) FROM S_Off TO S_Decide :=  #BEGIN_EDIT_BLOCK
dOffTime = t#0s
AND S_Off.T > t#5s
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TContinue (* Trans7 *) FROM S_Decide TO S_On :=  #BEGIN_EDIT_BLOCK
NOT fbLubTime.Q
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TLubSequenceFinished (* Trans1 *) FROM S_Decide TO S_InfoLog :=  #BEGIN_EDIT_BLOCK
fbLubTime.Q
;#END_EDIT_BLOCK
END_TRANSITION

GO_ON_TRANSITION TILog (* Trans26 *) FROM S_InfoLog TO S_Ready :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

TRANSITION TReady (* Trans8 *) FROM S_Ready TO S_Init :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

(* end IecGraph-Code *)
(* sfc-code *)

(* exits *)

EXIT_TRANSITION Stop := #BEGIN_EDIT_BLOCK
NOT bDoLubrication OR bLevelTooLow
;#END_EDIT_BLOCK
PRIORITY 1 WITH 
(* init step *)
INITIAL_STEP Step6:
AStop (P);
END_STEP

ACTION AStop: #BEGIN_EDIT_BLOCK
bDigOut := FALSE;
IF bLevelTooLow THEN
    SET_ALARM(Name := erLubLimitAchieved);
    bLevelTooLow := FALSE;
END_IF;

;#END_EDIT_BLOCK END_ACTION (*AStop*)
STEP S_Ready:
AReady (P);
END_STEP


(* steps *)

(* transitions *)
TRANSITION Trans9 (* Trans9 *) FROM Step6 TO S_Ready :=  #BEGIN_EDIT_BLOCK
TRUE
;#END_EDIT_BLOCK
END_TRANSITION

END_TRANSITION
(* end sfc-code *)


END_FUNCTION_BLOCK



#END_OF_IEC_PART

@Puma @IecEditor 6 22 @Pou 25 
@@@BEG_Comment@@@
@h    ! WARNING !
@h    The Kemro K2 system (including software) only meets category B according to EN 954-1,
@h    thus it is not intended for usage in safety-relevant control applications in the field 
@h    of personal safety (e.g. emergency stop).
@h    To implement potentially necessary safety-relevant control tasks, always use additional 
@h    external safety devices that are intended for the particular purpose, and meet the necessary 
@h    functional safety.
@h    For further information see EN 954-1 (EN ISO 13849-1) and/or the K2-x00 user manual, chapter 
@h    "CE conformity, directives and standards".
@@@END_Comment@@@

@BEG_Contents 

@BEG_Func 
@RT(17)FuncTreeContainer 
2 
@Var @RT(9)SET_ALARM @RT(0) @T @T @DERIVED 0 @F @RT(23)KEBA_STANDARD_PROCEDURE @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(17)KPROT_UserInfoLog @RT(0) @T @T @DERIVED 0 @F @RT(37)KEBA_STANDARD_FUNCTION : KPROT_Status @F 
@T 
@BEG_Attrib 
0 @RT(0) @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@END_Func 

@BEG_Const 
@RT(18)ConstTreeContainer 
0 
@END_Const 

@BEG_Export 

@BEG_Kind 
@FUNCTION_BLOCK @RT(13)FBLubrication @SEQUENTIAL_FLOW_CHART 
@RT(0) @RT(0) @RT(0) 
@END_Kind 

@BEG_Dcl 
@RT(16)DclTreeContainer 
26 
@Var @RT(21)bUseLubPressureSensor @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(27)use pressure achieve sensor @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(14)bDoLubrication @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(26)start and stop lubrication @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)dLubTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(25)complete lubrication time @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(7)dOnTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(19)lubrication on time @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(8)dOffTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(20)lubrication off time @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(21)pbLubPressureAchieved @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(51)reference to lubrication pressure achieved variable @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(18)pbLubLimitAchieved @RT(0) @T @T @REFTO 0 @T @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(48)reference to lubrication limit achieved variable @RT(0) 
@END_Attrib 
1 1 @F @F @F @F 

@Var @RT(11)dActLubTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(23)actual lubrication time @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(10)dActOnTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(14)actual on time @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(11)dActOffTime @RT(0) @T @F @DT @RT(4)TIME @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(15)actual off time @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)bDigOut @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(28)state for lubrication output @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(7)bActive @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(29)flag if lubrication is active @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(6)bError @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(24)error during lubrication @RT(0) 
@END_Attrib 
1 3 @F @F @F @F 

@Var @RT(9)fbLubTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(8)fbOnTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(9)fbOffTime @RT(0) @T @T @DERIVED 0 @T @T @DT @RT(3)TON @RT(0) @T @T @UNKNOWN 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)erLubLimitAchieved @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(17)erCentralLubError @RT(0) @T @F @DT @RT(5)ALARM @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 7 @F @F @F @F 

@Var @RT(9)bInitDone @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(15)bLubLimitLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(44)input for lubrication limit is linked or not @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(18)bLubPressureLinked @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(56)input for lubrication pressure achieved is linked or not @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(12)bLevelTooLow @RT(0) @T @F @DT @RT(4)BOOL @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(36)flag if lubrication limit is too low @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(6)status @RT(0) @T @T @DERIVED 0 @F @RT(12)KPROT_Status @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)t1 @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)t2 @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@Var @RT(2)t3 @RT(0) @T @F @DT @RT(4)DINT @RT(0) @T @T @BASIC 0 @F 
@F @F 
@T 
@BEG_Attrib 
3 @RT(0) @RT(0) @RT(0) 
@END_Attrib 
1 0 @F @F @F @F 

@END_Dcl 

@END_Export 

@BEG_SfcBody 
29 18 27 

@BEG_SfcData 2 
@StepSeq @RT(4)sseq @F 1 
@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 9 
@Step @RT(6)S_Init @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(21)ACheckAvailableInputs @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
IF NOT bInitDone THEN
    bLubLimitLinked := CHECK_REF(pbLubLimitAchieved^);
    bLubPressureLinked := CHECK_REF(pbLubPressureAchieved^);
    bInitDone := TRUE;
END_IF;

@F 
@Acb @RT(5)AInit @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
fbLubTime(IN := FALSE,
          PT := dLubTime);

bError := FALSE;
bActive := TRUE;

@F 

@Trans @RT(9)TInitDone @F @T @F @F @T @T @TL(2)
bDoLubrication

@RT(6)Trans3 @F 
@Step @RT(18)S_Check_Conditions @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(14)ACheckLubLimit @F @T @RT(1)S @RT(0) @F @F @T @TL(5)
IF bLubLimitLinked THEN
    //check if level is too low
    bLevelTooLow := pbLubLimitAchieved^;
END_IF;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(8)TNoError @F @T @F @F @T @F @TL(5)
//sensor not available or pressure not achieved
NOT bLubPressureLinked 
OR(bLubPressureLinked AND NOT pbLubPressureAchieved^)
OR NOT bUseLubPressureSensor

@RT(7)Trans10 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(6)TError @F @T @F @F @T @F @TL(5)
//sensor available and pressure achieved
bLubPressureLinked 
AND pbLubPressureAchieved^
AND bUseLubPressureSensor

@RT(7)Trans11 @F 
@Step @RT(10)S_SetError @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(9)ASetError @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
SET_ALARM(Name := erCentralLubError);
bError := TRUE;

@F 

@Trans @RT(9)TErrorSet @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans12 @F 
@Goto @RT(7)S_Ready @F @F 


@Loop @RT(4)loop @F 2 
@StepSeq @RT(3)seq @F 7 
@Step @RT(4)S_On @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 4 
@Acb @RT(8)ALubTime @F @T @RT(1)S @RT(0) @F @F @T @TL(5)
fbLubTime(IN := TRUE,
          PT := dLubTime);

dActLubTime := fbLubTime.ET;

@F 
@Acb @RT(7)AInitOn @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
fbOnTime(IN := FALSE,
         PT := dOnTime);

//reset off time
dActOffTime := t#0s;

@F 
@Acb @RT(10)ARunOnTime @F @T @RT(1)N @RT(0) @F @F @T @TL(9)
fbOnTime(IN := TRUE,
         PT := dOnTime);

IF dOffTime = t#0s THEN
   dActOnTime := fbLubTime.ET;
ELSE
   dActOnTime := fbOnTime.ET;
END_IF;

@F 
@Acb @RT(10)ASetDigout @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bDigOut := TRUE;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(12)TOnTimeReady @F @T @F @F @T @T @TL(3)
fbOnTime.Q
AND dOffTime <> t#0s 

@RT(6)Trans2 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans22 @F @T @T @F @T @T @TL(4)
(*Lub. output will be true during Lub. time, 
in the case that Lub. on time is "0".*) 
fbLubTime.Q

@RT(7)Trans22 @F 


@Step @RT(9)S_CheckOk @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(12)AResetDigout @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bDigOut := FALSE;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(17)TPressureAchieved @F @T @F @F @T @F @TL(6)
//sensor not availabel or pressure reached
NOT bLubPressureLinked OR
(bLubPressureLinked AND pbLubPressureAchieved^)
OR NOT bUseLubPressureSensor


@RT(7)Trans13 @F 

@TransSeq @RT(4)tseq @F 4 
@Trans @RT(12)TNotAchieved @F @T @F @F @T @F @TL(6)
//sensor available and pressure not reached
bLubPressureLinked 
AND NOT pbLubPressureAchieved^
AND bUseLubPressureSensor


@RT(7)Trans14 @F 
@Step @RT(13)S_SetLubError @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(12)ASetLubError @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
SET_ALARM(Name := erCentralLubError);
bError := TRUE;

@F 

@Trans @RT(4)TSet @F @T @F @F @T @T @TL(2)
TRUE

@RT(7)Trans12 @F 
@Goto @RT(7)S_Ready @F @F 


@Step @RT(5)S_Off @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 2 
@Acb @RT(8)AInitOff @F @T @RT(1)P @RT(0) @F @F @T @TL(3)
fbOffTime(IN := FALSE,
          PT := dOffTime);

@F 
@Acb @RT(11)ARunOffTime @F @T @RT(1)N @RT(0) @F @F @T @TL(5)
fbOffTime(IN := TRUE,
          PT := dOffTime);

dActOffTime := fbOffTime.ET;

@F 

@AltBranch @RT(3)alt @F 2 
@TransSeq @RT(4)tseq @F 1 
@Trans @RT(13)TOffTimeReady @F @T @F @F @T @T @TL(3)
fbOffTime.Q
AND dOffTime <> t#0s

@RT(6)Trans6 @F 

@TransSeq @RT(4)tseq @F 1 
@Trans @RT(7)Trans23 @F @T @T @F @T @T @TL(3)
dOffTime = t#0s
AND S_Off.T > t#5s

@RT(7)Trans23 @F 


@Step @RT(8)S_Decide @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 0 


@Trans @RT(9)TContinue @F @T @T @T @T @T @TL(2)
NOT fbLubTime.Q

@RT(6)Trans7 @F 

@Trans @RT(20)TLubSequenceFinished @F @T @F @F @T @T @TL(2)
fbLubTime.Q

@RT(6)Trans1 @F 
@Step @RT(9)S_InfoLog @F @F @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(8)AInfoLog @F @T @RT(1)P @RT(0) @F @F @T @TL(5)
t1 := LINT_TO_DINT(TIME_TO_LINT(dLubTime / 1000));
t2 := LINT_TO_DINT(TIME_TO_LINT(dOnTime / 1000));
t3 := LINT_TO_DINT(TIME_TO_LINT(dOffTime / 1000));
status := KPROT_UserInfoLog("%5s %1i ms, on/off %2i/%3i ms", t1, t2, t3, 0, "Lubrication done: lub.time ");

@F 

@Trans @RT(5)TILog @F @T @F @F @T @F @TL(2)
TRUE

@RT(7)Trans26 @F 
@Step @RT(7)S_Ready @F @F @T @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(6)AReady @F @T @RT(1)P @RT(0) @F @F @T @TL(2)
bActive := FALSE;

@F 


@Trans @RT(6)TReady @F @T @T @T @T @T @TL(2)
TRUE

@RT(6)Trans8 @F 

@END_SfcData 
@SaActions 0 
@SaTrans 0 
@SaExits 1 
@SaExit @SaText @RT(4)Stop 1 @TL(2)
NOT bDoLubrication OR bLevelTooLow

@RT(7)S_Ready @RT(1)1 @T @F @SaSfc @RT(4)Stop 5 @RT(5)DUMMY 
@BEG_SfcData 2 
@ExitSeq @RT(4)sseq @F 3 
@Step @RT(5)Step6 @F @T @F @F @RT(0) @F 
@AcbCont @RT(7)unnamed @F 1 
@Acb @RT(5)AStop @F @T @RT(1)P @RT(0) @F @F @T @TL(6)
bDigOut := FALSE;
IF bLevelTooLow THEN
    SET_ALARM(Name := erLubLimitAchieved);
    bLevelTooLow := FALSE;
END_IF;

@F 

@Trans @RT(6)Trans9 @F @T @F @F @T @T @TL(2)
TRUE

@RT(6)Trans9 @F 
@Goto @RT(7)S_Ready @F @F 
@END_SfcData 

@END_SfcBody 

@END_Contents 
